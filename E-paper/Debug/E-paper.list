
E-paper.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b48  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005498  08004ce8  08004ce8  00014ce8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a180  0800a180  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800a180  0800a180  0001a180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a188  0800a188  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a188  0800a188  0001a188  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a18c  0800a18c  0001a18c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800a190  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a4  200001d4  0800a364  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000278  0800a364  00020278  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000091a6  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e50  00000000  00000000  000293aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008b0  00000000  00000000  0002b200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000172ee  00000000  00000000  0002bab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000b8cd  00000000  00000000  00042d9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00086dd1  00000000  00000000  0004e66b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  000d543c  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000740  00000000  00000000  000d5490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000278c  00000000  00000000  000d5bd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d4 	.word	0x200001d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004cd0 	.word	0x08004cd0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d8 	.word	0x200001d8
 80001dc:	08004cd0 	.word	0x08004cd0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <DEV_SPI_WriteByte>:
#include "DEV_Config.h"
#include "stm32f4xx_hal_spi.h"

extern SPI_HandleTypeDef hspi1;
void DEV_SPI_WriteByte(UBYTE value)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
 800058a:	4603      	mov	r3, r0
 800058c:	71fb      	strb	r3, [r7, #7]
    HAL_SPI_Transmit(&hspi1, &value, 1, 1000);
 800058e:	1df9      	adds	r1, r7, #7
 8000590:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000594:	2201      	movs	r2, #1
 8000596:	4803      	ldr	r0, [pc, #12]	; (80005a4 <DEV_SPI_WriteByte+0x20>)
 8000598:	f003 f94d 	bl	8003836 <HAL_SPI_Transmit>
}
 800059c:	bf00      	nop
 800059e:	3708      	adds	r7, #8
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	20000208 	.word	0x20000208

080005a8 <DEV_Module_Init>:

int DEV_Module_Init(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
    DEV_Digital_Write(EPD_DC_PIN, 0);
 80005ac:	2200      	movs	r2, #0
 80005ae:	2101      	movs	r1, #1
 80005b0:	4807      	ldr	r0, [pc, #28]	; (80005d0 <DEV_Module_Init+0x28>)
 80005b2:	f002 fc79 	bl	8002ea8 <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 80005b6:	2200      	movs	r2, #0
 80005b8:	2140      	movs	r1, #64	; 0x40
 80005ba:	4806      	ldr	r0, [pc, #24]	; (80005d4 <DEV_Module_Init+0x2c>)
 80005bc:	f002 fc74 	bl	8002ea8 <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_RST_PIN, 1);
 80005c0:	2201      	movs	r2, #1
 80005c2:	2110      	movs	r1, #16
 80005c4:	4803      	ldr	r0, [pc, #12]	; (80005d4 <DEV_Module_Init+0x2c>)
 80005c6:	f002 fc6f 	bl	8002ea8 <HAL_GPIO_WritePin>
		return 0;
 80005ca:	2300      	movs	r3, #0
}
 80005cc:	4618      	mov	r0, r3
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	40020400 	.word	0x40020400
 80005d4:	40020000 	.word	0x40020000

080005d8 <DEV_Module_Exit>:

void DEV_Module_Exit(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
    DEV_Digital_Write(EPD_DC_PIN, 0);
 80005dc:	2200      	movs	r2, #0
 80005de:	2101      	movs	r1, #1
 80005e0:	4807      	ldr	r0, [pc, #28]	; (8000600 <DEV_Module_Exit+0x28>)
 80005e2:	f002 fc61 	bl	8002ea8 <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 80005e6:	2200      	movs	r2, #0
 80005e8:	2140      	movs	r1, #64	; 0x40
 80005ea:	4806      	ldr	r0, [pc, #24]	; (8000604 <DEV_Module_Exit+0x2c>)
 80005ec:	f002 fc5c 	bl	8002ea8 <HAL_GPIO_WritePin>

    //close 5V
    DEV_Digital_Write(EPD_RST_PIN, 0);
 80005f0:	2200      	movs	r2, #0
 80005f2:	2110      	movs	r1, #16
 80005f4:	4803      	ldr	r0, [pc, #12]	; (8000604 <DEV_Module_Exit+0x2c>)
 80005f6:	f002 fc57 	bl	8002ea8 <HAL_GPIO_WritePin>
}
 80005fa:	bf00      	nop
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	40020400 	.word	0x40020400
 8000604:	40020000 	.word	0x40020000

08000608 <EPD_2IN9_V2_Reset>:
/******************************************************************************
function :	Software reset
parameter:
******************************************************************************/
static void EPD_2IN9_V2_Reset(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
    DEV_Digital_Write(EPD_RST_PIN, 1);
 800060c:	2201      	movs	r2, #1
 800060e:	2110      	movs	r1, #16
 8000610:	480b      	ldr	r0, [pc, #44]	; (8000640 <EPD_2IN9_V2_Reset+0x38>)
 8000612:	f002 fc49 	bl	8002ea8 <HAL_GPIO_WritePin>
    DEV_Delay_ms(100);
 8000616:	2064      	movs	r0, #100	; 0x64
 8000618:	f002 f9a0 	bl	800295c <HAL_Delay>
    DEV_Digital_Write(EPD_RST_PIN, 0);
 800061c:	2200      	movs	r2, #0
 800061e:	2110      	movs	r1, #16
 8000620:	4807      	ldr	r0, [pc, #28]	; (8000640 <EPD_2IN9_V2_Reset+0x38>)
 8000622:	f002 fc41 	bl	8002ea8 <HAL_GPIO_WritePin>
    DEV_Delay_ms(2);
 8000626:	2002      	movs	r0, #2
 8000628:	f002 f998 	bl	800295c <HAL_Delay>
    DEV_Digital_Write(EPD_RST_PIN, 1);
 800062c:	2201      	movs	r2, #1
 800062e:	2110      	movs	r1, #16
 8000630:	4803      	ldr	r0, [pc, #12]	; (8000640 <EPD_2IN9_V2_Reset+0x38>)
 8000632:	f002 fc39 	bl	8002ea8 <HAL_GPIO_WritePin>
    DEV_Delay_ms(100);
 8000636:	2064      	movs	r0, #100	; 0x64
 8000638:	f002 f990 	bl	800295c <HAL_Delay>
}
 800063c:	bf00      	nop
 800063e:	bd80      	pop	{r7, pc}
 8000640:	40020000 	.word	0x40020000

08000644 <EPD_2IN9_V2_SendCommand>:
function :	send command
parameter:
     Reg : Command register
******************************************************************************/
static void EPD_2IN9_V2_SendCommand(UBYTE Reg)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0
 800064a:	4603      	mov	r3, r0
 800064c:	71fb      	strb	r3, [r7, #7]
    DEV_Digital_Write(EPD_DC_PIN, 0);
 800064e:	2200      	movs	r2, #0
 8000650:	2101      	movs	r1, #1
 8000652:	480a      	ldr	r0, [pc, #40]	; (800067c <EPD_2IN9_V2_SendCommand+0x38>)
 8000654:	f002 fc28 	bl	8002ea8 <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 8000658:	2200      	movs	r2, #0
 800065a:	2140      	movs	r1, #64	; 0x40
 800065c:	4808      	ldr	r0, [pc, #32]	; (8000680 <EPD_2IN9_V2_SendCommand+0x3c>)
 800065e:	f002 fc23 	bl	8002ea8 <HAL_GPIO_WritePin>
    DEV_SPI_WriteByte(Reg);
 8000662:	79fb      	ldrb	r3, [r7, #7]
 8000664:	4618      	mov	r0, r3
 8000666:	f7ff ff8d 	bl	8000584 <DEV_SPI_WriteByte>
    DEV_Digital_Write(EPD_CS_PIN, 1);
 800066a:	2201      	movs	r2, #1
 800066c:	2140      	movs	r1, #64	; 0x40
 800066e:	4804      	ldr	r0, [pc, #16]	; (8000680 <EPD_2IN9_V2_SendCommand+0x3c>)
 8000670:	f002 fc1a 	bl	8002ea8 <HAL_GPIO_WritePin>
}
 8000674:	bf00      	nop
 8000676:	3708      	adds	r7, #8
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	40020400 	.word	0x40020400
 8000680:	40020000 	.word	0x40020000

08000684 <EPD_2IN9_V2_SendData>:
function :	send data
parameter:
    Data : Write data
******************************************************************************/
static void EPD_2IN9_V2_SendData(UBYTE Data)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	4603      	mov	r3, r0
 800068c:	71fb      	strb	r3, [r7, #7]
    DEV_Digital_Write(EPD_DC_PIN, 1);
 800068e:	2201      	movs	r2, #1
 8000690:	2101      	movs	r1, #1
 8000692:	480a      	ldr	r0, [pc, #40]	; (80006bc <EPD_2IN9_V2_SendData+0x38>)
 8000694:	f002 fc08 	bl	8002ea8 <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 8000698:	2200      	movs	r2, #0
 800069a:	2140      	movs	r1, #64	; 0x40
 800069c:	4808      	ldr	r0, [pc, #32]	; (80006c0 <EPD_2IN9_V2_SendData+0x3c>)
 800069e:	f002 fc03 	bl	8002ea8 <HAL_GPIO_WritePin>
    DEV_SPI_WriteByte(Data);
 80006a2:	79fb      	ldrb	r3, [r7, #7]
 80006a4:	4618      	mov	r0, r3
 80006a6:	f7ff ff6d 	bl	8000584 <DEV_SPI_WriteByte>
    DEV_Digital_Write(EPD_CS_PIN, 1);
 80006aa:	2201      	movs	r2, #1
 80006ac:	2140      	movs	r1, #64	; 0x40
 80006ae:	4804      	ldr	r0, [pc, #16]	; (80006c0 <EPD_2IN9_V2_SendData+0x3c>)
 80006b0:	f002 fbfa 	bl	8002ea8 <HAL_GPIO_WritePin>
}
 80006b4:	bf00      	nop
 80006b6:	3708      	adds	r7, #8
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	40020400 	.word	0x40020400
 80006c0:	40020000 	.word	0x40020000

080006c4 <EPD_2IN9_V2_ReadBusy>:
/******************************************************************************
function :	Wait until the busy_pin goes LOW
parameter:
******************************************************************************/
void EPD_2IN9_V2_ReadBusy(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
    Debug("e-Paper busy\r\n");
 80006c8:	480b      	ldr	r0, [pc, #44]	; (80006f8 <EPD_2IN9_V2_ReadBusy+0x34>)
 80006ca:	f003 fc63 	bl	8003f94 <puts>
	while(1)
	{	 //=1 BUSY
		if(DEV_Digital_Read(EPD_BUSY_PIN)==0) 
 80006ce:	2108      	movs	r1, #8
 80006d0:	480a      	ldr	r0, [pc, #40]	; (80006fc <EPD_2IN9_V2_ReadBusy+0x38>)
 80006d2:	f002 fbd1 	bl	8002e78 <HAL_GPIO_ReadPin>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d003      	beq.n	80006e4 <EPD_2IN9_V2_ReadBusy+0x20>
			break;
		DEV_Delay_ms(50);
 80006dc:	2032      	movs	r0, #50	; 0x32
 80006de:	f002 f93d 	bl	800295c <HAL_Delay>
		if(DEV_Digital_Read(EPD_BUSY_PIN)==0) 
 80006e2:	e7f4      	b.n	80006ce <EPD_2IN9_V2_ReadBusy+0xa>
			break;
 80006e4:	bf00      	nop
	}
	DEV_Delay_ms(50);
 80006e6:	2032      	movs	r0, #50	; 0x32
 80006e8:	f002 f938 	bl	800295c <HAL_Delay>
    Debug("e-Paper busy release\r\n");
 80006ec:	4804      	ldr	r0, [pc, #16]	; (8000700 <EPD_2IN9_V2_ReadBusy+0x3c>)
 80006ee:	f003 fc51 	bl	8003f94 <puts>
}
 80006f2:	bf00      	nop
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	08004ce8 	.word	0x08004ce8
 80006fc:	40020000 	.word	0x40020000
 8000700:	08004d00 	.word	0x08004d00

08000704 <EPD_2IN9_V2_LUT>:

static void EPD_2IN9_V2_LUT(UBYTE *lut)
{       
 8000704:	b580      	push	{r7, lr}
 8000706:	b084      	sub	sp, #16
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
	UBYTE count;
	EPD_2IN9_V2_SendCommand(0x32);
 800070c:	2032      	movs	r0, #50	; 0x32
 800070e:	f7ff ff99 	bl	8000644 <EPD_2IN9_V2_SendCommand>
	for(count=0; count<153; count++) 
 8000712:	2300      	movs	r3, #0
 8000714:	73fb      	strb	r3, [r7, #15]
 8000716:	e009      	b.n	800072c <EPD_2IN9_V2_LUT+0x28>
		EPD_2IN9_V2_SendData(lut[count]); 
 8000718:	7bfb      	ldrb	r3, [r7, #15]
 800071a:	687a      	ldr	r2, [r7, #4]
 800071c:	4413      	add	r3, r2
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	4618      	mov	r0, r3
 8000722:	f7ff ffaf 	bl	8000684 <EPD_2IN9_V2_SendData>
	for(count=0; count<153; count++) 
 8000726:	7bfb      	ldrb	r3, [r7, #15]
 8000728:	3301      	adds	r3, #1
 800072a:	73fb      	strb	r3, [r7, #15]
 800072c:	7bfb      	ldrb	r3, [r7, #15]
 800072e:	2b98      	cmp	r3, #152	; 0x98
 8000730:	d9f2      	bls.n	8000718 <EPD_2IN9_V2_LUT+0x14>
	EPD_2IN9_V2_ReadBusy();
 8000732:	f7ff ffc7 	bl	80006c4 <EPD_2IN9_V2_ReadBusy>
}
 8000736:	bf00      	nop
 8000738:	3710      	adds	r7, #16
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}

0800073e <EPD_2IN9_V2_LUT_by_host>:

static void EPD_2IN9_V2_LUT_by_host(UBYTE *lut)
{
 800073e:	b580      	push	{r7, lr}
 8000740:	b082      	sub	sp, #8
 8000742:	af00      	add	r7, sp, #0
 8000744:	6078      	str	r0, [r7, #4]
	EPD_2IN9_V2_LUT((UBYTE *)lut);			//lut
 8000746:	6878      	ldr	r0, [r7, #4]
 8000748:	f7ff ffdc 	bl	8000704 <EPD_2IN9_V2_LUT>
	EPD_2IN9_V2_SendCommand(0x3f);
 800074c:	203f      	movs	r0, #63	; 0x3f
 800074e:	f7ff ff79 	bl	8000644 <EPD_2IN9_V2_SendCommand>
	EPD_2IN9_V2_SendData(*(lut+153));
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	3399      	adds	r3, #153	; 0x99
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	4618      	mov	r0, r3
 800075a:	f7ff ff93 	bl	8000684 <EPD_2IN9_V2_SendData>
	EPD_2IN9_V2_SendCommand(0x03);	// gate voltage
 800075e:	2003      	movs	r0, #3
 8000760:	f7ff ff70 	bl	8000644 <EPD_2IN9_V2_SendCommand>
	EPD_2IN9_V2_SendData(*(lut+154));
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	339a      	adds	r3, #154	; 0x9a
 8000768:	781b      	ldrb	r3, [r3, #0]
 800076a:	4618      	mov	r0, r3
 800076c:	f7ff ff8a 	bl	8000684 <EPD_2IN9_V2_SendData>
	EPD_2IN9_V2_SendCommand(0x04);	// source voltage
 8000770:	2004      	movs	r0, #4
 8000772:	f7ff ff67 	bl	8000644 <EPD_2IN9_V2_SendCommand>
	EPD_2IN9_V2_SendData(*(lut+155));	// VSH
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	339b      	adds	r3, #155	; 0x9b
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	4618      	mov	r0, r3
 800077e:	f7ff ff81 	bl	8000684 <EPD_2IN9_V2_SendData>
	EPD_2IN9_V2_SendData(*(lut+156));	// VSH2
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	339c      	adds	r3, #156	; 0x9c
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	4618      	mov	r0, r3
 800078a:	f7ff ff7b 	bl	8000684 <EPD_2IN9_V2_SendData>
	EPD_2IN9_V2_SendData(*(lut+157));	// VSL
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	339d      	adds	r3, #157	; 0x9d
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	4618      	mov	r0, r3
 8000796:	f7ff ff75 	bl	8000684 <EPD_2IN9_V2_SendData>
	EPD_2IN9_V2_SendCommand(0x2c);		// VCOM
 800079a:	202c      	movs	r0, #44	; 0x2c
 800079c:	f7ff ff52 	bl	8000644 <EPD_2IN9_V2_SendCommand>
	EPD_2IN9_V2_SendData(*(lut+158));
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	339e      	adds	r3, #158	; 0x9e
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	4618      	mov	r0, r3
 80007a8:	f7ff ff6c 	bl	8000684 <EPD_2IN9_V2_SendData>
	
}
 80007ac:	bf00      	nop
 80007ae:	3708      	adds	r7, #8
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}

080007b4 <EPD_2IN9_V2_TurnOnDisplay>:
/******************************************************************************
function :	Turn On Display
parameter:
******************************************************************************/
static void EPD_2IN9_V2_TurnOnDisplay(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
	EPD_2IN9_V2_SendCommand(0x22); //Display Update Control
 80007b8:	2022      	movs	r0, #34	; 0x22
 80007ba:	f7ff ff43 	bl	8000644 <EPD_2IN9_V2_SendCommand>
	EPD_2IN9_V2_SendData(0xc7);
 80007be:	20c7      	movs	r0, #199	; 0xc7
 80007c0:	f7ff ff60 	bl	8000684 <EPD_2IN9_V2_SendData>
	EPD_2IN9_V2_SendCommand(0x20); //Activate Display Update Sequence
 80007c4:	2020      	movs	r0, #32
 80007c6:	f7ff ff3d 	bl	8000644 <EPD_2IN9_V2_SendCommand>
	EPD_2IN9_V2_ReadBusy();
 80007ca:	f7ff ff7b 	bl	80006c4 <EPD_2IN9_V2_ReadBusy>
}
 80007ce:	bf00      	nop
 80007d0:	bd80      	pop	{r7, pc}

080007d2 <EPD_2IN9_V2_TurnOnDisplay_Partial>:

static void EPD_2IN9_V2_TurnOnDisplay_Partial(void)
{
 80007d2:	b580      	push	{r7, lr}
 80007d4:	af00      	add	r7, sp, #0
	EPD_2IN9_V2_SendCommand(0x22); //Display Update Control
 80007d6:	2022      	movs	r0, #34	; 0x22
 80007d8:	f7ff ff34 	bl	8000644 <EPD_2IN9_V2_SendCommand>
	EPD_2IN9_V2_SendData(0x0F);   
 80007dc:	200f      	movs	r0, #15
 80007de:	f7ff ff51 	bl	8000684 <EPD_2IN9_V2_SendData>
	EPD_2IN9_V2_SendCommand(0x20); //Activate Display Update Sequence
 80007e2:	2020      	movs	r0, #32
 80007e4:	f7ff ff2e 	bl	8000644 <EPD_2IN9_V2_SendCommand>
	EPD_2IN9_V2_ReadBusy();
 80007e8:	f7ff ff6c 	bl	80006c4 <EPD_2IN9_V2_ReadBusy>
}
 80007ec:	bf00      	nop
 80007ee:	bd80      	pop	{r7, pc}

080007f0 <EPD_2IN9_V2_SetWindows>:
/******************************************************************************
function :	Setting the display window
parameter:
******************************************************************************/
static void EPD_2IN9_V2_SetWindows(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend)
{
 80007f0:	b590      	push	{r4, r7, lr}
 80007f2:	b083      	sub	sp, #12
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	4604      	mov	r4, r0
 80007f8:	4608      	mov	r0, r1
 80007fa:	4611      	mov	r1, r2
 80007fc:	461a      	mov	r2, r3
 80007fe:	4623      	mov	r3, r4
 8000800:	80fb      	strh	r3, [r7, #6]
 8000802:	4603      	mov	r3, r0
 8000804:	80bb      	strh	r3, [r7, #4]
 8000806:	460b      	mov	r3, r1
 8000808:	807b      	strh	r3, [r7, #2]
 800080a:	4613      	mov	r3, r2
 800080c:	803b      	strh	r3, [r7, #0]
    EPD_2IN9_V2_SendCommand(0x44); // SET_RAM_X_ADDRESS_START_END_POSITION
 800080e:	2044      	movs	r0, #68	; 0x44
 8000810:	f7ff ff18 	bl	8000644 <EPD_2IN9_V2_SendCommand>
    EPD_2IN9_V2_SendData((Xstart>>3) & 0xFF);
 8000814:	88fb      	ldrh	r3, [r7, #6]
 8000816:	08db      	lsrs	r3, r3, #3
 8000818:	b29b      	uxth	r3, r3
 800081a:	b2db      	uxtb	r3, r3
 800081c:	4618      	mov	r0, r3
 800081e:	f7ff ff31 	bl	8000684 <EPD_2IN9_V2_SendData>
    EPD_2IN9_V2_SendData((Xend>>3) & 0xFF);
 8000822:	887b      	ldrh	r3, [r7, #2]
 8000824:	08db      	lsrs	r3, r3, #3
 8000826:	b29b      	uxth	r3, r3
 8000828:	b2db      	uxtb	r3, r3
 800082a:	4618      	mov	r0, r3
 800082c:	f7ff ff2a 	bl	8000684 <EPD_2IN9_V2_SendData>
	
    EPD_2IN9_V2_SendCommand(0x45); // SET_RAM_Y_ADDRESS_START_END_POSITION
 8000830:	2045      	movs	r0, #69	; 0x45
 8000832:	f7ff ff07 	bl	8000644 <EPD_2IN9_V2_SendCommand>
    EPD_2IN9_V2_SendData(Ystart & 0xFF);
 8000836:	88bb      	ldrh	r3, [r7, #4]
 8000838:	b2db      	uxtb	r3, r3
 800083a:	4618      	mov	r0, r3
 800083c:	f7ff ff22 	bl	8000684 <EPD_2IN9_V2_SendData>
    EPD_2IN9_V2_SendData((Ystart >> 8) & 0xFF);
 8000840:	88bb      	ldrh	r3, [r7, #4]
 8000842:	0a1b      	lsrs	r3, r3, #8
 8000844:	b29b      	uxth	r3, r3
 8000846:	b2db      	uxtb	r3, r3
 8000848:	4618      	mov	r0, r3
 800084a:	f7ff ff1b 	bl	8000684 <EPD_2IN9_V2_SendData>
    EPD_2IN9_V2_SendData(Yend & 0xFF);
 800084e:	883b      	ldrh	r3, [r7, #0]
 8000850:	b2db      	uxtb	r3, r3
 8000852:	4618      	mov	r0, r3
 8000854:	f7ff ff16 	bl	8000684 <EPD_2IN9_V2_SendData>
    EPD_2IN9_V2_SendData((Yend >> 8) & 0xFF);
 8000858:	883b      	ldrh	r3, [r7, #0]
 800085a:	0a1b      	lsrs	r3, r3, #8
 800085c:	b29b      	uxth	r3, r3
 800085e:	b2db      	uxtb	r3, r3
 8000860:	4618      	mov	r0, r3
 8000862:	f7ff ff0f 	bl	8000684 <EPD_2IN9_V2_SendData>
}
 8000866:	bf00      	nop
 8000868:	370c      	adds	r7, #12
 800086a:	46bd      	mov	sp, r7
 800086c:	bd90      	pop	{r4, r7, pc}

0800086e <EPD_2IN9_V2_SetCursor>:
/******************************************************************************
function :	Set Cursor
parameter:
******************************************************************************/
static void EPD_2IN9_V2_SetCursor(UWORD Xstart, UWORD Ystart)
{
 800086e:	b580      	push	{r7, lr}
 8000870:	b082      	sub	sp, #8
 8000872:	af00      	add	r7, sp, #0
 8000874:	4603      	mov	r3, r0
 8000876:	460a      	mov	r2, r1
 8000878:	80fb      	strh	r3, [r7, #6]
 800087a:	4613      	mov	r3, r2
 800087c:	80bb      	strh	r3, [r7, #4]
    EPD_2IN9_V2_SendCommand(0x4E); // SET_RAM_X_ADDRESS_COUNTER
 800087e:	204e      	movs	r0, #78	; 0x4e
 8000880:	f7ff fee0 	bl	8000644 <EPD_2IN9_V2_SendCommand>
    EPD_2IN9_V2_SendData(Xstart & 0xFF);
 8000884:	88fb      	ldrh	r3, [r7, #6]
 8000886:	b2db      	uxtb	r3, r3
 8000888:	4618      	mov	r0, r3
 800088a:	f7ff fefb 	bl	8000684 <EPD_2IN9_V2_SendData>

    EPD_2IN9_V2_SendCommand(0x4F); // SET_RAM_Y_ADDRESS_COUNTER
 800088e:	204f      	movs	r0, #79	; 0x4f
 8000890:	f7ff fed8 	bl	8000644 <EPD_2IN9_V2_SendCommand>
    EPD_2IN9_V2_SendData(Ystart & 0xFF);
 8000894:	88bb      	ldrh	r3, [r7, #4]
 8000896:	b2db      	uxtb	r3, r3
 8000898:	4618      	mov	r0, r3
 800089a:	f7ff fef3 	bl	8000684 <EPD_2IN9_V2_SendData>
    EPD_2IN9_V2_SendData((Ystart >> 8) & 0xFF);
 800089e:	88bb      	ldrh	r3, [r7, #4]
 80008a0:	0a1b      	lsrs	r3, r3, #8
 80008a2:	b29b      	uxth	r3, r3
 80008a4:	b2db      	uxtb	r3, r3
 80008a6:	4618      	mov	r0, r3
 80008a8:	f7ff feec 	bl	8000684 <EPD_2IN9_V2_SendData>
}
 80008ac:	bf00      	nop
 80008ae:	3708      	adds	r7, #8
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}

080008b4 <EPD_2IN9_V2_Init>:
/******************************************************************************
function :	Initialize the e-Paper register
parameter:
******************************************************************************/
void EPD_2IN9_V2_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
	EPD_2IN9_V2_Reset();
 80008b8:	f7ff fea6 	bl	8000608 <EPD_2IN9_V2_Reset>
	DEV_Delay_ms(100);
 80008bc:	2064      	movs	r0, #100	; 0x64
 80008be:	f002 f84d 	bl	800295c <HAL_Delay>

	EPD_2IN9_V2_ReadBusy();   
 80008c2:	f7ff feff 	bl	80006c4 <EPD_2IN9_V2_ReadBusy>
	EPD_2IN9_V2_SendCommand(0x12);  //SWRESET
 80008c6:	2012      	movs	r0, #18
 80008c8:	f7ff febc 	bl	8000644 <EPD_2IN9_V2_SendCommand>
	EPD_2IN9_V2_ReadBusy();   
 80008cc:	f7ff fefa 	bl	80006c4 <EPD_2IN9_V2_ReadBusy>

	EPD_2IN9_V2_SendCommand(0x01); //Driver output control      
 80008d0:	2001      	movs	r0, #1
 80008d2:	f7ff feb7 	bl	8000644 <EPD_2IN9_V2_SendCommand>
	EPD_2IN9_V2_SendData(0x27);
 80008d6:	2027      	movs	r0, #39	; 0x27
 80008d8:	f7ff fed4 	bl	8000684 <EPD_2IN9_V2_SendData>
	EPD_2IN9_V2_SendData(0x01);
 80008dc:	2001      	movs	r0, #1
 80008de:	f7ff fed1 	bl	8000684 <EPD_2IN9_V2_SendData>
	EPD_2IN9_V2_SendData(0x00);
 80008e2:	2000      	movs	r0, #0
 80008e4:	f7ff fece 	bl	8000684 <EPD_2IN9_V2_SendData>

	EPD_2IN9_V2_SendCommand(0x11); //data entry mode       
 80008e8:	2011      	movs	r0, #17
 80008ea:	f7ff feab 	bl	8000644 <EPD_2IN9_V2_SendCommand>
	EPD_2IN9_V2_SendData(0x03);
 80008ee:	2003      	movs	r0, #3
 80008f0:	f7ff fec8 	bl	8000684 <EPD_2IN9_V2_SendData>

	EPD_2IN9_V2_SetWindows(0, 0, EPD_2IN9_V2_WIDTH-1, EPD_2IN9_V2_HEIGHT-1);
 80008f4:	f240 1327 	movw	r3, #295	; 0x127
 80008f8:	227f      	movs	r2, #127	; 0x7f
 80008fa:	2100      	movs	r1, #0
 80008fc:	2000      	movs	r0, #0
 80008fe:	f7ff ff77 	bl	80007f0 <EPD_2IN9_V2_SetWindows>

	// EPD_2IN9_V2_SendCommand(0x3C); //BorderWavefrom
	// EPD_2IN9_V2_SendData(0x05);	

	EPD_2IN9_V2_SendCommand(0x21); //  Display update control
 8000902:	2021      	movs	r0, #33	; 0x21
 8000904:	f7ff fe9e 	bl	8000644 <EPD_2IN9_V2_SendCommand>
	EPD_2IN9_V2_SendData(0x00);
 8000908:	2000      	movs	r0, #0
 800090a:	f7ff febb 	bl	8000684 <EPD_2IN9_V2_SendData>
	EPD_2IN9_V2_SendData(0x80);	
 800090e:	2080      	movs	r0, #128	; 0x80
 8000910:	f7ff feb8 	bl	8000684 <EPD_2IN9_V2_SendData>

	// EPD_2IN9_V2_SendCommand(0x18); //Read built-in temperature sensor
	// EPD_2IN9_V2_SendData(0x80);	

	EPD_2IN9_V2_SetCursor(0, 0);
 8000914:	2100      	movs	r1, #0
 8000916:	2000      	movs	r0, #0
 8000918:	f7ff ffa9 	bl	800086e <EPD_2IN9_V2_SetCursor>
	EPD_2IN9_V2_ReadBusy();
 800091c:	f7ff fed2 	bl	80006c4 <EPD_2IN9_V2_ReadBusy>

	EPD_2IN9_V2_LUT_by_host(WS_20_30);
 8000920:	4802      	ldr	r0, [pc, #8]	; (800092c <EPD_2IN9_V2_Init+0x78>)
 8000922:	f7ff ff0c 	bl	800073e <EPD_2IN9_V2_LUT_by_host>
}
 8000926:	bf00      	nop
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	200000c4 	.word	0x200000c4

08000930 <EPD_2IN9_V2_Clear>:
/******************************************************************************
function :	Clear screen
parameter:
******************************************************************************/
void EPD_2IN9_V2_Clear(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
	UWORD i;
	EPD_2IN9_V2_SendCommand(0x24);   //write RAM for black(0)/white (1)
 8000936:	2024      	movs	r0, #36	; 0x24
 8000938:	f7ff fe84 	bl	8000644 <EPD_2IN9_V2_SendCommand>
	for(i=0;i<4736;i++)
 800093c:	2300      	movs	r3, #0
 800093e:	80fb      	strh	r3, [r7, #6]
 8000940:	e005      	b.n	800094e <EPD_2IN9_V2_Clear+0x1e>
	{
		EPD_2IN9_V2_SendData(0xff);
 8000942:	20ff      	movs	r0, #255	; 0xff
 8000944:	f7ff fe9e 	bl	8000684 <EPD_2IN9_V2_SendData>
	for(i=0;i<4736;i++)
 8000948:	88fb      	ldrh	r3, [r7, #6]
 800094a:	3301      	adds	r3, #1
 800094c:	80fb      	strh	r3, [r7, #6]
 800094e:	88fb      	ldrh	r3, [r7, #6]
 8000950:	f5b3 5f94 	cmp.w	r3, #4736	; 0x1280
 8000954:	d3f5      	bcc.n	8000942 <EPD_2IN9_V2_Clear+0x12>
	}
	EPD_2IN9_V2_TurnOnDisplay();
 8000956:	f7ff ff2d 	bl	80007b4 <EPD_2IN9_V2_TurnOnDisplay>
}
 800095a:	bf00      	nop
 800095c:	3708      	adds	r7, #8
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}

08000962 <EPD_2IN9_V2_Display>:
/******************************************************************************
function :	Sends the image buffer in RAM to e-Paper and displays
parameter:
******************************************************************************/
void EPD_2IN9_V2_Display(UBYTE *Image)
{
 8000962:	b580      	push	{r7, lr}
 8000964:	b084      	sub	sp, #16
 8000966:	af00      	add	r7, sp, #0
 8000968:	6078      	str	r0, [r7, #4]
	UWORD i;	
	EPD_2IN9_V2_SendCommand(0x24);   //write RAM for black(0)/white (1)
 800096a:	2024      	movs	r0, #36	; 0x24
 800096c:	f7ff fe6a 	bl	8000644 <EPD_2IN9_V2_SendCommand>
	for(i=0;i<4736;i++)
 8000970:	2300      	movs	r3, #0
 8000972:	81fb      	strh	r3, [r7, #14]
 8000974:	e009      	b.n	800098a <EPD_2IN9_V2_Display+0x28>
	{
		EPD_2IN9_V2_SendData(Image[i]);
 8000976:	89fb      	ldrh	r3, [r7, #14]
 8000978:	687a      	ldr	r2, [r7, #4]
 800097a:	4413      	add	r3, r2
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	4618      	mov	r0, r3
 8000980:	f7ff fe80 	bl	8000684 <EPD_2IN9_V2_SendData>
	for(i=0;i<4736;i++)
 8000984:	89fb      	ldrh	r3, [r7, #14]
 8000986:	3301      	adds	r3, #1
 8000988:	81fb      	strh	r3, [r7, #14]
 800098a:	89fb      	ldrh	r3, [r7, #14]
 800098c:	f5b3 5f94 	cmp.w	r3, #4736	; 0x1280
 8000990:	d3f1      	bcc.n	8000976 <EPD_2IN9_V2_Display+0x14>
	}
	EPD_2IN9_V2_TurnOnDisplay();	
 8000992:	f7ff ff0f 	bl	80007b4 <EPD_2IN9_V2_TurnOnDisplay>
}
 8000996:	bf00      	nop
 8000998:	3710      	adds	r7, #16
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}

0800099e <EPD_2IN9_V2_Display_Base>:

void EPD_2IN9_V2_Display_Base(UBYTE *Image)
{
 800099e:	b580      	push	{r7, lr}
 80009a0:	b084      	sub	sp, #16
 80009a2:	af00      	add	r7, sp, #0
 80009a4:	6078      	str	r0, [r7, #4]
	UWORD i;   

	EPD_2IN9_V2_SendCommand(0x24);   //Write Black and White image to RAM
 80009a6:	2024      	movs	r0, #36	; 0x24
 80009a8:	f7ff fe4c 	bl	8000644 <EPD_2IN9_V2_SendCommand>
	for(i=0;i<4736;i++)
 80009ac:	2300      	movs	r3, #0
 80009ae:	81fb      	strh	r3, [r7, #14]
 80009b0:	e009      	b.n	80009c6 <EPD_2IN9_V2_Display_Base+0x28>
	{               
		EPD_2IN9_V2_SendData(Image[i]);
 80009b2:	89fb      	ldrh	r3, [r7, #14]
 80009b4:	687a      	ldr	r2, [r7, #4]
 80009b6:	4413      	add	r3, r2
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	4618      	mov	r0, r3
 80009bc:	f7ff fe62 	bl	8000684 <EPD_2IN9_V2_SendData>
	for(i=0;i<4736;i++)
 80009c0:	89fb      	ldrh	r3, [r7, #14]
 80009c2:	3301      	adds	r3, #1
 80009c4:	81fb      	strh	r3, [r7, #14]
 80009c6:	89fb      	ldrh	r3, [r7, #14]
 80009c8:	f5b3 5f94 	cmp.w	r3, #4736	; 0x1280
 80009cc:	d3f1      	bcc.n	80009b2 <EPD_2IN9_V2_Display_Base+0x14>
	}
	EPD_2IN9_V2_SendCommand(0x26);   //Write Black and White image to RAM
 80009ce:	2026      	movs	r0, #38	; 0x26
 80009d0:	f7ff fe38 	bl	8000644 <EPD_2IN9_V2_SendCommand>
	for(i=0;i<4736;i++)
 80009d4:	2300      	movs	r3, #0
 80009d6:	81fb      	strh	r3, [r7, #14]
 80009d8:	e009      	b.n	80009ee <EPD_2IN9_V2_Display_Base+0x50>
	{               
		EPD_2IN9_V2_SendData(Image[i]);
 80009da:	89fb      	ldrh	r3, [r7, #14]
 80009dc:	687a      	ldr	r2, [r7, #4]
 80009de:	4413      	add	r3, r2
 80009e0:	781b      	ldrb	r3, [r3, #0]
 80009e2:	4618      	mov	r0, r3
 80009e4:	f7ff fe4e 	bl	8000684 <EPD_2IN9_V2_SendData>
	for(i=0;i<4736;i++)
 80009e8:	89fb      	ldrh	r3, [r7, #14]
 80009ea:	3301      	adds	r3, #1
 80009ec:	81fb      	strh	r3, [r7, #14]
 80009ee:	89fb      	ldrh	r3, [r7, #14]
 80009f0:	f5b3 5f94 	cmp.w	r3, #4736	; 0x1280
 80009f4:	d3f1      	bcc.n	80009da <EPD_2IN9_V2_Display_Base+0x3c>
	}
	EPD_2IN9_V2_TurnOnDisplay();	
 80009f6:	f7ff fedd 	bl	80007b4 <EPD_2IN9_V2_TurnOnDisplay>
}
 80009fa:	bf00      	nop
 80009fc:	3710      	adds	r7, #16
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
	...

08000a04 <EPD_2IN9_V2_Display_Partial>:

void EPD_2IN9_V2_Display_Partial(UBYTE *Image)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b084      	sub	sp, #16
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
	UWORD i;

//Reset
    DEV_Digital_Write(EPD_RST_PIN, 0);
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	2110      	movs	r1, #16
 8000a10:	4833      	ldr	r0, [pc, #204]	; (8000ae0 <EPD_2IN9_V2_Display_Partial+0xdc>)
 8000a12:	f002 fa49 	bl	8002ea8 <HAL_GPIO_WritePin>
    DEV_Delay_ms(2);
 8000a16:	2002      	movs	r0, #2
 8000a18:	f001 ffa0 	bl	800295c <HAL_Delay>
    DEV_Digital_Write(EPD_RST_PIN, 1);
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	2110      	movs	r1, #16
 8000a20:	482f      	ldr	r0, [pc, #188]	; (8000ae0 <EPD_2IN9_V2_Display_Partial+0xdc>)
 8000a22:	f002 fa41 	bl	8002ea8 <HAL_GPIO_WritePin>
    DEV_Delay_ms(2);
 8000a26:	2002      	movs	r0, #2
 8000a28:	f001 ff98 	bl	800295c <HAL_Delay>

	EPD_2IN9_V2_LUT(_WF_PARTIAL_2IN9);
 8000a2c:	482d      	ldr	r0, [pc, #180]	; (8000ae4 <EPD_2IN9_V2_Display_Partial+0xe0>)
 8000a2e:	f7ff fe69 	bl	8000704 <EPD_2IN9_V2_LUT>
	EPD_2IN9_V2_SendCommand(0x37); 
 8000a32:	2037      	movs	r0, #55	; 0x37
 8000a34:	f7ff fe06 	bl	8000644 <EPD_2IN9_V2_SendCommand>
	EPD_2IN9_V2_SendData(0x00);  
 8000a38:	2000      	movs	r0, #0
 8000a3a:	f7ff fe23 	bl	8000684 <EPD_2IN9_V2_SendData>
	EPD_2IN9_V2_SendData(0x00);  
 8000a3e:	2000      	movs	r0, #0
 8000a40:	f7ff fe20 	bl	8000684 <EPD_2IN9_V2_SendData>
	EPD_2IN9_V2_SendData(0x00);  
 8000a44:	2000      	movs	r0, #0
 8000a46:	f7ff fe1d 	bl	8000684 <EPD_2IN9_V2_SendData>
	EPD_2IN9_V2_SendData(0x00); 
 8000a4a:	2000      	movs	r0, #0
 8000a4c:	f7ff fe1a 	bl	8000684 <EPD_2IN9_V2_SendData>
	EPD_2IN9_V2_SendData(0x00);  	
 8000a50:	2000      	movs	r0, #0
 8000a52:	f7ff fe17 	bl	8000684 <EPD_2IN9_V2_SendData>
	EPD_2IN9_V2_SendData(0x40);  
 8000a56:	2040      	movs	r0, #64	; 0x40
 8000a58:	f7ff fe14 	bl	8000684 <EPD_2IN9_V2_SendData>
	EPD_2IN9_V2_SendData(0x00);  
 8000a5c:	2000      	movs	r0, #0
 8000a5e:	f7ff fe11 	bl	8000684 <EPD_2IN9_V2_SendData>
	EPD_2IN9_V2_SendData(0x00);   
 8000a62:	2000      	movs	r0, #0
 8000a64:	f7ff fe0e 	bl	8000684 <EPD_2IN9_V2_SendData>
	EPD_2IN9_V2_SendData(0x00);  
 8000a68:	2000      	movs	r0, #0
 8000a6a:	f7ff fe0b 	bl	8000684 <EPD_2IN9_V2_SendData>
	EPD_2IN9_V2_SendData(0x00);
 8000a6e:	2000      	movs	r0, #0
 8000a70:	f7ff fe08 	bl	8000684 <EPD_2IN9_V2_SendData>

	EPD_2IN9_V2_SendCommand(0x3C); //BorderWavefrom
 8000a74:	203c      	movs	r0, #60	; 0x3c
 8000a76:	f7ff fde5 	bl	8000644 <EPD_2IN9_V2_SendCommand>
	EPD_2IN9_V2_SendData(0x80);	
 8000a7a:	2080      	movs	r0, #128	; 0x80
 8000a7c:	f7ff fe02 	bl	8000684 <EPD_2IN9_V2_SendData>

	EPD_2IN9_V2_SendCommand(0x22); 
 8000a80:	2022      	movs	r0, #34	; 0x22
 8000a82:	f7ff fddf 	bl	8000644 <EPD_2IN9_V2_SendCommand>
	EPD_2IN9_V2_SendData(0xC0);   
 8000a86:	20c0      	movs	r0, #192	; 0xc0
 8000a88:	f7ff fdfc 	bl	8000684 <EPD_2IN9_V2_SendData>
	EPD_2IN9_V2_SendCommand(0x20); 
 8000a8c:	2020      	movs	r0, #32
 8000a8e:	f7ff fdd9 	bl	8000644 <EPD_2IN9_V2_SendCommand>
	EPD_2IN9_V2_ReadBusy();  
 8000a92:	f7ff fe17 	bl	80006c4 <EPD_2IN9_V2_ReadBusy>
	
	EPD_2IN9_V2_SetWindows(0, 0, EPD_2IN9_V2_WIDTH-1, EPD_2IN9_V2_HEIGHT-1);
 8000a96:	f240 1327 	movw	r3, #295	; 0x127
 8000a9a:	227f      	movs	r2, #127	; 0x7f
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	2000      	movs	r0, #0
 8000aa0:	f7ff fea6 	bl	80007f0 <EPD_2IN9_V2_SetWindows>
	EPD_2IN9_V2_SetCursor(0, 0);
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	2000      	movs	r0, #0
 8000aa8:	f7ff fee1 	bl	800086e <EPD_2IN9_V2_SetCursor>

	EPD_2IN9_V2_SendCommand(0x24);   //Write Black and White image to RAM
 8000aac:	2024      	movs	r0, #36	; 0x24
 8000aae:	f7ff fdc9 	bl	8000644 <EPD_2IN9_V2_SendCommand>
	for(i=0;i<4736;i++)
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	81fb      	strh	r3, [r7, #14]
 8000ab6:	e009      	b.n	8000acc <EPD_2IN9_V2_Display_Partial+0xc8>
	{
		EPD_2IN9_V2_SendData(Image[i]);
 8000ab8:	89fb      	ldrh	r3, [r7, #14]
 8000aba:	687a      	ldr	r2, [r7, #4]
 8000abc:	4413      	add	r3, r2
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f7ff fddf 	bl	8000684 <EPD_2IN9_V2_SendData>
	for(i=0;i<4736;i++)
 8000ac6:	89fb      	ldrh	r3, [r7, #14]
 8000ac8:	3301      	adds	r3, #1
 8000aca:	81fb      	strh	r3, [r7, #14]
 8000acc:	89fb      	ldrh	r3, [r7, #14]
 8000ace:	f5b3 5f94 	cmp.w	r3, #4736	; 0x1280
 8000ad2:	d3f1      	bcc.n	8000ab8 <EPD_2IN9_V2_Display_Partial+0xb4>
	} 
	EPD_2IN9_V2_TurnOnDisplay_Partial();
 8000ad4:	f7ff fe7d 	bl	80007d2 <EPD_2IN9_V2_TurnOnDisplay_Partial>
}
 8000ad8:	bf00      	nop
 8000ada:	3710      	adds	r7, #16
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	40020000 	.word	0x40020000
 8000ae4:	20000024 	.word	0x20000024

08000ae8 <EPD_2IN9_V2_Sleep>:
/******************************************************************************
function :	Enter sleep mode
parameter:
******************************************************************************/
void EPD_2IN9_V2_Sleep(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
	EPD_2IN9_V2_SendCommand(0x10); //enter deep sleep
 8000aec:	2010      	movs	r0, #16
 8000aee:	f7ff fda9 	bl	8000644 <EPD_2IN9_V2_SendCommand>
	EPD_2IN9_V2_SendData(0x01); 
 8000af2:	2001      	movs	r0, #1
 8000af4:	f7ff fdc6 	bl	8000684 <EPD_2IN9_V2_SendData>
	DEV_Delay_ms(100);
 8000af8:	2064      	movs	r0, #100	; 0x64
 8000afa:	f001 ff2f 	bl	800295c <HAL_Delay>
}
 8000afe:	bf00      	nop
 8000b00:	bd80      	pop	{r7, pc}
	...

08000b04 <EPD_2in9_V2_test>:
******************************************************************************/
#include "EPD_Test.h"
#include "EPD_2in9_V2.h"

int EPD_2in9_V2_test(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b088      	sub	sp, #32
 8000b08:	af04      	add	r7, sp, #16
    printf("EPD_2IN9_V2_test Demo\r\n");
 8000b0a:	48bd      	ldr	r0, [pc, #756]	; (8000e00 <EPD_2in9_V2_test+0x2fc>)
 8000b0c:	f003 fa42 	bl	8003f94 <puts>
    if(DEV_Module_Init()!=0){
 8000b10:	f7ff fd4a 	bl	80005a8 <DEV_Module_Init>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d002      	beq.n	8000b20 <EPD_2in9_V2_test+0x1c>
        return -1;
 8000b1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b1e:	e1b1      	b.n	8000e84 <EPD_2in9_V2_test+0x380>
    }

    printf("e-Paper Init and Clear...\r\n");
 8000b20:	48b8      	ldr	r0, [pc, #736]	; (8000e04 <EPD_2in9_V2_test+0x300>)
 8000b22:	f003 fa37 	bl	8003f94 <puts>
	EPD_2IN9_V2_Init();
 8000b26:	f7ff fec5 	bl	80008b4 <EPD_2IN9_V2_Init>
    EPD_2IN9_V2_Clear();
 8000b2a:	f7ff ff01 	bl	8000930 <EPD_2IN9_V2_Clear>

    //Create a new image cache
    UBYTE *BlackImage;
    UWORD Imagesize = ((EPD_2IN9_V2_WIDTH % 8 == 0)? (EPD_2IN9_V2_WIDTH / 8 ): (EPD_2IN9_V2_WIDTH / 8 + 1)) * EPD_2IN9_V2_HEIGHT;
 8000b2e:	f44f 5394 	mov.w	r3, #4736	; 0x1280
 8000b32:	81bb      	strh	r3, [r7, #12]
    if((BlackImage = (UBYTE *)malloc(Imagesize)) == NULL) {
 8000b34:	89bb      	ldrh	r3, [r7, #12]
 8000b36:	4618      	mov	r0, r3
 8000b38:	f003 f8ae 	bl	8003c98 <malloc>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	60bb      	str	r3, [r7, #8]
 8000b40:	68bb      	ldr	r3, [r7, #8]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d105      	bne.n	8000b52 <EPD_2in9_V2_test+0x4e>
        printf("Failed to apply for black memory...\r\n");
 8000b46:	48b0      	ldr	r0, [pc, #704]	; (8000e08 <EPD_2in9_V2_test+0x304>)
 8000b48:	f003 fa24 	bl	8003f94 <puts>
        return -1;
 8000b4c:	f04f 33ff 	mov.w	r3, #4294967295
 8000b50:	e198      	b.n	8000e84 <EPD_2in9_V2_test+0x380>
    }
    printf("Paint_NewImage\r\n");
 8000b52:	48ae      	ldr	r0, [pc, #696]	; (8000e0c <EPD_2in9_V2_test+0x308>)
 8000b54:	f003 fa1e 	bl	8003f94 <puts>
    Paint_NewImage(BlackImage, EPD_2IN9_V2_WIDTH, EPD_2IN9_V2_HEIGHT, 90, WHITE);
 8000b58:	23ff      	movs	r3, #255	; 0xff
 8000b5a:	9300      	str	r3, [sp, #0]
 8000b5c:	235a      	movs	r3, #90	; 0x5a
 8000b5e:	f44f 7294 	mov.w	r2, #296	; 0x128
 8000b62:	2180      	movs	r1, #128	; 0x80
 8000b64:	68b8      	ldr	r0, [r7, #8]
 8000b66:	f000 f997 	bl	8000e98 <Paint_NewImage>
	Paint_Clear(WHITE);
 8000b6a:	20ff      	movs	r0, #255	; 0xff
 8000b6c:	f000 fb46 	bl	80011fc <Paint_Clear>

#if 1  //show image for array  
    Paint_NewImage(BlackImage, EPD_2IN9_V2_WIDTH, EPD_2IN9_V2_HEIGHT, 90, WHITE);  
 8000b70:	23ff      	movs	r3, #255	; 0xff
 8000b72:	9300      	str	r3, [sp, #0]
 8000b74:	235a      	movs	r3, #90	; 0x5a
 8000b76:	f44f 7294 	mov.w	r2, #296	; 0x128
 8000b7a:	2180      	movs	r1, #128	; 0x80
 8000b7c:	68b8      	ldr	r0, [r7, #8]
 8000b7e:	f000 f98b 	bl	8000e98 <Paint_NewImage>
    printf("show image for array\r\n");
 8000b82:	48a3      	ldr	r0, [pc, #652]	; (8000e10 <EPD_2in9_V2_test+0x30c>)
 8000b84:	f003 fa06 	bl	8003f94 <puts>
    Paint_SelectImage(BlackImage);
 8000b88:	68b8      	ldr	r0, [r7, #8]
 8000b8a:	f000 f9db 	bl	8000f44 <Paint_SelectImage>
    Paint_Clear(WHITE);
 8000b8e:	20ff      	movs	r0, #255	; 0xff
 8000b90:	f000 fb34 	bl	80011fc <Paint_Clear>
    Paint_DrawBitMap(gImage_2in9);
 8000b94:	489f      	ldr	r0, [pc, #636]	; (8000e14 <EPD_2in9_V2_test+0x310>)
 8000b96:	f001 fb93 	bl	80022c0 <Paint_DrawBitMap>

    EPD_2IN9_V2_Display(BlackImage);
 8000b9a:	68b8      	ldr	r0, [r7, #8]
 8000b9c:	f7ff fee1 	bl	8000962 <EPD_2IN9_V2_Display>
    DEV_Delay_ms(3000);
 8000ba0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000ba4:	f001 feda 	bl	800295c <HAL_Delay>
#endif

#if 1  // Drawing on the image
	Paint_NewImage(BlackImage, EPD_2IN9_V2_WIDTH, EPD_2IN9_V2_HEIGHT, 90, WHITE);  	
 8000ba8:	23ff      	movs	r3, #255	; 0xff
 8000baa:	9300      	str	r3, [sp, #0]
 8000bac:	235a      	movs	r3, #90	; 0x5a
 8000bae:	f44f 7294 	mov.w	r2, #296	; 0x128
 8000bb2:	2180      	movs	r1, #128	; 0x80
 8000bb4:	68b8      	ldr	r0, [r7, #8]
 8000bb6:	f000 f96f 	bl	8000e98 <Paint_NewImage>
    printf("Drawing\r\n");
 8000bba:	4897      	ldr	r0, [pc, #604]	; (8000e18 <EPD_2in9_V2_test+0x314>)
 8000bbc:	f003 f9ea 	bl	8003f94 <puts>
    //1.Select Image
    Paint_SelectImage(BlackImage);
 8000bc0:	68b8      	ldr	r0, [r7, #8]
 8000bc2:	f000 f9bf 	bl	8000f44 <Paint_SelectImage>
    Paint_Clear(WHITE);
 8000bc6:	20ff      	movs	r0, #255	; 0xff
 8000bc8:	f000 fb18 	bl	80011fc <Paint_Clear>
	
    // 2.Drawing on the image
    printf("Drawing:BlackImage\r\n");
 8000bcc:	4893      	ldr	r0, [pc, #588]	; (8000e1c <EPD_2in9_V2_test+0x318>)
 8000bce:	f003 f9e1 	bl	8003f94 <puts>
    Paint_DrawPoint(10, 80, BLACK, DOT_PIXEL_1X1, DOT_STYLE_DFT);
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	9300      	str	r3, [sp, #0]
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	2200      	movs	r2, #0
 8000bda:	2150      	movs	r1, #80	; 0x50
 8000bdc:	200a      	movs	r0, #10
 8000bde:	f000 fba7 	bl	8001330 <Paint_DrawPoint>
    Paint_DrawPoint(10, 90, BLACK, DOT_PIXEL_2X2, DOT_STYLE_DFT);
 8000be2:	2301      	movs	r3, #1
 8000be4:	9300      	str	r3, [sp, #0]
 8000be6:	2302      	movs	r3, #2
 8000be8:	2200      	movs	r2, #0
 8000bea:	215a      	movs	r1, #90	; 0x5a
 8000bec:	200a      	movs	r0, #10
 8000bee:	f000 fb9f 	bl	8001330 <Paint_DrawPoint>
    Paint_DrawPoint(10, 100, BLACK, DOT_PIXEL_3X3, DOT_STYLE_DFT);
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	9300      	str	r3, [sp, #0]
 8000bf6:	2303      	movs	r3, #3
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	2164      	movs	r1, #100	; 0x64
 8000bfc:	200a      	movs	r0, #10
 8000bfe:	f000 fb97 	bl	8001330 <Paint_DrawPoint>

    Paint_DrawLine(20, 70, 70, 120, BLACK, DOT_PIXEL_1X1, LINE_STYLE_SOLID);
 8000c02:	2300      	movs	r3, #0
 8000c04:	9302      	str	r3, [sp, #8]
 8000c06:	2301      	movs	r3, #1
 8000c08:	9301      	str	r3, [sp, #4]
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	9300      	str	r3, [sp, #0]
 8000c0e:	2378      	movs	r3, #120	; 0x78
 8000c10:	2246      	movs	r2, #70	; 0x46
 8000c12:	2146      	movs	r1, #70	; 0x46
 8000c14:	2014      	movs	r0, #20
 8000c16:	f000 fc37 	bl	8001488 <Paint_DrawLine>
    Paint_DrawLine(70, 70, 20, 120, BLACK, DOT_PIXEL_1X1, LINE_STYLE_SOLID);
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	9302      	str	r3, [sp, #8]
 8000c1e:	2301      	movs	r3, #1
 8000c20:	9301      	str	r3, [sp, #4]
 8000c22:	2300      	movs	r3, #0
 8000c24:	9300      	str	r3, [sp, #0]
 8000c26:	2378      	movs	r3, #120	; 0x78
 8000c28:	2214      	movs	r2, #20
 8000c2a:	2146      	movs	r1, #70	; 0x46
 8000c2c:	2046      	movs	r0, #70	; 0x46
 8000c2e:	f000 fc2b 	bl	8001488 <Paint_DrawLine>

    Paint_DrawRectangle(20, 70, 70, 120, BLACK, DOT_PIXEL_1X1, DRAW_FILL_EMPTY);
 8000c32:	2300      	movs	r3, #0
 8000c34:	9302      	str	r3, [sp, #8]
 8000c36:	2301      	movs	r3, #1
 8000c38:	9301      	str	r3, [sp, #4]
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	9300      	str	r3, [sp, #0]
 8000c3e:	2378      	movs	r3, #120	; 0x78
 8000c40:	2246      	movs	r2, #70	; 0x46
 8000c42:	2146      	movs	r1, #70	; 0x46
 8000c44:	2014      	movs	r0, #20
 8000c46:	f000 fccb 	bl	80015e0 <Paint_DrawRectangle>
    Paint_DrawRectangle(80, 70, 130, 120, BLACK, DOT_PIXEL_1X1, DRAW_FILL_FULL);
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	9302      	str	r3, [sp, #8]
 8000c4e:	2301      	movs	r3, #1
 8000c50:	9301      	str	r3, [sp, #4]
 8000c52:	2300      	movs	r3, #0
 8000c54:	9300      	str	r3, [sp, #0]
 8000c56:	2378      	movs	r3, #120	; 0x78
 8000c58:	2282      	movs	r2, #130	; 0x82
 8000c5a:	2146      	movs	r1, #70	; 0x46
 8000c5c:	2050      	movs	r0, #80	; 0x50
 8000c5e:	f000 fcbf 	bl	80015e0 <Paint_DrawRectangle>

    Paint_DrawCircle(45, 95, 20, BLACK, DOT_PIXEL_1X1, DRAW_FILL_EMPTY);
 8000c62:	2300      	movs	r3, #0
 8000c64:	9301      	str	r3, [sp, #4]
 8000c66:	2301      	movs	r3, #1
 8000c68:	9300      	str	r3, [sp, #0]
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	2214      	movs	r2, #20
 8000c6e:	215f      	movs	r1, #95	; 0x5f
 8000c70:	202d      	movs	r0, #45	; 0x2d
 8000c72:	f000 fd39 	bl	80016e8 <Paint_DrawCircle>
    Paint_DrawCircle(105, 95, 20, WHITE, DOT_PIXEL_1X1, DRAW_FILL_FULL);
 8000c76:	2301      	movs	r3, #1
 8000c78:	9301      	str	r3, [sp, #4]
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	9300      	str	r3, [sp, #0]
 8000c7e:	23ff      	movs	r3, #255	; 0xff
 8000c80:	2214      	movs	r2, #20
 8000c82:	215f      	movs	r1, #95	; 0x5f
 8000c84:	2069      	movs	r0, #105	; 0x69
 8000c86:	f000 fd2f 	bl	80016e8 <Paint_DrawCircle>

    Paint_DrawLine(85, 95, 125, 95, BLACK, DOT_PIXEL_1X1, LINE_STYLE_DOTTED);
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	9302      	str	r3, [sp, #8]
 8000c8e:	2301      	movs	r3, #1
 8000c90:	9301      	str	r3, [sp, #4]
 8000c92:	2300      	movs	r3, #0
 8000c94:	9300      	str	r3, [sp, #0]
 8000c96:	235f      	movs	r3, #95	; 0x5f
 8000c98:	227d      	movs	r2, #125	; 0x7d
 8000c9a:	215f      	movs	r1, #95	; 0x5f
 8000c9c:	2055      	movs	r0, #85	; 0x55
 8000c9e:	f000 fbf3 	bl	8001488 <Paint_DrawLine>
    Paint_DrawLine(105, 75, 105, 115, BLACK, DOT_PIXEL_1X1, LINE_STYLE_DOTTED);
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	9302      	str	r3, [sp, #8]
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	9301      	str	r3, [sp, #4]
 8000caa:	2300      	movs	r3, #0
 8000cac:	9300      	str	r3, [sp, #0]
 8000cae:	2373      	movs	r3, #115	; 0x73
 8000cb0:	2269      	movs	r2, #105	; 0x69
 8000cb2:	214b      	movs	r1, #75	; 0x4b
 8000cb4:	2069      	movs	r0, #105	; 0x69
 8000cb6:	f000 fbe7 	bl	8001488 <Paint_DrawLine>

    Paint_DrawString_EN(10, 0, "NaviCom", &Font16, BLACK, WHITE);
 8000cba:	23ff      	movs	r3, #255	; 0xff
 8000cbc:	9301      	str	r3, [sp, #4]
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	9300      	str	r3, [sp, #0]
 8000cc2:	4b57      	ldr	r3, [pc, #348]	; (8000e20 <EPD_2in9_V2_test+0x31c>)
 8000cc4:	4a57      	ldr	r2, [pc, #348]	; (8000e24 <EPD_2in9_V2_test+0x320>)
 8000cc6:	2100      	movs	r1, #0
 8000cc8:	200a      	movs	r0, #10
 8000cca:	f000 ff41 	bl	8001b50 <Paint_DrawString_EN>
    Paint_DrawString_EN(10, 20, "22.08.2023_Test_by_Chipizdry", &Font12, WHITE, BLACK);
 8000cce:	2300      	movs	r3, #0
 8000cd0:	9301      	str	r3, [sp, #4]
 8000cd2:	23ff      	movs	r3, #255	; 0xff
 8000cd4:	9300      	str	r3, [sp, #0]
 8000cd6:	4b54      	ldr	r3, [pc, #336]	; (8000e28 <EPD_2in9_V2_test+0x324>)
 8000cd8:	4a54      	ldr	r2, [pc, #336]	; (8000e2c <EPD_2in9_V2_test+0x328>)
 8000cda:	2114      	movs	r1, #20
 8000cdc:	200a      	movs	r0, #10
 8000cde:	f000 ff37 	bl	8001b50 <Paint_DrawString_EN>

    Paint_DrawNum(10, 33, 123456789, &Font12, BLACK, WHITE);
 8000ce2:	23ff      	movs	r3, #255	; 0xff
 8000ce4:	9301      	str	r3, [sp, #4]
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	9300      	str	r3, [sp, #0]
 8000cea:	4b4f      	ldr	r3, [pc, #316]	; (8000e28 <EPD_2in9_V2_test+0x324>)
 8000cec:	4a50      	ldr	r2, [pc, #320]	; (8000e30 <EPD_2in9_V2_test+0x32c>)
 8000cee:	2121      	movs	r1, #33	; 0x21
 8000cf0:	200a      	movs	r0, #10
 8000cf2:	f001 f919 	bl	8001f28 <Paint_DrawNum>
    Paint_DrawNum(10, 50, 987654321, &Font16, WHITE, BLACK);
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	9301      	str	r3, [sp, #4]
 8000cfa:	23ff      	movs	r3, #255	; 0xff
 8000cfc:	9300      	str	r3, [sp, #0]
 8000cfe:	4b48      	ldr	r3, [pc, #288]	; (8000e20 <EPD_2in9_V2_test+0x31c>)
 8000d00:	4a4c      	ldr	r2, [pc, #304]	; (8000e34 <EPD_2in9_V2_test+0x330>)
 8000d02:	2132      	movs	r1, #50	; 0x32
 8000d04:	200a      	movs	r0, #10
 8000d06:	f001 f90f 	bl	8001f28 <Paint_DrawNum>

    Paint_DrawString_EN(130, 0,"NAVI.COM_TEST", &Font12, BLACK, WHITE);
 8000d0a:	23ff      	movs	r3, #255	; 0xff
 8000d0c:	9301      	str	r3, [sp, #4]
 8000d0e:	2300      	movs	r3, #0
 8000d10:	9300      	str	r3, [sp, #0]
 8000d12:	4b45      	ldr	r3, [pc, #276]	; (8000e28 <EPD_2in9_V2_test+0x324>)
 8000d14:	4a48      	ldr	r2, [pc, #288]	; (8000e38 <EPD_2in9_V2_test+0x334>)
 8000d16:	2100      	movs	r1, #0
 8000d18:	2082      	movs	r0, #130	; 0x82
 8000d1a:	f000 ff19 	bl	8001b50 <Paint_DrawString_EN>
    Paint_DrawString_CN(130, 20, "微雪电子", &Font24CN, WHITE, BLACK);
 8000d1e:	2300      	movs	r3, #0
 8000d20:	9301      	str	r3, [sp, #4]
 8000d22:	23ff      	movs	r3, #255	; 0xff
 8000d24:	9300      	str	r3, [sp, #0]
 8000d26:	4b45      	ldr	r3, [pc, #276]	; (8000e3c <EPD_2in9_V2_test+0x338>)
 8000d28:	4a45      	ldr	r2, [pc, #276]	; (8000e40 <EPD_2in9_V2_test+0x33c>)
 8000d2a:	2114      	movs	r1, #20
 8000d2c:	2082      	movs	r0, #130	; 0x82
 8000d2e:	f000 ff63 	bl	8001bf8 <Paint_DrawString_CN>

    EPD_2IN9_V2_Display_Base(BlackImage);
 8000d32:	68b8      	ldr	r0, [r7, #8]
 8000d34:	f7ff fe33 	bl	800099e <EPD_2IN9_V2_Display_Base>
    DEV_Delay_ms(3000);
 8000d38:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000d3c:	f001 fe0e 	bl	800295c <HAL_Delay>
#endif

#if 1   //Partial refresh, example shows time    		
	Paint_NewImage(BlackImage, EPD_2IN9_V2_WIDTH, EPD_2IN9_V2_HEIGHT, 90, WHITE);  
 8000d40:	23ff      	movs	r3, #255	; 0xff
 8000d42:	9300      	str	r3, [sp, #0]
 8000d44:	235a      	movs	r3, #90	; 0x5a
 8000d46:	f44f 7294 	mov.w	r2, #296	; 0x128
 8000d4a:	2180      	movs	r1, #128	; 0x80
 8000d4c:	68b8      	ldr	r0, [r7, #8]
 8000d4e:	f000 f8a3 	bl	8000e98 <Paint_NewImage>
    printf("Partial refresh\r\n");
 8000d52:	483c      	ldr	r0, [pc, #240]	; (8000e44 <EPD_2in9_V2_test+0x340>)
 8000d54:	f003 f91e 	bl	8003f94 <puts>
    Paint_SelectImage(BlackImage);
 8000d58:	68b8      	ldr	r0, [r7, #8]
 8000d5a:	f000 f8f3 	bl	8000f44 <Paint_SelectImage>
	
    PAINT_TIME sPaint_time;
    sPaint_time.Hour = 12;
 8000d5e:	230c      	movs	r3, #12
 8000d60:	713b      	strb	r3, [r7, #4]
    sPaint_time.Min = 34;
 8000d62:	2322      	movs	r3, #34	; 0x22
 8000d64:	717b      	strb	r3, [r7, #5]
    sPaint_time.Sec = 56;
 8000d66:	2338      	movs	r3, #56	; 0x38
 8000d68:	71bb      	strb	r3, [r7, #6]
    UBYTE num = 10;
 8000d6a:	230a      	movs	r3, #10
 8000d6c:	73fb      	strb	r3, [r7, #15]
    for (;;) {
        sPaint_time.Sec = sPaint_time.Sec + 1;
 8000d6e:	79bb      	ldrb	r3, [r7, #6]
 8000d70:	3301      	adds	r3, #1
 8000d72:	b2db      	uxtb	r3, r3
 8000d74:	71bb      	strb	r3, [r7, #6]
        if (sPaint_time.Sec == 60) {
 8000d76:	79bb      	ldrb	r3, [r7, #6]
 8000d78:	2b3c      	cmp	r3, #60	; 0x3c
 8000d7a:	d117      	bne.n	8000dac <EPD_2in9_V2_test+0x2a8>
            sPaint_time.Min = sPaint_time.Min + 1;
 8000d7c:	797b      	ldrb	r3, [r7, #5]
 8000d7e:	3301      	adds	r3, #1
 8000d80:	b2db      	uxtb	r3, r3
 8000d82:	717b      	strb	r3, [r7, #5]
            sPaint_time.Sec = 0;
 8000d84:	2300      	movs	r3, #0
 8000d86:	71bb      	strb	r3, [r7, #6]
            if (sPaint_time.Min == 60) {
 8000d88:	797b      	ldrb	r3, [r7, #5]
 8000d8a:	2b3c      	cmp	r3, #60	; 0x3c
 8000d8c:	d10e      	bne.n	8000dac <EPD_2in9_V2_test+0x2a8>
                sPaint_time.Hour =  sPaint_time.Hour + 1;
 8000d8e:	793b      	ldrb	r3, [r7, #4]
 8000d90:	3301      	adds	r3, #1
 8000d92:	b2db      	uxtb	r3, r3
 8000d94:	713b      	strb	r3, [r7, #4]
                sPaint_time.Min = 0;
 8000d96:	2300      	movs	r3, #0
 8000d98:	717b      	strb	r3, [r7, #5]
                if (sPaint_time.Hour == 24) {
 8000d9a:	793b      	ldrb	r3, [r7, #4]
 8000d9c:	2b18      	cmp	r3, #24
 8000d9e:	d105      	bne.n	8000dac <EPD_2in9_V2_test+0x2a8>
                    sPaint_time.Hour = 0;
 8000da0:	2300      	movs	r3, #0
 8000da2:	713b      	strb	r3, [r7, #4]
                    sPaint_time.Min = 0;
 8000da4:	2300      	movs	r3, #0
 8000da6:	717b      	strb	r3, [r7, #5]
                    sPaint_time.Sec = 0;
 8000da8:	2300      	movs	r3, #0
 8000daa:	71bb      	strb	r3, [r7, #6]
                }
            }
        }
        Paint_ClearWindows(150, 80, 150 + Font24.Width * 7, 80 + Font24.Height, WHITE);
 8000dac:	4b26      	ldr	r3, [pc, #152]	; (8000e48 <EPD_2in9_V2_test+0x344>)
 8000dae:	889b      	ldrh	r3, [r3, #4]
 8000db0:	461a      	mov	r2, r3
 8000db2:	00d2      	lsls	r2, r2, #3
 8000db4:	1ad3      	subs	r3, r2, r3
 8000db6:	b29b      	uxth	r3, r3
 8000db8:	3396      	adds	r3, #150	; 0x96
 8000dba:	b29a      	uxth	r2, r3
 8000dbc:	4b22      	ldr	r3, [pc, #136]	; (8000e48 <EPD_2in9_V2_test+0x344>)
 8000dbe:	88db      	ldrh	r3, [r3, #6]
 8000dc0:	3350      	adds	r3, #80	; 0x50
 8000dc2:	b29b      	uxth	r3, r3
 8000dc4:	21ff      	movs	r1, #255	; 0xff
 8000dc6:	9100      	str	r1, [sp, #0]
 8000dc8:	2150      	movs	r1, #80	; 0x50
 8000dca:	2096      	movs	r0, #150	; 0x96
 8000dcc:	f000 fa82 	bl	80012d4 <Paint_ClearWindows>
        Paint_DrawTime(150, 80, &sPaint_time, &Font24, WHITE, BLACK);
 8000dd0:	463a      	mov	r2, r7
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	9301      	str	r3, [sp, #4]
 8000dd6:	23ff      	movs	r3, #255	; 0xff
 8000dd8:	9300      	str	r3, [sp, #0]
 8000dda:	4b1b      	ldr	r3, [pc, #108]	; (8000e48 <EPD_2in9_V2_test+0x344>)
 8000ddc:	2150      	movs	r1, #80	; 0x50
 8000dde:	2096      	movs	r0, #150	; 0x96
 8000de0:	f001 f974 	bl	80020cc <Paint_DrawTime>

        num = num - 1;
 8000de4:	7bfb      	ldrb	r3, [r7, #15]
 8000de6:	3b01      	subs	r3, #1
 8000de8:	73fb      	strb	r3, [r7, #15]
        if(num == 0) {
 8000dea:	7bfb      	ldrb	r3, [r7, #15]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d02d      	beq.n	8000e4c <EPD_2in9_V2_test+0x348>
            break;
        }
		EPD_2IN9_V2_Display_Partial(BlackImage);
 8000df0:	68b8      	ldr	r0, [r7, #8]
 8000df2:	f7ff fe07 	bl	8000a04 <EPD_2IN9_V2_Display_Partial>
        DEV_Delay_ms(500);//Analog clock 1s
 8000df6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000dfa:	f001 fdaf 	bl	800295c <HAL_Delay>
        sPaint_time.Sec = sPaint_time.Sec + 1;
 8000dfe:	e7b6      	b.n	8000d6e <EPD_2in9_V2_test+0x26a>
 8000e00:	08004d20 	.word	0x08004d20
 8000e04:	08004d38 	.word	0x08004d38
 8000e08:	08004d54 	.word	0x08004d54
 8000e0c:	08004d7c 	.word	0x08004d7c
 8000e10:	08004d8c 	.word	0x08004d8c
 8000e14:	08008e58 	.word	0x08008e58
 8000e18:	08004da4 	.word	0x08004da4
 8000e1c:	08004db0 	.word	0x08004db0
 8000e20:	20000008 	.word	0x20000008
 8000e24:	08004dc4 	.word	0x08004dc4
 8000e28:	20000000 	.word	0x20000000
 8000e2c:	08004dcc 	.word	0x08004dcc
 8000e30:	075bcd15 	.word	0x075bcd15
 8000e34:	3ade68b1 	.word	0x3ade68b1
 8000e38:	08004dec 	.word	0x08004dec
 8000e3c:	20000018 	.word	0x20000018
 8000e40:	08004dfc 	.word	0x08004dfc
 8000e44:	08004e0c 	.word	0x08004e0c
 8000e48:	20000010 	.word	0x20000010
            break;
 8000e4c:	bf00      	nop
    }
#endif

	printf("Clear...\r\n");
 8000e4e:	480f      	ldr	r0, [pc, #60]	; (8000e8c <EPD_2in9_V2_test+0x388>)
 8000e50:	f003 f8a0 	bl	8003f94 <puts>
	EPD_2IN9_V2_Init();
 8000e54:	f7ff fd2e 	bl	80008b4 <EPD_2IN9_V2_Init>
    EPD_2IN9_V2_Clear();
 8000e58:	f7ff fd6a 	bl	8000930 <EPD_2IN9_V2_Clear>
	
    printf("Goto Sleep...\r\n");
 8000e5c:	480c      	ldr	r0, [pc, #48]	; (8000e90 <EPD_2in9_V2_test+0x38c>)
 8000e5e:	f003 f899 	bl	8003f94 <puts>
    EPD_2IN9_V2_Sleep();
 8000e62:	f7ff fe41 	bl	8000ae8 <EPD_2IN9_V2_Sleep>
    free(BlackImage);
 8000e66:	68b8      	ldr	r0, [r7, #8]
 8000e68:	f002 ff1e 	bl	8003ca8 <free>
    BlackImage = NULL;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	60bb      	str	r3, [r7, #8]
    DEV_Delay_ms(2000);//important, at least 2s
 8000e70:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000e74:	f001 fd72 	bl	800295c <HAL_Delay>
    // close 5V
    printf("close 5V, Module enters 0 power consumption ...\r\n");
 8000e78:	4806      	ldr	r0, [pc, #24]	; (8000e94 <EPD_2in9_V2_test+0x390>)
 8000e7a:	f003 f88b 	bl	8003f94 <puts>
    DEV_Module_Exit();
 8000e7e:	f7ff fbab 	bl	80005d8 <DEV_Module_Exit>
    return 0;
 8000e82:	2300      	movs	r3, #0
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	3710      	adds	r7, #16
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	08004e20 	.word	0x08004e20
 8000e90:	08004e2c 	.word	0x08004e2c
 8000e94:	08004e3c 	.word	0x08004e3c

08000e98 <Paint_NewImage>:
    width   :   The width of the picture
    Height  :   The height of the picture
    Color   :   Whether the picture is inverted
******************************************************************************/
void Paint_NewImage(UBYTE *image, UWORD Width, UWORD Height, UWORD Rotate, UWORD Color)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b085      	sub	sp, #20
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	60f8      	str	r0, [r7, #12]
 8000ea0:	4608      	mov	r0, r1
 8000ea2:	4611      	mov	r1, r2
 8000ea4:	461a      	mov	r2, r3
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	817b      	strh	r3, [r7, #10]
 8000eaa:	460b      	mov	r3, r1
 8000eac:	813b      	strh	r3, [r7, #8]
 8000eae:	4613      	mov	r3, r2
 8000eb0:	80fb      	strh	r3, [r7, #6]
    Paint.Image = NULL;
 8000eb2:	4b23      	ldr	r3, [pc, #140]	; (8000f40 <Paint_NewImage+0xa8>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	601a      	str	r2, [r3, #0]
    Paint.Image = image;
 8000eb8:	4a21      	ldr	r2, [pc, #132]	; (8000f40 <Paint_NewImage+0xa8>)
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	6013      	str	r3, [r2, #0]

    Paint.WidthMemory = Width;
 8000ebe:	4a20      	ldr	r2, [pc, #128]	; (8000f40 <Paint_NewImage+0xa8>)
 8000ec0:	897b      	ldrh	r3, [r7, #10]
 8000ec2:	8113      	strh	r3, [r2, #8]
    Paint.HeightMemory = Height;
 8000ec4:	4a1e      	ldr	r2, [pc, #120]	; (8000f40 <Paint_NewImage+0xa8>)
 8000ec6:	893b      	ldrh	r3, [r7, #8]
 8000ec8:	8153      	strh	r3, [r2, #10]
    Paint.Color = Color;    
 8000eca:	4a1d      	ldr	r2, [pc, #116]	; (8000f40 <Paint_NewImage+0xa8>)
 8000ecc:	8b3b      	ldrh	r3, [r7, #24]
 8000ece:	8193      	strh	r3, [r2, #12]
	Paint.Scale = 2;
 8000ed0:	4b1b      	ldr	r3, [pc, #108]	; (8000f40 <Paint_NewImage+0xa8>)
 8000ed2:	2202      	movs	r2, #2
 8000ed4:	82da      	strh	r2, [r3, #22]
		
    Paint.WidthByte = (Width % 8 == 0)? (Width / 8 ): (Width / 8 + 1);
 8000ed6:	897b      	ldrh	r3, [r7, #10]
 8000ed8:	f003 0307 	and.w	r3, r3, #7
 8000edc:	b29b      	uxth	r3, r3
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d103      	bne.n	8000eea <Paint_NewImage+0x52>
 8000ee2:	897b      	ldrh	r3, [r7, #10]
 8000ee4:	08db      	lsrs	r3, r3, #3
 8000ee6:	b29b      	uxth	r3, r3
 8000ee8:	e004      	b.n	8000ef4 <Paint_NewImage+0x5c>
 8000eea:	897b      	ldrh	r3, [r7, #10]
 8000eec:	08db      	lsrs	r3, r3, #3
 8000eee:	b29b      	uxth	r3, r3
 8000ef0:	3301      	adds	r3, #1
 8000ef2:	b29b      	uxth	r3, r3
 8000ef4:	4a12      	ldr	r2, [pc, #72]	; (8000f40 <Paint_NewImage+0xa8>)
 8000ef6:	8253      	strh	r3, [r2, #18]
    Paint.HeightByte = Height;    
 8000ef8:	4a11      	ldr	r2, [pc, #68]	; (8000f40 <Paint_NewImage+0xa8>)
 8000efa:	893b      	ldrh	r3, [r7, #8]
 8000efc:	8293      	strh	r3, [r2, #20]
//    printf("WidthByte = %d, HeightByte = %d\r\n", Paint.WidthByte, Paint.HeightByte);
//    printf(" EPD_WIDTH / 8 = %d\r\n",  122 / 8);
   
    Paint.Rotate = Rotate;
 8000efe:	4a10      	ldr	r2, [pc, #64]	; (8000f40 <Paint_NewImage+0xa8>)
 8000f00:	88fb      	ldrh	r3, [r7, #6]
 8000f02:	81d3      	strh	r3, [r2, #14]
    Paint.Mirror = MIRROR_NONE;
 8000f04:	4b0e      	ldr	r3, [pc, #56]	; (8000f40 <Paint_NewImage+0xa8>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	821a      	strh	r2, [r3, #16]
    
    if(Rotate == ROTATE_0 || Rotate == ROTATE_180) {
 8000f0a:	88fb      	ldrh	r3, [r7, #6]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d002      	beq.n	8000f16 <Paint_NewImage+0x7e>
 8000f10:	88fb      	ldrh	r3, [r7, #6]
 8000f12:	2bb4      	cmp	r3, #180	; 0xb4
 8000f14:	d106      	bne.n	8000f24 <Paint_NewImage+0x8c>
        Paint.Width = Width;
 8000f16:	4a0a      	ldr	r2, [pc, #40]	; (8000f40 <Paint_NewImage+0xa8>)
 8000f18:	897b      	ldrh	r3, [r7, #10]
 8000f1a:	8093      	strh	r3, [r2, #4]
        Paint.Height = Height;
 8000f1c:	4a08      	ldr	r2, [pc, #32]	; (8000f40 <Paint_NewImage+0xa8>)
 8000f1e:	893b      	ldrh	r3, [r7, #8]
 8000f20:	80d3      	strh	r3, [r2, #6]
 8000f22:	e006      	b.n	8000f32 <Paint_NewImage+0x9a>
    } else {
        Paint.Width = Height;
 8000f24:	4a06      	ldr	r2, [pc, #24]	; (8000f40 <Paint_NewImage+0xa8>)
 8000f26:	893b      	ldrh	r3, [r7, #8]
 8000f28:	8093      	strh	r3, [r2, #4]
        Paint.Height = Width;
 8000f2a:	4a05      	ldr	r2, [pc, #20]	; (8000f40 <Paint_NewImage+0xa8>)
 8000f2c:	897b      	ldrh	r3, [r7, #10]
 8000f2e:	80d3      	strh	r3, [r2, #6]
    }
}
 8000f30:	bf00      	nop
 8000f32:	bf00      	nop
 8000f34:	3714      	adds	r7, #20
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	200001f0 	.word	0x200001f0

08000f44 <Paint_SelectImage>:
function: Select Image
parameter:
    image : Pointer to the image cache
******************************************************************************/
void Paint_SelectImage(UBYTE *image)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
    Paint.Image = image;
 8000f4c:	4a04      	ldr	r2, [pc, #16]	; (8000f60 <Paint_SelectImage+0x1c>)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6013      	str	r3, [r2, #0]
}
 8000f52:	bf00      	nop
 8000f54:	370c      	adds	r7, #12
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	200001f0 	.word	0x200001f0

08000f64 <Paint_SetPixel>:
    Xpoint : At point X
    Ypoint : At point Y
    Color  : Painted colors
******************************************************************************/
void Paint_SetPixel(UWORD Xpoint, UWORD Ypoint, UWORD Color)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b08a      	sub	sp, #40	; 0x28
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	80fb      	strh	r3, [r7, #6]
 8000f6e:	460b      	mov	r3, r1
 8000f70:	80bb      	strh	r3, [r7, #4]
 8000f72:	4613      	mov	r3, r2
 8000f74:	807b      	strh	r3, [r7, #2]
    if(Xpoint > Paint.Width || Ypoint > Paint.Height){
 8000f76:	4b9f      	ldr	r3, [pc, #636]	; (80011f4 <Paint_SetPixel+0x290>)
 8000f78:	889b      	ldrh	r3, [r3, #4]
 8000f7a:	88fa      	ldrh	r2, [r7, #6]
 8000f7c:	429a      	cmp	r2, r3
 8000f7e:	d804      	bhi.n	8000f8a <Paint_SetPixel+0x26>
 8000f80:	4b9c      	ldr	r3, [pc, #624]	; (80011f4 <Paint_SetPixel+0x290>)
 8000f82:	88db      	ldrh	r3, [r3, #6]
 8000f84:	88ba      	ldrh	r2, [r7, #4]
 8000f86:	429a      	cmp	r2, r3
 8000f88:	d903      	bls.n	8000f92 <Paint_SetPixel+0x2e>
        Debug("Exceeding display boundaries\r\n");
 8000f8a:	489b      	ldr	r0, [pc, #620]	; (80011f8 <Paint_SetPixel+0x294>)
 8000f8c:	f003 f802 	bl	8003f94 <puts>
        return;
 8000f90:	e12d      	b.n	80011ee <Paint_SetPixel+0x28a>
    }      
    UWORD X, Y;

    switch(Paint.Rotate) {
 8000f92:	4b98      	ldr	r3, [pc, #608]	; (80011f4 <Paint_SetPixel+0x290>)
 8000f94:	89db      	ldrh	r3, [r3, #14]
 8000f96:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8000f9a:	d02b      	beq.n	8000ff4 <Paint_SetPixel+0x90>
 8000f9c:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8000fa0:	f300 8122 	bgt.w	80011e8 <Paint_SetPixel+0x284>
 8000fa4:	2bb4      	cmp	r3, #180	; 0xb4
 8000fa6:	d016      	beq.n	8000fd6 <Paint_SetPixel+0x72>
 8000fa8:	2bb4      	cmp	r3, #180	; 0xb4
 8000faa:	f300 811d 	bgt.w	80011e8 <Paint_SetPixel+0x284>
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d002      	beq.n	8000fb8 <Paint_SetPixel+0x54>
 8000fb2:	2b5a      	cmp	r3, #90	; 0x5a
 8000fb4:	d005      	beq.n	8000fc2 <Paint_SetPixel+0x5e>
    case 270:
        X = Ypoint;
        Y = Paint.HeightMemory - Xpoint - 1;
        break;
    default:
        return;
 8000fb6:	e117      	b.n	80011e8 <Paint_SetPixel+0x284>
        X = Xpoint;
 8000fb8:	88fb      	ldrh	r3, [r7, #6]
 8000fba:	84fb      	strh	r3, [r7, #38]	; 0x26
        Y = Ypoint;  
 8000fbc:	88bb      	ldrh	r3, [r7, #4]
 8000fbe:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 8000fc0:	e022      	b.n	8001008 <Paint_SetPixel+0xa4>
        X = Paint.WidthMemory - Ypoint - 1;
 8000fc2:	4b8c      	ldr	r3, [pc, #560]	; (80011f4 <Paint_SetPixel+0x290>)
 8000fc4:	891a      	ldrh	r2, [r3, #8]
 8000fc6:	88bb      	ldrh	r3, [r7, #4]
 8000fc8:	1ad3      	subs	r3, r2, r3
 8000fca:	b29b      	uxth	r3, r3
 8000fcc:	3b01      	subs	r3, #1
 8000fce:	84fb      	strh	r3, [r7, #38]	; 0x26
        Y = Xpoint;
 8000fd0:	88fb      	ldrh	r3, [r7, #6]
 8000fd2:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 8000fd4:	e018      	b.n	8001008 <Paint_SetPixel+0xa4>
        X = Paint.WidthMemory - Xpoint - 1;
 8000fd6:	4b87      	ldr	r3, [pc, #540]	; (80011f4 <Paint_SetPixel+0x290>)
 8000fd8:	891a      	ldrh	r2, [r3, #8]
 8000fda:	88fb      	ldrh	r3, [r7, #6]
 8000fdc:	1ad3      	subs	r3, r2, r3
 8000fde:	b29b      	uxth	r3, r3
 8000fe0:	3b01      	subs	r3, #1
 8000fe2:	84fb      	strh	r3, [r7, #38]	; 0x26
        Y = Paint.HeightMemory - Ypoint - 1;
 8000fe4:	4b83      	ldr	r3, [pc, #524]	; (80011f4 <Paint_SetPixel+0x290>)
 8000fe6:	895a      	ldrh	r2, [r3, #10]
 8000fe8:	88bb      	ldrh	r3, [r7, #4]
 8000fea:	1ad3      	subs	r3, r2, r3
 8000fec:	b29b      	uxth	r3, r3
 8000fee:	3b01      	subs	r3, #1
 8000ff0:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 8000ff2:	e009      	b.n	8001008 <Paint_SetPixel+0xa4>
        X = Ypoint;
 8000ff4:	88bb      	ldrh	r3, [r7, #4]
 8000ff6:	84fb      	strh	r3, [r7, #38]	; 0x26
        Y = Paint.HeightMemory - Xpoint - 1;
 8000ff8:	4b7e      	ldr	r3, [pc, #504]	; (80011f4 <Paint_SetPixel+0x290>)
 8000ffa:	895a      	ldrh	r2, [r3, #10]
 8000ffc:	88fb      	ldrh	r3, [r7, #6]
 8000ffe:	1ad3      	subs	r3, r2, r3
 8001000:	b29b      	uxth	r3, r3
 8001002:	3b01      	subs	r3, #1
 8001004:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 8001006:	bf00      	nop
    }
    
    switch(Paint.Mirror) {
 8001008:	4b7a      	ldr	r3, [pc, #488]	; (80011f4 <Paint_SetPixel+0x290>)
 800100a:	8a1b      	ldrh	r3, [r3, #16]
 800100c:	2b03      	cmp	r3, #3
 800100e:	f200 80ed 	bhi.w	80011ec <Paint_SetPixel+0x288>
 8001012:	a201      	add	r2, pc, #4	; (adr r2, 8001018 <Paint_SetPixel+0xb4>)
 8001014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001018:	08001067 	.word	0x08001067
 800101c:	08001029 	.word	0x08001029
 8001020:	08001039 	.word	0x08001039
 8001024:	08001049 	.word	0x08001049
    case MIRROR_NONE:
        break;
    case MIRROR_HORIZONTAL:
        X = Paint.WidthMemory - X - 1;
 8001028:	4b72      	ldr	r3, [pc, #456]	; (80011f4 <Paint_SetPixel+0x290>)
 800102a:	891a      	ldrh	r2, [r3, #8]
 800102c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800102e:	1ad3      	subs	r3, r2, r3
 8001030:	b29b      	uxth	r3, r3
 8001032:	3b01      	subs	r3, #1
 8001034:	84fb      	strh	r3, [r7, #38]	; 0x26
        break;
 8001036:	e017      	b.n	8001068 <Paint_SetPixel+0x104>
    case MIRROR_VERTICAL:
        Y = Paint.HeightMemory - Y - 1;
 8001038:	4b6e      	ldr	r3, [pc, #440]	; (80011f4 <Paint_SetPixel+0x290>)
 800103a:	895a      	ldrh	r2, [r3, #10]
 800103c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800103e:	1ad3      	subs	r3, r2, r3
 8001040:	b29b      	uxth	r3, r3
 8001042:	3b01      	subs	r3, #1
 8001044:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 8001046:	e00f      	b.n	8001068 <Paint_SetPixel+0x104>
    case MIRROR_ORIGIN:
        X = Paint.WidthMemory - X - 1;
 8001048:	4b6a      	ldr	r3, [pc, #424]	; (80011f4 <Paint_SetPixel+0x290>)
 800104a:	891a      	ldrh	r2, [r3, #8]
 800104c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800104e:	1ad3      	subs	r3, r2, r3
 8001050:	b29b      	uxth	r3, r3
 8001052:	3b01      	subs	r3, #1
 8001054:	84fb      	strh	r3, [r7, #38]	; 0x26
        Y = Paint.HeightMemory - Y - 1;
 8001056:	4b67      	ldr	r3, [pc, #412]	; (80011f4 <Paint_SetPixel+0x290>)
 8001058:	895a      	ldrh	r2, [r3, #10]
 800105a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800105c:	1ad3      	subs	r3, r2, r3
 800105e:	b29b      	uxth	r3, r3
 8001060:	3b01      	subs	r3, #1
 8001062:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 8001064:	e000      	b.n	8001068 <Paint_SetPixel+0x104>
        break;
 8001066:	bf00      	nop
    default:
        return;
    }

    if(X > Paint.WidthMemory || Y > Paint.HeightMemory){
 8001068:	4b62      	ldr	r3, [pc, #392]	; (80011f4 <Paint_SetPixel+0x290>)
 800106a:	891b      	ldrh	r3, [r3, #8]
 800106c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800106e:	429a      	cmp	r2, r3
 8001070:	d804      	bhi.n	800107c <Paint_SetPixel+0x118>
 8001072:	4b60      	ldr	r3, [pc, #384]	; (80011f4 <Paint_SetPixel+0x290>)
 8001074:	895b      	ldrh	r3, [r3, #10]
 8001076:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001078:	429a      	cmp	r2, r3
 800107a:	d903      	bls.n	8001084 <Paint_SetPixel+0x120>
        Debug("Exceeding display boundaries\r\n");
 800107c:	485e      	ldr	r0, [pc, #376]	; (80011f8 <Paint_SetPixel+0x294>)
 800107e:	f002 ff89 	bl	8003f94 <puts>
        return;
 8001082:	e0b4      	b.n	80011ee <Paint_SetPixel+0x28a>
    }
    
    if(Paint.Scale == 2){
 8001084:	4b5b      	ldr	r3, [pc, #364]	; (80011f4 <Paint_SetPixel+0x290>)
 8001086:	8adb      	ldrh	r3, [r3, #22]
 8001088:	2b02      	cmp	r3, #2
 800108a:	d139      	bne.n	8001100 <Paint_SetPixel+0x19c>
        UDOUBLE Addr = X / 8 + Y * Paint.WidthByte;
 800108c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800108e:	08db      	lsrs	r3, r3, #3
 8001090:	b29b      	uxth	r3, r3
 8001092:	4619      	mov	r1, r3
 8001094:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001096:	4a57      	ldr	r2, [pc, #348]	; (80011f4 <Paint_SetPixel+0x290>)
 8001098:	8a52      	ldrh	r2, [r2, #18]
 800109a:	fb02 f303 	mul.w	r3, r2, r3
 800109e:	440b      	add	r3, r1
 80010a0:	613b      	str	r3, [r7, #16]
        UBYTE Rdata = Paint.Image[Addr];
 80010a2:	4b54      	ldr	r3, [pc, #336]	; (80011f4 <Paint_SetPixel+0x290>)
 80010a4:	681a      	ldr	r2, [r3, #0]
 80010a6:	693b      	ldr	r3, [r7, #16]
 80010a8:	4413      	add	r3, r2
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	73fb      	strb	r3, [r7, #15]
        if(Color == BLACK)
 80010ae:	887b      	ldrh	r3, [r7, #2]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d113      	bne.n	80010dc <Paint_SetPixel+0x178>
            Paint.Image[Addr] = Rdata & ~(0x80 >> (X % 8));
 80010b4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80010b6:	f003 0307 	and.w	r3, r3, #7
 80010ba:	2280      	movs	r2, #128	; 0x80
 80010bc:	fa42 f303 	asr.w	r3, r2, r3
 80010c0:	b25b      	sxtb	r3, r3
 80010c2:	43db      	mvns	r3, r3
 80010c4:	b25a      	sxtb	r2, r3
 80010c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010ca:	4013      	ands	r3, r2
 80010cc:	b259      	sxtb	r1, r3
 80010ce:	4b49      	ldr	r3, [pc, #292]	; (80011f4 <Paint_SetPixel+0x290>)
 80010d0:	681a      	ldr	r2, [r3, #0]
 80010d2:	693b      	ldr	r3, [r7, #16]
 80010d4:	4413      	add	r3, r2
 80010d6:	b2ca      	uxtb	r2, r1
 80010d8:	701a      	strb	r2, [r3, #0]
 80010da:	e088      	b.n	80011ee <Paint_SetPixel+0x28a>
        else
            Paint.Image[Addr] = Rdata | (0x80 >> (X % 8));
 80010dc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80010de:	f003 0307 	and.w	r3, r3, #7
 80010e2:	2280      	movs	r2, #128	; 0x80
 80010e4:	fa42 f303 	asr.w	r3, r2, r3
 80010e8:	b25a      	sxtb	r2, r3
 80010ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010ee:	4313      	orrs	r3, r2
 80010f0:	b259      	sxtb	r1, r3
 80010f2:	4b40      	ldr	r3, [pc, #256]	; (80011f4 <Paint_SetPixel+0x290>)
 80010f4:	681a      	ldr	r2, [r3, #0]
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	4413      	add	r3, r2
 80010fa:	b2ca      	uxtb	r2, r1
 80010fc:	701a      	strb	r2, [r3, #0]
 80010fe:	e076      	b.n	80011ee <Paint_SetPixel+0x28a>
    }else if(Paint.Scale == 4){
 8001100:	4b3c      	ldr	r3, [pc, #240]	; (80011f4 <Paint_SetPixel+0x290>)
 8001102:	8adb      	ldrh	r3, [r3, #22]
 8001104:	2b04      	cmp	r3, #4
 8001106:	d137      	bne.n	8001178 <Paint_SetPixel+0x214>
        UDOUBLE Addr = X / 4 + Y * Paint.WidthByte;
 8001108:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800110a:	089b      	lsrs	r3, r3, #2
 800110c:	b29b      	uxth	r3, r3
 800110e:	4619      	mov	r1, r3
 8001110:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001112:	4a38      	ldr	r2, [pc, #224]	; (80011f4 <Paint_SetPixel+0x290>)
 8001114:	8a52      	ldrh	r2, [r2, #18]
 8001116:	fb02 f303 	mul.w	r3, r2, r3
 800111a:	440b      	add	r3, r1
 800111c:	61bb      	str	r3, [r7, #24]
        Color = Color % 4;//Guaranteed color scale is 4  --- 0~3
 800111e:	887b      	ldrh	r3, [r7, #2]
 8001120:	f003 0303 	and.w	r3, r3, #3
 8001124:	807b      	strh	r3, [r7, #2]
        UBYTE Rdata = Paint.Image[Addr];
 8001126:	4b33      	ldr	r3, [pc, #204]	; (80011f4 <Paint_SetPixel+0x290>)
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	69bb      	ldr	r3, [r7, #24]
 800112c:	4413      	add	r3, r2
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	75fb      	strb	r3, [r7, #23]
        
        Rdata = Rdata & (~(0xC0 >> ((X % 4)*2)));
 8001132:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001134:	f003 0303 	and.w	r3, r3, #3
 8001138:	005b      	lsls	r3, r3, #1
 800113a:	22c0      	movs	r2, #192	; 0xc0
 800113c:	fa42 f303 	asr.w	r3, r2, r3
 8001140:	b25b      	sxtb	r3, r3
 8001142:	43db      	mvns	r3, r3
 8001144:	b25a      	sxtb	r2, r3
 8001146:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800114a:	4013      	ands	r3, r2
 800114c:	b25b      	sxtb	r3, r3
 800114e:	75fb      	strb	r3, [r7, #23]
        Paint.Image[Addr] = Rdata | ((Color << 6) >> ((X % 4)*2));
 8001150:	887b      	ldrh	r3, [r7, #2]
 8001152:	019a      	lsls	r2, r3, #6
 8001154:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001156:	f003 0303 	and.w	r3, r3, #3
 800115a:	005b      	lsls	r3, r3, #1
 800115c:	fa42 f303 	asr.w	r3, r2, r3
 8001160:	b25a      	sxtb	r2, r3
 8001162:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001166:	4313      	orrs	r3, r2
 8001168:	b259      	sxtb	r1, r3
 800116a:	4b22      	ldr	r3, [pc, #136]	; (80011f4 <Paint_SetPixel+0x290>)
 800116c:	681a      	ldr	r2, [r3, #0]
 800116e:	69bb      	ldr	r3, [r7, #24]
 8001170:	4413      	add	r3, r2
 8001172:	b2ca      	uxtb	r2, r1
 8001174:	701a      	strb	r2, [r3, #0]
 8001176:	e03a      	b.n	80011ee <Paint_SetPixel+0x28a>
    }else if(Paint.Scale == 7){
 8001178:	4b1e      	ldr	r3, [pc, #120]	; (80011f4 <Paint_SetPixel+0x290>)
 800117a:	8adb      	ldrh	r3, [r3, #22]
 800117c:	2b07      	cmp	r3, #7
 800117e:	d136      	bne.n	80011ee <Paint_SetPixel+0x28a>
		UDOUBLE Addr = X / 2  + Y * Paint.WidthByte;
 8001180:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001182:	085b      	lsrs	r3, r3, #1
 8001184:	b29b      	uxth	r3, r3
 8001186:	4619      	mov	r1, r3
 8001188:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800118a:	4a1a      	ldr	r2, [pc, #104]	; (80011f4 <Paint_SetPixel+0x290>)
 800118c:	8a52      	ldrh	r2, [r2, #18]
 800118e:	fb02 f303 	mul.w	r3, r2, r3
 8001192:	440b      	add	r3, r1
 8001194:	623b      	str	r3, [r7, #32]
		UBYTE Rdata = Paint.Image[Addr];
 8001196:	4b17      	ldr	r3, [pc, #92]	; (80011f4 <Paint_SetPixel+0x290>)
 8001198:	681a      	ldr	r2, [r3, #0]
 800119a:	6a3b      	ldr	r3, [r7, #32]
 800119c:	4413      	add	r3, r2
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	77fb      	strb	r3, [r7, #31]
		Rdata = Rdata & (~(0xF0 >> ((X % 2)*4)));//Clear first, then set value
 80011a2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80011a4:	f003 0301 	and.w	r3, r3, #1
 80011a8:	009b      	lsls	r3, r3, #2
 80011aa:	22f0      	movs	r2, #240	; 0xf0
 80011ac:	fa42 f303 	asr.w	r3, r2, r3
 80011b0:	b25b      	sxtb	r3, r3
 80011b2:	43db      	mvns	r3, r3
 80011b4:	b25a      	sxtb	r2, r3
 80011b6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80011ba:	4013      	ands	r3, r2
 80011bc:	b25b      	sxtb	r3, r3
 80011be:	77fb      	strb	r3, [r7, #31]
		Paint.Image[Addr] = Rdata | ((Color << 4) >> ((X % 2)*4));
 80011c0:	887b      	ldrh	r3, [r7, #2]
 80011c2:	011a      	lsls	r2, r3, #4
 80011c4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80011c6:	f003 0301 	and.w	r3, r3, #1
 80011ca:	009b      	lsls	r3, r3, #2
 80011cc:	fa42 f303 	asr.w	r3, r2, r3
 80011d0:	b25a      	sxtb	r2, r3
 80011d2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80011d6:	4313      	orrs	r3, r2
 80011d8:	b259      	sxtb	r1, r3
 80011da:	4b06      	ldr	r3, [pc, #24]	; (80011f4 <Paint_SetPixel+0x290>)
 80011dc:	681a      	ldr	r2, [r3, #0]
 80011de:	6a3b      	ldr	r3, [r7, #32]
 80011e0:	4413      	add	r3, r2
 80011e2:	b2ca      	uxtb	r2, r1
 80011e4:	701a      	strb	r2, [r3, #0]
 80011e6:	e002      	b.n	80011ee <Paint_SetPixel+0x28a>
        return;
 80011e8:	bf00      	nop
 80011ea:	e000      	b.n	80011ee <Paint_SetPixel+0x28a>
        return;
 80011ec:	bf00      	nop
		//printf("Add =  %d ,data = %d\r\n",Addr,Rdata);
		}
}
 80011ee:	3728      	adds	r7, #40	; 0x28
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	200001f0 	.word	0x200001f0
 80011f8:	08004f98 	.word	0x08004f98

080011fc <Paint_Clear>:
function: Clear the color of the picture
parameter:
    Color : Painted colors
******************************************************************************/
void Paint_Clear(UWORD Color)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b087      	sub	sp, #28
 8001200:	af00      	add	r7, sp, #0
 8001202:	4603      	mov	r3, r0
 8001204:	80fb      	strh	r3, [r7, #6]
	if(Paint.Scale == 2 || Paint.Scale == 4){
 8001206:	4b32      	ldr	r3, [pc, #200]	; (80012d0 <Paint_Clear+0xd4>)
 8001208:	8adb      	ldrh	r3, [r3, #22]
 800120a:	2b02      	cmp	r3, #2
 800120c:	d003      	beq.n	8001216 <Paint_Clear+0x1a>
 800120e:	4b30      	ldr	r3, [pc, #192]	; (80012d0 <Paint_Clear+0xd4>)
 8001210:	8adb      	ldrh	r3, [r3, #22]
 8001212:	2b04      	cmp	r3, #4
 8001214:	d125      	bne.n	8001262 <Paint_Clear+0x66>
		for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 8001216:	2300      	movs	r3, #0
 8001218:	82fb      	strh	r3, [r7, #22]
 800121a:	e01c      	b.n	8001256 <Paint_Clear+0x5a>
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 800121c:	2300      	movs	r3, #0
 800121e:	82bb      	strh	r3, [r7, #20]
 8001220:	e011      	b.n	8001246 <Paint_Clear+0x4a>
				UDOUBLE Addr = X + Y*Paint.WidthByte;
 8001222:	8aba      	ldrh	r2, [r7, #20]
 8001224:	8afb      	ldrh	r3, [r7, #22]
 8001226:	492a      	ldr	r1, [pc, #168]	; (80012d0 <Paint_Clear+0xd4>)
 8001228:	8a49      	ldrh	r1, [r1, #18]
 800122a:	fb01 f303 	mul.w	r3, r1, r3
 800122e:	4413      	add	r3, r2
 8001230:	60bb      	str	r3, [r7, #8]
				Paint.Image[Addr] = Color;
 8001232:	4b27      	ldr	r3, [pc, #156]	; (80012d0 <Paint_Clear+0xd4>)
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	68bb      	ldr	r3, [r7, #8]
 8001238:	4413      	add	r3, r2
 800123a:	88fa      	ldrh	r2, [r7, #6]
 800123c:	b2d2      	uxtb	r2, r2
 800123e:	701a      	strb	r2, [r3, #0]
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 8001240:	8abb      	ldrh	r3, [r7, #20]
 8001242:	3301      	adds	r3, #1
 8001244:	82bb      	strh	r3, [r7, #20]
 8001246:	4b22      	ldr	r3, [pc, #136]	; (80012d0 <Paint_Clear+0xd4>)
 8001248:	8a5b      	ldrh	r3, [r3, #18]
 800124a:	8aba      	ldrh	r2, [r7, #20]
 800124c:	429a      	cmp	r2, r3
 800124e:	d3e8      	bcc.n	8001222 <Paint_Clear+0x26>
		for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 8001250:	8afb      	ldrh	r3, [r7, #22]
 8001252:	3301      	adds	r3, #1
 8001254:	82fb      	strh	r3, [r7, #22]
 8001256:	4b1e      	ldr	r3, [pc, #120]	; (80012d0 <Paint_Clear+0xd4>)
 8001258:	8a9b      	ldrh	r3, [r3, #20]
 800125a:	8afa      	ldrh	r2, [r7, #22]
 800125c:	429a      	cmp	r2, r3
 800125e:	d3dd      	bcc.n	800121c <Paint_Clear+0x20>
 8001260:	e02f      	b.n	80012c2 <Paint_Clear+0xc6>
			}
		}		
	}else if(Paint.Scale == 7){
 8001262:	4b1b      	ldr	r3, [pc, #108]	; (80012d0 <Paint_Clear+0xd4>)
 8001264:	8adb      	ldrh	r3, [r3, #22]
 8001266:	2b07      	cmp	r3, #7
 8001268:	d12b      	bne.n	80012c2 <Paint_Clear+0xc6>
		for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 800126a:	2300      	movs	r3, #0
 800126c:	827b      	strh	r3, [r7, #18]
 800126e:	e022      	b.n	80012b6 <Paint_Clear+0xba>
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {
 8001270:	2300      	movs	r3, #0
 8001272:	823b      	strh	r3, [r7, #16]
 8001274:	e017      	b.n	80012a6 <Paint_Clear+0xaa>
				UDOUBLE Addr = X + Y*Paint.WidthByte;
 8001276:	8a3a      	ldrh	r2, [r7, #16]
 8001278:	8a7b      	ldrh	r3, [r7, #18]
 800127a:	4915      	ldr	r1, [pc, #84]	; (80012d0 <Paint_Clear+0xd4>)
 800127c:	8a49      	ldrh	r1, [r1, #18]
 800127e:	fb01 f303 	mul.w	r3, r1, r3
 8001282:	4413      	add	r3, r2
 8001284:	60fb      	str	r3, [r7, #12]
				Paint.Image[Addr] = (Color<<4)|Color;
 8001286:	88fb      	ldrh	r3, [r7, #6]
 8001288:	011b      	lsls	r3, r3, #4
 800128a:	b25a      	sxtb	r2, r3
 800128c:	88fb      	ldrh	r3, [r7, #6]
 800128e:	b25b      	sxtb	r3, r3
 8001290:	4313      	orrs	r3, r2
 8001292:	b259      	sxtb	r1, r3
 8001294:	4b0e      	ldr	r3, [pc, #56]	; (80012d0 <Paint_Clear+0xd4>)
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	4413      	add	r3, r2
 800129c:	b2ca      	uxtb	r2, r1
 800129e:	701a      	strb	r2, [r3, #0]
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {
 80012a0:	8a3b      	ldrh	r3, [r7, #16]
 80012a2:	3301      	adds	r3, #1
 80012a4:	823b      	strh	r3, [r7, #16]
 80012a6:	4b0a      	ldr	r3, [pc, #40]	; (80012d0 <Paint_Clear+0xd4>)
 80012a8:	8a5b      	ldrh	r3, [r3, #18]
 80012aa:	8a3a      	ldrh	r2, [r7, #16]
 80012ac:	429a      	cmp	r2, r3
 80012ae:	d3e2      	bcc.n	8001276 <Paint_Clear+0x7a>
		for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 80012b0:	8a7b      	ldrh	r3, [r7, #18]
 80012b2:	3301      	adds	r3, #1
 80012b4:	827b      	strh	r3, [r7, #18]
 80012b6:	4b06      	ldr	r3, [pc, #24]	; (80012d0 <Paint_Clear+0xd4>)
 80012b8:	8a9b      	ldrh	r3, [r3, #20]
 80012ba:	8a7a      	ldrh	r2, [r7, #18]
 80012bc:	429a      	cmp	r2, r3
 80012be:	d3d7      	bcc.n	8001270 <Paint_Clear+0x74>
			}
		}		
	}
}
 80012c0:	e7ff      	b.n	80012c2 <Paint_Clear+0xc6>
 80012c2:	bf00      	nop
 80012c4:	371c      	adds	r7, #28
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	200001f0 	.word	0x200001f0

080012d4 <Paint_ClearWindows>:
    Xend   : x end point
    Yend   : y end point
    Color  : Painted colors
******************************************************************************/
void Paint_ClearWindows(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend, UWORD Color)
{
 80012d4:	b590      	push	{r4, r7, lr}
 80012d6:	b085      	sub	sp, #20
 80012d8:	af00      	add	r7, sp, #0
 80012da:	4604      	mov	r4, r0
 80012dc:	4608      	mov	r0, r1
 80012de:	4611      	mov	r1, r2
 80012e0:	461a      	mov	r2, r3
 80012e2:	4623      	mov	r3, r4
 80012e4:	80fb      	strh	r3, [r7, #6]
 80012e6:	4603      	mov	r3, r0
 80012e8:	80bb      	strh	r3, [r7, #4]
 80012ea:	460b      	mov	r3, r1
 80012ec:	807b      	strh	r3, [r7, #2]
 80012ee:	4613      	mov	r3, r2
 80012f0:	803b      	strh	r3, [r7, #0]
    UWORD X, Y;
    for (Y = Ystart; Y < Yend; Y++) {
 80012f2:	88bb      	ldrh	r3, [r7, #4]
 80012f4:	81bb      	strh	r3, [r7, #12]
 80012f6:	e012      	b.n	800131e <Paint_ClearWindows+0x4a>
        for (X = Xstart; X < Xend; X++) {//8 pixel =  1 byte
 80012f8:	88fb      	ldrh	r3, [r7, #6]
 80012fa:	81fb      	strh	r3, [r7, #14]
 80012fc:	e008      	b.n	8001310 <Paint_ClearWindows+0x3c>
            Paint_SetPixel(X, Y, Color);
 80012fe:	8c3a      	ldrh	r2, [r7, #32]
 8001300:	89b9      	ldrh	r1, [r7, #12]
 8001302:	89fb      	ldrh	r3, [r7, #14]
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff fe2d 	bl	8000f64 <Paint_SetPixel>
        for (X = Xstart; X < Xend; X++) {//8 pixel =  1 byte
 800130a:	89fb      	ldrh	r3, [r7, #14]
 800130c:	3301      	adds	r3, #1
 800130e:	81fb      	strh	r3, [r7, #14]
 8001310:	89fa      	ldrh	r2, [r7, #14]
 8001312:	887b      	ldrh	r3, [r7, #2]
 8001314:	429a      	cmp	r2, r3
 8001316:	d3f2      	bcc.n	80012fe <Paint_ClearWindows+0x2a>
    for (Y = Ystart; Y < Yend; Y++) {
 8001318:	89bb      	ldrh	r3, [r7, #12]
 800131a:	3301      	adds	r3, #1
 800131c:	81bb      	strh	r3, [r7, #12]
 800131e:	89ba      	ldrh	r2, [r7, #12]
 8001320:	883b      	ldrh	r3, [r7, #0]
 8001322:	429a      	cmp	r2, r3
 8001324:	d3e8      	bcc.n	80012f8 <Paint_ClearWindows+0x24>
        }
    }
}
 8001326:	bf00      	nop
 8001328:	bf00      	nop
 800132a:	3714      	adds	r7, #20
 800132c:	46bd      	mov	sp, r7
 800132e:	bd90      	pop	{r4, r7, pc}

08001330 <Paint_DrawPoint>:
    Dot_Pixel	: point size
    Dot_Style	: point Style
******************************************************************************/
void Paint_DrawPoint(UWORD Xpoint, UWORD Ypoint, UWORD Color,
                     DOT_PIXEL Dot_Pixel, DOT_STYLE Dot_Style)
{
 8001330:	b590      	push	{r4, r7, lr}
 8001332:	b085      	sub	sp, #20
 8001334:	af00      	add	r7, sp, #0
 8001336:	4604      	mov	r4, r0
 8001338:	4608      	mov	r0, r1
 800133a:	4611      	mov	r1, r2
 800133c:	461a      	mov	r2, r3
 800133e:	4623      	mov	r3, r4
 8001340:	80fb      	strh	r3, [r7, #6]
 8001342:	4603      	mov	r3, r0
 8001344:	80bb      	strh	r3, [r7, #4]
 8001346:	460b      	mov	r3, r1
 8001348:	807b      	strh	r3, [r7, #2]
 800134a:	4613      	mov	r3, r2
 800134c:	707b      	strb	r3, [r7, #1]
    if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 800134e:	4b4a      	ldr	r3, [pc, #296]	; (8001478 <Paint_DrawPoint+0x148>)
 8001350:	889b      	ldrh	r3, [r3, #4]
 8001352:	88fa      	ldrh	r2, [r7, #6]
 8001354:	429a      	cmp	r2, r3
 8001356:	d804      	bhi.n	8001362 <Paint_DrawPoint+0x32>
 8001358:	4b47      	ldr	r3, [pc, #284]	; (8001478 <Paint_DrawPoint+0x148>)
 800135a:	88db      	ldrh	r3, [r3, #6]
 800135c:	88ba      	ldrh	r2, [r7, #4]
 800135e:	429a      	cmp	r2, r3
 8001360:	d911      	bls.n	8001386 <Paint_DrawPoint+0x56>
        Debug("Paint_DrawPoint Input exceeds the normal display range\r\n");
 8001362:	4846      	ldr	r0, [pc, #280]	; (800147c <Paint_DrawPoint+0x14c>)
 8001364:	f002 fe16 	bl	8003f94 <puts>
				printf("Xpoint = %d , Paint.Width = %d  \r\n ",Xpoint,Paint.Width);
 8001368:	88fb      	ldrh	r3, [r7, #6]
 800136a:	4a43      	ldr	r2, [pc, #268]	; (8001478 <Paint_DrawPoint+0x148>)
 800136c:	8892      	ldrh	r2, [r2, #4]
 800136e:	4619      	mov	r1, r3
 8001370:	4843      	ldr	r0, [pc, #268]	; (8001480 <Paint_DrawPoint+0x150>)
 8001372:	f002 fd89 	bl	8003e88 <iprintf>
				printf("Ypoint = %d , Paint.Height = %d  \r\n ",Ypoint,Paint.Height);
 8001376:	88bb      	ldrh	r3, [r7, #4]
 8001378:	4a3f      	ldr	r2, [pc, #252]	; (8001478 <Paint_DrawPoint+0x148>)
 800137a:	88d2      	ldrh	r2, [r2, #6]
 800137c:	4619      	mov	r1, r3
 800137e:	4841      	ldr	r0, [pc, #260]	; (8001484 <Paint_DrawPoint+0x154>)
 8001380:	f002 fd82 	bl	8003e88 <iprintf>
        return;
 8001384:	e074      	b.n	8001470 <Paint_DrawPoint+0x140>
    }

    int16_t XDir_Num , YDir_Num;
    if (Dot_Style == DOT_FILL_AROUND) {
 8001386:	f897 3020 	ldrb.w	r3, [r7, #32]
 800138a:	2b01      	cmp	r3, #1
 800138c:	d144      	bne.n	8001418 <Paint_DrawPoint+0xe8>
        for (XDir_Num = 0; XDir_Num < 2 * Dot_Pixel - 1; XDir_Num++) {
 800138e:	2300      	movs	r3, #0
 8001390:	81fb      	strh	r3, [r7, #14]
 8001392:	e039      	b.n	8001408 <Paint_DrawPoint+0xd8>
            for (YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++) {
 8001394:	2300      	movs	r3, #0
 8001396:	81bb      	strh	r3, [r7, #12]
 8001398:	e029      	b.n	80013ee <Paint_DrawPoint+0xbe>
                if(Xpoint + XDir_Num - Dot_Pixel < 0 || Ypoint + YDir_Num - Dot_Pixel < 0)
 800139a:	88fa      	ldrh	r2, [r7, #6]
 800139c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80013a0:	441a      	add	r2, r3
 80013a2:	787b      	ldrb	r3, [r7, #1]
 80013a4:	1ad3      	subs	r3, r2, r3
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	db28      	blt.n	80013fc <Paint_DrawPoint+0xcc>
 80013aa:	88ba      	ldrh	r2, [r7, #4]
 80013ac:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80013b0:	441a      	add	r2, r3
 80013b2:	787b      	ldrb	r3, [r7, #1]
 80013b4:	1ad3      	subs	r3, r2, r3
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	db20      	blt.n	80013fc <Paint_DrawPoint+0xcc>
                    break;
                // printf("x = %d, y = %d\r\n", Xpoint + XDir_Num - Dot_Pixel, Ypoint + YDir_Num - Dot_Pixel);
                Paint_SetPixel(Xpoint + XDir_Num - Dot_Pixel, Ypoint + YDir_Num - Dot_Pixel, Color);
 80013ba:	89fa      	ldrh	r2, [r7, #14]
 80013bc:	88fb      	ldrh	r3, [r7, #6]
 80013be:	4413      	add	r3, r2
 80013c0:	b29a      	uxth	r2, r3
 80013c2:	787b      	ldrb	r3, [r7, #1]
 80013c4:	b29b      	uxth	r3, r3
 80013c6:	1ad3      	subs	r3, r2, r3
 80013c8:	b298      	uxth	r0, r3
 80013ca:	89ba      	ldrh	r2, [r7, #12]
 80013cc:	88bb      	ldrh	r3, [r7, #4]
 80013ce:	4413      	add	r3, r2
 80013d0:	b29a      	uxth	r2, r3
 80013d2:	787b      	ldrb	r3, [r7, #1]
 80013d4:	b29b      	uxth	r3, r3
 80013d6:	1ad3      	subs	r3, r2, r3
 80013d8:	b29b      	uxth	r3, r3
 80013da:	887a      	ldrh	r2, [r7, #2]
 80013dc:	4619      	mov	r1, r3
 80013de:	f7ff fdc1 	bl	8000f64 <Paint_SetPixel>
            for (YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++) {
 80013e2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80013e6:	b29b      	uxth	r3, r3
 80013e8:	3301      	adds	r3, #1
 80013ea:	b29b      	uxth	r3, r3
 80013ec:	81bb      	strh	r3, [r7, #12]
 80013ee:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80013f2:	787b      	ldrb	r3, [r7, #1]
 80013f4:	005b      	lsls	r3, r3, #1
 80013f6:	3b01      	subs	r3, #1
 80013f8:	429a      	cmp	r2, r3
 80013fa:	dbce      	blt.n	800139a <Paint_DrawPoint+0x6a>
        for (XDir_Num = 0; XDir_Num < 2 * Dot_Pixel - 1; XDir_Num++) {
 80013fc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001400:	b29b      	uxth	r3, r3
 8001402:	3301      	adds	r3, #1
 8001404:	b29b      	uxth	r3, r3
 8001406:	81fb      	strh	r3, [r7, #14]
 8001408:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800140c:	787b      	ldrb	r3, [r7, #1]
 800140e:	005b      	lsls	r3, r3, #1
 8001410:	3b01      	subs	r3, #1
 8001412:	429a      	cmp	r2, r3
 8001414:	dbbe      	blt.n	8001394 <Paint_DrawPoint+0x64>
 8001416:	e02b      	b.n	8001470 <Paint_DrawPoint+0x140>
            }
        }
    } else {
        for (XDir_Num = 0; XDir_Num <  Dot_Pixel; XDir_Num++) {
 8001418:	2300      	movs	r3, #0
 800141a:	81fb      	strh	r3, [r7, #14]
 800141c:	e023      	b.n	8001466 <Paint_DrawPoint+0x136>
            for (YDir_Num = 0; YDir_Num <  Dot_Pixel; YDir_Num++) {
 800141e:	2300      	movs	r3, #0
 8001420:	81bb      	strh	r3, [r7, #12]
 8001422:	e015      	b.n	8001450 <Paint_DrawPoint+0x120>
                Paint_SetPixel(Xpoint + XDir_Num - 1, Ypoint + YDir_Num - 1, Color);
 8001424:	89fa      	ldrh	r2, [r7, #14]
 8001426:	88fb      	ldrh	r3, [r7, #6]
 8001428:	4413      	add	r3, r2
 800142a:	b29b      	uxth	r3, r3
 800142c:	3b01      	subs	r3, #1
 800142e:	b298      	uxth	r0, r3
 8001430:	89ba      	ldrh	r2, [r7, #12]
 8001432:	88bb      	ldrh	r3, [r7, #4]
 8001434:	4413      	add	r3, r2
 8001436:	b29b      	uxth	r3, r3
 8001438:	3b01      	subs	r3, #1
 800143a:	b29b      	uxth	r3, r3
 800143c:	887a      	ldrh	r2, [r7, #2]
 800143e:	4619      	mov	r1, r3
 8001440:	f7ff fd90 	bl	8000f64 <Paint_SetPixel>
            for (YDir_Num = 0; YDir_Num <  Dot_Pixel; YDir_Num++) {
 8001444:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001448:	b29b      	uxth	r3, r3
 800144a:	3301      	adds	r3, #1
 800144c:	b29b      	uxth	r3, r3
 800144e:	81bb      	strh	r3, [r7, #12]
 8001450:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001454:	787b      	ldrb	r3, [r7, #1]
 8001456:	429a      	cmp	r2, r3
 8001458:	dbe4      	blt.n	8001424 <Paint_DrawPoint+0xf4>
        for (XDir_Num = 0; XDir_Num <  Dot_Pixel; XDir_Num++) {
 800145a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800145e:	b29b      	uxth	r3, r3
 8001460:	3301      	adds	r3, #1
 8001462:	b29b      	uxth	r3, r3
 8001464:	81fb      	strh	r3, [r7, #14]
 8001466:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800146a:	787b      	ldrb	r3, [r7, #1]
 800146c:	429a      	cmp	r2, r3
 800146e:	dbd6      	blt.n	800141e <Paint_DrawPoint+0xee>
            }
        }
    }
}
 8001470:	3714      	adds	r7, #20
 8001472:	46bd      	mov	sp, r7
 8001474:	bd90      	pop	{r4, r7, pc}
 8001476:	bf00      	nop
 8001478:	200001f0 	.word	0x200001f0
 800147c:	08004fc0 	.word	0x08004fc0
 8001480:	08005000 	.word	0x08005000
 8001484:	08005024 	.word	0x08005024

08001488 <Paint_DrawLine>:
    Line_width : Line width
    Line_Style: Solid and dotted lines
******************************************************************************/
void Paint_DrawLine(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend,
                    UWORD Color, DOT_PIXEL Line_width, LINE_STYLE Line_Style)
{
 8001488:	b590      	push	{r4, r7, lr}
 800148a:	b08d      	sub	sp, #52	; 0x34
 800148c:	af02      	add	r7, sp, #8
 800148e:	4604      	mov	r4, r0
 8001490:	4608      	mov	r0, r1
 8001492:	4611      	mov	r1, r2
 8001494:	461a      	mov	r2, r3
 8001496:	4623      	mov	r3, r4
 8001498:	80fb      	strh	r3, [r7, #6]
 800149a:	4603      	mov	r3, r0
 800149c:	80bb      	strh	r3, [r7, #4]
 800149e:	460b      	mov	r3, r1
 80014a0:	807b      	strh	r3, [r7, #2]
 80014a2:	4613      	mov	r3, r2
 80014a4:	803b      	strh	r3, [r7, #0]
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 80014a6:	4b4b      	ldr	r3, [pc, #300]	; (80015d4 <Paint_DrawLine+0x14c>)
 80014a8:	889b      	ldrh	r3, [r3, #4]
 80014aa:	88fa      	ldrh	r2, [r7, #6]
 80014ac:	429a      	cmp	r2, r3
 80014ae:	d80e      	bhi.n	80014ce <Paint_DrawLine+0x46>
 80014b0:	4b48      	ldr	r3, [pc, #288]	; (80015d4 <Paint_DrawLine+0x14c>)
 80014b2:	88db      	ldrh	r3, [r3, #6]
 80014b4:	88ba      	ldrh	r2, [r7, #4]
 80014b6:	429a      	cmp	r2, r3
 80014b8:	d809      	bhi.n	80014ce <Paint_DrawLine+0x46>
        Xend > Paint.Width || Yend > Paint.Height) {
 80014ba:	4b46      	ldr	r3, [pc, #280]	; (80015d4 <Paint_DrawLine+0x14c>)
 80014bc:	889b      	ldrh	r3, [r3, #4]
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 80014be:	887a      	ldrh	r2, [r7, #2]
 80014c0:	429a      	cmp	r2, r3
 80014c2:	d804      	bhi.n	80014ce <Paint_DrawLine+0x46>
        Xend > Paint.Width || Yend > Paint.Height) {
 80014c4:	4b43      	ldr	r3, [pc, #268]	; (80015d4 <Paint_DrawLine+0x14c>)
 80014c6:	88db      	ldrh	r3, [r3, #6]
 80014c8:	883a      	ldrh	r2, [r7, #0]
 80014ca:	429a      	cmp	r2, r3
 80014cc:	d903      	bls.n	80014d6 <Paint_DrawLine+0x4e>
        Debug("Paint_DrawLine Input exceeds the normal display range\r\n");
 80014ce:	4842      	ldr	r0, [pc, #264]	; (80015d8 <Paint_DrawLine+0x150>)
 80014d0:	f002 fd60 	bl	8003f94 <puts>
        return;
 80014d4:	e07a      	b.n	80015cc <Paint_DrawLine+0x144>
    }

    UWORD Xpoint = Xstart;
 80014d6:	88fb      	ldrh	r3, [r7, #6]
 80014d8:	84fb      	strh	r3, [r7, #38]	; 0x26
    UWORD Ypoint = Ystart;
 80014da:	88bb      	ldrh	r3, [r7, #4]
 80014dc:	84bb      	strh	r3, [r7, #36]	; 0x24
    int dx = (int)Xend - (int)Xstart >= 0 ? Xend - Xstart : Xstart - Xend;
 80014de:	887a      	ldrh	r2, [r7, #2]
 80014e0:	88fb      	ldrh	r3, [r7, #6]
 80014e2:	1ad3      	subs	r3, r2, r3
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	bfb8      	it	lt
 80014e8:	425b      	neglt	r3, r3
 80014ea:	61bb      	str	r3, [r7, #24]
    int dy = (int)Yend - (int)Ystart <= 0 ? Yend - Ystart : Ystart - Yend;
 80014ec:	883a      	ldrh	r2, [r7, #0]
 80014ee:	88bb      	ldrh	r3, [r7, #4]
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	bfb8      	it	lt
 80014f6:	425b      	neglt	r3, r3
 80014f8:	425b      	negs	r3, r3
 80014fa:	617b      	str	r3, [r7, #20]

    // Increment direction, 1 is positive, -1 is counter;
    int XAddway = Xstart < Xend ? 1 : -1;
 80014fc:	88fa      	ldrh	r2, [r7, #6]
 80014fe:	887b      	ldrh	r3, [r7, #2]
 8001500:	429a      	cmp	r2, r3
 8001502:	d201      	bcs.n	8001508 <Paint_DrawLine+0x80>
 8001504:	2301      	movs	r3, #1
 8001506:	e001      	b.n	800150c <Paint_DrawLine+0x84>
 8001508:	f04f 33ff 	mov.w	r3, #4294967295
 800150c:	613b      	str	r3, [r7, #16]
    int YAddway = Ystart < Yend ? 1 : -1;
 800150e:	88ba      	ldrh	r2, [r7, #4]
 8001510:	883b      	ldrh	r3, [r7, #0]
 8001512:	429a      	cmp	r2, r3
 8001514:	d201      	bcs.n	800151a <Paint_DrawLine+0x92>
 8001516:	2301      	movs	r3, #1
 8001518:	e001      	b.n	800151e <Paint_DrawLine+0x96>
 800151a:	f04f 33ff 	mov.w	r3, #4294967295
 800151e:	60fb      	str	r3, [r7, #12]

    //Cumulative error
    int Esp = dx + dy;
 8001520:	69ba      	ldr	r2, [r7, #24]
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	4413      	add	r3, r2
 8001526:	623b      	str	r3, [r7, #32]
    char Dotted_Len = 0;
 8001528:	2300      	movs	r3, #0
 800152a:	77fb      	strb	r3, [r7, #31]

    for (;;) {
        Dotted_Len++;
 800152c:	7ffb      	ldrb	r3, [r7, #31]
 800152e:	3301      	adds	r3, #1
 8001530:	77fb      	strb	r3, [r7, #31]
        //Painted dotted line, 2 point is really virtual
        if (Line_Style == LINE_STYLE_DOTTED && Dotted_Len % 3 == 0) {
 8001532:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8001536:	2b01      	cmp	r3, #1
 8001538:	d117      	bne.n	800156a <Paint_DrawLine+0xe2>
 800153a:	7ffa      	ldrb	r2, [r7, #31]
 800153c:	4b27      	ldr	r3, [pc, #156]	; (80015dc <Paint_DrawLine+0x154>)
 800153e:	fba3 1302 	umull	r1, r3, r3, r2
 8001542:	0859      	lsrs	r1, r3, #1
 8001544:	460b      	mov	r3, r1
 8001546:	005b      	lsls	r3, r3, #1
 8001548:	440b      	add	r3, r1
 800154a:	1ad3      	subs	r3, r2, r3
 800154c:	b2db      	uxtb	r3, r3
 800154e:	2b00      	cmp	r3, #0
 8001550:	d10b      	bne.n	800156a <Paint_DrawLine+0xe2>
            //Debug("LINE_DOTTED\r\n");
            Paint_DrawPoint(Xpoint, Ypoint, IMAGE_BACKGROUND, Line_width, DOT_STYLE_DFT);
 8001552:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001556:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8001558:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 800155a:	2201      	movs	r2, #1
 800155c:	9200      	str	r2, [sp, #0]
 800155e:	22ff      	movs	r2, #255	; 0xff
 8001560:	f7ff fee6 	bl	8001330 <Paint_DrawPoint>
            Dotted_Len = 0;
 8001564:	2300      	movs	r3, #0
 8001566:	77fb      	strb	r3, [r7, #31]
 8001568:	e008      	b.n	800157c <Paint_DrawLine+0xf4>
        } else {
            Paint_DrawPoint(Xpoint, Ypoint, Color, Line_width, DOT_STYLE_DFT);
 800156a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800156e:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8001570:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8001572:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8001574:	2401      	movs	r4, #1
 8001576:	9400      	str	r4, [sp, #0]
 8001578:	f7ff feda 	bl	8001330 <Paint_DrawPoint>
        }
        if (2 * Esp >= dy) {
 800157c:	6a3b      	ldr	r3, [r7, #32]
 800157e:	005b      	lsls	r3, r3, #1
 8001580:	697a      	ldr	r2, [r7, #20]
 8001582:	429a      	cmp	r2, r3
 8001584:	dc0c      	bgt.n	80015a0 <Paint_DrawLine+0x118>
            if (Xpoint == Xend)
 8001586:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001588:	887b      	ldrh	r3, [r7, #2]
 800158a:	429a      	cmp	r2, r3
 800158c:	d01b      	beq.n	80015c6 <Paint_DrawLine+0x13e>
                break;
            Esp += dy;
 800158e:	6a3a      	ldr	r2, [r7, #32]
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	4413      	add	r3, r2
 8001594:	623b      	str	r3, [r7, #32]
            Xpoint += XAddway;
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	b29a      	uxth	r2, r3
 800159a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800159c:	4413      	add	r3, r2
 800159e:	84fb      	strh	r3, [r7, #38]	; 0x26
        }
        if (2 * Esp <= dx) {
 80015a0:	6a3b      	ldr	r3, [r7, #32]
 80015a2:	005b      	lsls	r3, r3, #1
 80015a4:	69ba      	ldr	r2, [r7, #24]
 80015a6:	429a      	cmp	r2, r3
 80015a8:	dbc0      	blt.n	800152c <Paint_DrawLine+0xa4>
            if (Ypoint == Yend)
 80015aa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80015ac:	883b      	ldrh	r3, [r7, #0]
 80015ae:	429a      	cmp	r2, r3
 80015b0:	d00b      	beq.n	80015ca <Paint_DrawLine+0x142>
                break;
            Esp += dx;
 80015b2:	6a3a      	ldr	r2, [r7, #32]
 80015b4:	69bb      	ldr	r3, [r7, #24]
 80015b6:	4413      	add	r3, r2
 80015b8:	623b      	str	r3, [r7, #32]
            Ypoint += YAddway;
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	b29a      	uxth	r2, r3
 80015be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80015c0:	4413      	add	r3, r2
 80015c2:	84bb      	strh	r3, [r7, #36]	; 0x24
        Dotted_Len++;
 80015c4:	e7b2      	b.n	800152c <Paint_DrawLine+0xa4>
                break;
 80015c6:	bf00      	nop
 80015c8:	e000      	b.n	80015cc <Paint_DrawLine+0x144>
                break;
 80015ca:	bf00      	nop
        }
    }
}
 80015cc:	372c      	adds	r7, #44	; 0x2c
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd90      	pop	{r4, r7, pc}
 80015d2:	bf00      	nop
 80015d4:	200001f0 	.word	0x200001f0
 80015d8:	0800504c 	.word	0x0800504c
 80015dc:	aaaaaaab 	.word	0xaaaaaaab

080015e0 <Paint_DrawRectangle>:
    Line_width: Line width
    Draw_Fill : Whether to fill the inside of the rectangle
******************************************************************************/
void Paint_DrawRectangle(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend,
                         UWORD Color, DOT_PIXEL Line_width, DRAW_FILL Draw_Fill)
{
 80015e0:	b590      	push	{r4, r7, lr}
 80015e2:	b089      	sub	sp, #36	; 0x24
 80015e4:	af04      	add	r7, sp, #16
 80015e6:	4604      	mov	r4, r0
 80015e8:	4608      	mov	r0, r1
 80015ea:	4611      	mov	r1, r2
 80015ec:	461a      	mov	r2, r3
 80015ee:	4623      	mov	r3, r4
 80015f0:	80fb      	strh	r3, [r7, #6]
 80015f2:	4603      	mov	r3, r0
 80015f4:	80bb      	strh	r3, [r7, #4]
 80015f6:	460b      	mov	r3, r1
 80015f8:	807b      	strh	r3, [r7, #2]
 80015fa:	4613      	mov	r3, r2
 80015fc:	803b      	strh	r3, [r7, #0]
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 80015fe:	4b38      	ldr	r3, [pc, #224]	; (80016e0 <Paint_DrawRectangle+0x100>)
 8001600:	889b      	ldrh	r3, [r3, #4]
 8001602:	88fa      	ldrh	r2, [r7, #6]
 8001604:	429a      	cmp	r2, r3
 8001606:	d80e      	bhi.n	8001626 <Paint_DrawRectangle+0x46>
 8001608:	4b35      	ldr	r3, [pc, #212]	; (80016e0 <Paint_DrawRectangle+0x100>)
 800160a:	88db      	ldrh	r3, [r3, #6]
 800160c:	88ba      	ldrh	r2, [r7, #4]
 800160e:	429a      	cmp	r2, r3
 8001610:	d809      	bhi.n	8001626 <Paint_DrawRectangle+0x46>
        Xend > Paint.Width || Yend > Paint.Height) {
 8001612:	4b33      	ldr	r3, [pc, #204]	; (80016e0 <Paint_DrawRectangle+0x100>)
 8001614:	889b      	ldrh	r3, [r3, #4]
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 8001616:	887a      	ldrh	r2, [r7, #2]
 8001618:	429a      	cmp	r2, r3
 800161a:	d804      	bhi.n	8001626 <Paint_DrawRectangle+0x46>
        Xend > Paint.Width || Yend > Paint.Height) {
 800161c:	4b30      	ldr	r3, [pc, #192]	; (80016e0 <Paint_DrawRectangle+0x100>)
 800161e:	88db      	ldrh	r3, [r3, #6]
 8001620:	883a      	ldrh	r2, [r7, #0]
 8001622:	429a      	cmp	r2, r3
 8001624:	d903      	bls.n	800162e <Paint_DrawRectangle+0x4e>
        Debug("Input exceeds the normal display range\r\n");
 8001626:	482f      	ldr	r0, [pc, #188]	; (80016e4 <Paint_DrawRectangle+0x104>)
 8001628:	f002 fcb4 	bl	8003f94 <puts>
        return;
 800162c:	e054      	b.n	80016d8 <Paint_DrawRectangle+0xf8>
    }

    if (Draw_Fill) {
 800162e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001632:	2b00      	cmp	r3, #0
 8001634:	d018      	beq.n	8001668 <Paint_DrawRectangle+0x88>
        UWORD Ypoint;
        for(Ypoint = Ystart; Ypoint < Yend; Ypoint++) {
 8001636:	88bb      	ldrh	r3, [r7, #4]
 8001638:	81fb      	strh	r3, [r7, #14]
 800163a:	e010      	b.n	800165e <Paint_DrawRectangle+0x7e>
            Paint_DrawLine(Xstart, Ypoint, Xend, Ypoint, Color , Line_width, LINE_STYLE_SOLID);
 800163c:	89fc      	ldrh	r4, [r7, #14]
 800163e:	887a      	ldrh	r2, [r7, #2]
 8001640:	89f9      	ldrh	r1, [r7, #14]
 8001642:	88f8      	ldrh	r0, [r7, #6]
 8001644:	2300      	movs	r3, #0
 8001646:	9302      	str	r3, [sp, #8]
 8001648:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800164c:	9301      	str	r3, [sp, #4]
 800164e:	8c3b      	ldrh	r3, [r7, #32]
 8001650:	9300      	str	r3, [sp, #0]
 8001652:	4623      	mov	r3, r4
 8001654:	f7ff ff18 	bl	8001488 <Paint_DrawLine>
        for(Ypoint = Ystart; Ypoint < Yend; Ypoint++) {
 8001658:	89fb      	ldrh	r3, [r7, #14]
 800165a:	3301      	adds	r3, #1
 800165c:	81fb      	strh	r3, [r7, #14]
 800165e:	89fa      	ldrh	r2, [r7, #14]
 8001660:	883b      	ldrh	r3, [r7, #0]
 8001662:	429a      	cmp	r2, r3
 8001664:	d3ea      	bcc.n	800163c <Paint_DrawRectangle+0x5c>
 8001666:	e037      	b.n	80016d8 <Paint_DrawRectangle+0xf8>
        }
    } else {
        Paint_DrawLine(Xstart, Ystart, Xend, Ystart, Color, Line_width, LINE_STYLE_SOLID);
 8001668:	88bc      	ldrh	r4, [r7, #4]
 800166a:	887a      	ldrh	r2, [r7, #2]
 800166c:	88b9      	ldrh	r1, [r7, #4]
 800166e:	88f8      	ldrh	r0, [r7, #6]
 8001670:	2300      	movs	r3, #0
 8001672:	9302      	str	r3, [sp, #8]
 8001674:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001678:	9301      	str	r3, [sp, #4]
 800167a:	8c3b      	ldrh	r3, [r7, #32]
 800167c:	9300      	str	r3, [sp, #0]
 800167e:	4623      	mov	r3, r4
 8001680:	f7ff ff02 	bl	8001488 <Paint_DrawLine>
        Paint_DrawLine(Xstart, Ystart, Xstart, Yend, Color, Line_width, LINE_STYLE_SOLID);
 8001684:	883c      	ldrh	r4, [r7, #0]
 8001686:	88fa      	ldrh	r2, [r7, #6]
 8001688:	88b9      	ldrh	r1, [r7, #4]
 800168a:	88f8      	ldrh	r0, [r7, #6]
 800168c:	2300      	movs	r3, #0
 800168e:	9302      	str	r3, [sp, #8]
 8001690:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001694:	9301      	str	r3, [sp, #4]
 8001696:	8c3b      	ldrh	r3, [r7, #32]
 8001698:	9300      	str	r3, [sp, #0]
 800169a:	4623      	mov	r3, r4
 800169c:	f7ff fef4 	bl	8001488 <Paint_DrawLine>
        Paint_DrawLine(Xend, Yend, Xend, Ystart, Color, Line_width, LINE_STYLE_SOLID);
 80016a0:	88bc      	ldrh	r4, [r7, #4]
 80016a2:	887a      	ldrh	r2, [r7, #2]
 80016a4:	8839      	ldrh	r1, [r7, #0]
 80016a6:	8878      	ldrh	r0, [r7, #2]
 80016a8:	2300      	movs	r3, #0
 80016aa:	9302      	str	r3, [sp, #8]
 80016ac:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80016b0:	9301      	str	r3, [sp, #4]
 80016b2:	8c3b      	ldrh	r3, [r7, #32]
 80016b4:	9300      	str	r3, [sp, #0]
 80016b6:	4623      	mov	r3, r4
 80016b8:	f7ff fee6 	bl	8001488 <Paint_DrawLine>
        Paint_DrawLine(Xend, Yend, Xstart, Yend, Color, Line_width, LINE_STYLE_SOLID);
 80016bc:	883c      	ldrh	r4, [r7, #0]
 80016be:	88fa      	ldrh	r2, [r7, #6]
 80016c0:	8839      	ldrh	r1, [r7, #0]
 80016c2:	8878      	ldrh	r0, [r7, #2]
 80016c4:	2300      	movs	r3, #0
 80016c6:	9302      	str	r3, [sp, #8]
 80016c8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80016cc:	9301      	str	r3, [sp, #4]
 80016ce:	8c3b      	ldrh	r3, [r7, #32]
 80016d0:	9300      	str	r3, [sp, #0]
 80016d2:	4623      	mov	r3, r4
 80016d4:	f7ff fed8 	bl	8001488 <Paint_DrawLine>
    }
}
 80016d8:	3714      	adds	r7, #20
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd90      	pop	{r4, r7, pc}
 80016de:	bf00      	nop
 80016e0:	200001f0 	.word	0x200001f0
 80016e4:	0800508c 	.word	0x0800508c

080016e8 <Paint_DrawCircle>:
    Line_width: Line width
    Draw_Fill : Whether to fill the inside of the Circle
******************************************************************************/
void Paint_DrawCircle(UWORD X_Center, UWORD Y_Center, UWORD Radius,
                      UWORD Color, DOT_PIXEL Line_width, DRAW_FILL Draw_Fill)
{
 80016e8:	b590      	push	{r4, r7, lr}
 80016ea:	b087      	sub	sp, #28
 80016ec:	af02      	add	r7, sp, #8
 80016ee:	4604      	mov	r4, r0
 80016f0:	4608      	mov	r0, r1
 80016f2:	4611      	mov	r1, r2
 80016f4:	461a      	mov	r2, r3
 80016f6:	4623      	mov	r3, r4
 80016f8:	80fb      	strh	r3, [r7, #6]
 80016fa:	4603      	mov	r3, r0
 80016fc:	80bb      	strh	r3, [r7, #4]
 80016fe:	460b      	mov	r3, r1
 8001700:	807b      	strh	r3, [r7, #2]
 8001702:	4613      	mov	r3, r2
 8001704:	803b      	strh	r3, [r7, #0]
    if (X_Center > Paint.Width || Y_Center >= Paint.Height) {
 8001706:	4b67      	ldr	r3, [pc, #412]	; (80018a4 <Paint_DrawCircle+0x1bc>)
 8001708:	889b      	ldrh	r3, [r3, #4]
 800170a:	88fa      	ldrh	r2, [r7, #6]
 800170c:	429a      	cmp	r2, r3
 800170e:	d804      	bhi.n	800171a <Paint_DrawCircle+0x32>
 8001710:	4b64      	ldr	r3, [pc, #400]	; (80018a4 <Paint_DrawCircle+0x1bc>)
 8001712:	88db      	ldrh	r3, [r3, #6]
 8001714:	88ba      	ldrh	r2, [r7, #4]
 8001716:	429a      	cmp	r2, r3
 8001718:	d303      	bcc.n	8001722 <Paint_DrawCircle+0x3a>
        Debug("Paint_DrawCircle Input exceeds the normal display range\r\n");
 800171a:	4863      	ldr	r0, [pc, #396]	; (80018a8 <Paint_DrawCircle+0x1c0>)
 800171c:	f002 fc3a 	bl	8003f94 <puts>
        return;
 8001720:	e16b      	b.n	80019fa <Paint_DrawCircle+0x312>
    }

    //Draw a circle from(0, R) as a starting point
    int16_t XCurrent, YCurrent;
    XCurrent = 0;
 8001722:	2300      	movs	r3, #0
 8001724:	81fb      	strh	r3, [r7, #14]
    YCurrent = Radius;
 8001726:	887b      	ldrh	r3, [r7, #2]
 8001728:	81bb      	strh	r3, [r7, #12]

    //Cumulative error,judge the next point of the logo
    int16_t Esp = 3 - (Radius << 1 );
 800172a:	887b      	ldrh	r3, [r7, #2]
 800172c:	005b      	lsls	r3, r3, #1
 800172e:	b29b      	uxth	r3, r3
 8001730:	f1c3 0303 	rsb	r3, r3, #3
 8001734:	b29b      	uxth	r3, r3
 8001736:	817b      	strh	r3, [r7, #10]

    int16_t sCountY;
    if (Draw_Fill == DRAW_FILL_FULL) {
 8001738:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800173c:	2b01      	cmp	r3, #1
 800173e:	f040 8155 	bne.w	80019ec <Paint_DrawCircle+0x304>
        while (XCurrent <= YCurrent ) { //Realistic circles
 8001742:	e0a6      	b.n	8001892 <Paint_DrawCircle+0x1aa>
            for (sCountY = XCurrent; sCountY <= YCurrent; sCountY ++ ) {
 8001744:	89fb      	ldrh	r3, [r7, #14]
 8001746:	813b      	strh	r3, [r7, #8]
 8001748:	e075      	b.n	8001836 <Paint_DrawCircle+0x14e>
                Paint_DrawPoint(X_Center + XCurrent, Y_Center + sCountY, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//1
 800174a:	89fa      	ldrh	r2, [r7, #14]
 800174c:	88fb      	ldrh	r3, [r7, #6]
 800174e:	4413      	add	r3, r2
 8001750:	b298      	uxth	r0, r3
 8001752:	893a      	ldrh	r2, [r7, #8]
 8001754:	88bb      	ldrh	r3, [r7, #4]
 8001756:	4413      	add	r3, r2
 8001758:	b299      	uxth	r1, r3
 800175a:	883a      	ldrh	r2, [r7, #0]
 800175c:	2301      	movs	r3, #1
 800175e:	9300      	str	r3, [sp, #0]
 8001760:	2301      	movs	r3, #1
 8001762:	f7ff fde5 	bl	8001330 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center - XCurrent, Y_Center + sCountY, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//2
 8001766:	89fb      	ldrh	r3, [r7, #14]
 8001768:	88fa      	ldrh	r2, [r7, #6]
 800176a:	1ad3      	subs	r3, r2, r3
 800176c:	b298      	uxth	r0, r3
 800176e:	893a      	ldrh	r2, [r7, #8]
 8001770:	88bb      	ldrh	r3, [r7, #4]
 8001772:	4413      	add	r3, r2
 8001774:	b299      	uxth	r1, r3
 8001776:	883a      	ldrh	r2, [r7, #0]
 8001778:	2301      	movs	r3, #1
 800177a:	9300      	str	r3, [sp, #0]
 800177c:	2301      	movs	r3, #1
 800177e:	f7ff fdd7 	bl	8001330 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center - sCountY, Y_Center + XCurrent, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//3
 8001782:	893b      	ldrh	r3, [r7, #8]
 8001784:	88fa      	ldrh	r2, [r7, #6]
 8001786:	1ad3      	subs	r3, r2, r3
 8001788:	b298      	uxth	r0, r3
 800178a:	89fa      	ldrh	r2, [r7, #14]
 800178c:	88bb      	ldrh	r3, [r7, #4]
 800178e:	4413      	add	r3, r2
 8001790:	b299      	uxth	r1, r3
 8001792:	883a      	ldrh	r2, [r7, #0]
 8001794:	2301      	movs	r3, #1
 8001796:	9300      	str	r3, [sp, #0]
 8001798:	2301      	movs	r3, #1
 800179a:	f7ff fdc9 	bl	8001330 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center - sCountY, Y_Center - XCurrent, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//4
 800179e:	893b      	ldrh	r3, [r7, #8]
 80017a0:	88fa      	ldrh	r2, [r7, #6]
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	b298      	uxth	r0, r3
 80017a6:	89fb      	ldrh	r3, [r7, #14]
 80017a8:	88ba      	ldrh	r2, [r7, #4]
 80017aa:	1ad3      	subs	r3, r2, r3
 80017ac:	b299      	uxth	r1, r3
 80017ae:	883a      	ldrh	r2, [r7, #0]
 80017b0:	2301      	movs	r3, #1
 80017b2:	9300      	str	r3, [sp, #0]
 80017b4:	2301      	movs	r3, #1
 80017b6:	f7ff fdbb 	bl	8001330 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center - XCurrent, Y_Center - sCountY, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//5
 80017ba:	89fb      	ldrh	r3, [r7, #14]
 80017bc:	88fa      	ldrh	r2, [r7, #6]
 80017be:	1ad3      	subs	r3, r2, r3
 80017c0:	b298      	uxth	r0, r3
 80017c2:	893b      	ldrh	r3, [r7, #8]
 80017c4:	88ba      	ldrh	r2, [r7, #4]
 80017c6:	1ad3      	subs	r3, r2, r3
 80017c8:	b299      	uxth	r1, r3
 80017ca:	883a      	ldrh	r2, [r7, #0]
 80017cc:	2301      	movs	r3, #1
 80017ce:	9300      	str	r3, [sp, #0]
 80017d0:	2301      	movs	r3, #1
 80017d2:	f7ff fdad 	bl	8001330 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center + XCurrent, Y_Center - sCountY, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//6
 80017d6:	89fa      	ldrh	r2, [r7, #14]
 80017d8:	88fb      	ldrh	r3, [r7, #6]
 80017da:	4413      	add	r3, r2
 80017dc:	b298      	uxth	r0, r3
 80017de:	893b      	ldrh	r3, [r7, #8]
 80017e0:	88ba      	ldrh	r2, [r7, #4]
 80017e2:	1ad3      	subs	r3, r2, r3
 80017e4:	b299      	uxth	r1, r3
 80017e6:	883a      	ldrh	r2, [r7, #0]
 80017e8:	2301      	movs	r3, #1
 80017ea:	9300      	str	r3, [sp, #0]
 80017ec:	2301      	movs	r3, #1
 80017ee:	f7ff fd9f 	bl	8001330 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center + sCountY, Y_Center - XCurrent, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//7
 80017f2:	893a      	ldrh	r2, [r7, #8]
 80017f4:	88fb      	ldrh	r3, [r7, #6]
 80017f6:	4413      	add	r3, r2
 80017f8:	b298      	uxth	r0, r3
 80017fa:	89fb      	ldrh	r3, [r7, #14]
 80017fc:	88ba      	ldrh	r2, [r7, #4]
 80017fe:	1ad3      	subs	r3, r2, r3
 8001800:	b299      	uxth	r1, r3
 8001802:	883a      	ldrh	r2, [r7, #0]
 8001804:	2301      	movs	r3, #1
 8001806:	9300      	str	r3, [sp, #0]
 8001808:	2301      	movs	r3, #1
 800180a:	f7ff fd91 	bl	8001330 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center + sCountY, Y_Center + XCurrent, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);
 800180e:	893a      	ldrh	r2, [r7, #8]
 8001810:	88fb      	ldrh	r3, [r7, #6]
 8001812:	4413      	add	r3, r2
 8001814:	b298      	uxth	r0, r3
 8001816:	89fa      	ldrh	r2, [r7, #14]
 8001818:	88bb      	ldrh	r3, [r7, #4]
 800181a:	4413      	add	r3, r2
 800181c:	b299      	uxth	r1, r3
 800181e:	883a      	ldrh	r2, [r7, #0]
 8001820:	2301      	movs	r3, #1
 8001822:	9300      	str	r3, [sp, #0]
 8001824:	2301      	movs	r3, #1
 8001826:	f7ff fd83 	bl	8001330 <Paint_DrawPoint>
            for (sCountY = XCurrent; sCountY <= YCurrent; sCountY ++ ) {
 800182a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800182e:	b29b      	uxth	r3, r3
 8001830:	3301      	adds	r3, #1
 8001832:	b29b      	uxth	r3, r3
 8001834:	813b      	strh	r3, [r7, #8]
 8001836:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800183a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800183e:	429a      	cmp	r2, r3
 8001840:	dd83      	ble.n	800174a <Paint_DrawCircle+0x62>
            }
            if (Esp < 0 )
 8001842:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001846:	2b00      	cmp	r3, #0
 8001848:	da09      	bge.n	800185e <Paint_DrawCircle+0x176>
                Esp += 4 * XCurrent + 6;
 800184a:	89fb      	ldrh	r3, [r7, #14]
 800184c:	009b      	lsls	r3, r3, #2
 800184e:	b29a      	uxth	r2, r3
 8001850:	897b      	ldrh	r3, [r7, #10]
 8001852:	4413      	add	r3, r2
 8001854:	b29b      	uxth	r3, r3
 8001856:	3306      	adds	r3, #6
 8001858:	b29b      	uxth	r3, r3
 800185a:	817b      	strh	r3, [r7, #10]
 800185c:	e013      	b.n	8001886 <Paint_DrawCircle+0x19e>
            else {
                Esp += 10 + 4 * (XCurrent - YCurrent );
 800185e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001862:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001866:	1ad3      	subs	r3, r2, r3
 8001868:	b29b      	uxth	r3, r3
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	b29a      	uxth	r2, r3
 800186e:	897b      	ldrh	r3, [r7, #10]
 8001870:	4413      	add	r3, r2
 8001872:	b29b      	uxth	r3, r3
 8001874:	330a      	adds	r3, #10
 8001876:	b29b      	uxth	r3, r3
 8001878:	817b      	strh	r3, [r7, #10]
                YCurrent --;
 800187a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800187e:	b29b      	uxth	r3, r3
 8001880:	3b01      	subs	r3, #1
 8001882:	b29b      	uxth	r3, r3
 8001884:	81bb      	strh	r3, [r7, #12]
            }
            XCurrent ++;
 8001886:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800188a:	b29b      	uxth	r3, r3
 800188c:	3301      	adds	r3, #1
 800188e:	b29b      	uxth	r3, r3
 8001890:	81fb      	strh	r3, [r7, #14]
        while (XCurrent <= YCurrent ) { //Realistic circles
 8001892:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001896:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800189a:	429a      	cmp	r2, r3
 800189c:	f77f af52 	ble.w	8001744 <Paint_DrawCircle+0x5c>
 80018a0:	e0ab      	b.n	80019fa <Paint_DrawCircle+0x312>
 80018a2:	bf00      	nop
 80018a4:	200001f0 	.word	0x200001f0
 80018a8:	080050bc 	.word	0x080050bc
        }
    } else { //Draw a hollow circle
        while (XCurrent <= YCurrent ) {
            Paint_DrawPoint(X_Center + XCurrent, Y_Center + YCurrent, Color, Line_width, DOT_STYLE_DFT);//1
 80018ac:	89fa      	ldrh	r2, [r7, #14]
 80018ae:	88fb      	ldrh	r3, [r7, #6]
 80018b0:	4413      	add	r3, r2
 80018b2:	b298      	uxth	r0, r3
 80018b4:	89ba      	ldrh	r2, [r7, #12]
 80018b6:	88bb      	ldrh	r3, [r7, #4]
 80018b8:	4413      	add	r3, r2
 80018ba:	b299      	uxth	r1, r3
 80018bc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80018c0:	883a      	ldrh	r2, [r7, #0]
 80018c2:	2401      	movs	r4, #1
 80018c4:	9400      	str	r4, [sp, #0]
 80018c6:	f7ff fd33 	bl	8001330 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center - XCurrent, Y_Center + YCurrent, Color, Line_width, DOT_STYLE_DFT);//2
 80018ca:	89fb      	ldrh	r3, [r7, #14]
 80018cc:	88fa      	ldrh	r2, [r7, #6]
 80018ce:	1ad3      	subs	r3, r2, r3
 80018d0:	b298      	uxth	r0, r3
 80018d2:	89ba      	ldrh	r2, [r7, #12]
 80018d4:	88bb      	ldrh	r3, [r7, #4]
 80018d6:	4413      	add	r3, r2
 80018d8:	b299      	uxth	r1, r3
 80018da:	f897 3020 	ldrb.w	r3, [r7, #32]
 80018de:	883a      	ldrh	r2, [r7, #0]
 80018e0:	2401      	movs	r4, #1
 80018e2:	9400      	str	r4, [sp, #0]
 80018e4:	f7ff fd24 	bl	8001330 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center - YCurrent, Y_Center + XCurrent, Color, Line_width, DOT_STYLE_DFT);//3
 80018e8:	89bb      	ldrh	r3, [r7, #12]
 80018ea:	88fa      	ldrh	r2, [r7, #6]
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	b298      	uxth	r0, r3
 80018f0:	89fa      	ldrh	r2, [r7, #14]
 80018f2:	88bb      	ldrh	r3, [r7, #4]
 80018f4:	4413      	add	r3, r2
 80018f6:	b299      	uxth	r1, r3
 80018f8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80018fc:	883a      	ldrh	r2, [r7, #0]
 80018fe:	2401      	movs	r4, #1
 8001900:	9400      	str	r4, [sp, #0]
 8001902:	f7ff fd15 	bl	8001330 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center - YCurrent, Y_Center - XCurrent, Color, Line_width, DOT_STYLE_DFT);//4
 8001906:	89bb      	ldrh	r3, [r7, #12]
 8001908:	88fa      	ldrh	r2, [r7, #6]
 800190a:	1ad3      	subs	r3, r2, r3
 800190c:	b298      	uxth	r0, r3
 800190e:	89fb      	ldrh	r3, [r7, #14]
 8001910:	88ba      	ldrh	r2, [r7, #4]
 8001912:	1ad3      	subs	r3, r2, r3
 8001914:	b299      	uxth	r1, r3
 8001916:	f897 3020 	ldrb.w	r3, [r7, #32]
 800191a:	883a      	ldrh	r2, [r7, #0]
 800191c:	2401      	movs	r4, #1
 800191e:	9400      	str	r4, [sp, #0]
 8001920:	f7ff fd06 	bl	8001330 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center - XCurrent, Y_Center - YCurrent, Color, Line_width, DOT_STYLE_DFT);//5
 8001924:	89fb      	ldrh	r3, [r7, #14]
 8001926:	88fa      	ldrh	r2, [r7, #6]
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	b298      	uxth	r0, r3
 800192c:	89bb      	ldrh	r3, [r7, #12]
 800192e:	88ba      	ldrh	r2, [r7, #4]
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	b299      	uxth	r1, r3
 8001934:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001938:	883a      	ldrh	r2, [r7, #0]
 800193a:	2401      	movs	r4, #1
 800193c:	9400      	str	r4, [sp, #0]
 800193e:	f7ff fcf7 	bl	8001330 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center + XCurrent, Y_Center - YCurrent, Color, Line_width, DOT_STYLE_DFT);//6
 8001942:	89fa      	ldrh	r2, [r7, #14]
 8001944:	88fb      	ldrh	r3, [r7, #6]
 8001946:	4413      	add	r3, r2
 8001948:	b298      	uxth	r0, r3
 800194a:	89bb      	ldrh	r3, [r7, #12]
 800194c:	88ba      	ldrh	r2, [r7, #4]
 800194e:	1ad3      	subs	r3, r2, r3
 8001950:	b299      	uxth	r1, r3
 8001952:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001956:	883a      	ldrh	r2, [r7, #0]
 8001958:	2401      	movs	r4, #1
 800195a:	9400      	str	r4, [sp, #0]
 800195c:	f7ff fce8 	bl	8001330 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center + YCurrent, Y_Center - XCurrent, Color, Line_width, DOT_STYLE_DFT);//7
 8001960:	89ba      	ldrh	r2, [r7, #12]
 8001962:	88fb      	ldrh	r3, [r7, #6]
 8001964:	4413      	add	r3, r2
 8001966:	b298      	uxth	r0, r3
 8001968:	89fb      	ldrh	r3, [r7, #14]
 800196a:	88ba      	ldrh	r2, [r7, #4]
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	b299      	uxth	r1, r3
 8001970:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001974:	883a      	ldrh	r2, [r7, #0]
 8001976:	2401      	movs	r4, #1
 8001978:	9400      	str	r4, [sp, #0]
 800197a:	f7ff fcd9 	bl	8001330 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center + YCurrent, Y_Center + XCurrent, Color, Line_width, DOT_STYLE_DFT);//0
 800197e:	89ba      	ldrh	r2, [r7, #12]
 8001980:	88fb      	ldrh	r3, [r7, #6]
 8001982:	4413      	add	r3, r2
 8001984:	b298      	uxth	r0, r3
 8001986:	89fa      	ldrh	r2, [r7, #14]
 8001988:	88bb      	ldrh	r3, [r7, #4]
 800198a:	4413      	add	r3, r2
 800198c:	b299      	uxth	r1, r3
 800198e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001992:	883a      	ldrh	r2, [r7, #0]
 8001994:	2401      	movs	r4, #1
 8001996:	9400      	str	r4, [sp, #0]
 8001998:	f7ff fcca 	bl	8001330 <Paint_DrawPoint>

            if (Esp < 0 )
 800199c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	da09      	bge.n	80019b8 <Paint_DrawCircle+0x2d0>
                Esp += 4 * XCurrent + 6;
 80019a4:	89fb      	ldrh	r3, [r7, #14]
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	b29a      	uxth	r2, r3
 80019aa:	897b      	ldrh	r3, [r7, #10]
 80019ac:	4413      	add	r3, r2
 80019ae:	b29b      	uxth	r3, r3
 80019b0:	3306      	adds	r3, #6
 80019b2:	b29b      	uxth	r3, r3
 80019b4:	817b      	strh	r3, [r7, #10]
 80019b6:	e013      	b.n	80019e0 <Paint_DrawCircle+0x2f8>
            else {
                Esp += 10 + 4 * (XCurrent - YCurrent );
 80019b8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80019bc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	b29b      	uxth	r3, r3
 80019c4:	009b      	lsls	r3, r3, #2
 80019c6:	b29a      	uxth	r2, r3
 80019c8:	897b      	ldrh	r3, [r7, #10]
 80019ca:	4413      	add	r3, r2
 80019cc:	b29b      	uxth	r3, r3
 80019ce:	330a      	adds	r3, #10
 80019d0:	b29b      	uxth	r3, r3
 80019d2:	817b      	strh	r3, [r7, #10]
                YCurrent --;
 80019d4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80019d8:	b29b      	uxth	r3, r3
 80019da:	3b01      	subs	r3, #1
 80019dc:	b29b      	uxth	r3, r3
 80019de:	81bb      	strh	r3, [r7, #12]
            }
            XCurrent ++;
 80019e0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80019e4:	b29b      	uxth	r3, r3
 80019e6:	3301      	adds	r3, #1
 80019e8:	b29b      	uxth	r3, r3
 80019ea:	81fb      	strh	r3, [r7, #14]
        while (XCurrent <= YCurrent ) {
 80019ec:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80019f0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80019f4:	429a      	cmp	r2, r3
 80019f6:	f77f af59 	ble.w	80018ac <Paint_DrawCircle+0x1c4>
        }
    }
}
 80019fa:	3714      	adds	r7, #20
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd90      	pop	{r4, r7, pc}

08001a00 <Paint_DrawChar>:
    Color_Foreground : Select the foreground color
    Color_Background : Select the background color
******************************************************************************/
void Paint_DrawChar(UWORD Xpoint, UWORD Ypoint, const char Acsii_Char,
                    sFONT* Font, UWORD Color_Foreground, UWORD Color_Background)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b088      	sub	sp, #32
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	607b      	str	r3, [r7, #4]
 8001a08:	4603      	mov	r3, r0
 8001a0a:	81fb      	strh	r3, [r7, #14]
 8001a0c:	460b      	mov	r3, r1
 8001a0e:	81bb      	strh	r3, [r7, #12]
 8001a10:	4613      	mov	r3, r2
 8001a12:	72fb      	strb	r3, [r7, #11]
    UWORD Page, Column;

    if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 8001a14:	4b4c      	ldr	r3, [pc, #304]	; (8001b48 <Paint_DrawChar+0x148>)
 8001a16:	889b      	ldrh	r3, [r3, #4]
 8001a18:	89fa      	ldrh	r2, [r7, #14]
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	d804      	bhi.n	8001a28 <Paint_DrawChar+0x28>
 8001a1e:	4b4a      	ldr	r3, [pc, #296]	; (8001b48 <Paint_DrawChar+0x148>)
 8001a20:	88db      	ldrh	r3, [r3, #6]
 8001a22:	89ba      	ldrh	r2, [r7, #12]
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d903      	bls.n	8001a30 <Paint_DrawChar+0x30>
        Debug("Paint_DrawChar Input exceeds the normal display range\r\n");
 8001a28:	4848      	ldr	r0, [pc, #288]	; (8001b4c <Paint_DrawChar+0x14c>)
 8001a2a:	f002 fab3 	bl	8003f94 <puts>
        return;
 8001a2e:	e087      	b.n	8001b40 <Paint_DrawChar+0x140>
    }

    uint32_t Char_Offset = (Acsii_Char - ' ') * Font->Height * (Font->Width / 8 + (Font->Width % 8 ? 1 : 0));
 8001a30:	7afb      	ldrb	r3, [r7, #11]
 8001a32:	3b20      	subs	r3, #32
 8001a34:	687a      	ldr	r2, [r7, #4]
 8001a36:	88d2      	ldrh	r2, [r2, #6]
 8001a38:	fb02 f303 	mul.w	r3, r2, r3
 8001a3c:	687a      	ldr	r2, [r7, #4]
 8001a3e:	8892      	ldrh	r2, [r2, #4]
 8001a40:	08d2      	lsrs	r2, r2, #3
 8001a42:	b292      	uxth	r2, r2
 8001a44:	4611      	mov	r1, r2
 8001a46:	687a      	ldr	r2, [r7, #4]
 8001a48:	8892      	ldrh	r2, [r2, #4]
 8001a4a:	f002 0207 	and.w	r2, r2, #7
 8001a4e:	b292      	uxth	r2, r2
 8001a50:	2a00      	cmp	r2, #0
 8001a52:	bf14      	ite	ne
 8001a54:	2201      	movne	r2, #1
 8001a56:	2200      	moveq	r2, #0
 8001a58:	b2d2      	uxtb	r2, r2
 8001a5a:	440a      	add	r2, r1
 8001a5c:	fb02 f303 	mul.w	r3, r2, r3
 8001a60:	617b      	str	r3, [r7, #20]
    const unsigned char *ptr = &Font->table[Char_Offset];
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	4413      	add	r3, r2
 8001a6a:	61bb      	str	r3, [r7, #24]

    for (Page = 0; Page < Font->Height; Page ++ ) {
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	83fb      	strh	r3, [r7, #30]
 8001a70:	e061      	b.n	8001b36 <Paint_DrawChar+0x136>
        for (Column = 0; Column < Font->Width; Column ++ ) {
 8001a72:	2300      	movs	r3, #0
 8001a74:	83bb      	strh	r3, [r7, #28]
 8001a76:	e04c      	b.n	8001b12 <Paint_DrawChar+0x112>

            //To determine whether the font background color and screen background color is consistent
            if (FONT_BACKGROUND == Color_Background) { //this process is to speed up the scan
 8001a78:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001a7a:	2bff      	cmp	r3, #255	; 0xff
 8001a7c:	d118      	bne.n	8001ab0 <Paint_DrawChar+0xb0>
                if (*ptr & (0x80 >> (Column % 8)))
 8001a7e:	69bb      	ldr	r3, [r7, #24]
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	4619      	mov	r1, r3
 8001a84:	8bbb      	ldrh	r3, [r7, #28]
 8001a86:	f003 0307 	and.w	r3, r3, #7
 8001a8a:	2280      	movs	r2, #128	; 0x80
 8001a8c:	fa42 f303 	asr.w	r3, r2, r3
 8001a90:	400b      	ands	r3, r1
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d031      	beq.n	8001afa <Paint_DrawChar+0xfa>
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 8001a96:	89fa      	ldrh	r2, [r7, #14]
 8001a98:	8bbb      	ldrh	r3, [r7, #28]
 8001a9a:	4413      	add	r3, r2
 8001a9c:	b298      	uxth	r0, r3
 8001a9e:	89ba      	ldrh	r2, [r7, #12]
 8001aa0:	8bfb      	ldrh	r3, [r7, #30]
 8001aa2:	4413      	add	r3, r2
 8001aa4:	b29b      	uxth	r3, r3
 8001aa6:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	f7ff fa5b 	bl	8000f64 <Paint_SetPixel>
 8001aae:	e024      	b.n	8001afa <Paint_DrawChar+0xfa>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
            } else {
                if (*ptr & (0x80 >> (Column % 8))) {
 8001ab0:	69bb      	ldr	r3, [r7, #24]
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	8bbb      	ldrh	r3, [r7, #28]
 8001ab8:	f003 0307 	and.w	r3, r3, #7
 8001abc:	2280      	movs	r2, #128	; 0x80
 8001abe:	fa42 f303 	asr.w	r3, r2, r3
 8001ac2:	400b      	ands	r3, r1
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d00c      	beq.n	8001ae2 <Paint_DrawChar+0xe2>
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 8001ac8:	89fa      	ldrh	r2, [r7, #14]
 8001aca:	8bbb      	ldrh	r3, [r7, #28]
 8001acc:	4413      	add	r3, r2
 8001ace:	b298      	uxth	r0, r3
 8001ad0:	89ba      	ldrh	r2, [r7, #12]
 8001ad2:	8bfb      	ldrh	r3, [r7, #30]
 8001ad4:	4413      	add	r3, r2
 8001ad6:	b29b      	uxth	r3, r3
 8001ad8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001ada:	4619      	mov	r1, r3
 8001adc:	f7ff fa42 	bl	8000f64 <Paint_SetPixel>
 8001ae0:	e00b      	b.n	8001afa <Paint_DrawChar+0xfa>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                } else {
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Background);
 8001ae2:	89fa      	ldrh	r2, [r7, #14]
 8001ae4:	8bbb      	ldrh	r3, [r7, #28]
 8001ae6:	4413      	add	r3, r2
 8001ae8:	b298      	uxth	r0, r3
 8001aea:	89ba      	ldrh	r2, [r7, #12]
 8001aec:	8bfb      	ldrh	r3, [r7, #30]
 8001aee:	4413      	add	r3, r2
 8001af0:	b29b      	uxth	r3, r3
 8001af2:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8001af4:	4619      	mov	r1, r3
 8001af6:	f7ff fa35 	bl	8000f64 <Paint_SetPixel>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Background, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                }
            }
            //One pixel is 8 bits
            if (Column % 8 == 7)
 8001afa:	8bbb      	ldrh	r3, [r7, #28]
 8001afc:	f003 0307 	and.w	r3, r3, #7
 8001b00:	b29b      	uxth	r3, r3
 8001b02:	2b07      	cmp	r3, #7
 8001b04:	d102      	bne.n	8001b0c <Paint_DrawChar+0x10c>
                ptr++;
 8001b06:	69bb      	ldr	r3, [r7, #24]
 8001b08:	3301      	adds	r3, #1
 8001b0a:	61bb      	str	r3, [r7, #24]
        for (Column = 0; Column < Font->Width; Column ++ ) {
 8001b0c:	8bbb      	ldrh	r3, [r7, #28]
 8001b0e:	3301      	adds	r3, #1
 8001b10:	83bb      	strh	r3, [r7, #28]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	889b      	ldrh	r3, [r3, #4]
 8001b16:	8bba      	ldrh	r2, [r7, #28]
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d3ad      	bcc.n	8001a78 <Paint_DrawChar+0x78>
        }// Write a line
        if (Font->Width % 8 != 0)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	889b      	ldrh	r3, [r3, #4]
 8001b20:	f003 0307 	and.w	r3, r3, #7
 8001b24:	b29b      	uxth	r3, r3
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d002      	beq.n	8001b30 <Paint_DrawChar+0x130>
            ptr++;
 8001b2a:	69bb      	ldr	r3, [r7, #24]
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	61bb      	str	r3, [r7, #24]
    for (Page = 0; Page < Font->Height; Page ++ ) {
 8001b30:	8bfb      	ldrh	r3, [r7, #30]
 8001b32:	3301      	adds	r3, #1
 8001b34:	83fb      	strh	r3, [r7, #30]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	88db      	ldrh	r3, [r3, #6]
 8001b3a:	8bfa      	ldrh	r2, [r7, #30]
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d398      	bcc.n	8001a72 <Paint_DrawChar+0x72>
    }// Write all
}
 8001b40:	3720      	adds	r7, #32
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	200001f0 	.word	0x200001f0
 8001b4c:	080050fc 	.word	0x080050fc

08001b50 <Paint_DrawString_EN>:
    Color_Foreground : Select the foreground color
    Color_Background : Select the background color
******************************************************************************/
void Paint_DrawString_EN(UWORD Xstart, UWORD Ystart, const char * pString,
                         sFONT* Font, UWORD Color_Foreground, UWORD Color_Background)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b088      	sub	sp, #32
 8001b54:	af02      	add	r7, sp, #8
 8001b56:	60ba      	str	r2, [r7, #8]
 8001b58:	607b      	str	r3, [r7, #4]
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	81fb      	strh	r3, [r7, #14]
 8001b5e:	460b      	mov	r3, r1
 8001b60:	81bb      	strh	r3, [r7, #12]
    UWORD Xpoint = Xstart;
 8001b62:	89fb      	ldrh	r3, [r7, #14]
 8001b64:	82fb      	strh	r3, [r7, #22]
    UWORD Ypoint = Ystart;
 8001b66:	89bb      	ldrh	r3, [r7, #12]
 8001b68:	82bb      	strh	r3, [r7, #20]

    if (Xstart > Paint.Width || Ystart > Paint.Height) {
 8001b6a:	4b21      	ldr	r3, [pc, #132]	; (8001bf0 <Paint_DrawString_EN+0xa0>)
 8001b6c:	889b      	ldrh	r3, [r3, #4]
 8001b6e:	89fa      	ldrh	r2, [r7, #14]
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d804      	bhi.n	8001b7e <Paint_DrawString_EN+0x2e>
 8001b74:	4b1e      	ldr	r3, [pc, #120]	; (8001bf0 <Paint_DrawString_EN+0xa0>)
 8001b76:	88db      	ldrh	r3, [r3, #6]
 8001b78:	89ba      	ldrh	r2, [r7, #12]
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d931      	bls.n	8001be2 <Paint_DrawString_EN+0x92>
        Debug("Paint_DrawString_EN Input exceeds the normal display range\r\n");
 8001b7e:	481d      	ldr	r0, [pc, #116]	; (8001bf4 <Paint_DrawString_EN+0xa4>)
 8001b80:	f002 fa08 	bl	8003f94 <puts>
        return;
 8001b84:	e031      	b.n	8001bea <Paint_DrawString_EN+0x9a>
    }

    while (* pString != '\0') {
        //if X direction filled , reposition to(Xstart,Ypoint),Ypoint is Y direction plus the Height of the character
        if ((Xpoint + Font->Width ) > Paint.Width ) {
 8001b86:	8afb      	ldrh	r3, [r7, #22]
 8001b88:	687a      	ldr	r2, [r7, #4]
 8001b8a:	8892      	ldrh	r2, [r2, #4]
 8001b8c:	4413      	add	r3, r2
 8001b8e:	4a18      	ldr	r2, [pc, #96]	; (8001bf0 <Paint_DrawString_EN+0xa0>)
 8001b90:	8892      	ldrh	r2, [r2, #4]
 8001b92:	4293      	cmp	r3, r2
 8001b94:	dd06      	ble.n	8001ba4 <Paint_DrawString_EN+0x54>
            Xpoint = Xstart;
 8001b96:	89fb      	ldrh	r3, [r7, #14]
 8001b98:	82fb      	strh	r3, [r7, #22]
            Ypoint += Font->Height;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	88da      	ldrh	r2, [r3, #6]
 8001b9e:	8abb      	ldrh	r3, [r7, #20]
 8001ba0:	4413      	add	r3, r2
 8001ba2:	82bb      	strh	r3, [r7, #20]
        }

        // If the Y direction is full, reposition to(Xstart, Ystart)
        if ((Ypoint  + Font->Height ) > Paint.Height ) {
 8001ba4:	8abb      	ldrh	r3, [r7, #20]
 8001ba6:	687a      	ldr	r2, [r7, #4]
 8001ba8:	88d2      	ldrh	r2, [r2, #6]
 8001baa:	4413      	add	r3, r2
 8001bac:	4a10      	ldr	r2, [pc, #64]	; (8001bf0 <Paint_DrawString_EN+0xa0>)
 8001bae:	88d2      	ldrh	r2, [r2, #6]
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	dd03      	ble.n	8001bbc <Paint_DrawString_EN+0x6c>
            Xpoint = Xstart;
 8001bb4:	89fb      	ldrh	r3, [r7, #14]
 8001bb6:	82fb      	strh	r3, [r7, #22]
            Ypoint = Ystart;
 8001bb8:	89bb      	ldrh	r3, [r7, #12]
 8001bba:	82bb      	strh	r3, [r7, #20]
        }
        Paint_DrawChar(Xpoint, Ypoint, * pString, Font, Color_Background, Color_Foreground);
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	781a      	ldrb	r2, [r3, #0]
 8001bc0:	8ab9      	ldrh	r1, [r7, #20]
 8001bc2:	8af8      	ldrh	r0, [r7, #22]
 8001bc4:	8c3b      	ldrh	r3, [r7, #32]
 8001bc6:	9301      	str	r3, [sp, #4]
 8001bc8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001bca:	9300      	str	r3, [sp, #0]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	f7ff ff17 	bl	8001a00 <Paint_DrawChar>

        //The next character of the address
        pString ++;
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	3301      	adds	r3, #1
 8001bd6:	60bb      	str	r3, [r7, #8]

        //The next word of the abscissa increases the font of the broadband
        Xpoint += Font->Width;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	889a      	ldrh	r2, [r3, #4]
 8001bdc:	8afb      	ldrh	r3, [r7, #22]
 8001bde:	4413      	add	r3, r2
 8001be0:	82fb      	strh	r3, [r7, #22]
    while (* pString != '\0') {
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d1cd      	bne.n	8001b86 <Paint_DrawString_EN+0x36>
    }
}
 8001bea:	3718      	adds	r7, #24
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	200001f0 	.word	0x200001f0
 8001bf4:	0800513c 	.word	0x0800513c

08001bf8 <Paint_DrawString_CN>:
    Color_Foreground : Select the foreground color
    Color_Background : Select the background color
******************************************************************************/
void Paint_DrawString_CN(UWORD Xstart, UWORD Ystart, const char * pString, cFONT* font,
                        UWORD Color_Foreground, UWORD Color_Background)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b08c      	sub	sp, #48	; 0x30
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	60ba      	str	r2, [r7, #8]
 8001c00:	607b      	str	r3, [r7, #4]
 8001c02:	4603      	mov	r3, r0
 8001c04:	81fb      	strh	r3, [r7, #14]
 8001c06:	460b      	mov	r3, r1
 8001c08:	81bb      	strh	r3, [r7, #12]
    const char* p_text = pString;
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    int x = Xstart, y = Ystart;
 8001c0e:	89fb      	ldrh	r3, [r7, #14]
 8001c10:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c12:	89bb      	ldrh	r3, [r7, #12]
 8001c14:	613b      	str	r3, [r7, #16]
    int i, j,Num;

    /* Send the string character by character on EPD */
    while (*p_text != 0) {
 8001c16:	e17c      	b.n	8001f12 <Paint_DrawString_CN+0x31a>
        if(*p_text <= 0x7F) {  //ASCII < 126
 8001c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	b25b      	sxtb	r3, r3
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	f2c0 80b5 	blt.w	8001d8e <Paint_DrawString_CN+0x196>
            for(Num = 0; Num < font->size; Num++) {
 8001c24:	2300      	movs	r3, #0
 8001c26:	61fb      	str	r3, [r7, #28]
 8001c28:	e0a0      	b.n	8001d6c <Paint_DrawString_CN+0x174>
                if(*p_text== font->table[Num].index[0]) {
 8001c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c2c:	781a      	ldrb	r2, [r3, #0]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6819      	ldr	r1, [r3, #0]
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	20a6      	movs	r0, #166	; 0xa6
 8001c36:	fb00 f303 	mul.w	r3, r0, r3
 8001c3a:	440b      	add	r3, r1
 8001c3c:	781b      	ldrb	r3, [r3, #0]
 8001c3e:	429a      	cmp	r2, r3
 8001c40:	f040 8091 	bne.w	8001d66 <Paint_DrawString_CN+0x16e>
                    const char* ptr = &font->table[Num].matrix[0];
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	69fb      	ldr	r3, [r7, #28]
 8001c4a:	21a6      	movs	r1, #166	; 0xa6
 8001c4c:	fb01 f303 	mul.w	r3, r1, r3
 8001c50:	4413      	add	r3, r2
 8001c52:	3302      	adds	r3, #2
 8001c54:	61bb      	str	r3, [r7, #24]

                    for (j = 0; j < font->Height; j++) {
 8001c56:	2300      	movs	r3, #0
 8001c58:	623b      	str	r3, [r7, #32]
 8001c5a:	e07c      	b.n	8001d56 <Paint_DrawString_CN+0x15e>
                        for (i = 0; i < font->Width; i++) {
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	627b      	str	r3, [r7, #36]	; 0x24
 8001c60:	e066      	b.n	8001d30 <Paint_DrawString_CN+0x138>
                            if (FONT_BACKGROUND == Color_Background) { //this process is to speed up the scan
 8001c62:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001c64:	2bff      	cmp	r3, #255	; 0xff
 8001c66:	d121      	bne.n	8001cac <Paint_DrawString_CN+0xb4>
                                if (*ptr & (0x80 >> (i % 8))) {
 8001c68:	69bb      	ldr	r3, [r7, #24]
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c70:	425a      	negs	r2, r3
 8001c72:	f003 0307 	and.w	r3, r3, #7
 8001c76:	f002 0207 	and.w	r2, r2, #7
 8001c7a:	bf58      	it	pl
 8001c7c:	4253      	negpl	r3, r2
 8001c7e:	2280      	movs	r2, #128	; 0x80
 8001c80:	fa42 f303 	asr.w	r3, r2, r3
 8001c84:	400b      	ands	r3, r1
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d042      	beq.n	8001d10 <Paint_DrawString_CN+0x118>
                                    Paint_SetPixel(x + i, y + j, Color_Foreground);
 8001c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c8c:	b29a      	uxth	r2, r3
 8001c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c90:	b29b      	uxth	r3, r3
 8001c92:	4413      	add	r3, r2
 8001c94:	b298      	uxth	r0, r3
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	b29a      	uxth	r2, r3
 8001c9a:	6a3b      	ldr	r3, [r7, #32]
 8001c9c:	b29b      	uxth	r3, r3
 8001c9e:	4413      	add	r3, r2
 8001ca0:	b29b      	uxth	r3, r3
 8001ca2:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	f7ff f95d 	bl	8000f64 <Paint_SetPixel>
 8001caa:	e031      	b.n	8001d10 <Paint_DrawString_CN+0x118>
                                    // Paint_DrawPoint(x + i, y + j, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                                }
                            } else {
                                if (*ptr & (0x80 >> (i % 8))) {
 8001cac:	69bb      	ldr	r3, [r7, #24]
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb4:	425a      	negs	r2, r3
 8001cb6:	f003 0307 	and.w	r3, r3, #7
 8001cba:	f002 0207 	and.w	r2, r2, #7
 8001cbe:	bf58      	it	pl
 8001cc0:	4253      	negpl	r3, r2
 8001cc2:	2280      	movs	r2, #128	; 0x80
 8001cc4:	fa42 f303 	asr.w	r3, r2, r3
 8001cc8:	400b      	ands	r3, r1
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d010      	beq.n	8001cf0 <Paint_DrawString_CN+0xf8>
                                    Paint_SetPixel(x + i, y + j, Color_Foreground);
 8001cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cd0:	b29a      	uxth	r2, r3
 8001cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd4:	b29b      	uxth	r3, r3
 8001cd6:	4413      	add	r3, r2
 8001cd8:	b298      	uxth	r0, r3
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	b29a      	uxth	r2, r3
 8001cde:	6a3b      	ldr	r3, [r7, #32]
 8001ce0:	b29b      	uxth	r3, r3
 8001ce2:	4413      	add	r3, r2
 8001ce4:	b29b      	uxth	r3, r3
 8001ce6:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8001ce8:	4619      	mov	r1, r3
 8001cea:	f7ff f93b 	bl	8000f64 <Paint_SetPixel>
 8001cee:	e00f      	b.n	8001d10 <Paint_DrawString_CN+0x118>
                                    // Paint_DrawPoint(x + i, y + j, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                                } else {
                                    Paint_SetPixel(x + i, y + j, Color_Background);
 8001cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cf2:	b29a      	uxth	r2, r3
 8001cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf6:	b29b      	uxth	r3, r3
 8001cf8:	4413      	add	r3, r2
 8001cfa:	b298      	uxth	r0, r3
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	b29a      	uxth	r2, r3
 8001d00:	6a3b      	ldr	r3, [r7, #32]
 8001d02:	b29b      	uxth	r3, r3
 8001d04:	4413      	add	r3, r2
 8001d06:	b29b      	uxth	r3, r3
 8001d08:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	f7ff f92a 	bl	8000f64 <Paint_SetPixel>
                                    // Paint_DrawPoint(x + i, y + j, Color_Background, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                                }
                            }
                            if (i % 8 == 7) {
 8001d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d12:	425a      	negs	r2, r3
 8001d14:	f003 0307 	and.w	r3, r3, #7
 8001d18:	f002 0207 	and.w	r2, r2, #7
 8001d1c:	bf58      	it	pl
 8001d1e:	4253      	negpl	r3, r2
 8001d20:	2b07      	cmp	r3, #7
 8001d22:	d102      	bne.n	8001d2a <Paint_DrawString_CN+0x132>
                                ptr++;
 8001d24:	69bb      	ldr	r3, [r7, #24]
 8001d26:	3301      	adds	r3, #1
 8001d28:	61bb      	str	r3, [r7, #24]
                        for (i = 0; i < font->Width; i++) {
 8001d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2c:	3301      	adds	r3, #1
 8001d2e:	627b      	str	r3, [r7, #36]	; 0x24
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	891b      	ldrh	r3, [r3, #8]
 8001d34:	461a      	mov	r2, r3
 8001d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	db92      	blt.n	8001c62 <Paint_DrawString_CN+0x6a>
                            }
                        }
                        if (font->Width % 8 != 0) {
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	891b      	ldrh	r3, [r3, #8]
 8001d40:	f003 0307 	and.w	r3, r3, #7
 8001d44:	b29b      	uxth	r3, r3
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d002      	beq.n	8001d50 <Paint_DrawString_CN+0x158>
                            ptr++;
 8001d4a:	69bb      	ldr	r3, [r7, #24]
 8001d4c:	3301      	adds	r3, #1
 8001d4e:	61bb      	str	r3, [r7, #24]
                    for (j = 0; j < font->Height; j++) {
 8001d50:	6a3b      	ldr	r3, [r7, #32]
 8001d52:	3301      	adds	r3, #1
 8001d54:	623b      	str	r3, [r7, #32]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	895b      	ldrh	r3, [r3, #10]
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	6a3b      	ldr	r3, [r7, #32]
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	f6ff af7c 	blt.w	8001c5c <Paint_DrawString_CN+0x64>
                        }
                    }
                    break;
 8001d64:	e009      	b.n	8001d7a <Paint_DrawString_CN+0x182>
            for(Num = 0; Num < font->size; Num++) {
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	3301      	adds	r3, #1
 8001d6a:	61fb      	str	r3, [r7, #28]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	889b      	ldrh	r3, [r3, #4]
 8001d70:	461a      	mov	r2, r3
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	4293      	cmp	r3, r2
 8001d76:	f6ff af58 	blt.w	8001c2a <Paint_DrawString_CN+0x32>
                }
            }
            /* Point on the next character */
            p_text += 1;
 8001d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d7c:	3301      	adds	r3, #1
 8001d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Decrement the column position by 16 */
            x += font->ASCII_Width;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	88db      	ldrh	r3, [r3, #6]
 8001d84:	461a      	mov	r2, r3
 8001d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d88:	4413      	add	r3, r2
 8001d8a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d8c:	e0c1      	b.n	8001f12 <Paint_DrawString_CN+0x31a>
        } else {        //Chinese
            for(Num = 0; Num < font->size; Num++) {
 8001d8e:	2300      	movs	r3, #0
 8001d90:	61fb      	str	r3, [r7, #28]
 8001d92:	e0ae      	b.n	8001ef2 <Paint_DrawString_CN+0x2fa>
                if((*p_text== font->table[Num].index[0]) && (*(p_text+1) == font->table[Num].index[1])) {
 8001d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d96:	781a      	ldrb	r2, [r3, #0]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6819      	ldr	r1, [r3, #0]
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	20a6      	movs	r0, #166	; 0xa6
 8001da0:	fb00 f303 	mul.w	r3, r0, r3
 8001da4:	440b      	add	r3, r1
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	429a      	cmp	r2, r3
 8001daa:	f040 809f 	bne.w	8001eec <Paint_DrawString_CN+0x2f4>
 8001dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001db0:	3301      	adds	r3, #1
 8001db2:	781a      	ldrb	r2, [r3, #0]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6819      	ldr	r1, [r3, #0]
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	20a6      	movs	r0, #166	; 0xa6
 8001dbc:	fb00 f303 	mul.w	r3, r0, r3
 8001dc0:	440b      	add	r3, r1
 8001dc2:	785b      	ldrb	r3, [r3, #1]
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	f040 8091 	bne.w	8001eec <Paint_DrawString_CN+0x2f4>
                    const char* ptr = &font->table[Num].matrix[0];
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	21a6      	movs	r1, #166	; 0xa6
 8001dd2:	fb01 f303 	mul.w	r3, r1, r3
 8001dd6:	4413      	add	r3, r2
 8001dd8:	3302      	adds	r3, #2
 8001dda:	617b      	str	r3, [r7, #20]

                    for (j = 0; j < font->Height; j++) {
 8001ddc:	2300      	movs	r3, #0
 8001dde:	623b      	str	r3, [r7, #32]
 8001de0:	e07c      	b.n	8001edc <Paint_DrawString_CN+0x2e4>
                        for (i = 0; i < font->Width; i++) {
 8001de2:	2300      	movs	r3, #0
 8001de4:	627b      	str	r3, [r7, #36]	; 0x24
 8001de6:	e066      	b.n	8001eb6 <Paint_DrawString_CN+0x2be>
                            if (FONT_BACKGROUND == Color_Background) { //this process is to speed up the scan
 8001de8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001dea:	2bff      	cmp	r3, #255	; 0xff
 8001dec:	d121      	bne.n	8001e32 <Paint_DrawString_CN+0x23a>
                                if (*ptr & (0x80 >> (i % 8))) {
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	4619      	mov	r1, r3
 8001df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df6:	425a      	negs	r2, r3
 8001df8:	f003 0307 	and.w	r3, r3, #7
 8001dfc:	f002 0207 	and.w	r2, r2, #7
 8001e00:	bf58      	it	pl
 8001e02:	4253      	negpl	r3, r2
 8001e04:	2280      	movs	r2, #128	; 0x80
 8001e06:	fa42 f303 	asr.w	r3, r2, r3
 8001e0a:	400b      	ands	r3, r1
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d042      	beq.n	8001e96 <Paint_DrawString_CN+0x29e>
                                    Paint_SetPixel(x + i, y + j, Color_Foreground);
 8001e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e12:	b29a      	uxth	r2, r3
 8001e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e16:	b29b      	uxth	r3, r3
 8001e18:	4413      	add	r3, r2
 8001e1a:	b298      	uxth	r0, r3
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	b29a      	uxth	r2, r3
 8001e20:	6a3b      	ldr	r3, [r7, #32]
 8001e22:	b29b      	uxth	r3, r3
 8001e24:	4413      	add	r3, r2
 8001e26:	b29b      	uxth	r3, r3
 8001e28:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	f7ff f89a 	bl	8000f64 <Paint_SetPixel>
 8001e30:	e031      	b.n	8001e96 <Paint_DrawString_CN+0x29e>
                                    // Paint_DrawPoint(x + i, y + j, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                                }
                            } else {
                                if (*ptr & (0x80 >> (i % 8))) {
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	781b      	ldrb	r3, [r3, #0]
 8001e36:	4619      	mov	r1, r3
 8001e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3a:	425a      	negs	r2, r3
 8001e3c:	f003 0307 	and.w	r3, r3, #7
 8001e40:	f002 0207 	and.w	r2, r2, #7
 8001e44:	bf58      	it	pl
 8001e46:	4253      	negpl	r3, r2
 8001e48:	2280      	movs	r2, #128	; 0x80
 8001e4a:	fa42 f303 	asr.w	r3, r2, r3
 8001e4e:	400b      	ands	r3, r1
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d010      	beq.n	8001e76 <Paint_DrawString_CN+0x27e>
                                    Paint_SetPixel(x + i, y + j, Color_Foreground);
 8001e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e56:	b29a      	uxth	r2, r3
 8001e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e5a:	b29b      	uxth	r3, r3
 8001e5c:	4413      	add	r3, r2
 8001e5e:	b298      	uxth	r0, r3
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	b29a      	uxth	r2, r3
 8001e64:	6a3b      	ldr	r3, [r7, #32]
 8001e66:	b29b      	uxth	r3, r3
 8001e68:	4413      	add	r3, r2
 8001e6a:	b29b      	uxth	r3, r3
 8001e6c:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8001e6e:	4619      	mov	r1, r3
 8001e70:	f7ff f878 	bl	8000f64 <Paint_SetPixel>
 8001e74:	e00f      	b.n	8001e96 <Paint_DrawString_CN+0x29e>
                                    // Paint_DrawPoint(x + i, y + j, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                                } else {
                                    Paint_SetPixel(x + i, y + j, Color_Background);
 8001e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e78:	b29a      	uxth	r2, r3
 8001e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7c:	b29b      	uxth	r3, r3
 8001e7e:	4413      	add	r3, r2
 8001e80:	b298      	uxth	r0, r3
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	b29a      	uxth	r2, r3
 8001e86:	6a3b      	ldr	r3, [r7, #32]
 8001e88:	b29b      	uxth	r3, r3
 8001e8a:	4413      	add	r3, r2
 8001e8c:	b29b      	uxth	r3, r3
 8001e8e:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8001e90:	4619      	mov	r1, r3
 8001e92:	f7ff f867 	bl	8000f64 <Paint_SetPixel>
                                    // Paint_DrawPoint(x + i, y + j, Color_Background, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                                }
                            }
                            if (i % 8 == 7) {
 8001e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e98:	425a      	negs	r2, r3
 8001e9a:	f003 0307 	and.w	r3, r3, #7
 8001e9e:	f002 0207 	and.w	r2, r2, #7
 8001ea2:	bf58      	it	pl
 8001ea4:	4253      	negpl	r3, r2
 8001ea6:	2b07      	cmp	r3, #7
 8001ea8:	d102      	bne.n	8001eb0 <Paint_DrawString_CN+0x2b8>
                                ptr++;
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	3301      	adds	r3, #1
 8001eae:	617b      	str	r3, [r7, #20]
                        for (i = 0; i < font->Width; i++) {
 8001eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb2:	3301      	adds	r3, #1
 8001eb4:	627b      	str	r3, [r7, #36]	; 0x24
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	891b      	ldrh	r3, [r3, #8]
 8001eba:	461a      	mov	r2, r3
 8001ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	db92      	blt.n	8001de8 <Paint_DrawString_CN+0x1f0>
                            }
                        }
                        if (font->Width % 8 != 0) {
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	891b      	ldrh	r3, [r3, #8]
 8001ec6:	f003 0307 	and.w	r3, r3, #7
 8001eca:	b29b      	uxth	r3, r3
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d002      	beq.n	8001ed6 <Paint_DrawString_CN+0x2de>
                            ptr++;
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	3301      	adds	r3, #1
 8001ed4:	617b      	str	r3, [r7, #20]
                    for (j = 0; j < font->Height; j++) {
 8001ed6:	6a3b      	ldr	r3, [r7, #32]
 8001ed8:	3301      	adds	r3, #1
 8001eda:	623b      	str	r3, [r7, #32]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	895b      	ldrh	r3, [r3, #10]
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	6a3b      	ldr	r3, [r7, #32]
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	f6ff af7c 	blt.w	8001de2 <Paint_DrawString_CN+0x1ea>
                        }
                    }
                    break;
 8001eea:	e009      	b.n	8001f00 <Paint_DrawString_CN+0x308>
            for(Num = 0; Num < font->size; Num++) {
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	3301      	adds	r3, #1
 8001ef0:	61fb      	str	r3, [r7, #28]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	889b      	ldrh	r3, [r3, #4]
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	69fb      	ldr	r3, [r7, #28]
 8001efa:	4293      	cmp	r3, r2
 8001efc:	f6ff af4a 	blt.w	8001d94 <Paint_DrawString_CN+0x19c>
                }
            }
            /* Point on the next character */
            p_text += 2;
 8001f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f02:	3302      	adds	r3, #2
 8001f04:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Decrement the column position by 16 */
            x += font->Width;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	891b      	ldrh	r3, [r3, #8]
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f0e:	4413      	add	r3, r2
 8001f10:	62bb      	str	r3, [r7, #40]	; 0x28
    while (*p_text != 0) {
 8001f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f14:	781b      	ldrb	r3, [r3, #0]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	f47f ae7e 	bne.w	8001c18 <Paint_DrawString_CN+0x20>
        }
    }
}
 8001f1c:	bf00      	nop
 8001f1e:	bf00      	nop
 8001f20:	3730      	adds	r7, #48	; 0x30
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
	...

08001f28 <Paint_DrawNum>:
    Color_Background : Select the background color
******************************************************************************/
#define  ARRAY_LEN 255
void Paint_DrawNum(UWORD Xpoint, UWORD Ypoint, int32_t Nummber,
                   sFONT* Font, UWORD Color_Foreground, UWORD Color_Background)
{
 8001f28:	b590      	push	{r4, r7, lr}
 8001f2a:	f5ad 7d09 	sub.w	sp, sp, #548	; 0x224
 8001f2e:	af02      	add	r7, sp, #8
 8001f30:	4604      	mov	r4, r0
 8001f32:	4608      	mov	r0, r1
 8001f34:	f507 7106 	add.w	r1, r7, #536	; 0x218
 8001f38:	f5a1 7104 	sub.w	r1, r1, #528	; 0x210
 8001f3c:	600a      	str	r2, [r1, #0]
 8001f3e:	f507 7206 	add.w	r2, r7, #536	; 0x218
 8001f42:	f5a2 7205 	sub.w	r2, r2, #532	; 0x214
 8001f46:	6013      	str	r3, [r2, #0]
 8001f48:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8001f4c:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 8001f50:	4622      	mov	r2, r4
 8001f52:	801a      	strh	r2, [r3, #0]
 8001f54:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8001f58:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	801a      	strh	r2, [r3, #0]

    int16_t Num_Bit = 0, Str_Bit = 0;
 8001f60:	2300      	movs	r3, #0
 8001f62:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 8001f66:	2300      	movs	r3, #0
 8001f68:	f8a7 3214 	strh.w	r3, [r7, #532]	; 0x214
    uint8_t Str_Array[ARRAY_LEN] = {0}, Num_Array[ARRAY_LEN] = {0};
 8001f6c:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8001f70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001f74:	2200      	movs	r2, #0
 8001f76:	601a      	str	r2, [r3, #0]
 8001f78:	3304      	adds	r3, #4
 8001f7a:	22fb      	movs	r2, #251	; 0xfb
 8001f7c:	2100      	movs	r1, #0
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f001 fe9a 	bl	8003cb8 <memset>
 8001f84:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8001f88:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	601a      	str	r2, [r3, #0]
 8001f90:	3304      	adds	r3, #4
 8001f92:	22fb      	movs	r2, #251	; 0xfb
 8001f94:	2100      	movs	r1, #0
 8001f96:	4618      	mov	r0, r3
 8001f98:	f001 fe8e 	bl	8003cb8 <memset>
    uint8_t *pStr = Str_Array;
 8001f9c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001fa0:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210

    if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 8001fa4:	4b46      	ldr	r3, [pc, #280]	; (80020c0 <Paint_DrawNum+0x198>)
 8001fa6:	889b      	ldrh	r3, [r3, #4]
 8001fa8:	f507 7206 	add.w	r2, r7, #536	; 0x218
 8001fac:	f2a2 220a 	subw	r2, r2, #522	; 0x20a
 8001fb0:	8812      	ldrh	r2, [r2, #0]
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	d808      	bhi.n	8001fc8 <Paint_DrawNum+0xa0>
 8001fb6:	4b42      	ldr	r3, [pc, #264]	; (80020c0 <Paint_DrawNum+0x198>)
 8001fb8:	88db      	ldrh	r3, [r3, #6]
 8001fba:	f507 7206 	add.w	r2, r7, #536	; 0x218
 8001fbe:	f5a2 7203 	sub.w	r2, r2, #524	; 0x20c
 8001fc2:	8812      	ldrh	r2, [r2, #0]
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d934      	bls.n	8002032 <Paint_DrawNum+0x10a>
        Debug("Paint_DisNum Input exceeds the normal display range\r\n");
 8001fc8:	483e      	ldr	r0, [pc, #248]	; (80020c4 <Paint_DrawNum+0x19c>)
 8001fca:	f001 ffe3 	bl	8003f94 <puts>
 8001fce:	e072      	b.n	80020b6 <Paint_DrawNum+0x18e>
        return;
    }

    //Converts a number to a string
    while (Nummber) {
        Num_Array[Num_Bit] = Nummber % 10 + '0';
 8001fd0:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8001fd4:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	4b3b      	ldr	r3, [pc, #236]	; (80020c8 <Paint_DrawNum+0x1a0>)
 8001fdc:	fb83 1302 	smull	r1, r3, r3, r2
 8001fe0:	1099      	asrs	r1, r3, #2
 8001fe2:	17d3      	asrs	r3, r2, #31
 8001fe4:	1ac9      	subs	r1, r1, r3
 8001fe6:	460b      	mov	r3, r1
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	440b      	add	r3, r1
 8001fec:	005b      	lsls	r3, r3, #1
 8001fee:	1ad1      	subs	r1, r2, r3
 8001ff0:	b2ca      	uxtb	r2, r1
 8001ff2:	f9b7 3216 	ldrsh.w	r3, [r7, #534]	; 0x216
 8001ff6:	3230      	adds	r2, #48	; 0x30
 8001ff8:	b2d1      	uxtb	r1, r2
 8001ffa:	f507 7206 	add.w	r2, r7, #536	; 0x218
 8001ffe:	f5a2 7202 	sub.w	r2, r2, #520	; 0x208
 8002002:	54d1      	strb	r1, [r2, r3]
        Num_Bit++;
 8002004:	f9b7 3216 	ldrsh.w	r3, [r7, #534]	; 0x216
 8002008:	b29b      	uxth	r3, r3
 800200a:	3301      	adds	r3, #1
 800200c:	b29b      	uxth	r3, r3
 800200e:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
        Nummber /= 10;
 8002012:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8002016:	f5a3 7204 	sub.w	r2, r3, #528	; 0x210
 800201a:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800201e:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4928      	ldr	r1, [pc, #160]	; (80020c8 <Paint_DrawNum+0x1a0>)
 8002026:	fb81 0103 	smull	r0, r1, r1, r3
 800202a:	1089      	asrs	r1, r1, #2
 800202c:	17db      	asrs	r3, r3, #31
 800202e:	1acb      	subs	r3, r1, r3
 8002030:	6013      	str	r3, [r2, #0]
    while (Nummber) {
 8002032:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8002036:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d1c7      	bne.n	8001fd0 <Paint_DrawNum+0xa8>
    }

    //The string is inverted
    while (Num_Bit > 0) {
 8002040:	e01c      	b.n	800207c <Paint_DrawNum+0x154>
        Str_Array[Str_Bit] = Num_Array[Num_Bit - 1];
 8002042:	f9b7 3216 	ldrsh.w	r3, [r7, #534]	; 0x216
 8002046:	1e5a      	subs	r2, r3, #1
 8002048:	f9b7 3214 	ldrsh.w	r3, [r7, #532]	; 0x214
 800204c:	f507 7106 	add.w	r1, r7, #536	; 0x218
 8002050:	f5a1 7102 	sub.w	r1, r1, #520	; 0x208
 8002054:	5c89      	ldrb	r1, [r1, r2]
 8002056:	f507 7206 	add.w	r2, r7, #536	; 0x218
 800205a:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 800205e:	54d1      	strb	r1, [r2, r3]
        Str_Bit ++;
 8002060:	f9b7 3214 	ldrsh.w	r3, [r7, #532]	; 0x214
 8002064:	b29b      	uxth	r3, r3
 8002066:	3301      	adds	r3, #1
 8002068:	b29b      	uxth	r3, r3
 800206a:	f8a7 3214 	strh.w	r3, [r7, #532]	; 0x214
        Num_Bit --;
 800206e:	f9b7 3216 	ldrsh.w	r3, [r7, #534]	; 0x216
 8002072:	b29b      	uxth	r3, r3
 8002074:	3b01      	subs	r3, #1
 8002076:	b29b      	uxth	r3, r3
 8002078:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
    while (Num_Bit > 0) {
 800207c:	f9b7 3216 	ldrsh.w	r3, [r7, #534]	; 0x216
 8002080:	2b00      	cmp	r3, #0
 8002082:	dcde      	bgt.n	8002042 <Paint_DrawNum+0x11a>
    }

    //show
    Paint_DrawString_EN(Xpoint, Ypoint, (const char*)pStr, Font, Color_Background, Color_Foreground);
 8002084:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8002088:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 800208c:	f507 7206 	add.w	r2, r7, #536	; 0x218
 8002090:	f5a2 7203 	sub.w	r2, r2, #524	; 0x20c
 8002094:	8811      	ldrh	r1, [r2, #0]
 8002096:	f507 7206 	add.w	r2, r7, #536	; 0x218
 800209a:	f2a2 220a 	subw	r2, r2, #522	; 0x20a
 800209e:	8810      	ldrh	r0, [r2, #0]
 80020a0:	f8b7 2228 	ldrh.w	r2, [r7, #552]	; 0x228
 80020a4:	9201      	str	r2, [sp, #4]
 80020a6:	f8b7 222c 	ldrh.w	r2, [r7, #556]	; 0x22c
 80020aa:	9200      	str	r2, [sp, #0]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 80020b2:	f7ff fd4d 	bl	8001b50 <Paint_DrawString_EN>
}
 80020b6:	f507 7707 	add.w	r7, r7, #540	; 0x21c
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd90      	pop	{r4, r7, pc}
 80020be:	bf00      	nop
 80020c0:	200001f0 	.word	0x200001f0
 80020c4:	08005180 	.word	0x08005180
 80020c8:	66666667 	.word	0x66666667

080020cc <Paint_DrawTime>:
    Color_Foreground : Select the foreground color
    Color_Background : Select the background color
******************************************************************************/
void Paint_DrawTime(UWORD Xstart, UWORD Ystart, PAINT_TIME *pTime, sFONT* Font,
                    UWORD Color_Foreground, UWORD Color_Background)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b08a      	sub	sp, #40	; 0x28
 80020d0:	af02      	add	r7, sp, #8
 80020d2:	60ba      	str	r2, [r7, #8]
 80020d4:	607b      	str	r3, [r7, #4]
 80020d6:	4603      	mov	r3, r0
 80020d8:	81fb      	strh	r3, [r7, #14]
 80020da:	460b      	mov	r3, r1
 80020dc:	81bb      	strh	r3, [r7, #12]
    uint8_t value[10] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'};
 80020de:	4a76      	ldr	r2, [pc, #472]	; (80022b8 <Paint_DrawTime+0x1ec>)
 80020e0:	f107 0314 	add.w	r3, r7, #20
 80020e4:	ca07      	ldmia	r2, {r0, r1, r2}
 80020e6:	c303      	stmia	r3!, {r0, r1}
 80020e8:	801a      	strh	r2, [r3, #0]

    UWORD Dx = Font->Width;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	889b      	ldrh	r3, [r3, #4]
 80020ee:	83fb      	strh	r3, [r7, #30]

    //Write data into the cache
    Paint_DrawChar(Xstart                           , Ystart, value[pTime->Hour / 10], Font, Color_Background, Color_Foreground);
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	791b      	ldrb	r3, [r3, #4]
 80020f4:	4a71      	ldr	r2, [pc, #452]	; (80022bc <Paint_DrawTime+0x1f0>)
 80020f6:	fba2 2303 	umull	r2, r3, r2, r3
 80020fa:	08db      	lsrs	r3, r3, #3
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	3320      	adds	r3, #32
 8002100:	443b      	add	r3, r7
 8002102:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 8002106:	89b9      	ldrh	r1, [r7, #12]
 8002108:	89f8      	ldrh	r0, [r7, #14]
 800210a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800210c:	9301      	str	r3, [sp, #4]
 800210e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002110:	9300      	str	r3, [sp, #0]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	f7ff fc74 	bl	8001a00 <Paint_DrawChar>
    Paint_DrawChar(Xstart + Dx                      , Ystart, value[pTime->Hour % 10], Font, Color_Background, Color_Foreground);
 8002118:	89fa      	ldrh	r2, [r7, #14]
 800211a:	8bfb      	ldrh	r3, [r7, #30]
 800211c:	4413      	add	r3, r2
 800211e:	b298      	uxth	r0, r3
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	791a      	ldrb	r2, [r3, #4]
 8002124:	4b65      	ldr	r3, [pc, #404]	; (80022bc <Paint_DrawTime+0x1f0>)
 8002126:	fba3 1302 	umull	r1, r3, r3, r2
 800212a:	08d9      	lsrs	r1, r3, #3
 800212c:	460b      	mov	r3, r1
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	440b      	add	r3, r1
 8002132:	005b      	lsls	r3, r3, #1
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	b2db      	uxtb	r3, r3
 8002138:	3320      	adds	r3, #32
 800213a:	443b      	add	r3, r7
 800213c:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 8002140:	89b9      	ldrh	r1, [r7, #12]
 8002142:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002144:	9301      	str	r3, [sp, #4]
 8002146:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002148:	9300      	str	r3, [sp, #0]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	f7ff fc58 	bl	8001a00 <Paint_DrawChar>
    Paint_DrawChar(Xstart + Dx  + Dx / 4 + Dx / 2   , Ystart, ':'                    , Font, Color_Background, Color_Foreground);
 8002150:	89fa      	ldrh	r2, [r7, #14]
 8002152:	8bfb      	ldrh	r3, [r7, #30]
 8002154:	4413      	add	r3, r2
 8002156:	b29a      	uxth	r2, r3
 8002158:	8bfb      	ldrh	r3, [r7, #30]
 800215a:	089b      	lsrs	r3, r3, #2
 800215c:	b29b      	uxth	r3, r3
 800215e:	4413      	add	r3, r2
 8002160:	b29a      	uxth	r2, r3
 8002162:	8bfb      	ldrh	r3, [r7, #30]
 8002164:	085b      	lsrs	r3, r3, #1
 8002166:	b29b      	uxth	r3, r3
 8002168:	4413      	add	r3, r2
 800216a:	b298      	uxth	r0, r3
 800216c:	89b9      	ldrh	r1, [r7, #12]
 800216e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002170:	9301      	str	r3, [sp, #4]
 8002172:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002174:	9300      	str	r3, [sp, #0]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	223a      	movs	r2, #58	; 0x3a
 800217a:	f7ff fc41 	bl	8001a00 <Paint_DrawChar>
    Paint_DrawChar(Xstart + Dx * 2 + Dx / 2         , Ystart, value[pTime->Min / 10] , Font, Color_Background, Color_Foreground);
 800217e:	8bfb      	ldrh	r3, [r7, #30]
 8002180:	005b      	lsls	r3, r3, #1
 8002182:	b29a      	uxth	r2, r3
 8002184:	89fb      	ldrh	r3, [r7, #14]
 8002186:	4413      	add	r3, r2
 8002188:	b29a      	uxth	r2, r3
 800218a:	8bfb      	ldrh	r3, [r7, #30]
 800218c:	085b      	lsrs	r3, r3, #1
 800218e:	b29b      	uxth	r3, r3
 8002190:	4413      	add	r3, r2
 8002192:	b298      	uxth	r0, r3
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	795b      	ldrb	r3, [r3, #5]
 8002198:	4a48      	ldr	r2, [pc, #288]	; (80022bc <Paint_DrawTime+0x1f0>)
 800219a:	fba2 2303 	umull	r2, r3, r2, r3
 800219e:	08db      	lsrs	r3, r3, #3
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	3320      	adds	r3, #32
 80021a4:	443b      	add	r3, r7
 80021a6:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 80021aa:	89b9      	ldrh	r1, [r7, #12]
 80021ac:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80021ae:	9301      	str	r3, [sp, #4]
 80021b0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80021b2:	9300      	str	r3, [sp, #0]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	f7ff fc23 	bl	8001a00 <Paint_DrawChar>
    Paint_DrawChar(Xstart + Dx * 3 + Dx / 2         , Ystart, value[pTime->Min % 10] , Font, Color_Background, Color_Foreground);
 80021ba:	8bfb      	ldrh	r3, [r7, #30]
 80021bc:	461a      	mov	r2, r3
 80021be:	0052      	lsls	r2, r2, #1
 80021c0:	4413      	add	r3, r2
 80021c2:	b29a      	uxth	r2, r3
 80021c4:	89fb      	ldrh	r3, [r7, #14]
 80021c6:	4413      	add	r3, r2
 80021c8:	b29a      	uxth	r2, r3
 80021ca:	8bfb      	ldrh	r3, [r7, #30]
 80021cc:	085b      	lsrs	r3, r3, #1
 80021ce:	b29b      	uxth	r3, r3
 80021d0:	4413      	add	r3, r2
 80021d2:	b298      	uxth	r0, r3
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	795a      	ldrb	r2, [r3, #5]
 80021d8:	4b38      	ldr	r3, [pc, #224]	; (80022bc <Paint_DrawTime+0x1f0>)
 80021da:	fba3 1302 	umull	r1, r3, r3, r2
 80021de:	08d9      	lsrs	r1, r3, #3
 80021e0:	460b      	mov	r3, r1
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	440b      	add	r3, r1
 80021e6:	005b      	lsls	r3, r3, #1
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	b2db      	uxtb	r3, r3
 80021ec:	3320      	adds	r3, #32
 80021ee:	443b      	add	r3, r7
 80021f0:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 80021f4:	89b9      	ldrh	r1, [r7, #12]
 80021f6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80021f8:	9301      	str	r3, [sp, #4]
 80021fa:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80021fc:	9300      	str	r3, [sp, #0]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	f7ff fbfe 	bl	8001a00 <Paint_DrawChar>
    Paint_DrawChar(Xstart + Dx * 4 + Dx / 2 - Dx / 4, Ystart, ':'                    , Font, Color_Background, Color_Foreground);
 8002204:	8bfb      	ldrh	r3, [r7, #30]
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	b29a      	uxth	r2, r3
 800220a:	89fb      	ldrh	r3, [r7, #14]
 800220c:	4413      	add	r3, r2
 800220e:	b29a      	uxth	r2, r3
 8002210:	8bfb      	ldrh	r3, [r7, #30]
 8002212:	085b      	lsrs	r3, r3, #1
 8002214:	b29b      	uxth	r3, r3
 8002216:	4413      	add	r3, r2
 8002218:	b29a      	uxth	r2, r3
 800221a:	8bfb      	ldrh	r3, [r7, #30]
 800221c:	089b      	lsrs	r3, r3, #2
 800221e:	b29b      	uxth	r3, r3
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	b298      	uxth	r0, r3
 8002224:	89b9      	ldrh	r1, [r7, #12]
 8002226:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002228:	9301      	str	r3, [sp, #4]
 800222a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800222c:	9300      	str	r3, [sp, #0]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	223a      	movs	r2, #58	; 0x3a
 8002232:	f7ff fbe5 	bl	8001a00 <Paint_DrawChar>
    Paint_DrawChar(Xstart + Dx * 5                  , Ystart, value[pTime->Sec / 10] , Font, Color_Background, Color_Foreground);
 8002236:	8bfb      	ldrh	r3, [r7, #30]
 8002238:	461a      	mov	r2, r3
 800223a:	0092      	lsls	r2, r2, #2
 800223c:	4413      	add	r3, r2
 800223e:	b29a      	uxth	r2, r3
 8002240:	89fb      	ldrh	r3, [r7, #14]
 8002242:	4413      	add	r3, r2
 8002244:	b298      	uxth	r0, r3
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	799b      	ldrb	r3, [r3, #6]
 800224a:	4a1c      	ldr	r2, [pc, #112]	; (80022bc <Paint_DrawTime+0x1f0>)
 800224c:	fba2 2303 	umull	r2, r3, r2, r3
 8002250:	08db      	lsrs	r3, r3, #3
 8002252:	b2db      	uxtb	r3, r3
 8002254:	3320      	adds	r3, #32
 8002256:	443b      	add	r3, r7
 8002258:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 800225c:	89b9      	ldrh	r1, [r7, #12]
 800225e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002260:	9301      	str	r3, [sp, #4]
 8002262:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002264:	9300      	str	r3, [sp, #0]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	f7ff fbca 	bl	8001a00 <Paint_DrawChar>
    Paint_DrawChar(Xstart + Dx * 6                  , Ystart, value[pTime->Sec % 10] , Font, Color_Background, Color_Foreground);
 800226c:	8bfb      	ldrh	r3, [r7, #30]
 800226e:	461a      	mov	r2, r3
 8002270:	0052      	lsls	r2, r2, #1
 8002272:	4413      	add	r3, r2
 8002274:	005b      	lsls	r3, r3, #1
 8002276:	b29a      	uxth	r2, r3
 8002278:	89fb      	ldrh	r3, [r7, #14]
 800227a:	4413      	add	r3, r2
 800227c:	b298      	uxth	r0, r3
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	799a      	ldrb	r2, [r3, #6]
 8002282:	4b0e      	ldr	r3, [pc, #56]	; (80022bc <Paint_DrawTime+0x1f0>)
 8002284:	fba3 1302 	umull	r1, r3, r3, r2
 8002288:	08d9      	lsrs	r1, r3, #3
 800228a:	460b      	mov	r3, r1
 800228c:	009b      	lsls	r3, r3, #2
 800228e:	440b      	add	r3, r1
 8002290:	005b      	lsls	r3, r3, #1
 8002292:	1ad3      	subs	r3, r2, r3
 8002294:	b2db      	uxtb	r3, r3
 8002296:	3320      	adds	r3, #32
 8002298:	443b      	add	r3, r7
 800229a:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 800229e:	89b9      	ldrh	r1, [r7, #12]
 80022a0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80022a2:	9301      	str	r3, [sp, #4]
 80022a4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80022a6:	9300      	str	r3, [sp, #0]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	f7ff fba9 	bl	8001a00 <Paint_DrawChar>
}
 80022ae:	bf00      	nop
 80022b0:	3720      	adds	r7, #32
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	080051bc 	.word	0x080051bc
 80022bc:	cccccccd 	.word	0xcccccccd

080022c0 <Paint_DrawBitMap>:
info:
    Use a computer to convert the image into a corresponding array,
    and then embed the array directly into Imagedata.cpp as a .c file.
******************************************************************************/
void Paint_DrawBitMap(const unsigned char* image_buffer)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b085      	sub	sp, #20
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
    UWORD x, y;
    UDOUBLE Addr = 0;
 80022c8:	2300      	movs	r3, #0
 80022ca:	60bb      	str	r3, [r7, #8]

    for (y = 0; y < Paint.HeightByte; y++) {
 80022cc:	2300      	movs	r3, #0
 80022ce:	81bb      	strh	r3, [r7, #12]
 80022d0:	e01e      	b.n	8002310 <Paint_DrawBitMap+0x50>
        for (x = 0; x < Paint.WidthByte; x++) {//8 pixel =  1 byte
 80022d2:	2300      	movs	r3, #0
 80022d4:	81fb      	strh	r3, [r7, #14]
 80022d6:	e013      	b.n	8002300 <Paint_DrawBitMap+0x40>
            Addr = x + y * Paint.WidthByte;
 80022d8:	89fa      	ldrh	r2, [r7, #14]
 80022da:	89bb      	ldrh	r3, [r7, #12]
 80022dc:	4912      	ldr	r1, [pc, #72]	; (8002328 <Paint_DrawBitMap+0x68>)
 80022de:	8a49      	ldrh	r1, [r1, #18]
 80022e0:	fb01 f303 	mul.w	r3, r1, r3
 80022e4:	4413      	add	r3, r2
 80022e6:	60bb      	str	r3, [r7, #8]
            Paint.Image[Addr] = (unsigned char)image_buffer[Addr];
 80022e8:	687a      	ldr	r2, [r7, #4]
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	441a      	add	r2, r3
 80022ee:	4b0e      	ldr	r3, [pc, #56]	; (8002328 <Paint_DrawBitMap+0x68>)
 80022f0:	6819      	ldr	r1, [r3, #0]
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	440b      	add	r3, r1
 80022f6:	7812      	ldrb	r2, [r2, #0]
 80022f8:	701a      	strb	r2, [r3, #0]
        for (x = 0; x < Paint.WidthByte; x++) {//8 pixel =  1 byte
 80022fa:	89fb      	ldrh	r3, [r7, #14]
 80022fc:	3301      	adds	r3, #1
 80022fe:	81fb      	strh	r3, [r7, #14]
 8002300:	4b09      	ldr	r3, [pc, #36]	; (8002328 <Paint_DrawBitMap+0x68>)
 8002302:	8a5b      	ldrh	r3, [r3, #18]
 8002304:	89fa      	ldrh	r2, [r7, #14]
 8002306:	429a      	cmp	r2, r3
 8002308:	d3e6      	bcc.n	80022d8 <Paint_DrawBitMap+0x18>
    for (y = 0; y < Paint.HeightByte; y++) {
 800230a:	89bb      	ldrh	r3, [r7, #12]
 800230c:	3301      	adds	r3, #1
 800230e:	81bb      	strh	r3, [r7, #12]
 8002310:	4b05      	ldr	r3, [pc, #20]	; (8002328 <Paint_DrawBitMap+0x68>)
 8002312:	8a9b      	ldrh	r3, [r3, #20]
 8002314:	89ba      	ldrh	r2, [r7, #12]
 8002316:	429a      	cmp	r2, r3
 8002318:	d3db      	bcc.n	80022d2 <Paint_DrawBitMap+0x12>
        }
    }
}
 800231a:	bf00      	nop
 800231c:	bf00      	nop
 800231e:	3714      	adds	r7, #20
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr
 8002328:	200001f0 	.word	0x200001f0

0800232c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002330:	f000 faa2 	bl	8002878 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002334:	f000 f80e 	bl	8002354 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002338:	f000 f8ac 	bl	8002494 <MX_GPIO_Init>
  MX_SPI1_Init();
 800233c:	f000 f874 	bl	8002428 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
//  EPD_2in9_test();
  EPD_2in9_V2_test();
 8002340:	f7fe fbe0 	bl	8000b04 <EPD_2in9_V2_test>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  EPD_2in9_V2_test();
 8002344:	f7fe fbde 	bl	8000b04 <EPD_2in9_V2_test>
	  HAL_Delay(10000);
 8002348:	f242 7010 	movw	r0, #10000	; 0x2710
 800234c:	f000 fb06 	bl	800295c <HAL_Delay>
	  EPD_2in9_V2_test();
 8002350:	e7f8      	b.n	8002344 <main+0x18>
	...

08002354 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b094      	sub	sp, #80	; 0x50
 8002358:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800235a:	f107 0320 	add.w	r3, r7, #32
 800235e:	2230      	movs	r2, #48	; 0x30
 8002360:	2100      	movs	r1, #0
 8002362:	4618      	mov	r0, r3
 8002364:	f001 fca8 	bl	8003cb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002368:	f107 030c 	add.w	r3, r7, #12
 800236c:	2200      	movs	r2, #0
 800236e:	601a      	str	r2, [r3, #0]
 8002370:	605a      	str	r2, [r3, #4]
 8002372:	609a      	str	r2, [r3, #8]
 8002374:	60da      	str	r2, [r3, #12]
 8002376:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002378:	2300      	movs	r3, #0
 800237a:	60bb      	str	r3, [r7, #8]
 800237c:	4b28      	ldr	r3, [pc, #160]	; (8002420 <SystemClock_Config+0xcc>)
 800237e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002380:	4a27      	ldr	r2, [pc, #156]	; (8002420 <SystemClock_Config+0xcc>)
 8002382:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002386:	6413      	str	r3, [r2, #64]	; 0x40
 8002388:	4b25      	ldr	r3, [pc, #148]	; (8002420 <SystemClock_Config+0xcc>)
 800238a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002390:	60bb      	str	r3, [r7, #8]
 8002392:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002394:	2300      	movs	r3, #0
 8002396:	607b      	str	r3, [r7, #4]
 8002398:	4b22      	ldr	r3, [pc, #136]	; (8002424 <SystemClock_Config+0xd0>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80023a0:	4a20      	ldr	r2, [pc, #128]	; (8002424 <SystemClock_Config+0xd0>)
 80023a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023a6:	6013      	str	r3, [r2, #0]
 80023a8:	4b1e      	ldr	r3, [pc, #120]	; (8002424 <SystemClock_Config+0xd0>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80023b0:	607b      	str	r3, [r7, #4]
 80023b2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80023b4:	2301      	movs	r3, #1
 80023b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80023b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80023bc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80023be:	2302      	movs	r3, #2
 80023c0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80023c2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80023c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80023c8:	2319      	movs	r3, #25
 80023ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80023cc:	23a8      	movs	r3, #168	; 0xa8
 80023ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80023d0:	2302      	movs	r3, #2
 80023d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80023d4:	2304      	movs	r3, #4
 80023d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023d8:	f107 0320 	add.w	r3, r7, #32
 80023dc:	4618      	mov	r0, r3
 80023de:	f000 fd7d 	bl	8002edc <HAL_RCC_OscConfig>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d001      	beq.n	80023ec <SystemClock_Config+0x98>
  {
    Error_Handler();
 80023e8:	f000 f8c6 	bl	8002578 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023ec:	230f      	movs	r3, #15
 80023ee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80023f0:	2302      	movs	r3, #2
 80023f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023f4:	2300      	movs	r3, #0
 80023f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80023f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80023fe:	2300      	movs	r3, #0
 8002400:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002402:	f107 030c 	add.w	r3, r7, #12
 8002406:	2102      	movs	r1, #2
 8002408:	4618      	mov	r0, r3
 800240a:	f000 ffdf 	bl	80033cc <HAL_RCC_ClockConfig>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d001      	beq.n	8002418 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002414:	f000 f8b0 	bl	8002578 <Error_Handler>
  }
}
 8002418:	bf00      	nop
 800241a:	3750      	adds	r7, #80	; 0x50
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}
 8002420:	40023800 	.word	0x40023800
 8002424:	40007000 	.word	0x40007000

08002428 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800242c:	4b17      	ldr	r3, [pc, #92]	; (800248c <MX_SPI1_Init+0x64>)
 800242e:	4a18      	ldr	r2, [pc, #96]	; (8002490 <MX_SPI1_Init+0x68>)
 8002430:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002432:	4b16      	ldr	r3, [pc, #88]	; (800248c <MX_SPI1_Init+0x64>)
 8002434:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002438:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800243a:	4b14      	ldr	r3, [pc, #80]	; (800248c <MX_SPI1_Init+0x64>)
 800243c:	2200      	movs	r2, #0
 800243e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002440:	4b12      	ldr	r3, [pc, #72]	; (800248c <MX_SPI1_Init+0x64>)
 8002442:	2200      	movs	r2, #0
 8002444:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002446:	4b11      	ldr	r3, [pc, #68]	; (800248c <MX_SPI1_Init+0x64>)
 8002448:	2200      	movs	r2, #0
 800244a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800244c:	4b0f      	ldr	r3, [pc, #60]	; (800248c <MX_SPI1_Init+0x64>)
 800244e:	2200      	movs	r2, #0
 8002450:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002452:	4b0e      	ldr	r3, [pc, #56]	; (800248c <MX_SPI1_Init+0x64>)
 8002454:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002458:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800245a:	4b0c      	ldr	r3, [pc, #48]	; (800248c <MX_SPI1_Init+0x64>)
 800245c:	2228      	movs	r2, #40	; 0x28
 800245e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002460:	4b0a      	ldr	r3, [pc, #40]	; (800248c <MX_SPI1_Init+0x64>)
 8002462:	2200      	movs	r2, #0
 8002464:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002466:	4b09      	ldr	r3, [pc, #36]	; (800248c <MX_SPI1_Init+0x64>)
 8002468:	2200      	movs	r2, #0
 800246a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800246c:	4b07      	ldr	r3, [pc, #28]	; (800248c <MX_SPI1_Init+0x64>)
 800246e:	2200      	movs	r2, #0
 8002470:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002472:	4b06      	ldr	r3, [pc, #24]	; (800248c <MX_SPI1_Init+0x64>)
 8002474:	220a      	movs	r2, #10
 8002476:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002478:	4804      	ldr	r0, [pc, #16]	; (800248c <MX_SPI1_Init+0x64>)
 800247a:	f001 f953 	bl	8003724 <HAL_SPI_Init>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d001      	beq.n	8002488 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002484:	f000 f878 	bl	8002578 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002488:	bf00      	nop
 800248a:	bd80      	pop	{r7, pc}
 800248c:	20000208 	.word	0x20000208
 8002490:	40013000 	.word	0x40013000

08002494 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b088      	sub	sp, #32
 8002498:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800249a:	f107 030c 	add.w	r3, r7, #12
 800249e:	2200      	movs	r2, #0
 80024a0:	601a      	str	r2, [r3, #0]
 80024a2:	605a      	str	r2, [r3, #4]
 80024a4:	609a      	str	r2, [r3, #8]
 80024a6:	60da      	str	r2, [r3, #12]
 80024a8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80024aa:	2300      	movs	r3, #0
 80024ac:	60bb      	str	r3, [r7, #8]
 80024ae:	4b2f      	ldr	r3, [pc, #188]	; (800256c <MX_GPIO_Init+0xd8>)
 80024b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b2:	4a2e      	ldr	r2, [pc, #184]	; (800256c <MX_GPIO_Init+0xd8>)
 80024b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024b8:	6313      	str	r3, [r2, #48]	; 0x30
 80024ba:	4b2c      	ldr	r3, [pc, #176]	; (800256c <MX_GPIO_Init+0xd8>)
 80024bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024c2:	60bb      	str	r3, [r7, #8]
 80024c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024c6:	2300      	movs	r3, #0
 80024c8:	607b      	str	r3, [r7, #4]
 80024ca:	4b28      	ldr	r3, [pc, #160]	; (800256c <MX_GPIO_Init+0xd8>)
 80024cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ce:	4a27      	ldr	r2, [pc, #156]	; (800256c <MX_GPIO_Init+0xd8>)
 80024d0:	f043 0301 	orr.w	r3, r3, #1
 80024d4:	6313      	str	r3, [r2, #48]	; 0x30
 80024d6:	4b25      	ldr	r3, [pc, #148]	; (800256c <MX_GPIO_Init+0xd8>)
 80024d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024da:	f003 0301 	and.w	r3, r3, #1
 80024de:	607b      	str	r3, [r7, #4]
 80024e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80024e2:	2300      	movs	r3, #0
 80024e4:	603b      	str	r3, [r7, #0]
 80024e6:	4b21      	ldr	r3, [pc, #132]	; (800256c <MX_GPIO_Init+0xd8>)
 80024e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ea:	4a20      	ldr	r2, [pc, #128]	; (800256c <MX_GPIO_Init+0xd8>)
 80024ec:	f043 0302 	orr.w	r3, r3, #2
 80024f0:	6313      	str	r3, [r2, #48]	; 0x30
 80024f2:	4b1e      	ldr	r3, [pc, #120]	; (800256c <MX_GPIO_Init+0xd8>)
 80024f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f6:	f003 0302 	and.w	r3, r3, #2
 80024fa:	603b      	str	r3, [r7, #0]
 80024fc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RST_Pin|SPI_CS_Pin, GPIO_PIN_RESET);
 80024fe:	2200      	movs	r2, #0
 8002500:	2150      	movs	r1, #80	; 0x50
 8002502:	481b      	ldr	r0, [pc, #108]	; (8002570 <MX_GPIO_Init+0xdc>)
 8002504:	f000 fcd0 	bl	8002ea8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_RESET);
 8002508:	2200      	movs	r2, #0
 800250a:	2101      	movs	r1, #1
 800250c:	4819      	ldr	r0, [pc, #100]	; (8002574 <MX_GPIO_Init+0xe0>)
 800250e:	f000 fccb 	bl	8002ea8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUSY_Pin */
  GPIO_InitStruct.Pin = BUSY_Pin;
 8002512:	2308      	movs	r3, #8
 8002514:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002516:	2300      	movs	r3, #0
 8002518:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800251a:	2300      	movs	r3, #0
 800251c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUSY_GPIO_Port, &GPIO_InitStruct);
 800251e:	f107 030c 	add.w	r3, r7, #12
 8002522:	4619      	mov	r1, r3
 8002524:	4812      	ldr	r0, [pc, #72]	; (8002570 <MX_GPIO_Init+0xdc>)
 8002526:	f000 fb23 	bl	8002b70 <HAL_GPIO_Init>

  /*Configure GPIO pins : RST_Pin SPI_CS_Pin */
  GPIO_InitStruct.Pin = RST_Pin|SPI_CS_Pin;
 800252a:	2350      	movs	r3, #80	; 0x50
 800252c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800252e:	2301      	movs	r3, #1
 8002530:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002532:	2300      	movs	r3, #0
 8002534:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002536:	2302      	movs	r3, #2
 8002538:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800253a:	f107 030c 	add.w	r3, r7, #12
 800253e:	4619      	mov	r1, r3
 8002540:	480b      	ldr	r0, [pc, #44]	; (8002570 <MX_GPIO_Init+0xdc>)
 8002542:	f000 fb15 	bl	8002b70 <HAL_GPIO_Init>

  /*Configure GPIO pin : DC_Pin */
  GPIO_InitStruct.Pin = DC_Pin;
 8002546:	2301      	movs	r3, #1
 8002548:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800254a:	2301      	movs	r3, #1
 800254c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800254e:	2300      	movs	r3, #0
 8002550:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002552:	2302      	movs	r3, #2
 8002554:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DC_GPIO_Port, &GPIO_InitStruct);
 8002556:	f107 030c 	add.w	r3, r7, #12
 800255a:	4619      	mov	r1, r3
 800255c:	4805      	ldr	r0, [pc, #20]	; (8002574 <MX_GPIO_Init+0xe0>)
 800255e:	f000 fb07 	bl	8002b70 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002562:	bf00      	nop
 8002564:	3720      	adds	r7, #32
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	40023800 	.word	0x40023800
 8002570:	40020000 	.word	0x40020000
 8002574:	40020400 	.word	0x40020400

08002578 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002578:	b480      	push	{r7}
 800257a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800257c:	b672      	cpsid	i
}
 800257e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002580:	e7fe      	b.n	8002580 <Error_Handler+0x8>
	...

08002584 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800258a:	2300      	movs	r3, #0
 800258c:	607b      	str	r3, [r7, #4]
 800258e:	4b10      	ldr	r3, [pc, #64]	; (80025d0 <HAL_MspInit+0x4c>)
 8002590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002592:	4a0f      	ldr	r2, [pc, #60]	; (80025d0 <HAL_MspInit+0x4c>)
 8002594:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002598:	6453      	str	r3, [r2, #68]	; 0x44
 800259a:	4b0d      	ldr	r3, [pc, #52]	; (80025d0 <HAL_MspInit+0x4c>)
 800259c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800259e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025a2:	607b      	str	r3, [r7, #4]
 80025a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025a6:	2300      	movs	r3, #0
 80025a8:	603b      	str	r3, [r7, #0]
 80025aa:	4b09      	ldr	r3, [pc, #36]	; (80025d0 <HAL_MspInit+0x4c>)
 80025ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ae:	4a08      	ldr	r2, [pc, #32]	; (80025d0 <HAL_MspInit+0x4c>)
 80025b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025b4:	6413      	str	r3, [r2, #64]	; 0x40
 80025b6:	4b06      	ldr	r3, [pc, #24]	; (80025d0 <HAL_MspInit+0x4c>)
 80025b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025be:	603b      	str	r3, [r7, #0]
 80025c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025c2:	bf00      	nop
 80025c4:	370c      	adds	r7, #12
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr
 80025ce:	bf00      	nop
 80025d0:	40023800 	.word	0x40023800

080025d4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b08a      	sub	sp, #40	; 0x28
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025dc:	f107 0314 	add.w	r3, r7, #20
 80025e0:	2200      	movs	r2, #0
 80025e2:	601a      	str	r2, [r3, #0]
 80025e4:	605a      	str	r2, [r3, #4]
 80025e6:	609a      	str	r2, [r3, #8]
 80025e8:	60da      	str	r2, [r3, #12]
 80025ea:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a19      	ldr	r2, [pc, #100]	; (8002658 <HAL_SPI_MspInit+0x84>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d12b      	bne.n	800264e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80025f6:	2300      	movs	r3, #0
 80025f8:	613b      	str	r3, [r7, #16]
 80025fa:	4b18      	ldr	r3, [pc, #96]	; (800265c <HAL_SPI_MspInit+0x88>)
 80025fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025fe:	4a17      	ldr	r2, [pc, #92]	; (800265c <HAL_SPI_MspInit+0x88>)
 8002600:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002604:	6453      	str	r3, [r2, #68]	; 0x44
 8002606:	4b15      	ldr	r3, [pc, #84]	; (800265c <HAL_SPI_MspInit+0x88>)
 8002608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800260a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800260e:	613b      	str	r3, [r7, #16]
 8002610:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002612:	2300      	movs	r3, #0
 8002614:	60fb      	str	r3, [r7, #12]
 8002616:	4b11      	ldr	r3, [pc, #68]	; (800265c <HAL_SPI_MspInit+0x88>)
 8002618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800261a:	4a10      	ldr	r2, [pc, #64]	; (800265c <HAL_SPI_MspInit+0x88>)
 800261c:	f043 0301 	orr.w	r3, r3, #1
 8002620:	6313      	str	r3, [r2, #48]	; 0x30
 8002622:	4b0e      	ldr	r3, [pc, #56]	; (800265c <HAL_SPI_MspInit+0x88>)
 8002624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002626:	f003 0301 	and.w	r3, r3, #1
 800262a:	60fb      	str	r3, [r7, #12]
 800262c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800262e:	23a0      	movs	r3, #160	; 0xa0
 8002630:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002632:	2302      	movs	r3, #2
 8002634:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002636:	2300      	movs	r3, #0
 8002638:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800263a:	2303      	movs	r3, #3
 800263c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800263e:	2305      	movs	r3, #5
 8002640:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002642:	f107 0314 	add.w	r3, r7, #20
 8002646:	4619      	mov	r1, r3
 8002648:	4805      	ldr	r0, [pc, #20]	; (8002660 <HAL_SPI_MspInit+0x8c>)
 800264a:	f000 fa91 	bl	8002b70 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800264e:	bf00      	nop
 8002650:	3728      	adds	r7, #40	; 0x28
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	40013000 	.word	0x40013000
 800265c:	40023800 	.word	0x40023800
 8002660:	40020000 	.word	0x40020000

08002664 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002664:	b480      	push	{r7}
 8002666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002668:	e7fe      	b.n	8002668 <NMI_Handler+0x4>

0800266a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800266a:	b480      	push	{r7}
 800266c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800266e:	e7fe      	b.n	800266e <HardFault_Handler+0x4>

08002670 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002670:	b480      	push	{r7}
 8002672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002674:	e7fe      	b.n	8002674 <MemManage_Handler+0x4>

08002676 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002676:	b480      	push	{r7}
 8002678:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800267a:	e7fe      	b.n	800267a <BusFault_Handler+0x4>

0800267c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800267c:	b480      	push	{r7}
 800267e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002680:	e7fe      	b.n	8002680 <UsageFault_Handler+0x4>

08002682 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002682:	b480      	push	{r7}
 8002684:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002686:	bf00      	nop
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr

08002690 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002690:	b480      	push	{r7}
 8002692:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002694:	bf00      	nop
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr

0800269e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800269e:	b480      	push	{r7}
 80026a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80026a2:	bf00      	nop
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr

080026ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026b0:	f000 f934 	bl	800291c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026b4:	bf00      	nop
 80026b6:	bd80      	pop	{r7, pc}

080026b8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b086      	sub	sp, #24
 80026bc:	af00      	add	r7, sp, #0
 80026be:	60f8      	str	r0, [r7, #12]
 80026c0:	60b9      	str	r1, [r7, #8]
 80026c2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026c4:	2300      	movs	r3, #0
 80026c6:	617b      	str	r3, [r7, #20]
 80026c8:	e00a      	b.n	80026e0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80026ca:	f3af 8000 	nop.w
 80026ce:	4601      	mov	r1, r0
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	1c5a      	adds	r2, r3, #1
 80026d4:	60ba      	str	r2, [r7, #8]
 80026d6:	b2ca      	uxtb	r2, r1
 80026d8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	3301      	adds	r3, #1
 80026de:	617b      	str	r3, [r7, #20]
 80026e0:	697a      	ldr	r2, [r7, #20]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	429a      	cmp	r2, r3
 80026e6:	dbf0      	blt.n	80026ca <_read+0x12>
  }

  return len;
 80026e8:	687b      	ldr	r3, [r7, #4]
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3718      	adds	r7, #24
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}

080026f2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80026f2:	b580      	push	{r7, lr}
 80026f4:	b086      	sub	sp, #24
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	60f8      	str	r0, [r7, #12]
 80026fa:	60b9      	str	r1, [r7, #8]
 80026fc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026fe:	2300      	movs	r3, #0
 8002700:	617b      	str	r3, [r7, #20]
 8002702:	e009      	b.n	8002718 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	1c5a      	adds	r2, r3, #1
 8002708:	60ba      	str	r2, [r7, #8]
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	4618      	mov	r0, r3
 800270e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	3301      	adds	r3, #1
 8002716:	617b      	str	r3, [r7, #20]
 8002718:	697a      	ldr	r2, [r7, #20]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	429a      	cmp	r2, r3
 800271e:	dbf1      	blt.n	8002704 <_write+0x12>
  }
  return len;
 8002720:	687b      	ldr	r3, [r7, #4]
}
 8002722:	4618      	mov	r0, r3
 8002724:	3718      	adds	r7, #24
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}

0800272a <_close>:

int _close(int file)
{
 800272a:	b480      	push	{r7}
 800272c:	b083      	sub	sp, #12
 800272e:	af00      	add	r7, sp, #0
 8002730:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002732:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002736:	4618      	mov	r0, r3
 8002738:	370c      	adds	r7, #12
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr

08002742 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002742:	b480      	push	{r7}
 8002744:	b083      	sub	sp, #12
 8002746:	af00      	add	r7, sp, #0
 8002748:	6078      	str	r0, [r7, #4]
 800274a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002752:	605a      	str	r2, [r3, #4]
  return 0;
 8002754:	2300      	movs	r3, #0
}
 8002756:	4618      	mov	r0, r3
 8002758:	370c      	adds	r7, #12
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr

08002762 <_isatty>:

int _isatty(int file)
{
 8002762:	b480      	push	{r7}
 8002764:	b083      	sub	sp, #12
 8002766:	af00      	add	r7, sp, #0
 8002768:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800276a:	2301      	movs	r3, #1
}
 800276c:	4618      	mov	r0, r3
 800276e:	370c      	adds	r7, #12
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr

08002778 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002778:	b480      	push	{r7}
 800277a:	b085      	sub	sp, #20
 800277c:	af00      	add	r7, sp, #0
 800277e:	60f8      	str	r0, [r7, #12]
 8002780:	60b9      	str	r1, [r7, #8]
 8002782:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002784:	2300      	movs	r3, #0
}
 8002786:	4618      	mov	r0, r3
 8002788:	3714      	adds	r7, #20
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr
	...

08002794 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b086      	sub	sp, #24
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800279c:	4a14      	ldr	r2, [pc, #80]	; (80027f0 <_sbrk+0x5c>)
 800279e:	4b15      	ldr	r3, [pc, #84]	; (80027f4 <_sbrk+0x60>)
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80027a8:	4b13      	ldr	r3, [pc, #76]	; (80027f8 <_sbrk+0x64>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d102      	bne.n	80027b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80027b0:	4b11      	ldr	r3, [pc, #68]	; (80027f8 <_sbrk+0x64>)
 80027b2:	4a12      	ldr	r2, [pc, #72]	; (80027fc <_sbrk+0x68>)
 80027b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80027b6:	4b10      	ldr	r3, [pc, #64]	; (80027f8 <_sbrk+0x64>)
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	4413      	add	r3, r2
 80027be:	693a      	ldr	r2, [r7, #16]
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d207      	bcs.n	80027d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80027c4:	f001 fa3e 	bl	8003c44 <__errno>
 80027c8:	4603      	mov	r3, r0
 80027ca:	220c      	movs	r2, #12
 80027cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80027ce:	f04f 33ff 	mov.w	r3, #4294967295
 80027d2:	e009      	b.n	80027e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80027d4:	4b08      	ldr	r3, [pc, #32]	; (80027f8 <_sbrk+0x64>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80027da:	4b07      	ldr	r3, [pc, #28]	; (80027f8 <_sbrk+0x64>)
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	4413      	add	r3, r2
 80027e2:	4a05      	ldr	r2, [pc, #20]	; (80027f8 <_sbrk+0x64>)
 80027e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80027e6:	68fb      	ldr	r3, [r7, #12]
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	3718      	adds	r7, #24
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}
 80027f0:	20018000 	.word	0x20018000
 80027f4:	00000400 	.word	0x00000400
 80027f8:	20000260 	.word	0x20000260
 80027fc:	20000278 	.word	0x20000278

08002800 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002800:	b480      	push	{r7}
 8002802:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002804:	4b06      	ldr	r3, [pc, #24]	; (8002820 <SystemInit+0x20>)
 8002806:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800280a:	4a05      	ldr	r2, [pc, #20]	; (8002820 <SystemInit+0x20>)
 800280c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002810:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002814:	bf00      	nop
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr
 800281e:	bf00      	nop
 8002820:	e000ed00 	.word	0xe000ed00

08002824 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002824:	f8df d034 	ldr.w	sp, [pc, #52]	; 800285c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002828:	480d      	ldr	r0, [pc, #52]	; (8002860 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800282a:	490e      	ldr	r1, [pc, #56]	; (8002864 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800282c:	4a0e      	ldr	r2, [pc, #56]	; (8002868 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800282e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002830:	e002      	b.n	8002838 <LoopCopyDataInit>

08002832 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002832:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002834:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002836:	3304      	adds	r3, #4

08002838 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002838:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800283a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800283c:	d3f9      	bcc.n	8002832 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800283e:	4a0b      	ldr	r2, [pc, #44]	; (800286c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002840:	4c0b      	ldr	r4, [pc, #44]	; (8002870 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002842:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002844:	e001      	b.n	800284a <LoopFillZerobss>

08002846 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002846:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002848:	3204      	adds	r2, #4

0800284a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800284a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800284c:	d3fb      	bcc.n	8002846 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800284e:	f7ff ffd7 	bl	8002800 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002852:	f001 f9fd 	bl	8003c50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002856:	f7ff fd69 	bl	800232c <main>
  bx  lr    
 800285a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800285c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002860:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002864:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002868:	0800a190 	.word	0x0800a190
  ldr r2, =_sbss
 800286c:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002870:	20000278 	.word	0x20000278

08002874 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002874:	e7fe      	b.n	8002874 <ADC_IRQHandler>
	...

08002878 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800287c:	4b0e      	ldr	r3, [pc, #56]	; (80028b8 <HAL_Init+0x40>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a0d      	ldr	r2, [pc, #52]	; (80028b8 <HAL_Init+0x40>)
 8002882:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002886:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002888:	4b0b      	ldr	r3, [pc, #44]	; (80028b8 <HAL_Init+0x40>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a0a      	ldr	r2, [pc, #40]	; (80028b8 <HAL_Init+0x40>)
 800288e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002892:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002894:	4b08      	ldr	r3, [pc, #32]	; (80028b8 <HAL_Init+0x40>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a07      	ldr	r2, [pc, #28]	; (80028b8 <HAL_Init+0x40>)
 800289a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800289e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028a0:	2003      	movs	r0, #3
 80028a2:	f000 f931 	bl	8002b08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80028a6:	200f      	movs	r0, #15
 80028a8:	f000 f808 	bl	80028bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80028ac:	f7ff fe6a 	bl	8002584 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80028b0:	2300      	movs	r3, #0
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	bf00      	nop
 80028b8:	40023c00 	.word	0x40023c00

080028bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b082      	sub	sp, #8
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80028c4:	4b12      	ldr	r3, [pc, #72]	; (8002910 <HAL_InitTick+0x54>)
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	4b12      	ldr	r3, [pc, #72]	; (8002914 <HAL_InitTick+0x58>)
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	4619      	mov	r1, r3
 80028ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80028d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80028da:	4618      	mov	r0, r3
 80028dc:	f000 f93b 	bl	8002b56 <HAL_SYSTICK_Config>
 80028e0:	4603      	mov	r3, r0
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d001      	beq.n	80028ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e00e      	b.n	8002908 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2b0f      	cmp	r3, #15
 80028ee:	d80a      	bhi.n	8002906 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028f0:	2200      	movs	r2, #0
 80028f2:	6879      	ldr	r1, [r7, #4]
 80028f4:	f04f 30ff 	mov.w	r0, #4294967295
 80028f8:	f000 f911 	bl	8002b1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80028fc:	4a06      	ldr	r2, [pc, #24]	; (8002918 <HAL_InitTick+0x5c>)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002902:	2300      	movs	r3, #0
 8002904:	e000      	b.n	8002908 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
}
 8002908:	4618      	mov	r0, r3
 800290a:	3708      	adds	r7, #8
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}
 8002910:	20000164 	.word	0x20000164
 8002914:	2000016c 	.word	0x2000016c
 8002918:	20000168 	.word	0x20000168

0800291c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800291c:	b480      	push	{r7}
 800291e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002920:	4b06      	ldr	r3, [pc, #24]	; (800293c <HAL_IncTick+0x20>)
 8002922:	781b      	ldrb	r3, [r3, #0]
 8002924:	461a      	mov	r2, r3
 8002926:	4b06      	ldr	r3, [pc, #24]	; (8002940 <HAL_IncTick+0x24>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4413      	add	r3, r2
 800292c:	4a04      	ldr	r2, [pc, #16]	; (8002940 <HAL_IncTick+0x24>)
 800292e:	6013      	str	r3, [r2, #0]
}
 8002930:	bf00      	nop
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr
 800293a:	bf00      	nop
 800293c:	2000016c 	.word	0x2000016c
 8002940:	20000264 	.word	0x20000264

08002944 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002944:	b480      	push	{r7}
 8002946:	af00      	add	r7, sp, #0
  return uwTick;
 8002948:	4b03      	ldr	r3, [pc, #12]	; (8002958 <HAL_GetTick+0x14>)
 800294a:	681b      	ldr	r3, [r3, #0]
}
 800294c:	4618      	mov	r0, r3
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr
 8002956:	bf00      	nop
 8002958:	20000264 	.word	0x20000264

0800295c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b084      	sub	sp, #16
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002964:	f7ff ffee 	bl	8002944 <HAL_GetTick>
 8002968:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002974:	d005      	beq.n	8002982 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002976:	4b0a      	ldr	r3, [pc, #40]	; (80029a0 <HAL_Delay+0x44>)
 8002978:	781b      	ldrb	r3, [r3, #0]
 800297a:	461a      	mov	r2, r3
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	4413      	add	r3, r2
 8002980:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002982:	bf00      	nop
 8002984:	f7ff ffde 	bl	8002944 <HAL_GetTick>
 8002988:	4602      	mov	r2, r0
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	68fa      	ldr	r2, [r7, #12]
 8002990:	429a      	cmp	r2, r3
 8002992:	d8f7      	bhi.n	8002984 <HAL_Delay+0x28>
  {
  }
}
 8002994:	bf00      	nop
 8002996:	bf00      	nop
 8002998:	3710      	adds	r7, #16
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	2000016c 	.word	0x2000016c

080029a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b085      	sub	sp, #20
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	f003 0307 	and.w	r3, r3, #7
 80029b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029b4:	4b0c      	ldr	r3, [pc, #48]	; (80029e8 <__NVIC_SetPriorityGrouping+0x44>)
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029ba:	68ba      	ldr	r2, [r7, #8]
 80029bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80029c0:	4013      	ands	r3, r2
 80029c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80029d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029d6:	4a04      	ldr	r2, [pc, #16]	; (80029e8 <__NVIC_SetPriorityGrouping+0x44>)
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	60d3      	str	r3, [r2, #12]
}
 80029dc:	bf00      	nop
 80029de:	3714      	adds	r7, #20
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr
 80029e8:	e000ed00 	.word	0xe000ed00

080029ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029ec:	b480      	push	{r7}
 80029ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029f0:	4b04      	ldr	r3, [pc, #16]	; (8002a04 <__NVIC_GetPriorityGrouping+0x18>)
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	0a1b      	lsrs	r3, r3, #8
 80029f6:	f003 0307 	and.w	r3, r3, #7
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr
 8002a04:	e000ed00 	.word	0xe000ed00

08002a08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b083      	sub	sp, #12
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	4603      	mov	r3, r0
 8002a10:	6039      	str	r1, [r7, #0]
 8002a12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	db0a      	blt.n	8002a32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	b2da      	uxtb	r2, r3
 8002a20:	490c      	ldr	r1, [pc, #48]	; (8002a54 <__NVIC_SetPriority+0x4c>)
 8002a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a26:	0112      	lsls	r2, r2, #4
 8002a28:	b2d2      	uxtb	r2, r2
 8002a2a:	440b      	add	r3, r1
 8002a2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a30:	e00a      	b.n	8002a48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	b2da      	uxtb	r2, r3
 8002a36:	4908      	ldr	r1, [pc, #32]	; (8002a58 <__NVIC_SetPriority+0x50>)
 8002a38:	79fb      	ldrb	r3, [r7, #7]
 8002a3a:	f003 030f 	and.w	r3, r3, #15
 8002a3e:	3b04      	subs	r3, #4
 8002a40:	0112      	lsls	r2, r2, #4
 8002a42:	b2d2      	uxtb	r2, r2
 8002a44:	440b      	add	r3, r1
 8002a46:	761a      	strb	r2, [r3, #24]
}
 8002a48:	bf00      	nop
 8002a4a:	370c      	adds	r7, #12
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr
 8002a54:	e000e100 	.word	0xe000e100
 8002a58:	e000ed00 	.word	0xe000ed00

08002a5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b089      	sub	sp, #36	; 0x24
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	60f8      	str	r0, [r7, #12]
 8002a64:	60b9      	str	r1, [r7, #8]
 8002a66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	f003 0307 	and.w	r3, r3, #7
 8002a6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a70:	69fb      	ldr	r3, [r7, #28]
 8002a72:	f1c3 0307 	rsb	r3, r3, #7
 8002a76:	2b04      	cmp	r3, #4
 8002a78:	bf28      	it	cs
 8002a7a:	2304      	movcs	r3, #4
 8002a7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a7e:	69fb      	ldr	r3, [r7, #28]
 8002a80:	3304      	adds	r3, #4
 8002a82:	2b06      	cmp	r3, #6
 8002a84:	d902      	bls.n	8002a8c <NVIC_EncodePriority+0x30>
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	3b03      	subs	r3, #3
 8002a8a:	e000      	b.n	8002a8e <NVIC_EncodePriority+0x32>
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a90:	f04f 32ff 	mov.w	r2, #4294967295
 8002a94:	69bb      	ldr	r3, [r7, #24]
 8002a96:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9a:	43da      	mvns	r2, r3
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	401a      	ands	r2, r3
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002aa4:	f04f 31ff 	mov.w	r1, #4294967295
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	fa01 f303 	lsl.w	r3, r1, r3
 8002aae:	43d9      	mvns	r1, r3
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ab4:	4313      	orrs	r3, r2
         );
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3724      	adds	r7, #36	; 0x24
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr
	...

08002ac4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b082      	sub	sp, #8
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	3b01      	subs	r3, #1
 8002ad0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ad4:	d301      	bcc.n	8002ada <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e00f      	b.n	8002afa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ada:	4a0a      	ldr	r2, [pc, #40]	; (8002b04 <SysTick_Config+0x40>)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	3b01      	subs	r3, #1
 8002ae0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ae2:	210f      	movs	r1, #15
 8002ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ae8:	f7ff ff8e 	bl	8002a08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002aec:	4b05      	ldr	r3, [pc, #20]	; (8002b04 <SysTick_Config+0x40>)
 8002aee:	2200      	movs	r2, #0
 8002af0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002af2:	4b04      	ldr	r3, [pc, #16]	; (8002b04 <SysTick_Config+0x40>)
 8002af4:	2207      	movs	r2, #7
 8002af6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002af8:	2300      	movs	r3, #0
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3708      	adds	r7, #8
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	e000e010 	.word	0xe000e010

08002b08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b082      	sub	sp, #8
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b10:	6878      	ldr	r0, [r7, #4]
 8002b12:	f7ff ff47 	bl	80029a4 <__NVIC_SetPriorityGrouping>
}
 8002b16:	bf00      	nop
 8002b18:	3708      	adds	r7, #8
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}

08002b1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b1e:	b580      	push	{r7, lr}
 8002b20:	b086      	sub	sp, #24
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	4603      	mov	r3, r0
 8002b26:	60b9      	str	r1, [r7, #8]
 8002b28:	607a      	str	r2, [r7, #4]
 8002b2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b30:	f7ff ff5c 	bl	80029ec <__NVIC_GetPriorityGrouping>
 8002b34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b36:	687a      	ldr	r2, [r7, #4]
 8002b38:	68b9      	ldr	r1, [r7, #8]
 8002b3a:	6978      	ldr	r0, [r7, #20]
 8002b3c:	f7ff ff8e 	bl	8002a5c <NVIC_EncodePriority>
 8002b40:	4602      	mov	r2, r0
 8002b42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b46:	4611      	mov	r1, r2
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f7ff ff5d 	bl	8002a08 <__NVIC_SetPriority>
}
 8002b4e:	bf00      	nop
 8002b50:	3718      	adds	r7, #24
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}

08002b56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b56:	b580      	push	{r7, lr}
 8002b58:	b082      	sub	sp, #8
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f7ff ffb0 	bl	8002ac4 <SysTick_Config>
 8002b64:	4603      	mov	r3, r0
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3708      	adds	r7, #8
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
	...

08002b70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b089      	sub	sp, #36	; 0x24
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
 8002b78:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b82:	2300      	movs	r3, #0
 8002b84:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b86:	2300      	movs	r3, #0
 8002b88:	61fb      	str	r3, [r7, #28]
 8002b8a:	e159      	b.n	8002e40 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	fa02 f303 	lsl.w	r3, r2, r3
 8002b94:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	697a      	ldr	r2, [r7, #20]
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ba0:	693a      	ldr	r2, [r7, #16]
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	f040 8148 	bne.w	8002e3a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	f003 0303 	and.w	r3, r3, #3
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d005      	beq.n	8002bc2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002bbe:	2b02      	cmp	r3, #2
 8002bc0:	d130      	bne.n	8002c24 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002bc8:	69fb      	ldr	r3, [r7, #28]
 8002bca:	005b      	lsls	r3, r3, #1
 8002bcc:	2203      	movs	r2, #3
 8002bce:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd2:	43db      	mvns	r3, r3
 8002bd4:	69ba      	ldr	r2, [r7, #24]
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	68da      	ldr	r2, [r3, #12]
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	005b      	lsls	r3, r3, #1
 8002be2:	fa02 f303 	lsl.w	r3, r2, r3
 8002be6:	69ba      	ldr	r2, [r7, #24]
 8002be8:	4313      	orrs	r3, r2
 8002bea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	69ba      	ldr	r2, [r7, #24]
 8002bf0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	69fb      	ldr	r3, [r7, #28]
 8002bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002c00:	43db      	mvns	r3, r3
 8002c02:	69ba      	ldr	r2, [r7, #24]
 8002c04:	4013      	ands	r3, r2
 8002c06:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	091b      	lsrs	r3, r3, #4
 8002c0e:	f003 0201 	and.w	r2, r3, #1
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	fa02 f303 	lsl.w	r3, r2, r3
 8002c18:	69ba      	ldr	r2, [r7, #24]
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	69ba      	ldr	r2, [r7, #24]
 8002c22:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	f003 0303 	and.w	r3, r3, #3
 8002c2c:	2b03      	cmp	r3, #3
 8002c2e:	d017      	beq.n	8002c60 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	68db      	ldr	r3, [r3, #12]
 8002c34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	005b      	lsls	r3, r3, #1
 8002c3a:	2203      	movs	r2, #3
 8002c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c40:	43db      	mvns	r3, r3
 8002c42:	69ba      	ldr	r2, [r7, #24]
 8002c44:	4013      	ands	r3, r2
 8002c46:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	689a      	ldr	r2, [r3, #8]
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	005b      	lsls	r3, r3, #1
 8002c50:	fa02 f303 	lsl.w	r3, r2, r3
 8002c54:	69ba      	ldr	r2, [r7, #24]
 8002c56:	4313      	orrs	r3, r2
 8002c58:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	69ba      	ldr	r2, [r7, #24]
 8002c5e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	f003 0303 	and.w	r3, r3, #3
 8002c68:	2b02      	cmp	r3, #2
 8002c6a:	d123      	bne.n	8002cb4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c6c:	69fb      	ldr	r3, [r7, #28]
 8002c6e:	08da      	lsrs	r2, r3, #3
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	3208      	adds	r2, #8
 8002c74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c78:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	f003 0307 	and.w	r3, r3, #7
 8002c80:	009b      	lsls	r3, r3, #2
 8002c82:	220f      	movs	r2, #15
 8002c84:	fa02 f303 	lsl.w	r3, r2, r3
 8002c88:	43db      	mvns	r3, r3
 8002c8a:	69ba      	ldr	r2, [r7, #24]
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	691a      	ldr	r2, [r3, #16]
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	f003 0307 	and.w	r3, r3, #7
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca0:	69ba      	ldr	r2, [r7, #24]
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	08da      	lsrs	r2, r3, #3
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	3208      	adds	r2, #8
 8002cae:	69b9      	ldr	r1, [r7, #24]
 8002cb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	005b      	lsls	r3, r3, #1
 8002cbe:	2203      	movs	r2, #3
 8002cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc4:	43db      	mvns	r3, r3
 8002cc6:	69ba      	ldr	r2, [r7, #24]
 8002cc8:	4013      	ands	r3, r2
 8002cca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f003 0203 	and.w	r2, r3, #3
 8002cd4:	69fb      	ldr	r3, [r7, #28]
 8002cd6:	005b      	lsls	r3, r3, #1
 8002cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cdc:	69ba      	ldr	r2, [r7, #24]
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	69ba      	ldr	r2, [r7, #24]
 8002ce6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	f000 80a2 	beq.w	8002e3a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	60fb      	str	r3, [r7, #12]
 8002cfa:	4b57      	ldr	r3, [pc, #348]	; (8002e58 <HAL_GPIO_Init+0x2e8>)
 8002cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cfe:	4a56      	ldr	r2, [pc, #344]	; (8002e58 <HAL_GPIO_Init+0x2e8>)
 8002d00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d04:	6453      	str	r3, [r2, #68]	; 0x44
 8002d06:	4b54      	ldr	r3, [pc, #336]	; (8002e58 <HAL_GPIO_Init+0x2e8>)
 8002d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d0e:	60fb      	str	r3, [r7, #12]
 8002d10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d12:	4a52      	ldr	r2, [pc, #328]	; (8002e5c <HAL_GPIO_Init+0x2ec>)
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	089b      	lsrs	r3, r3, #2
 8002d18:	3302      	adds	r3, #2
 8002d1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d20:	69fb      	ldr	r3, [r7, #28]
 8002d22:	f003 0303 	and.w	r3, r3, #3
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	220f      	movs	r2, #15
 8002d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2e:	43db      	mvns	r3, r3
 8002d30:	69ba      	ldr	r2, [r7, #24]
 8002d32:	4013      	ands	r3, r2
 8002d34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	4a49      	ldr	r2, [pc, #292]	; (8002e60 <HAL_GPIO_Init+0x2f0>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d019      	beq.n	8002d72 <HAL_GPIO_Init+0x202>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	4a48      	ldr	r2, [pc, #288]	; (8002e64 <HAL_GPIO_Init+0x2f4>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d013      	beq.n	8002d6e <HAL_GPIO_Init+0x1fe>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4a47      	ldr	r2, [pc, #284]	; (8002e68 <HAL_GPIO_Init+0x2f8>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d00d      	beq.n	8002d6a <HAL_GPIO_Init+0x1fa>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4a46      	ldr	r2, [pc, #280]	; (8002e6c <HAL_GPIO_Init+0x2fc>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d007      	beq.n	8002d66 <HAL_GPIO_Init+0x1f6>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4a45      	ldr	r2, [pc, #276]	; (8002e70 <HAL_GPIO_Init+0x300>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d101      	bne.n	8002d62 <HAL_GPIO_Init+0x1f2>
 8002d5e:	2304      	movs	r3, #4
 8002d60:	e008      	b.n	8002d74 <HAL_GPIO_Init+0x204>
 8002d62:	2307      	movs	r3, #7
 8002d64:	e006      	b.n	8002d74 <HAL_GPIO_Init+0x204>
 8002d66:	2303      	movs	r3, #3
 8002d68:	e004      	b.n	8002d74 <HAL_GPIO_Init+0x204>
 8002d6a:	2302      	movs	r3, #2
 8002d6c:	e002      	b.n	8002d74 <HAL_GPIO_Init+0x204>
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e000      	b.n	8002d74 <HAL_GPIO_Init+0x204>
 8002d72:	2300      	movs	r3, #0
 8002d74:	69fa      	ldr	r2, [r7, #28]
 8002d76:	f002 0203 	and.w	r2, r2, #3
 8002d7a:	0092      	lsls	r2, r2, #2
 8002d7c:	4093      	lsls	r3, r2
 8002d7e:	69ba      	ldr	r2, [r7, #24]
 8002d80:	4313      	orrs	r3, r2
 8002d82:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d84:	4935      	ldr	r1, [pc, #212]	; (8002e5c <HAL_GPIO_Init+0x2ec>)
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	089b      	lsrs	r3, r3, #2
 8002d8a:	3302      	adds	r3, #2
 8002d8c:	69ba      	ldr	r2, [r7, #24]
 8002d8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d92:	4b38      	ldr	r3, [pc, #224]	; (8002e74 <HAL_GPIO_Init+0x304>)
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	43db      	mvns	r3, r3
 8002d9c:	69ba      	ldr	r2, [r7, #24]
 8002d9e:	4013      	ands	r3, r2
 8002da0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d003      	beq.n	8002db6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002dae:	69ba      	ldr	r2, [r7, #24]
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	4313      	orrs	r3, r2
 8002db4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002db6:	4a2f      	ldr	r2, [pc, #188]	; (8002e74 <HAL_GPIO_Init+0x304>)
 8002db8:	69bb      	ldr	r3, [r7, #24]
 8002dba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002dbc:	4b2d      	ldr	r3, [pc, #180]	; (8002e74 <HAL_GPIO_Init+0x304>)
 8002dbe:	68db      	ldr	r3, [r3, #12]
 8002dc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	43db      	mvns	r3, r3
 8002dc6:	69ba      	ldr	r2, [r7, #24]
 8002dc8:	4013      	ands	r3, r2
 8002dca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d003      	beq.n	8002de0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002dd8:	69ba      	ldr	r2, [r7, #24]
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002de0:	4a24      	ldr	r2, [pc, #144]	; (8002e74 <HAL_GPIO_Init+0x304>)
 8002de2:	69bb      	ldr	r3, [r7, #24]
 8002de4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002de6:	4b23      	ldr	r3, [pc, #140]	; (8002e74 <HAL_GPIO_Init+0x304>)
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	43db      	mvns	r3, r3
 8002df0:	69ba      	ldr	r2, [r7, #24]
 8002df2:	4013      	ands	r3, r2
 8002df4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d003      	beq.n	8002e0a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002e02:	69ba      	ldr	r2, [r7, #24]
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e0a:	4a1a      	ldr	r2, [pc, #104]	; (8002e74 <HAL_GPIO_Init+0x304>)
 8002e0c:	69bb      	ldr	r3, [r7, #24]
 8002e0e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e10:	4b18      	ldr	r3, [pc, #96]	; (8002e74 <HAL_GPIO_Init+0x304>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	43db      	mvns	r3, r3
 8002e1a:	69ba      	ldr	r2, [r7, #24]
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d003      	beq.n	8002e34 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002e2c:	69ba      	ldr	r2, [r7, #24]
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	4313      	orrs	r3, r2
 8002e32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e34:	4a0f      	ldr	r2, [pc, #60]	; (8002e74 <HAL_GPIO_Init+0x304>)
 8002e36:	69bb      	ldr	r3, [r7, #24]
 8002e38:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e3a:	69fb      	ldr	r3, [r7, #28]
 8002e3c:	3301      	adds	r3, #1
 8002e3e:	61fb      	str	r3, [r7, #28]
 8002e40:	69fb      	ldr	r3, [r7, #28]
 8002e42:	2b0f      	cmp	r3, #15
 8002e44:	f67f aea2 	bls.w	8002b8c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002e48:	bf00      	nop
 8002e4a:	bf00      	nop
 8002e4c:	3724      	adds	r7, #36	; 0x24
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr
 8002e56:	bf00      	nop
 8002e58:	40023800 	.word	0x40023800
 8002e5c:	40013800 	.word	0x40013800
 8002e60:	40020000 	.word	0x40020000
 8002e64:	40020400 	.word	0x40020400
 8002e68:	40020800 	.word	0x40020800
 8002e6c:	40020c00 	.word	0x40020c00
 8002e70:	40021000 	.word	0x40021000
 8002e74:	40013c00 	.word	0x40013c00

08002e78 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b085      	sub	sp, #20
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	460b      	mov	r3, r1
 8002e82:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	691a      	ldr	r2, [r3, #16]
 8002e88:	887b      	ldrh	r3, [r7, #2]
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d002      	beq.n	8002e96 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002e90:	2301      	movs	r3, #1
 8002e92:	73fb      	strb	r3, [r7, #15]
 8002e94:	e001      	b.n	8002e9a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002e96:	2300      	movs	r3, #0
 8002e98:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002e9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	3714      	adds	r7, #20
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr

08002ea8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b083      	sub	sp, #12
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
 8002eb0:	460b      	mov	r3, r1
 8002eb2:	807b      	strh	r3, [r7, #2]
 8002eb4:	4613      	mov	r3, r2
 8002eb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002eb8:	787b      	ldrb	r3, [r7, #1]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d003      	beq.n	8002ec6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ebe:	887a      	ldrh	r2, [r7, #2]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ec4:	e003      	b.n	8002ece <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002ec6:	887b      	ldrh	r3, [r7, #2]
 8002ec8:	041a      	lsls	r2, r3, #16
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	619a      	str	r2, [r3, #24]
}
 8002ece:	bf00      	nop
 8002ed0:	370c      	adds	r7, #12
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr
	...

08002edc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b086      	sub	sp, #24
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d101      	bne.n	8002eee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e267      	b.n	80033be <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0301 	and.w	r3, r3, #1
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d075      	beq.n	8002fe6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002efa:	4b88      	ldr	r3, [pc, #544]	; (800311c <HAL_RCC_OscConfig+0x240>)
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	f003 030c 	and.w	r3, r3, #12
 8002f02:	2b04      	cmp	r3, #4
 8002f04:	d00c      	beq.n	8002f20 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f06:	4b85      	ldr	r3, [pc, #532]	; (800311c <HAL_RCC_OscConfig+0x240>)
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f0e:	2b08      	cmp	r3, #8
 8002f10:	d112      	bne.n	8002f38 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f12:	4b82      	ldr	r3, [pc, #520]	; (800311c <HAL_RCC_OscConfig+0x240>)
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f1a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f1e:	d10b      	bne.n	8002f38 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f20:	4b7e      	ldr	r3, [pc, #504]	; (800311c <HAL_RCC_OscConfig+0x240>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d05b      	beq.n	8002fe4 <HAL_RCC_OscConfig+0x108>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d157      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e242      	b.n	80033be <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f40:	d106      	bne.n	8002f50 <HAL_RCC_OscConfig+0x74>
 8002f42:	4b76      	ldr	r3, [pc, #472]	; (800311c <HAL_RCC_OscConfig+0x240>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a75      	ldr	r2, [pc, #468]	; (800311c <HAL_RCC_OscConfig+0x240>)
 8002f48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f4c:	6013      	str	r3, [r2, #0]
 8002f4e:	e01d      	b.n	8002f8c <HAL_RCC_OscConfig+0xb0>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f58:	d10c      	bne.n	8002f74 <HAL_RCC_OscConfig+0x98>
 8002f5a:	4b70      	ldr	r3, [pc, #448]	; (800311c <HAL_RCC_OscConfig+0x240>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a6f      	ldr	r2, [pc, #444]	; (800311c <HAL_RCC_OscConfig+0x240>)
 8002f60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f64:	6013      	str	r3, [r2, #0]
 8002f66:	4b6d      	ldr	r3, [pc, #436]	; (800311c <HAL_RCC_OscConfig+0x240>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a6c      	ldr	r2, [pc, #432]	; (800311c <HAL_RCC_OscConfig+0x240>)
 8002f6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f70:	6013      	str	r3, [r2, #0]
 8002f72:	e00b      	b.n	8002f8c <HAL_RCC_OscConfig+0xb0>
 8002f74:	4b69      	ldr	r3, [pc, #420]	; (800311c <HAL_RCC_OscConfig+0x240>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a68      	ldr	r2, [pc, #416]	; (800311c <HAL_RCC_OscConfig+0x240>)
 8002f7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f7e:	6013      	str	r3, [r2, #0]
 8002f80:	4b66      	ldr	r3, [pc, #408]	; (800311c <HAL_RCC_OscConfig+0x240>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a65      	ldr	r2, [pc, #404]	; (800311c <HAL_RCC_OscConfig+0x240>)
 8002f86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d013      	beq.n	8002fbc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f94:	f7ff fcd6 	bl	8002944 <HAL_GetTick>
 8002f98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f9a:	e008      	b.n	8002fae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f9c:	f7ff fcd2 	bl	8002944 <HAL_GetTick>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	2b64      	cmp	r3, #100	; 0x64
 8002fa8:	d901      	bls.n	8002fae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002faa:	2303      	movs	r3, #3
 8002fac:	e207      	b.n	80033be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fae:	4b5b      	ldr	r3, [pc, #364]	; (800311c <HAL_RCC_OscConfig+0x240>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d0f0      	beq.n	8002f9c <HAL_RCC_OscConfig+0xc0>
 8002fba:	e014      	b.n	8002fe6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fbc:	f7ff fcc2 	bl	8002944 <HAL_GetTick>
 8002fc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fc2:	e008      	b.n	8002fd6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fc4:	f7ff fcbe 	bl	8002944 <HAL_GetTick>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	2b64      	cmp	r3, #100	; 0x64
 8002fd0:	d901      	bls.n	8002fd6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002fd2:	2303      	movs	r3, #3
 8002fd4:	e1f3      	b.n	80033be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fd6:	4b51      	ldr	r3, [pc, #324]	; (800311c <HAL_RCC_OscConfig+0x240>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d1f0      	bne.n	8002fc4 <HAL_RCC_OscConfig+0xe8>
 8002fe2:	e000      	b.n	8002fe6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fe4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 0302 	and.w	r3, r3, #2
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d063      	beq.n	80030ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ff2:	4b4a      	ldr	r3, [pc, #296]	; (800311c <HAL_RCC_OscConfig+0x240>)
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	f003 030c 	and.w	r3, r3, #12
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d00b      	beq.n	8003016 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ffe:	4b47      	ldr	r3, [pc, #284]	; (800311c <HAL_RCC_OscConfig+0x240>)
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003006:	2b08      	cmp	r3, #8
 8003008:	d11c      	bne.n	8003044 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800300a:	4b44      	ldr	r3, [pc, #272]	; (800311c <HAL_RCC_OscConfig+0x240>)
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003012:	2b00      	cmp	r3, #0
 8003014:	d116      	bne.n	8003044 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003016:	4b41      	ldr	r3, [pc, #260]	; (800311c <HAL_RCC_OscConfig+0x240>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 0302 	and.w	r3, r3, #2
 800301e:	2b00      	cmp	r3, #0
 8003020:	d005      	beq.n	800302e <HAL_RCC_OscConfig+0x152>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	68db      	ldr	r3, [r3, #12]
 8003026:	2b01      	cmp	r3, #1
 8003028:	d001      	beq.n	800302e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e1c7      	b.n	80033be <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800302e:	4b3b      	ldr	r3, [pc, #236]	; (800311c <HAL_RCC_OscConfig+0x240>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	691b      	ldr	r3, [r3, #16]
 800303a:	00db      	lsls	r3, r3, #3
 800303c:	4937      	ldr	r1, [pc, #220]	; (800311c <HAL_RCC_OscConfig+0x240>)
 800303e:	4313      	orrs	r3, r2
 8003040:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003042:	e03a      	b.n	80030ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	68db      	ldr	r3, [r3, #12]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d020      	beq.n	800308e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800304c:	4b34      	ldr	r3, [pc, #208]	; (8003120 <HAL_RCC_OscConfig+0x244>)
 800304e:	2201      	movs	r2, #1
 8003050:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003052:	f7ff fc77 	bl	8002944 <HAL_GetTick>
 8003056:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003058:	e008      	b.n	800306c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800305a:	f7ff fc73 	bl	8002944 <HAL_GetTick>
 800305e:	4602      	mov	r2, r0
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	1ad3      	subs	r3, r2, r3
 8003064:	2b02      	cmp	r3, #2
 8003066:	d901      	bls.n	800306c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003068:	2303      	movs	r3, #3
 800306a:	e1a8      	b.n	80033be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800306c:	4b2b      	ldr	r3, [pc, #172]	; (800311c <HAL_RCC_OscConfig+0x240>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 0302 	and.w	r3, r3, #2
 8003074:	2b00      	cmp	r3, #0
 8003076:	d0f0      	beq.n	800305a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003078:	4b28      	ldr	r3, [pc, #160]	; (800311c <HAL_RCC_OscConfig+0x240>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	691b      	ldr	r3, [r3, #16]
 8003084:	00db      	lsls	r3, r3, #3
 8003086:	4925      	ldr	r1, [pc, #148]	; (800311c <HAL_RCC_OscConfig+0x240>)
 8003088:	4313      	orrs	r3, r2
 800308a:	600b      	str	r3, [r1, #0]
 800308c:	e015      	b.n	80030ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800308e:	4b24      	ldr	r3, [pc, #144]	; (8003120 <HAL_RCC_OscConfig+0x244>)
 8003090:	2200      	movs	r2, #0
 8003092:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003094:	f7ff fc56 	bl	8002944 <HAL_GetTick>
 8003098:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800309a:	e008      	b.n	80030ae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800309c:	f7ff fc52 	bl	8002944 <HAL_GetTick>
 80030a0:	4602      	mov	r2, r0
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	2b02      	cmp	r3, #2
 80030a8:	d901      	bls.n	80030ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80030aa:	2303      	movs	r3, #3
 80030ac:	e187      	b.n	80033be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030ae:	4b1b      	ldr	r3, [pc, #108]	; (800311c <HAL_RCC_OscConfig+0x240>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 0302 	and.w	r3, r3, #2
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d1f0      	bne.n	800309c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 0308 	and.w	r3, r3, #8
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d036      	beq.n	8003134 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	695b      	ldr	r3, [r3, #20]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d016      	beq.n	80030fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030ce:	4b15      	ldr	r3, [pc, #84]	; (8003124 <HAL_RCC_OscConfig+0x248>)
 80030d0:	2201      	movs	r2, #1
 80030d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030d4:	f7ff fc36 	bl	8002944 <HAL_GetTick>
 80030d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030da:	e008      	b.n	80030ee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030dc:	f7ff fc32 	bl	8002944 <HAL_GetTick>
 80030e0:	4602      	mov	r2, r0
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	1ad3      	subs	r3, r2, r3
 80030e6:	2b02      	cmp	r3, #2
 80030e8:	d901      	bls.n	80030ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80030ea:	2303      	movs	r3, #3
 80030ec:	e167      	b.n	80033be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030ee:	4b0b      	ldr	r3, [pc, #44]	; (800311c <HAL_RCC_OscConfig+0x240>)
 80030f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030f2:	f003 0302 	and.w	r3, r3, #2
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d0f0      	beq.n	80030dc <HAL_RCC_OscConfig+0x200>
 80030fa:	e01b      	b.n	8003134 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030fc:	4b09      	ldr	r3, [pc, #36]	; (8003124 <HAL_RCC_OscConfig+0x248>)
 80030fe:	2200      	movs	r2, #0
 8003100:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003102:	f7ff fc1f 	bl	8002944 <HAL_GetTick>
 8003106:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003108:	e00e      	b.n	8003128 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800310a:	f7ff fc1b 	bl	8002944 <HAL_GetTick>
 800310e:	4602      	mov	r2, r0
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	1ad3      	subs	r3, r2, r3
 8003114:	2b02      	cmp	r3, #2
 8003116:	d907      	bls.n	8003128 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003118:	2303      	movs	r3, #3
 800311a:	e150      	b.n	80033be <HAL_RCC_OscConfig+0x4e2>
 800311c:	40023800 	.word	0x40023800
 8003120:	42470000 	.word	0x42470000
 8003124:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003128:	4b88      	ldr	r3, [pc, #544]	; (800334c <HAL_RCC_OscConfig+0x470>)
 800312a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800312c:	f003 0302 	and.w	r3, r3, #2
 8003130:	2b00      	cmp	r3, #0
 8003132:	d1ea      	bne.n	800310a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 0304 	and.w	r3, r3, #4
 800313c:	2b00      	cmp	r3, #0
 800313e:	f000 8097 	beq.w	8003270 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003142:	2300      	movs	r3, #0
 8003144:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003146:	4b81      	ldr	r3, [pc, #516]	; (800334c <HAL_RCC_OscConfig+0x470>)
 8003148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800314e:	2b00      	cmp	r3, #0
 8003150:	d10f      	bne.n	8003172 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003152:	2300      	movs	r3, #0
 8003154:	60bb      	str	r3, [r7, #8]
 8003156:	4b7d      	ldr	r3, [pc, #500]	; (800334c <HAL_RCC_OscConfig+0x470>)
 8003158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315a:	4a7c      	ldr	r2, [pc, #496]	; (800334c <HAL_RCC_OscConfig+0x470>)
 800315c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003160:	6413      	str	r3, [r2, #64]	; 0x40
 8003162:	4b7a      	ldr	r3, [pc, #488]	; (800334c <HAL_RCC_OscConfig+0x470>)
 8003164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003166:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800316a:	60bb      	str	r3, [r7, #8]
 800316c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800316e:	2301      	movs	r3, #1
 8003170:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003172:	4b77      	ldr	r3, [pc, #476]	; (8003350 <HAL_RCC_OscConfig+0x474>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800317a:	2b00      	cmp	r3, #0
 800317c:	d118      	bne.n	80031b0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800317e:	4b74      	ldr	r3, [pc, #464]	; (8003350 <HAL_RCC_OscConfig+0x474>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a73      	ldr	r2, [pc, #460]	; (8003350 <HAL_RCC_OscConfig+0x474>)
 8003184:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003188:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800318a:	f7ff fbdb 	bl	8002944 <HAL_GetTick>
 800318e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003190:	e008      	b.n	80031a4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003192:	f7ff fbd7 	bl	8002944 <HAL_GetTick>
 8003196:	4602      	mov	r2, r0
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	1ad3      	subs	r3, r2, r3
 800319c:	2b02      	cmp	r3, #2
 800319e:	d901      	bls.n	80031a4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80031a0:	2303      	movs	r3, #3
 80031a2:	e10c      	b.n	80033be <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031a4:	4b6a      	ldr	r3, [pc, #424]	; (8003350 <HAL_RCC_OscConfig+0x474>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d0f0      	beq.n	8003192 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d106      	bne.n	80031c6 <HAL_RCC_OscConfig+0x2ea>
 80031b8:	4b64      	ldr	r3, [pc, #400]	; (800334c <HAL_RCC_OscConfig+0x470>)
 80031ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031bc:	4a63      	ldr	r2, [pc, #396]	; (800334c <HAL_RCC_OscConfig+0x470>)
 80031be:	f043 0301 	orr.w	r3, r3, #1
 80031c2:	6713      	str	r3, [r2, #112]	; 0x70
 80031c4:	e01c      	b.n	8003200 <HAL_RCC_OscConfig+0x324>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	2b05      	cmp	r3, #5
 80031cc:	d10c      	bne.n	80031e8 <HAL_RCC_OscConfig+0x30c>
 80031ce:	4b5f      	ldr	r3, [pc, #380]	; (800334c <HAL_RCC_OscConfig+0x470>)
 80031d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031d2:	4a5e      	ldr	r2, [pc, #376]	; (800334c <HAL_RCC_OscConfig+0x470>)
 80031d4:	f043 0304 	orr.w	r3, r3, #4
 80031d8:	6713      	str	r3, [r2, #112]	; 0x70
 80031da:	4b5c      	ldr	r3, [pc, #368]	; (800334c <HAL_RCC_OscConfig+0x470>)
 80031dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031de:	4a5b      	ldr	r2, [pc, #364]	; (800334c <HAL_RCC_OscConfig+0x470>)
 80031e0:	f043 0301 	orr.w	r3, r3, #1
 80031e4:	6713      	str	r3, [r2, #112]	; 0x70
 80031e6:	e00b      	b.n	8003200 <HAL_RCC_OscConfig+0x324>
 80031e8:	4b58      	ldr	r3, [pc, #352]	; (800334c <HAL_RCC_OscConfig+0x470>)
 80031ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ec:	4a57      	ldr	r2, [pc, #348]	; (800334c <HAL_RCC_OscConfig+0x470>)
 80031ee:	f023 0301 	bic.w	r3, r3, #1
 80031f2:	6713      	str	r3, [r2, #112]	; 0x70
 80031f4:	4b55      	ldr	r3, [pc, #340]	; (800334c <HAL_RCC_OscConfig+0x470>)
 80031f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031f8:	4a54      	ldr	r2, [pc, #336]	; (800334c <HAL_RCC_OscConfig+0x470>)
 80031fa:	f023 0304 	bic.w	r3, r3, #4
 80031fe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d015      	beq.n	8003234 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003208:	f7ff fb9c 	bl	8002944 <HAL_GetTick>
 800320c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800320e:	e00a      	b.n	8003226 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003210:	f7ff fb98 	bl	8002944 <HAL_GetTick>
 8003214:	4602      	mov	r2, r0
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	f241 3288 	movw	r2, #5000	; 0x1388
 800321e:	4293      	cmp	r3, r2
 8003220:	d901      	bls.n	8003226 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003222:	2303      	movs	r3, #3
 8003224:	e0cb      	b.n	80033be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003226:	4b49      	ldr	r3, [pc, #292]	; (800334c <HAL_RCC_OscConfig+0x470>)
 8003228:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800322a:	f003 0302 	and.w	r3, r3, #2
 800322e:	2b00      	cmp	r3, #0
 8003230:	d0ee      	beq.n	8003210 <HAL_RCC_OscConfig+0x334>
 8003232:	e014      	b.n	800325e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003234:	f7ff fb86 	bl	8002944 <HAL_GetTick>
 8003238:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800323a:	e00a      	b.n	8003252 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800323c:	f7ff fb82 	bl	8002944 <HAL_GetTick>
 8003240:	4602      	mov	r2, r0
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	1ad3      	subs	r3, r2, r3
 8003246:	f241 3288 	movw	r2, #5000	; 0x1388
 800324a:	4293      	cmp	r3, r2
 800324c:	d901      	bls.n	8003252 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800324e:	2303      	movs	r3, #3
 8003250:	e0b5      	b.n	80033be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003252:	4b3e      	ldr	r3, [pc, #248]	; (800334c <HAL_RCC_OscConfig+0x470>)
 8003254:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003256:	f003 0302 	and.w	r3, r3, #2
 800325a:	2b00      	cmp	r3, #0
 800325c:	d1ee      	bne.n	800323c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800325e:	7dfb      	ldrb	r3, [r7, #23]
 8003260:	2b01      	cmp	r3, #1
 8003262:	d105      	bne.n	8003270 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003264:	4b39      	ldr	r3, [pc, #228]	; (800334c <HAL_RCC_OscConfig+0x470>)
 8003266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003268:	4a38      	ldr	r2, [pc, #224]	; (800334c <HAL_RCC_OscConfig+0x470>)
 800326a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800326e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	699b      	ldr	r3, [r3, #24]
 8003274:	2b00      	cmp	r3, #0
 8003276:	f000 80a1 	beq.w	80033bc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800327a:	4b34      	ldr	r3, [pc, #208]	; (800334c <HAL_RCC_OscConfig+0x470>)
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	f003 030c 	and.w	r3, r3, #12
 8003282:	2b08      	cmp	r3, #8
 8003284:	d05c      	beq.n	8003340 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	699b      	ldr	r3, [r3, #24]
 800328a:	2b02      	cmp	r3, #2
 800328c:	d141      	bne.n	8003312 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800328e:	4b31      	ldr	r3, [pc, #196]	; (8003354 <HAL_RCC_OscConfig+0x478>)
 8003290:	2200      	movs	r2, #0
 8003292:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003294:	f7ff fb56 	bl	8002944 <HAL_GetTick>
 8003298:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800329a:	e008      	b.n	80032ae <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800329c:	f7ff fb52 	bl	8002944 <HAL_GetTick>
 80032a0:	4602      	mov	r2, r0
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d901      	bls.n	80032ae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80032aa:	2303      	movs	r3, #3
 80032ac:	e087      	b.n	80033be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032ae:	4b27      	ldr	r3, [pc, #156]	; (800334c <HAL_RCC_OscConfig+0x470>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d1f0      	bne.n	800329c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	69da      	ldr	r2, [r3, #28]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6a1b      	ldr	r3, [r3, #32]
 80032c2:	431a      	orrs	r2, r3
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c8:	019b      	lsls	r3, r3, #6
 80032ca:	431a      	orrs	r2, r3
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032d0:	085b      	lsrs	r3, r3, #1
 80032d2:	3b01      	subs	r3, #1
 80032d4:	041b      	lsls	r3, r3, #16
 80032d6:	431a      	orrs	r2, r3
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032dc:	061b      	lsls	r3, r3, #24
 80032de:	491b      	ldr	r1, [pc, #108]	; (800334c <HAL_RCC_OscConfig+0x470>)
 80032e0:	4313      	orrs	r3, r2
 80032e2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032e4:	4b1b      	ldr	r3, [pc, #108]	; (8003354 <HAL_RCC_OscConfig+0x478>)
 80032e6:	2201      	movs	r2, #1
 80032e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032ea:	f7ff fb2b 	bl	8002944 <HAL_GetTick>
 80032ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032f0:	e008      	b.n	8003304 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032f2:	f7ff fb27 	bl	8002944 <HAL_GetTick>
 80032f6:	4602      	mov	r2, r0
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	1ad3      	subs	r3, r2, r3
 80032fc:	2b02      	cmp	r3, #2
 80032fe:	d901      	bls.n	8003304 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003300:	2303      	movs	r3, #3
 8003302:	e05c      	b.n	80033be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003304:	4b11      	ldr	r3, [pc, #68]	; (800334c <HAL_RCC_OscConfig+0x470>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800330c:	2b00      	cmp	r3, #0
 800330e:	d0f0      	beq.n	80032f2 <HAL_RCC_OscConfig+0x416>
 8003310:	e054      	b.n	80033bc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003312:	4b10      	ldr	r3, [pc, #64]	; (8003354 <HAL_RCC_OscConfig+0x478>)
 8003314:	2200      	movs	r2, #0
 8003316:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003318:	f7ff fb14 	bl	8002944 <HAL_GetTick>
 800331c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800331e:	e008      	b.n	8003332 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003320:	f7ff fb10 	bl	8002944 <HAL_GetTick>
 8003324:	4602      	mov	r2, r0
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	1ad3      	subs	r3, r2, r3
 800332a:	2b02      	cmp	r3, #2
 800332c:	d901      	bls.n	8003332 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800332e:	2303      	movs	r3, #3
 8003330:	e045      	b.n	80033be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003332:	4b06      	ldr	r3, [pc, #24]	; (800334c <HAL_RCC_OscConfig+0x470>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800333a:	2b00      	cmp	r3, #0
 800333c:	d1f0      	bne.n	8003320 <HAL_RCC_OscConfig+0x444>
 800333e:	e03d      	b.n	80033bc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	699b      	ldr	r3, [r3, #24]
 8003344:	2b01      	cmp	r3, #1
 8003346:	d107      	bne.n	8003358 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	e038      	b.n	80033be <HAL_RCC_OscConfig+0x4e2>
 800334c:	40023800 	.word	0x40023800
 8003350:	40007000 	.word	0x40007000
 8003354:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003358:	4b1b      	ldr	r3, [pc, #108]	; (80033c8 <HAL_RCC_OscConfig+0x4ec>)
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	699b      	ldr	r3, [r3, #24]
 8003362:	2b01      	cmp	r3, #1
 8003364:	d028      	beq.n	80033b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003370:	429a      	cmp	r2, r3
 8003372:	d121      	bne.n	80033b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800337e:	429a      	cmp	r2, r3
 8003380:	d11a      	bne.n	80033b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003382:	68fa      	ldr	r2, [r7, #12]
 8003384:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003388:	4013      	ands	r3, r2
 800338a:	687a      	ldr	r2, [r7, #4]
 800338c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800338e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003390:	4293      	cmp	r3, r2
 8003392:	d111      	bne.n	80033b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800339e:	085b      	lsrs	r3, r3, #1
 80033a0:	3b01      	subs	r3, #1
 80033a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d107      	bne.n	80033b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d001      	beq.n	80033bc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	e000      	b.n	80033be <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80033bc:	2300      	movs	r3, #0
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3718      	adds	r7, #24
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	bf00      	nop
 80033c8:	40023800 	.word	0x40023800

080033cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b084      	sub	sp, #16
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
 80033d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d101      	bne.n	80033e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	e0cc      	b.n	800357a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033e0:	4b68      	ldr	r3, [pc, #416]	; (8003584 <HAL_RCC_ClockConfig+0x1b8>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 0307 	and.w	r3, r3, #7
 80033e8:	683a      	ldr	r2, [r7, #0]
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d90c      	bls.n	8003408 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033ee:	4b65      	ldr	r3, [pc, #404]	; (8003584 <HAL_RCC_ClockConfig+0x1b8>)
 80033f0:	683a      	ldr	r2, [r7, #0]
 80033f2:	b2d2      	uxtb	r2, r2
 80033f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033f6:	4b63      	ldr	r3, [pc, #396]	; (8003584 <HAL_RCC_ClockConfig+0x1b8>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 0307 	and.w	r3, r3, #7
 80033fe:	683a      	ldr	r2, [r7, #0]
 8003400:	429a      	cmp	r2, r3
 8003402:	d001      	beq.n	8003408 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	e0b8      	b.n	800357a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 0302 	and.w	r3, r3, #2
 8003410:	2b00      	cmp	r3, #0
 8003412:	d020      	beq.n	8003456 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 0304 	and.w	r3, r3, #4
 800341c:	2b00      	cmp	r3, #0
 800341e:	d005      	beq.n	800342c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003420:	4b59      	ldr	r3, [pc, #356]	; (8003588 <HAL_RCC_ClockConfig+0x1bc>)
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	4a58      	ldr	r2, [pc, #352]	; (8003588 <HAL_RCC_ClockConfig+0x1bc>)
 8003426:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800342a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 0308 	and.w	r3, r3, #8
 8003434:	2b00      	cmp	r3, #0
 8003436:	d005      	beq.n	8003444 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003438:	4b53      	ldr	r3, [pc, #332]	; (8003588 <HAL_RCC_ClockConfig+0x1bc>)
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	4a52      	ldr	r2, [pc, #328]	; (8003588 <HAL_RCC_ClockConfig+0x1bc>)
 800343e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003442:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003444:	4b50      	ldr	r3, [pc, #320]	; (8003588 <HAL_RCC_ClockConfig+0x1bc>)
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	494d      	ldr	r1, [pc, #308]	; (8003588 <HAL_RCC_ClockConfig+0x1bc>)
 8003452:	4313      	orrs	r3, r2
 8003454:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 0301 	and.w	r3, r3, #1
 800345e:	2b00      	cmp	r3, #0
 8003460:	d044      	beq.n	80034ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	2b01      	cmp	r3, #1
 8003468:	d107      	bne.n	800347a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800346a:	4b47      	ldr	r3, [pc, #284]	; (8003588 <HAL_RCC_ClockConfig+0x1bc>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d119      	bne.n	80034aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e07f      	b.n	800357a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	2b02      	cmp	r3, #2
 8003480:	d003      	beq.n	800348a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003486:	2b03      	cmp	r3, #3
 8003488:	d107      	bne.n	800349a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800348a:	4b3f      	ldr	r3, [pc, #252]	; (8003588 <HAL_RCC_ClockConfig+0x1bc>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003492:	2b00      	cmp	r3, #0
 8003494:	d109      	bne.n	80034aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e06f      	b.n	800357a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800349a:	4b3b      	ldr	r3, [pc, #236]	; (8003588 <HAL_RCC_ClockConfig+0x1bc>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f003 0302 	and.w	r3, r3, #2
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d101      	bne.n	80034aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e067      	b.n	800357a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034aa:	4b37      	ldr	r3, [pc, #220]	; (8003588 <HAL_RCC_ClockConfig+0x1bc>)
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	f023 0203 	bic.w	r2, r3, #3
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	4934      	ldr	r1, [pc, #208]	; (8003588 <HAL_RCC_ClockConfig+0x1bc>)
 80034b8:	4313      	orrs	r3, r2
 80034ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034bc:	f7ff fa42 	bl	8002944 <HAL_GetTick>
 80034c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034c2:	e00a      	b.n	80034da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034c4:	f7ff fa3e 	bl	8002944 <HAL_GetTick>
 80034c8:	4602      	mov	r2, r0
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	1ad3      	subs	r3, r2, r3
 80034ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d901      	bls.n	80034da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e04f      	b.n	800357a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034da:	4b2b      	ldr	r3, [pc, #172]	; (8003588 <HAL_RCC_ClockConfig+0x1bc>)
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	f003 020c 	and.w	r2, r3, #12
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d1eb      	bne.n	80034c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80034ec:	4b25      	ldr	r3, [pc, #148]	; (8003584 <HAL_RCC_ClockConfig+0x1b8>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 0307 	and.w	r3, r3, #7
 80034f4:	683a      	ldr	r2, [r7, #0]
 80034f6:	429a      	cmp	r2, r3
 80034f8:	d20c      	bcs.n	8003514 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034fa:	4b22      	ldr	r3, [pc, #136]	; (8003584 <HAL_RCC_ClockConfig+0x1b8>)
 80034fc:	683a      	ldr	r2, [r7, #0]
 80034fe:	b2d2      	uxtb	r2, r2
 8003500:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003502:	4b20      	ldr	r3, [pc, #128]	; (8003584 <HAL_RCC_ClockConfig+0x1b8>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 0307 	and.w	r3, r3, #7
 800350a:	683a      	ldr	r2, [r7, #0]
 800350c:	429a      	cmp	r2, r3
 800350e:	d001      	beq.n	8003514 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	e032      	b.n	800357a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 0304 	and.w	r3, r3, #4
 800351c:	2b00      	cmp	r3, #0
 800351e:	d008      	beq.n	8003532 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003520:	4b19      	ldr	r3, [pc, #100]	; (8003588 <HAL_RCC_ClockConfig+0x1bc>)
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	4916      	ldr	r1, [pc, #88]	; (8003588 <HAL_RCC_ClockConfig+0x1bc>)
 800352e:	4313      	orrs	r3, r2
 8003530:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 0308 	and.w	r3, r3, #8
 800353a:	2b00      	cmp	r3, #0
 800353c:	d009      	beq.n	8003552 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800353e:	4b12      	ldr	r3, [pc, #72]	; (8003588 <HAL_RCC_ClockConfig+0x1bc>)
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	691b      	ldr	r3, [r3, #16]
 800354a:	00db      	lsls	r3, r3, #3
 800354c:	490e      	ldr	r1, [pc, #56]	; (8003588 <HAL_RCC_ClockConfig+0x1bc>)
 800354e:	4313      	orrs	r3, r2
 8003550:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003552:	f000 f821 	bl	8003598 <HAL_RCC_GetSysClockFreq>
 8003556:	4602      	mov	r2, r0
 8003558:	4b0b      	ldr	r3, [pc, #44]	; (8003588 <HAL_RCC_ClockConfig+0x1bc>)
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	091b      	lsrs	r3, r3, #4
 800355e:	f003 030f 	and.w	r3, r3, #15
 8003562:	490a      	ldr	r1, [pc, #40]	; (800358c <HAL_RCC_ClockConfig+0x1c0>)
 8003564:	5ccb      	ldrb	r3, [r1, r3]
 8003566:	fa22 f303 	lsr.w	r3, r2, r3
 800356a:	4a09      	ldr	r2, [pc, #36]	; (8003590 <HAL_RCC_ClockConfig+0x1c4>)
 800356c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800356e:	4b09      	ldr	r3, [pc, #36]	; (8003594 <HAL_RCC_ClockConfig+0x1c8>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4618      	mov	r0, r3
 8003574:	f7ff f9a2 	bl	80028bc <HAL_InitTick>

  return HAL_OK;
 8003578:	2300      	movs	r3, #0
}
 800357a:	4618      	mov	r0, r3
 800357c:	3710      	adds	r7, #16
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
 8003582:	bf00      	nop
 8003584:	40023c00 	.word	0x40023c00
 8003588:	40023800 	.word	0x40023800
 800358c:	0800a0d8 	.word	0x0800a0d8
 8003590:	20000164 	.word	0x20000164
 8003594:	20000168 	.word	0x20000168

08003598 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003598:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800359c:	b090      	sub	sp, #64	; 0x40
 800359e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80035a0:	2300      	movs	r3, #0
 80035a2:	637b      	str	r3, [r7, #52]	; 0x34
 80035a4:	2300      	movs	r3, #0
 80035a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035a8:	2300      	movs	r3, #0
 80035aa:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80035ac:	2300      	movs	r3, #0
 80035ae:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80035b0:	4b59      	ldr	r3, [pc, #356]	; (8003718 <HAL_RCC_GetSysClockFreq+0x180>)
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	f003 030c 	and.w	r3, r3, #12
 80035b8:	2b08      	cmp	r3, #8
 80035ba:	d00d      	beq.n	80035d8 <HAL_RCC_GetSysClockFreq+0x40>
 80035bc:	2b08      	cmp	r3, #8
 80035be:	f200 80a1 	bhi.w	8003704 <HAL_RCC_GetSysClockFreq+0x16c>
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d002      	beq.n	80035cc <HAL_RCC_GetSysClockFreq+0x34>
 80035c6:	2b04      	cmp	r3, #4
 80035c8:	d003      	beq.n	80035d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80035ca:	e09b      	b.n	8003704 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80035cc:	4b53      	ldr	r3, [pc, #332]	; (800371c <HAL_RCC_GetSysClockFreq+0x184>)
 80035ce:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80035d0:	e09b      	b.n	800370a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80035d2:	4b53      	ldr	r3, [pc, #332]	; (8003720 <HAL_RCC_GetSysClockFreq+0x188>)
 80035d4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80035d6:	e098      	b.n	800370a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80035d8:	4b4f      	ldr	r3, [pc, #316]	; (8003718 <HAL_RCC_GetSysClockFreq+0x180>)
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80035e0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80035e2:	4b4d      	ldr	r3, [pc, #308]	; (8003718 <HAL_RCC_GetSysClockFreq+0x180>)
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d028      	beq.n	8003640 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035ee:	4b4a      	ldr	r3, [pc, #296]	; (8003718 <HAL_RCC_GetSysClockFreq+0x180>)
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	099b      	lsrs	r3, r3, #6
 80035f4:	2200      	movs	r2, #0
 80035f6:	623b      	str	r3, [r7, #32]
 80035f8:	627a      	str	r2, [r7, #36]	; 0x24
 80035fa:	6a3b      	ldr	r3, [r7, #32]
 80035fc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003600:	2100      	movs	r1, #0
 8003602:	4b47      	ldr	r3, [pc, #284]	; (8003720 <HAL_RCC_GetSysClockFreq+0x188>)
 8003604:	fb03 f201 	mul.w	r2, r3, r1
 8003608:	2300      	movs	r3, #0
 800360a:	fb00 f303 	mul.w	r3, r0, r3
 800360e:	4413      	add	r3, r2
 8003610:	4a43      	ldr	r2, [pc, #268]	; (8003720 <HAL_RCC_GetSysClockFreq+0x188>)
 8003612:	fba0 1202 	umull	r1, r2, r0, r2
 8003616:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003618:	460a      	mov	r2, r1
 800361a:	62ba      	str	r2, [r7, #40]	; 0x28
 800361c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800361e:	4413      	add	r3, r2
 8003620:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003622:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003624:	2200      	movs	r2, #0
 8003626:	61bb      	str	r3, [r7, #24]
 8003628:	61fa      	str	r2, [r7, #28]
 800362a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800362e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003632:	f7fc fe25 	bl	8000280 <__aeabi_uldivmod>
 8003636:	4602      	mov	r2, r0
 8003638:	460b      	mov	r3, r1
 800363a:	4613      	mov	r3, r2
 800363c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800363e:	e053      	b.n	80036e8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003640:	4b35      	ldr	r3, [pc, #212]	; (8003718 <HAL_RCC_GetSysClockFreq+0x180>)
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	099b      	lsrs	r3, r3, #6
 8003646:	2200      	movs	r2, #0
 8003648:	613b      	str	r3, [r7, #16]
 800364a:	617a      	str	r2, [r7, #20]
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003652:	f04f 0b00 	mov.w	fp, #0
 8003656:	4652      	mov	r2, sl
 8003658:	465b      	mov	r3, fp
 800365a:	f04f 0000 	mov.w	r0, #0
 800365e:	f04f 0100 	mov.w	r1, #0
 8003662:	0159      	lsls	r1, r3, #5
 8003664:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003668:	0150      	lsls	r0, r2, #5
 800366a:	4602      	mov	r2, r0
 800366c:	460b      	mov	r3, r1
 800366e:	ebb2 080a 	subs.w	r8, r2, sl
 8003672:	eb63 090b 	sbc.w	r9, r3, fp
 8003676:	f04f 0200 	mov.w	r2, #0
 800367a:	f04f 0300 	mov.w	r3, #0
 800367e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003682:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003686:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800368a:	ebb2 0408 	subs.w	r4, r2, r8
 800368e:	eb63 0509 	sbc.w	r5, r3, r9
 8003692:	f04f 0200 	mov.w	r2, #0
 8003696:	f04f 0300 	mov.w	r3, #0
 800369a:	00eb      	lsls	r3, r5, #3
 800369c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80036a0:	00e2      	lsls	r2, r4, #3
 80036a2:	4614      	mov	r4, r2
 80036a4:	461d      	mov	r5, r3
 80036a6:	eb14 030a 	adds.w	r3, r4, sl
 80036aa:	603b      	str	r3, [r7, #0]
 80036ac:	eb45 030b 	adc.w	r3, r5, fp
 80036b0:	607b      	str	r3, [r7, #4]
 80036b2:	f04f 0200 	mov.w	r2, #0
 80036b6:	f04f 0300 	mov.w	r3, #0
 80036ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 80036be:	4629      	mov	r1, r5
 80036c0:	028b      	lsls	r3, r1, #10
 80036c2:	4621      	mov	r1, r4
 80036c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80036c8:	4621      	mov	r1, r4
 80036ca:	028a      	lsls	r2, r1, #10
 80036cc:	4610      	mov	r0, r2
 80036ce:	4619      	mov	r1, r3
 80036d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036d2:	2200      	movs	r2, #0
 80036d4:	60bb      	str	r3, [r7, #8]
 80036d6:	60fa      	str	r2, [r7, #12]
 80036d8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80036dc:	f7fc fdd0 	bl	8000280 <__aeabi_uldivmod>
 80036e0:	4602      	mov	r2, r0
 80036e2:	460b      	mov	r3, r1
 80036e4:	4613      	mov	r3, r2
 80036e6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80036e8:	4b0b      	ldr	r3, [pc, #44]	; (8003718 <HAL_RCC_GetSysClockFreq+0x180>)
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	0c1b      	lsrs	r3, r3, #16
 80036ee:	f003 0303 	and.w	r3, r3, #3
 80036f2:	3301      	adds	r3, #1
 80036f4:	005b      	lsls	r3, r3, #1
 80036f6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80036f8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80036fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003700:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003702:	e002      	b.n	800370a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003704:	4b05      	ldr	r3, [pc, #20]	; (800371c <HAL_RCC_GetSysClockFreq+0x184>)
 8003706:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003708:	bf00      	nop
    }
  }
  return sysclockfreq;
 800370a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800370c:	4618      	mov	r0, r3
 800370e:	3740      	adds	r7, #64	; 0x40
 8003710:	46bd      	mov	sp, r7
 8003712:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003716:	bf00      	nop
 8003718:	40023800 	.word	0x40023800
 800371c:	00f42400 	.word	0x00f42400
 8003720:	017d7840 	.word	0x017d7840

08003724 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b082      	sub	sp, #8
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d101      	bne.n	8003736 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	e07b      	b.n	800382e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800373a:	2b00      	cmp	r3, #0
 800373c:	d108      	bne.n	8003750 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003746:	d009      	beq.n	800375c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	61da      	str	r2, [r3, #28]
 800374e:	e005      	b.n	800375c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2200      	movs	r2, #0
 8003754:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2200      	movs	r2, #0
 800375a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2200      	movs	r2, #0
 8003760:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003768:	b2db      	uxtb	r3, r3
 800376a:	2b00      	cmp	r3, #0
 800376c:	d106      	bne.n	800377c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2200      	movs	r2, #0
 8003772:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f7fe ff2c 	bl	80025d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2202      	movs	r2, #2
 8003780:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003792:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80037a4:	431a      	orrs	r2, r3
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	68db      	ldr	r3, [r3, #12]
 80037aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037ae:	431a      	orrs	r2, r3
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	691b      	ldr	r3, [r3, #16]
 80037b4:	f003 0302 	and.w	r3, r3, #2
 80037b8:	431a      	orrs	r2, r3
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	695b      	ldr	r3, [r3, #20]
 80037be:	f003 0301 	and.w	r3, r3, #1
 80037c2:	431a      	orrs	r2, r3
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	699b      	ldr	r3, [r3, #24]
 80037c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037cc:	431a      	orrs	r2, r3
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	69db      	ldr	r3, [r3, #28]
 80037d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80037d6:	431a      	orrs	r2, r3
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6a1b      	ldr	r3, [r3, #32]
 80037dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037e0:	ea42 0103 	orr.w	r1, r2, r3
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037e8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	430a      	orrs	r2, r1
 80037f2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	699b      	ldr	r3, [r3, #24]
 80037f8:	0c1b      	lsrs	r3, r3, #16
 80037fa:	f003 0104 	and.w	r1, r3, #4
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003802:	f003 0210 	and.w	r2, r3, #16
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	430a      	orrs	r2, r1
 800380c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	69da      	ldr	r2, [r3, #28]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800381c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2200      	movs	r2, #0
 8003822:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2201      	movs	r2, #1
 8003828:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800382c:	2300      	movs	r3, #0
}
 800382e:	4618      	mov	r0, r3
 8003830:	3708      	adds	r7, #8
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}

08003836 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003836:	b580      	push	{r7, lr}
 8003838:	b088      	sub	sp, #32
 800383a:	af00      	add	r7, sp, #0
 800383c:	60f8      	str	r0, [r7, #12]
 800383e:	60b9      	str	r1, [r7, #8]
 8003840:	603b      	str	r3, [r7, #0]
 8003842:	4613      	mov	r3, r2
 8003844:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003846:	2300      	movs	r3, #0
 8003848:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003850:	2b01      	cmp	r3, #1
 8003852:	d101      	bne.n	8003858 <HAL_SPI_Transmit+0x22>
 8003854:	2302      	movs	r3, #2
 8003856:	e126      	b.n	8003aa6 <HAL_SPI_Transmit+0x270>
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2201      	movs	r2, #1
 800385c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003860:	f7ff f870 	bl	8002944 <HAL_GetTick>
 8003864:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003866:	88fb      	ldrh	r3, [r7, #6]
 8003868:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003870:	b2db      	uxtb	r3, r3
 8003872:	2b01      	cmp	r3, #1
 8003874:	d002      	beq.n	800387c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003876:	2302      	movs	r3, #2
 8003878:	77fb      	strb	r3, [r7, #31]
    goto error;
 800387a:	e10b      	b.n	8003a94 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d002      	beq.n	8003888 <HAL_SPI_Transmit+0x52>
 8003882:	88fb      	ldrh	r3, [r7, #6]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d102      	bne.n	800388e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800388c:	e102      	b.n	8003a94 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2203      	movs	r2, #3
 8003892:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2200      	movs	r2, #0
 800389a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	68ba      	ldr	r2, [r7, #8]
 80038a0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	88fa      	ldrh	r2, [r7, #6]
 80038a6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	88fa      	ldrh	r2, [r7, #6]
 80038ac:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2200      	movs	r2, #0
 80038b2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2200      	movs	r2, #0
 80038b8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2200      	movs	r2, #0
 80038be:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2200      	movs	r2, #0
 80038c4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2200      	movs	r2, #0
 80038ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038d4:	d10f      	bne.n	80038f6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038e4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80038f4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003900:	2b40      	cmp	r3, #64	; 0x40
 8003902:	d007      	beq.n	8003914 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003912:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800391c:	d14b      	bne.n	80039b6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d002      	beq.n	800392c <HAL_SPI_Transmit+0xf6>
 8003926:	8afb      	ldrh	r3, [r7, #22]
 8003928:	2b01      	cmp	r3, #1
 800392a:	d13e      	bne.n	80039aa <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003930:	881a      	ldrh	r2, [r3, #0]
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800393c:	1c9a      	adds	r2, r3, #2
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003946:	b29b      	uxth	r3, r3
 8003948:	3b01      	subs	r3, #1
 800394a:	b29a      	uxth	r2, r3
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003950:	e02b      	b.n	80039aa <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	f003 0302 	and.w	r3, r3, #2
 800395c:	2b02      	cmp	r3, #2
 800395e:	d112      	bne.n	8003986 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003964:	881a      	ldrh	r2, [r3, #0]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003970:	1c9a      	adds	r2, r3, #2
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800397a:	b29b      	uxth	r3, r3
 800397c:	3b01      	subs	r3, #1
 800397e:	b29a      	uxth	r2, r3
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	86da      	strh	r2, [r3, #54]	; 0x36
 8003984:	e011      	b.n	80039aa <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003986:	f7fe ffdd 	bl	8002944 <HAL_GetTick>
 800398a:	4602      	mov	r2, r0
 800398c:	69bb      	ldr	r3, [r7, #24]
 800398e:	1ad3      	subs	r3, r2, r3
 8003990:	683a      	ldr	r2, [r7, #0]
 8003992:	429a      	cmp	r2, r3
 8003994:	d803      	bhi.n	800399e <HAL_SPI_Transmit+0x168>
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	f1b3 3fff 	cmp.w	r3, #4294967295
 800399c:	d102      	bne.n	80039a4 <HAL_SPI_Transmit+0x16e>
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d102      	bne.n	80039aa <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80039a4:	2303      	movs	r3, #3
 80039a6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80039a8:	e074      	b.n	8003a94 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039ae:	b29b      	uxth	r3, r3
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d1ce      	bne.n	8003952 <HAL_SPI_Transmit+0x11c>
 80039b4:	e04c      	b.n	8003a50 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d002      	beq.n	80039c4 <HAL_SPI_Transmit+0x18e>
 80039be:	8afb      	ldrh	r3, [r7, #22]
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d140      	bne.n	8003a46 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	330c      	adds	r3, #12
 80039ce:	7812      	ldrb	r2, [r2, #0]
 80039d0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039d6:	1c5a      	adds	r2, r3, #1
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039e0:	b29b      	uxth	r3, r3
 80039e2:	3b01      	subs	r3, #1
 80039e4:	b29a      	uxth	r2, r3
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80039ea:	e02c      	b.n	8003a46 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	f003 0302 	and.w	r3, r3, #2
 80039f6:	2b02      	cmp	r3, #2
 80039f8:	d113      	bne.n	8003a22 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	330c      	adds	r3, #12
 8003a04:	7812      	ldrb	r2, [r2, #0]
 8003a06:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a0c:	1c5a      	adds	r2, r3, #1
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a16:	b29b      	uxth	r3, r3
 8003a18:	3b01      	subs	r3, #1
 8003a1a:	b29a      	uxth	r2, r3
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	86da      	strh	r2, [r3, #54]	; 0x36
 8003a20:	e011      	b.n	8003a46 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a22:	f7fe ff8f 	bl	8002944 <HAL_GetTick>
 8003a26:	4602      	mov	r2, r0
 8003a28:	69bb      	ldr	r3, [r7, #24]
 8003a2a:	1ad3      	subs	r3, r2, r3
 8003a2c:	683a      	ldr	r2, [r7, #0]
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	d803      	bhi.n	8003a3a <HAL_SPI_Transmit+0x204>
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a38:	d102      	bne.n	8003a40 <HAL_SPI_Transmit+0x20a>
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d102      	bne.n	8003a46 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003a40:	2303      	movs	r3, #3
 8003a42:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003a44:	e026      	b.n	8003a94 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a4a:	b29b      	uxth	r3, r3
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d1cd      	bne.n	80039ec <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003a50:	69ba      	ldr	r2, [r7, #24]
 8003a52:	6839      	ldr	r1, [r7, #0]
 8003a54:	68f8      	ldr	r0, [r7, #12]
 8003a56:	f000 f8b3 	bl	8003bc0 <SPI_EndRxTxTransaction>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d002      	beq.n	8003a66 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2220      	movs	r2, #32
 8003a64:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d10a      	bne.n	8003a84 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003a6e:	2300      	movs	r3, #0
 8003a70:	613b      	str	r3, [r7, #16]
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	68db      	ldr	r3, [r3, #12]
 8003a78:	613b      	str	r3, [r7, #16]
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	613b      	str	r3, [r7, #16]
 8003a82:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d002      	beq.n	8003a92 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	77fb      	strb	r3, [r7, #31]
 8003a90:	e000      	b.n	8003a94 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003a92:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2201      	movs	r2, #1
 8003a98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003aa4:	7ffb      	ldrb	r3, [r7, #31]
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3720      	adds	r7, #32
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}
	...

08003ab0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b088      	sub	sp, #32
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	60f8      	str	r0, [r7, #12]
 8003ab8:	60b9      	str	r1, [r7, #8]
 8003aba:	603b      	str	r3, [r7, #0]
 8003abc:	4613      	mov	r3, r2
 8003abe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003ac0:	f7fe ff40 	bl	8002944 <HAL_GetTick>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ac8:	1a9b      	subs	r3, r3, r2
 8003aca:	683a      	ldr	r2, [r7, #0]
 8003acc:	4413      	add	r3, r2
 8003ace:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003ad0:	f7fe ff38 	bl	8002944 <HAL_GetTick>
 8003ad4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003ad6:	4b39      	ldr	r3, [pc, #228]	; (8003bbc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	015b      	lsls	r3, r3, #5
 8003adc:	0d1b      	lsrs	r3, r3, #20
 8003ade:	69fa      	ldr	r2, [r7, #28]
 8003ae0:	fb02 f303 	mul.w	r3, r2, r3
 8003ae4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003ae6:	e054      	b.n	8003b92 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aee:	d050      	beq.n	8003b92 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003af0:	f7fe ff28 	bl	8002944 <HAL_GetTick>
 8003af4:	4602      	mov	r2, r0
 8003af6:	69bb      	ldr	r3, [r7, #24]
 8003af8:	1ad3      	subs	r3, r2, r3
 8003afa:	69fa      	ldr	r2, [r7, #28]
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d902      	bls.n	8003b06 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003b00:	69fb      	ldr	r3, [r7, #28]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d13d      	bne.n	8003b82 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	685a      	ldr	r2, [r3, #4]
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003b14:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b1e:	d111      	bne.n	8003b44 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b28:	d004      	beq.n	8003b34 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b32:	d107      	bne.n	8003b44 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b42:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b4c:	d10f      	bne.n	8003b6e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b5c:	601a      	str	r2, [r3, #0]
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b6c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2201      	movs	r2, #1
 8003b72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003b7e:	2303      	movs	r3, #3
 8003b80:	e017      	b.n	8003bb2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d101      	bne.n	8003b8c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	3b01      	subs	r3, #1
 8003b90:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	689a      	ldr	r2, [r3, #8]
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	4013      	ands	r3, r2
 8003b9c:	68ba      	ldr	r2, [r7, #8]
 8003b9e:	429a      	cmp	r2, r3
 8003ba0:	bf0c      	ite	eq
 8003ba2:	2301      	moveq	r3, #1
 8003ba4:	2300      	movne	r3, #0
 8003ba6:	b2db      	uxtb	r3, r3
 8003ba8:	461a      	mov	r2, r3
 8003baa:	79fb      	ldrb	r3, [r7, #7]
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d19b      	bne.n	8003ae8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003bb0:	2300      	movs	r3, #0
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	3720      	adds	r7, #32
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}
 8003bba:	bf00      	nop
 8003bbc:	20000164 	.word	0x20000164

08003bc0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b088      	sub	sp, #32
 8003bc4:	af02      	add	r7, sp, #8
 8003bc6:	60f8      	str	r0, [r7, #12]
 8003bc8:	60b9      	str	r1, [r7, #8]
 8003bca:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003bcc:	4b1b      	ldr	r3, [pc, #108]	; (8003c3c <SPI_EndRxTxTransaction+0x7c>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a1b      	ldr	r2, [pc, #108]	; (8003c40 <SPI_EndRxTxTransaction+0x80>)
 8003bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8003bd6:	0d5b      	lsrs	r3, r3, #21
 8003bd8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003bdc:	fb02 f303 	mul.w	r3, r2, r3
 8003be0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003bea:	d112      	bne.n	8003c12 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	9300      	str	r3, [sp, #0]
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	2180      	movs	r1, #128	; 0x80
 8003bf6:	68f8      	ldr	r0, [r7, #12]
 8003bf8:	f7ff ff5a 	bl	8003ab0 <SPI_WaitFlagStateUntilTimeout>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d016      	beq.n	8003c30 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c06:	f043 0220 	orr.w	r2, r3, #32
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003c0e:	2303      	movs	r3, #3
 8003c10:	e00f      	b.n	8003c32 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d00a      	beq.n	8003c2e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	3b01      	subs	r3, #1
 8003c1c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	689b      	ldr	r3, [r3, #8]
 8003c24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c28:	2b80      	cmp	r3, #128	; 0x80
 8003c2a:	d0f2      	beq.n	8003c12 <SPI_EndRxTxTransaction+0x52>
 8003c2c:	e000      	b.n	8003c30 <SPI_EndRxTxTransaction+0x70>
        break;
 8003c2e:	bf00      	nop
  }

  return HAL_OK;
 8003c30:	2300      	movs	r3, #0
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3718      	adds	r7, #24
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}
 8003c3a:	bf00      	nop
 8003c3c:	20000164 	.word	0x20000164
 8003c40:	165e9f81 	.word	0x165e9f81

08003c44 <__errno>:
 8003c44:	4b01      	ldr	r3, [pc, #4]	; (8003c4c <__errno+0x8>)
 8003c46:	6818      	ldr	r0, [r3, #0]
 8003c48:	4770      	bx	lr
 8003c4a:	bf00      	nop
 8003c4c:	20000170 	.word	0x20000170

08003c50 <__libc_init_array>:
 8003c50:	b570      	push	{r4, r5, r6, lr}
 8003c52:	4d0d      	ldr	r5, [pc, #52]	; (8003c88 <__libc_init_array+0x38>)
 8003c54:	4c0d      	ldr	r4, [pc, #52]	; (8003c8c <__libc_init_array+0x3c>)
 8003c56:	1b64      	subs	r4, r4, r5
 8003c58:	10a4      	asrs	r4, r4, #2
 8003c5a:	2600      	movs	r6, #0
 8003c5c:	42a6      	cmp	r6, r4
 8003c5e:	d109      	bne.n	8003c74 <__libc_init_array+0x24>
 8003c60:	4d0b      	ldr	r5, [pc, #44]	; (8003c90 <__libc_init_array+0x40>)
 8003c62:	4c0c      	ldr	r4, [pc, #48]	; (8003c94 <__libc_init_array+0x44>)
 8003c64:	f001 f834 	bl	8004cd0 <_init>
 8003c68:	1b64      	subs	r4, r4, r5
 8003c6a:	10a4      	asrs	r4, r4, #2
 8003c6c:	2600      	movs	r6, #0
 8003c6e:	42a6      	cmp	r6, r4
 8003c70:	d105      	bne.n	8003c7e <__libc_init_array+0x2e>
 8003c72:	bd70      	pop	{r4, r5, r6, pc}
 8003c74:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c78:	4798      	blx	r3
 8003c7a:	3601      	adds	r6, #1
 8003c7c:	e7ee      	b.n	8003c5c <__libc_init_array+0xc>
 8003c7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c82:	4798      	blx	r3
 8003c84:	3601      	adds	r6, #1
 8003c86:	e7f2      	b.n	8003c6e <__libc_init_array+0x1e>
 8003c88:	0800a188 	.word	0x0800a188
 8003c8c:	0800a188 	.word	0x0800a188
 8003c90:	0800a188 	.word	0x0800a188
 8003c94:	0800a18c 	.word	0x0800a18c

08003c98 <malloc>:
 8003c98:	4b02      	ldr	r3, [pc, #8]	; (8003ca4 <malloc+0xc>)
 8003c9a:	4601      	mov	r1, r0
 8003c9c:	6818      	ldr	r0, [r3, #0]
 8003c9e:	f000 b87f 	b.w	8003da0 <_malloc_r>
 8003ca2:	bf00      	nop
 8003ca4:	20000170 	.word	0x20000170

08003ca8 <free>:
 8003ca8:	4b02      	ldr	r3, [pc, #8]	; (8003cb4 <free+0xc>)
 8003caa:	4601      	mov	r1, r0
 8003cac:	6818      	ldr	r0, [r3, #0]
 8003cae:	f000 b80b 	b.w	8003cc8 <_free_r>
 8003cb2:	bf00      	nop
 8003cb4:	20000170 	.word	0x20000170

08003cb8 <memset>:
 8003cb8:	4402      	add	r2, r0
 8003cba:	4603      	mov	r3, r0
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d100      	bne.n	8003cc2 <memset+0xa>
 8003cc0:	4770      	bx	lr
 8003cc2:	f803 1b01 	strb.w	r1, [r3], #1
 8003cc6:	e7f9      	b.n	8003cbc <memset+0x4>

08003cc8 <_free_r>:
 8003cc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003cca:	2900      	cmp	r1, #0
 8003ccc:	d044      	beq.n	8003d58 <_free_r+0x90>
 8003cce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003cd2:	9001      	str	r0, [sp, #4]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	f1a1 0404 	sub.w	r4, r1, #4
 8003cda:	bfb8      	it	lt
 8003cdc:	18e4      	addlt	r4, r4, r3
 8003cde:	f000 fc51 	bl	8004584 <__malloc_lock>
 8003ce2:	4a1e      	ldr	r2, [pc, #120]	; (8003d5c <_free_r+0x94>)
 8003ce4:	9801      	ldr	r0, [sp, #4]
 8003ce6:	6813      	ldr	r3, [r2, #0]
 8003ce8:	b933      	cbnz	r3, 8003cf8 <_free_r+0x30>
 8003cea:	6063      	str	r3, [r4, #4]
 8003cec:	6014      	str	r4, [r2, #0]
 8003cee:	b003      	add	sp, #12
 8003cf0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003cf4:	f000 bc4c 	b.w	8004590 <__malloc_unlock>
 8003cf8:	42a3      	cmp	r3, r4
 8003cfa:	d908      	bls.n	8003d0e <_free_r+0x46>
 8003cfc:	6825      	ldr	r5, [r4, #0]
 8003cfe:	1961      	adds	r1, r4, r5
 8003d00:	428b      	cmp	r3, r1
 8003d02:	bf01      	itttt	eq
 8003d04:	6819      	ldreq	r1, [r3, #0]
 8003d06:	685b      	ldreq	r3, [r3, #4]
 8003d08:	1949      	addeq	r1, r1, r5
 8003d0a:	6021      	streq	r1, [r4, #0]
 8003d0c:	e7ed      	b.n	8003cea <_free_r+0x22>
 8003d0e:	461a      	mov	r2, r3
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	b10b      	cbz	r3, 8003d18 <_free_r+0x50>
 8003d14:	42a3      	cmp	r3, r4
 8003d16:	d9fa      	bls.n	8003d0e <_free_r+0x46>
 8003d18:	6811      	ldr	r1, [r2, #0]
 8003d1a:	1855      	adds	r5, r2, r1
 8003d1c:	42a5      	cmp	r5, r4
 8003d1e:	d10b      	bne.n	8003d38 <_free_r+0x70>
 8003d20:	6824      	ldr	r4, [r4, #0]
 8003d22:	4421      	add	r1, r4
 8003d24:	1854      	adds	r4, r2, r1
 8003d26:	42a3      	cmp	r3, r4
 8003d28:	6011      	str	r1, [r2, #0]
 8003d2a:	d1e0      	bne.n	8003cee <_free_r+0x26>
 8003d2c:	681c      	ldr	r4, [r3, #0]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	6053      	str	r3, [r2, #4]
 8003d32:	4421      	add	r1, r4
 8003d34:	6011      	str	r1, [r2, #0]
 8003d36:	e7da      	b.n	8003cee <_free_r+0x26>
 8003d38:	d902      	bls.n	8003d40 <_free_r+0x78>
 8003d3a:	230c      	movs	r3, #12
 8003d3c:	6003      	str	r3, [r0, #0]
 8003d3e:	e7d6      	b.n	8003cee <_free_r+0x26>
 8003d40:	6825      	ldr	r5, [r4, #0]
 8003d42:	1961      	adds	r1, r4, r5
 8003d44:	428b      	cmp	r3, r1
 8003d46:	bf04      	itt	eq
 8003d48:	6819      	ldreq	r1, [r3, #0]
 8003d4a:	685b      	ldreq	r3, [r3, #4]
 8003d4c:	6063      	str	r3, [r4, #4]
 8003d4e:	bf04      	itt	eq
 8003d50:	1949      	addeq	r1, r1, r5
 8003d52:	6021      	streq	r1, [r4, #0]
 8003d54:	6054      	str	r4, [r2, #4]
 8003d56:	e7ca      	b.n	8003cee <_free_r+0x26>
 8003d58:	b003      	add	sp, #12
 8003d5a:	bd30      	pop	{r4, r5, pc}
 8003d5c:	20000268 	.word	0x20000268

08003d60 <sbrk_aligned>:
 8003d60:	b570      	push	{r4, r5, r6, lr}
 8003d62:	4e0e      	ldr	r6, [pc, #56]	; (8003d9c <sbrk_aligned+0x3c>)
 8003d64:	460c      	mov	r4, r1
 8003d66:	6831      	ldr	r1, [r6, #0]
 8003d68:	4605      	mov	r5, r0
 8003d6a:	b911      	cbnz	r1, 8003d72 <sbrk_aligned+0x12>
 8003d6c:	f000 f91a 	bl	8003fa4 <_sbrk_r>
 8003d70:	6030      	str	r0, [r6, #0]
 8003d72:	4621      	mov	r1, r4
 8003d74:	4628      	mov	r0, r5
 8003d76:	f000 f915 	bl	8003fa4 <_sbrk_r>
 8003d7a:	1c43      	adds	r3, r0, #1
 8003d7c:	d00a      	beq.n	8003d94 <sbrk_aligned+0x34>
 8003d7e:	1cc4      	adds	r4, r0, #3
 8003d80:	f024 0403 	bic.w	r4, r4, #3
 8003d84:	42a0      	cmp	r0, r4
 8003d86:	d007      	beq.n	8003d98 <sbrk_aligned+0x38>
 8003d88:	1a21      	subs	r1, r4, r0
 8003d8a:	4628      	mov	r0, r5
 8003d8c:	f000 f90a 	bl	8003fa4 <_sbrk_r>
 8003d90:	3001      	adds	r0, #1
 8003d92:	d101      	bne.n	8003d98 <sbrk_aligned+0x38>
 8003d94:	f04f 34ff 	mov.w	r4, #4294967295
 8003d98:	4620      	mov	r0, r4
 8003d9a:	bd70      	pop	{r4, r5, r6, pc}
 8003d9c:	2000026c 	.word	0x2000026c

08003da0 <_malloc_r>:
 8003da0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003da4:	1ccd      	adds	r5, r1, #3
 8003da6:	f025 0503 	bic.w	r5, r5, #3
 8003daa:	3508      	adds	r5, #8
 8003dac:	2d0c      	cmp	r5, #12
 8003dae:	bf38      	it	cc
 8003db0:	250c      	movcc	r5, #12
 8003db2:	2d00      	cmp	r5, #0
 8003db4:	4607      	mov	r7, r0
 8003db6:	db01      	blt.n	8003dbc <_malloc_r+0x1c>
 8003db8:	42a9      	cmp	r1, r5
 8003dba:	d905      	bls.n	8003dc8 <_malloc_r+0x28>
 8003dbc:	230c      	movs	r3, #12
 8003dbe:	603b      	str	r3, [r7, #0]
 8003dc0:	2600      	movs	r6, #0
 8003dc2:	4630      	mov	r0, r6
 8003dc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003dc8:	4e2e      	ldr	r6, [pc, #184]	; (8003e84 <_malloc_r+0xe4>)
 8003dca:	f000 fbdb 	bl	8004584 <__malloc_lock>
 8003dce:	6833      	ldr	r3, [r6, #0]
 8003dd0:	461c      	mov	r4, r3
 8003dd2:	bb34      	cbnz	r4, 8003e22 <_malloc_r+0x82>
 8003dd4:	4629      	mov	r1, r5
 8003dd6:	4638      	mov	r0, r7
 8003dd8:	f7ff ffc2 	bl	8003d60 <sbrk_aligned>
 8003ddc:	1c43      	adds	r3, r0, #1
 8003dde:	4604      	mov	r4, r0
 8003de0:	d14d      	bne.n	8003e7e <_malloc_r+0xde>
 8003de2:	6834      	ldr	r4, [r6, #0]
 8003de4:	4626      	mov	r6, r4
 8003de6:	2e00      	cmp	r6, #0
 8003de8:	d140      	bne.n	8003e6c <_malloc_r+0xcc>
 8003dea:	6823      	ldr	r3, [r4, #0]
 8003dec:	4631      	mov	r1, r6
 8003dee:	4638      	mov	r0, r7
 8003df0:	eb04 0803 	add.w	r8, r4, r3
 8003df4:	f000 f8d6 	bl	8003fa4 <_sbrk_r>
 8003df8:	4580      	cmp	r8, r0
 8003dfa:	d13a      	bne.n	8003e72 <_malloc_r+0xd2>
 8003dfc:	6821      	ldr	r1, [r4, #0]
 8003dfe:	3503      	adds	r5, #3
 8003e00:	1a6d      	subs	r5, r5, r1
 8003e02:	f025 0503 	bic.w	r5, r5, #3
 8003e06:	3508      	adds	r5, #8
 8003e08:	2d0c      	cmp	r5, #12
 8003e0a:	bf38      	it	cc
 8003e0c:	250c      	movcc	r5, #12
 8003e0e:	4629      	mov	r1, r5
 8003e10:	4638      	mov	r0, r7
 8003e12:	f7ff ffa5 	bl	8003d60 <sbrk_aligned>
 8003e16:	3001      	adds	r0, #1
 8003e18:	d02b      	beq.n	8003e72 <_malloc_r+0xd2>
 8003e1a:	6823      	ldr	r3, [r4, #0]
 8003e1c:	442b      	add	r3, r5
 8003e1e:	6023      	str	r3, [r4, #0]
 8003e20:	e00e      	b.n	8003e40 <_malloc_r+0xa0>
 8003e22:	6822      	ldr	r2, [r4, #0]
 8003e24:	1b52      	subs	r2, r2, r5
 8003e26:	d41e      	bmi.n	8003e66 <_malloc_r+0xc6>
 8003e28:	2a0b      	cmp	r2, #11
 8003e2a:	d916      	bls.n	8003e5a <_malloc_r+0xba>
 8003e2c:	1961      	adds	r1, r4, r5
 8003e2e:	42a3      	cmp	r3, r4
 8003e30:	6025      	str	r5, [r4, #0]
 8003e32:	bf18      	it	ne
 8003e34:	6059      	strne	r1, [r3, #4]
 8003e36:	6863      	ldr	r3, [r4, #4]
 8003e38:	bf08      	it	eq
 8003e3a:	6031      	streq	r1, [r6, #0]
 8003e3c:	5162      	str	r2, [r4, r5]
 8003e3e:	604b      	str	r3, [r1, #4]
 8003e40:	4638      	mov	r0, r7
 8003e42:	f104 060b 	add.w	r6, r4, #11
 8003e46:	f000 fba3 	bl	8004590 <__malloc_unlock>
 8003e4a:	f026 0607 	bic.w	r6, r6, #7
 8003e4e:	1d23      	adds	r3, r4, #4
 8003e50:	1af2      	subs	r2, r6, r3
 8003e52:	d0b6      	beq.n	8003dc2 <_malloc_r+0x22>
 8003e54:	1b9b      	subs	r3, r3, r6
 8003e56:	50a3      	str	r3, [r4, r2]
 8003e58:	e7b3      	b.n	8003dc2 <_malloc_r+0x22>
 8003e5a:	6862      	ldr	r2, [r4, #4]
 8003e5c:	42a3      	cmp	r3, r4
 8003e5e:	bf0c      	ite	eq
 8003e60:	6032      	streq	r2, [r6, #0]
 8003e62:	605a      	strne	r2, [r3, #4]
 8003e64:	e7ec      	b.n	8003e40 <_malloc_r+0xa0>
 8003e66:	4623      	mov	r3, r4
 8003e68:	6864      	ldr	r4, [r4, #4]
 8003e6a:	e7b2      	b.n	8003dd2 <_malloc_r+0x32>
 8003e6c:	4634      	mov	r4, r6
 8003e6e:	6876      	ldr	r6, [r6, #4]
 8003e70:	e7b9      	b.n	8003de6 <_malloc_r+0x46>
 8003e72:	230c      	movs	r3, #12
 8003e74:	603b      	str	r3, [r7, #0]
 8003e76:	4638      	mov	r0, r7
 8003e78:	f000 fb8a 	bl	8004590 <__malloc_unlock>
 8003e7c:	e7a1      	b.n	8003dc2 <_malloc_r+0x22>
 8003e7e:	6025      	str	r5, [r4, #0]
 8003e80:	e7de      	b.n	8003e40 <_malloc_r+0xa0>
 8003e82:	bf00      	nop
 8003e84:	20000268 	.word	0x20000268

08003e88 <iprintf>:
 8003e88:	b40f      	push	{r0, r1, r2, r3}
 8003e8a:	4b0a      	ldr	r3, [pc, #40]	; (8003eb4 <iprintf+0x2c>)
 8003e8c:	b513      	push	{r0, r1, r4, lr}
 8003e8e:	681c      	ldr	r4, [r3, #0]
 8003e90:	b124      	cbz	r4, 8003e9c <iprintf+0x14>
 8003e92:	69a3      	ldr	r3, [r4, #24]
 8003e94:	b913      	cbnz	r3, 8003e9c <iprintf+0x14>
 8003e96:	4620      	mov	r0, r4
 8003e98:	f000 fa6e 	bl	8004378 <__sinit>
 8003e9c:	ab05      	add	r3, sp, #20
 8003e9e:	9a04      	ldr	r2, [sp, #16]
 8003ea0:	68a1      	ldr	r1, [r4, #8]
 8003ea2:	9301      	str	r3, [sp, #4]
 8003ea4:	4620      	mov	r0, r4
 8003ea6:	f000 fba3 	bl	80045f0 <_vfiprintf_r>
 8003eaa:	b002      	add	sp, #8
 8003eac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003eb0:	b004      	add	sp, #16
 8003eb2:	4770      	bx	lr
 8003eb4:	20000170 	.word	0x20000170

08003eb8 <_puts_r>:
 8003eb8:	b570      	push	{r4, r5, r6, lr}
 8003eba:	460e      	mov	r6, r1
 8003ebc:	4605      	mov	r5, r0
 8003ebe:	b118      	cbz	r0, 8003ec8 <_puts_r+0x10>
 8003ec0:	6983      	ldr	r3, [r0, #24]
 8003ec2:	b90b      	cbnz	r3, 8003ec8 <_puts_r+0x10>
 8003ec4:	f000 fa58 	bl	8004378 <__sinit>
 8003ec8:	69ab      	ldr	r3, [r5, #24]
 8003eca:	68ac      	ldr	r4, [r5, #8]
 8003ecc:	b913      	cbnz	r3, 8003ed4 <_puts_r+0x1c>
 8003ece:	4628      	mov	r0, r5
 8003ed0:	f000 fa52 	bl	8004378 <__sinit>
 8003ed4:	4b2c      	ldr	r3, [pc, #176]	; (8003f88 <_puts_r+0xd0>)
 8003ed6:	429c      	cmp	r4, r3
 8003ed8:	d120      	bne.n	8003f1c <_puts_r+0x64>
 8003eda:	686c      	ldr	r4, [r5, #4]
 8003edc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003ede:	07db      	lsls	r3, r3, #31
 8003ee0:	d405      	bmi.n	8003eee <_puts_r+0x36>
 8003ee2:	89a3      	ldrh	r3, [r4, #12]
 8003ee4:	0598      	lsls	r0, r3, #22
 8003ee6:	d402      	bmi.n	8003eee <_puts_r+0x36>
 8003ee8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003eea:	f000 fae3 	bl	80044b4 <__retarget_lock_acquire_recursive>
 8003eee:	89a3      	ldrh	r3, [r4, #12]
 8003ef0:	0719      	lsls	r1, r3, #28
 8003ef2:	d51d      	bpl.n	8003f30 <_puts_r+0x78>
 8003ef4:	6923      	ldr	r3, [r4, #16]
 8003ef6:	b1db      	cbz	r3, 8003f30 <_puts_r+0x78>
 8003ef8:	3e01      	subs	r6, #1
 8003efa:	68a3      	ldr	r3, [r4, #8]
 8003efc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003f00:	3b01      	subs	r3, #1
 8003f02:	60a3      	str	r3, [r4, #8]
 8003f04:	bb39      	cbnz	r1, 8003f56 <_puts_r+0x9e>
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	da38      	bge.n	8003f7c <_puts_r+0xc4>
 8003f0a:	4622      	mov	r2, r4
 8003f0c:	210a      	movs	r1, #10
 8003f0e:	4628      	mov	r0, r5
 8003f10:	f000 f858 	bl	8003fc4 <__swbuf_r>
 8003f14:	3001      	adds	r0, #1
 8003f16:	d011      	beq.n	8003f3c <_puts_r+0x84>
 8003f18:	250a      	movs	r5, #10
 8003f1a:	e011      	b.n	8003f40 <_puts_r+0x88>
 8003f1c:	4b1b      	ldr	r3, [pc, #108]	; (8003f8c <_puts_r+0xd4>)
 8003f1e:	429c      	cmp	r4, r3
 8003f20:	d101      	bne.n	8003f26 <_puts_r+0x6e>
 8003f22:	68ac      	ldr	r4, [r5, #8]
 8003f24:	e7da      	b.n	8003edc <_puts_r+0x24>
 8003f26:	4b1a      	ldr	r3, [pc, #104]	; (8003f90 <_puts_r+0xd8>)
 8003f28:	429c      	cmp	r4, r3
 8003f2a:	bf08      	it	eq
 8003f2c:	68ec      	ldreq	r4, [r5, #12]
 8003f2e:	e7d5      	b.n	8003edc <_puts_r+0x24>
 8003f30:	4621      	mov	r1, r4
 8003f32:	4628      	mov	r0, r5
 8003f34:	f000 f898 	bl	8004068 <__swsetup_r>
 8003f38:	2800      	cmp	r0, #0
 8003f3a:	d0dd      	beq.n	8003ef8 <_puts_r+0x40>
 8003f3c:	f04f 35ff 	mov.w	r5, #4294967295
 8003f40:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003f42:	07da      	lsls	r2, r3, #31
 8003f44:	d405      	bmi.n	8003f52 <_puts_r+0x9a>
 8003f46:	89a3      	ldrh	r3, [r4, #12]
 8003f48:	059b      	lsls	r3, r3, #22
 8003f4a:	d402      	bmi.n	8003f52 <_puts_r+0x9a>
 8003f4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003f4e:	f000 fab2 	bl	80044b6 <__retarget_lock_release_recursive>
 8003f52:	4628      	mov	r0, r5
 8003f54:	bd70      	pop	{r4, r5, r6, pc}
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	da04      	bge.n	8003f64 <_puts_r+0xac>
 8003f5a:	69a2      	ldr	r2, [r4, #24]
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	dc06      	bgt.n	8003f6e <_puts_r+0xb6>
 8003f60:	290a      	cmp	r1, #10
 8003f62:	d004      	beq.n	8003f6e <_puts_r+0xb6>
 8003f64:	6823      	ldr	r3, [r4, #0]
 8003f66:	1c5a      	adds	r2, r3, #1
 8003f68:	6022      	str	r2, [r4, #0]
 8003f6a:	7019      	strb	r1, [r3, #0]
 8003f6c:	e7c5      	b.n	8003efa <_puts_r+0x42>
 8003f6e:	4622      	mov	r2, r4
 8003f70:	4628      	mov	r0, r5
 8003f72:	f000 f827 	bl	8003fc4 <__swbuf_r>
 8003f76:	3001      	adds	r0, #1
 8003f78:	d1bf      	bne.n	8003efa <_puts_r+0x42>
 8003f7a:	e7df      	b.n	8003f3c <_puts_r+0x84>
 8003f7c:	6823      	ldr	r3, [r4, #0]
 8003f7e:	250a      	movs	r5, #10
 8003f80:	1c5a      	adds	r2, r3, #1
 8003f82:	6022      	str	r2, [r4, #0]
 8003f84:	701d      	strb	r5, [r3, #0]
 8003f86:	e7db      	b.n	8003f40 <_puts_r+0x88>
 8003f88:	0800a10c 	.word	0x0800a10c
 8003f8c:	0800a12c 	.word	0x0800a12c
 8003f90:	0800a0ec 	.word	0x0800a0ec

08003f94 <puts>:
 8003f94:	4b02      	ldr	r3, [pc, #8]	; (8003fa0 <puts+0xc>)
 8003f96:	4601      	mov	r1, r0
 8003f98:	6818      	ldr	r0, [r3, #0]
 8003f9a:	f7ff bf8d 	b.w	8003eb8 <_puts_r>
 8003f9e:	bf00      	nop
 8003fa0:	20000170 	.word	0x20000170

08003fa4 <_sbrk_r>:
 8003fa4:	b538      	push	{r3, r4, r5, lr}
 8003fa6:	4d06      	ldr	r5, [pc, #24]	; (8003fc0 <_sbrk_r+0x1c>)
 8003fa8:	2300      	movs	r3, #0
 8003faa:	4604      	mov	r4, r0
 8003fac:	4608      	mov	r0, r1
 8003fae:	602b      	str	r3, [r5, #0]
 8003fb0:	f7fe fbf0 	bl	8002794 <_sbrk>
 8003fb4:	1c43      	adds	r3, r0, #1
 8003fb6:	d102      	bne.n	8003fbe <_sbrk_r+0x1a>
 8003fb8:	682b      	ldr	r3, [r5, #0]
 8003fba:	b103      	cbz	r3, 8003fbe <_sbrk_r+0x1a>
 8003fbc:	6023      	str	r3, [r4, #0]
 8003fbe:	bd38      	pop	{r3, r4, r5, pc}
 8003fc0:	20000274 	.word	0x20000274

08003fc4 <__swbuf_r>:
 8003fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fc6:	460e      	mov	r6, r1
 8003fc8:	4614      	mov	r4, r2
 8003fca:	4605      	mov	r5, r0
 8003fcc:	b118      	cbz	r0, 8003fd6 <__swbuf_r+0x12>
 8003fce:	6983      	ldr	r3, [r0, #24]
 8003fd0:	b90b      	cbnz	r3, 8003fd6 <__swbuf_r+0x12>
 8003fd2:	f000 f9d1 	bl	8004378 <__sinit>
 8003fd6:	4b21      	ldr	r3, [pc, #132]	; (800405c <__swbuf_r+0x98>)
 8003fd8:	429c      	cmp	r4, r3
 8003fda:	d12b      	bne.n	8004034 <__swbuf_r+0x70>
 8003fdc:	686c      	ldr	r4, [r5, #4]
 8003fde:	69a3      	ldr	r3, [r4, #24]
 8003fe0:	60a3      	str	r3, [r4, #8]
 8003fe2:	89a3      	ldrh	r3, [r4, #12]
 8003fe4:	071a      	lsls	r2, r3, #28
 8003fe6:	d52f      	bpl.n	8004048 <__swbuf_r+0x84>
 8003fe8:	6923      	ldr	r3, [r4, #16]
 8003fea:	b36b      	cbz	r3, 8004048 <__swbuf_r+0x84>
 8003fec:	6923      	ldr	r3, [r4, #16]
 8003fee:	6820      	ldr	r0, [r4, #0]
 8003ff0:	1ac0      	subs	r0, r0, r3
 8003ff2:	6963      	ldr	r3, [r4, #20]
 8003ff4:	b2f6      	uxtb	r6, r6
 8003ff6:	4283      	cmp	r3, r0
 8003ff8:	4637      	mov	r7, r6
 8003ffa:	dc04      	bgt.n	8004006 <__swbuf_r+0x42>
 8003ffc:	4621      	mov	r1, r4
 8003ffe:	4628      	mov	r0, r5
 8004000:	f000 f926 	bl	8004250 <_fflush_r>
 8004004:	bb30      	cbnz	r0, 8004054 <__swbuf_r+0x90>
 8004006:	68a3      	ldr	r3, [r4, #8]
 8004008:	3b01      	subs	r3, #1
 800400a:	60a3      	str	r3, [r4, #8]
 800400c:	6823      	ldr	r3, [r4, #0]
 800400e:	1c5a      	adds	r2, r3, #1
 8004010:	6022      	str	r2, [r4, #0]
 8004012:	701e      	strb	r6, [r3, #0]
 8004014:	6963      	ldr	r3, [r4, #20]
 8004016:	3001      	adds	r0, #1
 8004018:	4283      	cmp	r3, r0
 800401a:	d004      	beq.n	8004026 <__swbuf_r+0x62>
 800401c:	89a3      	ldrh	r3, [r4, #12]
 800401e:	07db      	lsls	r3, r3, #31
 8004020:	d506      	bpl.n	8004030 <__swbuf_r+0x6c>
 8004022:	2e0a      	cmp	r6, #10
 8004024:	d104      	bne.n	8004030 <__swbuf_r+0x6c>
 8004026:	4621      	mov	r1, r4
 8004028:	4628      	mov	r0, r5
 800402a:	f000 f911 	bl	8004250 <_fflush_r>
 800402e:	b988      	cbnz	r0, 8004054 <__swbuf_r+0x90>
 8004030:	4638      	mov	r0, r7
 8004032:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004034:	4b0a      	ldr	r3, [pc, #40]	; (8004060 <__swbuf_r+0x9c>)
 8004036:	429c      	cmp	r4, r3
 8004038:	d101      	bne.n	800403e <__swbuf_r+0x7a>
 800403a:	68ac      	ldr	r4, [r5, #8]
 800403c:	e7cf      	b.n	8003fde <__swbuf_r+0x1a>
 800403e:	4b09      	ldr	r3, [pc, #36]	; (8004064 <__swbuf_r+0xa0>)
 8004040:	429c      	cmp	r4, r3
 8004042:	bf08      	it	eq
 8004044:	68ec      	ldreq	r4, [r5, #12]
 8004046:	e7ca      	b.n	8003fde <__swbuf_r+0x1a>
 8004048:	4621      	mov	r1, r4
 800404a:	4628      	mov	r0, r5
 800404c:	f000 f80c 	bl	8004068 <__swsetup_r>
 8004050:	2800      	cmp	r0, #0
 8004052:	d0cb      	beq.n	8003fec <__swbuf_r+0x28>
 8004054:	f04f 37ff 	mov.w	r7, #4294967295
 8004058:	e7ea      	b.n	8004030 <__swbuf_r+0x6c>
 800405a:	bf00      	nop
 800405c:	0800a10c 	.word	0x0800a10c
 8004060:	0800a12c 	.word	0x0800a12c
 8004064:	0800a0ec 	.word	0x0800a0ec

08004068 <__swsetup_r>:
 8004068:	4b32      	ldr	r3, [pc, #200]	; (8004134 <__swsetup_r+0xcc>)
 800406a:	b570      	push	{r4, r5, r6, lr}
 800406c:	681d      	ldr	r5, [r3, #0]
 800406e:	4606      	mov	r6, r0
 8004070:	460c      	mov	r4, r1
 8004072:	b125      	cbz	r5, 800407e <__swsetup_r+0x16>
 8004074:	69ab      	ldr	r3, [r5, #24]
 8004076:	b913      	cbnz	r3, 800407e <__swsetup_r+0x16>
 8004078:	4628      	mov	r0, r5
 800407a:	f000 f97d 	bl	8004378 <__sinit>
 800407e:	4b2e      	ldr	r3, [pc, #184]	; (8004138 <__swsetup_r+0xd0>)
 8004080:	429c      	cmp	r4, r3
 8004082:	d10f      	bne.n	80040a4 <__swsetup_r+0x3c>
 8004084:	686c      	ldr	r4, [r5, #4]
 8004086:	89a3      	ldrh	r3, [r4, #12]
 8004088:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800408c:	0719      	lsls	r1, r3, #28
 800408e:	d42c      	bmi.n	80040ea <__swsetup_r+0x82>
 8004090:	06dd      	lsls	r5, r3, #27
 8004092:	d411      	bmi.n	80040b8 <__swsetup_r+0x50>
 8004094:	2309      	movs	r3, #9
 8004096:	6033      	str	r3, [r6, #0]
 8004098:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800409c:	81a3      	strh	r3, [r4, #12]
 800409e:	f04f 30ff 	mov.w	r0, #4294967295
 80040a2:	e03e      	b.n	8004122 <__swsetup_r+0xba>
 80040a4:	4b25      	ldr	r3, [pc, #148]	; (800413c <__swsetup_r+0xd4>)
 80040a6:	429c      	cmp	r4, r3
 80040a8:	d101      	bne.n	80040ae <__swsetup_r+0x46>
 80040aa:	68ac      	ldr	r4, [r5, #8]
 80040ac:	e7eb      	b.n	8004086 <__swsetup_r+0x1e>
 80040ae:	4b24      	ldr	r3, [pc, #144]	; (8004140 <__swsetup_r+0xd8>)
 80040b0:	429c      	cmp	r4, r3
 80040b2:	bf08      	it	eq
 80040b4:	68ec      	ldreq	r4, [r5, #12]
 80040b6:	e7e6      	b.n	8004086 <__swsetup_r+0x1e>
 80040b8:	0758      	lsls	r0, r3, #29
 80040ba:	d512      	bpl.n	80040e2 <__swsetup_r+0x7a>
 80040bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80040be:	b141      	cbz	r1, 80040d2 <__swsetup_r+0x6a>
 80040c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80040c4:	4299      	cmp	r1, r3
 80040c6:	d002      	beq.n	80040ce <__swsetup_r+0x66>
 80040c8:	4630      	mov	r0, r6
 80040ca:	f7ff fdfd 	bl	8003cc8 <_free_r>
 80040ce:	2300      	movs	r3, #0
 80040d0:	6363      	str	r3, [r4, #52]	; 0x34
 80040d2:	89a3      	ldrh	r3, [r4, #12]
 80040d4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80040d8:	81a3      	strh	r3, [r4, #12]
 80040da:	2300      	movs	r3, #0
 80040dc:	6063      	str	r3, [r4, #4]
 80040de:	6923      	ldr	r3, [r4, #16]
 80040e0:	6023      	str	r3, [r4, #0]
 80040e2:	89a3      	ldrh	r3, [r4, #12]
 80040e4:	f043 0308 	orr.w	r3, r3, #8
 80040e8:	81a3      	strh	r3, [r4, #12]
 80040ea:	6923      	ldr	r3, [r4, #16]
 80040ec:	b94b      	cbnz	r3, 8004102 <__swsetup_r+0x9a>
 80040ee:	89a3      	ldrh	r3, [r4, #12]
 80040f0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80040f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040f8:	d003      	beq.n	8004102 <__swsetup_r+0x9a>
 80040fa:	4621      	mov	r1, r4
 80040fc:	4630      	mov	r0, r6
 80040fe:	f000 fa01 	bl	8004504 <__smakebuf_r>
 8004102:	89a0      	ldrh	r0, [r4, #12]
 8004104:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004108:	f010 0301 	ands.w	r3, r0, #1
 800410c:	d00a      	beq.n	8004124 <__swsetup_r+0xbc>
 800410e:	2300      	movs	r3, #0
 8004110:	60a3      	str	r3, [r4, #8]
 8004112:	6963      	ldr	r3, [r4, #20]
 8004114:	425b      	negs	r3, r3
 8004116:	61a3      	str	r3, [r4, #24]
 8004118:	6923      	ldr	r3, [r4, #16]
 800411a:	b943      	cbnz	r3, 800412e <__swsetup_r+0xc6>
 800411c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004120:	d1ba      	bne.n	8004098 <__swsetup_r+0x30>
 8004122:	bd70      	pop	{r4, r5, r6, pc}
 8004124:	0781      	lsls	r1, r0, #30
 8004126:	bf58      	it	pl
 8004128:	6963      	ldrpl	r3, [r4, #20]
 800412a:	60a3      	str	r3, [r4, #8]
 800412c:	e7f4      	b.n	8004118 <__swsetup_r+0xb0>
 800412e:	2000      	movs	r0, #0
 8004130:	e7f7      	b.n	8004122 <__swsetup_r+0xba>
 8004132:	bf00      	nop
 8004134:	20000170 	.word	0x20000170
 8004138:	0800a10c 	.word	0x0800a10c
 800413c:	0800a12c 	.word	0x0800a12c
 8004140:	0800a0ec 	.word	0x0800a0ec

08004144 <__sflush_r>:
 8004144:	898a      	ldrh	r2, [r1, #12]
 8004146:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800414a:	4605      	mov	r5, r0
 800414c:	0710      	lsls	r0, r2, #28
 800414e:	460c      	mov	r4, r1
 8004150:	d458      	bmi.n	8004204 <__sflush_r+0xc0>
 8004152:	684b      	ldr	r3, [r1, #4]
 8004154:	2b00      	cmp	r3, #0
 8004156:	dc05      	bgt.n	8004164 <__sflush_r+0x20>
 8004158:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800415a:	2b00      	cmp	r3, #0
 800415c:	dc02      	bgt.n	8004164 <__sflush_r+0x20>
 800415e:	2000      	movs	r0, #0
 8004160:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004164:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004166:	2e00      	cmp	r6, #0
 8004168:	d0f9      	beq.n	800415e <__sflush_r+0x1a>
 800416a:	2300      	movs	r3, #0
 800416c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004170:	682f      	ldr	r7, [r5, #0]
 8004172:	602b      	str	r3, [r5, #0]
 8004174:	d032      	beq.n	80041dc <__sflush_r+0x98>
 8004176:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004178:	89a3      	ldrh	r3, [r4, #12]
 800417a:	075a      	lsls	r2, r3, #29
 800417c:	d505      	bpl.n	800418a <__sflush_r+0x46>
 800417e:	6863      	ldr	r3, [r4, #4]
 8004180:	1ac0      	subs	r0, r0, r3
 8004182:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004184:	b10b      	cbz	r3, 800418a <__sflush_r+0x46>
 8004186:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004188:	1ac0      	subs	r0, r0, r3
 800418a:	2300      	movs	r3, #0
 800418c:	4602      	mov	r2, r0
 800418e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004190:	6a21      	ldr	r1, [r4, #32]
 8004192:	4628      	mov	r0, r5
 8004194:	47b0      	blx	r6
 8004196:	1c43      	adds	r3, r0, #1
 8004198:	89a3      	ldrh	r3, [r4, #12]
 800419a:	d106      	bne.n	80041aa <__sflush_r+0x66>
 800419c:	6829      	ldr	r1, [r5, #0]
 800419e:	291d      	cmp	r1, #29
 80041a0:	d82c      	bhi.n	80041fc <__sflush_r+0xb8>
 80041a2:	4a2a      	ldr	r2, [pc, #168]	; (800424c <__sflush_r+0x108>)
 80041a4:	40ca      	lsrs	r2, r1
 80041a6:	07d6      	lsls	r6, r2, #31
 80041a8:	d528      	bpl.n	80041fc <__sflush_r+0xb8>
 80041aa:	2200      	movs	r2, #0
 80041ac:	6062      	str	r2, [r4, #4]
 80041ae:	04d9      	lsls	r1, r3, #19
 80041b0:	6922      	ldr	r2, [r4, #16]
 80041b2:	6022      	str	r2, [r4, #0]
 80041b4:	d504      	bpl.n	80041c0 <__sflush_r+0x7c>
 80041b6:	1c42      	adds	r2, r0, #1
 80041b8:	d101      	bne.n	80041be <__sflush_r+0x7a>
 80041ba:	682b      	ldr	r3, [r5, #0]
 80041bc:	b903      	cbnz	r3, 80041c0 <__sflush_r+0x7c>
 80041be:	6560      	str	r0, [r4, #84]	; 0x54
 80041c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80041c2:	602f      	str	r7, [r5, #0]
 80041c4:	2900      	cmp	r1, #0
 80041c6:	d0ca      	beq.n	800415e <__sflush_r+0x1a>
 80041c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80041cc:	4299      	cmp	r1, r3
 80041ce:	d002      	beq.n	80041d6 <__sflush_r+0x92>
 80041d0:	4628      	mov	r0, r5
 80041d2:	f7ff fd79 	bl	8003cc8 <_free_r>
 80041d6:	2000      	movs	r0, #0
 80041d8:	6360      	str	r0, [r4, #52]	; 0x34
 80041da:	e7c1      	b.n	8004160 <__sflush_r+0x1c>
 80041dc:	6a21      	ldr	r1, [r4, #32]
 80041de:	2301      	movs	r3, #1
 80041e0:	4628      	mov	r0, r5
 80041e2:	47b0      	blx	r6
 80041e4:	1c41      	adds	r1, r0, #1
 80041e6:	d1c7      	bne.n	8004178 <__sflush_r+0x34>
 80041e8:	682b      	ldr	r3, [r5, #0]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d0c4      	beq.n	8004178 <__sflush_r+0x34>
 80041ee:	2b1d      	cmp	r3, #29
 80041f0:	d001      	beq.n	80041f6 <__sflush_r+0xb2>
 80041f2:	2b16      	cmp	r3, #22
 80041f4:	d101      	bne.n	80041fa <__sflush_r+0xb6>
 80041f6:	602f      	str	r7, [r5, #0]
 80041f8:	e7b1      	b.n	800415e <__sflush_r+0x1a>
 80041fa:	89a3      	ldrh	r3, [r4, #12]
 80041fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004200:	81a3      	strh	r3, [r4, #12]
 8004202:	e7ad      	b.n	8004160 <__sflush_r+0x1c>
 8004204:	690f      	ldr	r7, [r1, #16]
 8004206:	2f00      	cmp	r7, #0
 8004208:	d0a9      	beq.n	800415e <__sflush_r+0x1a>
 800420a:	0793      	lsls	r3, r2, #30
 800420c:	680e      	ldr	r6, [r1, #0]
 800420e:	bf08      	it	eq
 8004210:	694b      	ldreq	r3, [r1, #20]
 8004212:	600f      	str	r7, [r1, #0]
 8004214:	bf18      	it	ne
 8004216:	2300      	movne	r3, #0
 8004218:	eba6 0807 	sub.w	r8, r6, r7
 800421c:	608b      	str	r3, [r1, #8]
 800421e:	f1b8 0f00 	cmp.w	r8, #0
 8004222:	dd9c      	ble.n	800415e <__sflush_r+0x1a>
 8004224:	6a21      	ldr	r1, [r4, #32]
 8004226:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004228:	4643      	mov	r3, r8
 800422a:	463a      	mov	r2, r7
 800422c:	4628      	mov	r0, r5
 800422e:	47b0      	blx	r6
 8004230:	2800      	cmp	r0, #0
 8004232:	dc06      	bgt.n	8004242 <__sflush_r+0xfe>
 8004234:	89a3      	ldrh	r3, [r4, #12]
 8004236:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800423a:	81a3      	strh	r3, [r4, #12]
 800423c:	f04f 30ff 	mov.w	r0, #4294967295
 8004240:	e78e      	b.n	8004160 <__sflush_r+0x1c>
 8004242:	4407      	add	r7, r0
 8004244:	eba8 0800 	sub.w	r8, r8, r0
 8004248:	e7e9      	b.n	800421e <__sflush_r+0xda>
 800424a:	bf00      	nop
 800424c:	20400001 	.word	0x20400001

08004250 <_fflush_r>:
 8004250:	b538      	push	{r3, r4, r5, lr}
 8004252:	690b      	ldr	r3, [r1, #16]
 8004254:	4605      	mov	r5, r0
 8004256:	460c      	mov	r4, r1
 8004258:	b913      	cbnz	r3, 8004260 <_fflush_r+0x10>
 800425a:	2500      	movs	r5, #0
 800425c:	4628      	mov	r0, r5
 800425e:	bd38      	pop	{r3, r4, r5, pc}
 8004260:	b118      	cbz	r0, 800426a <_fflush_r+0x1a>
 8004262:	6983      	ldr	r3, [r0, #24]
 8004264:	b90b      	cbnz	r3, 800426a <_fflush_r+0x1a>
 8004266:	f000 f887 	bl	8004378 <__sinit>
 800426a:	4b14      	ldr	r3, [pc, #80]	; (80042bc <_fflush_r+0x6c>)
 800426c:	429c      	cmp	r4, r3
 800426e:	d11b      	bne.n	80042a8 <_fflush_r+0x58>
 8004270:	686c      	ldr	r4, [r5, #4]
 8004272:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d0ef      	beq.n	800425a <_fflush_r+0xa>
 800427a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800427c:	07d0      	lsls	r0, r2, #31
 800427e:	d404      	bmi.n	800428a <_fflush_r+0x3a>
 8004280:	0599      	lsls	r1, r3, #22
 8004282:	d402      	bmi.n	800428a <_fflush_r+0x3a>
 8004284:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004286:	f000 f915 	bl	80044b4 <__retarget_lock_acquire_recursive>
 800428a:	4628      	mov	r0, r5
 800428c:	4621      	mov	r1, r4
 800428e:	f7ff ff59 	bl	8004144 <__sflush_r>
 8004292:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004294:	07da      	lsls	r2, r3, #31
 8004296:	4605      	mov	r5, r0
 8004298:	d4e0      	bmi.n	800425c <_fflush_r+0xc>
 800429a:	89a3      	ldrh	r3, [r4, #12]
 800429c:	059b      	lsls	r3, r3, #22
 800429e:	d4dd      	bmi.n	800425c <_fflush_r+0xc>
 80042a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80042a2:	f000 f908 	bl	80044b6 <__retarget_lock_release_recursive>
 80042a6:	e7d9      	b.n	800425c <_fflush_r+0xc>
 80042a8:	4b05      	ldr	r3, [pc, #20]	; (80042c0 <_fflush_r+0x70>)
 80042aa:	429c      	cmp	r4, r3
 80042ac:	d101      	bne.n	80042b2 <_fflush_r+0x62>
 80042ae:	68ac      	ldr	r4, [r5, #8]
 80042b0:	e7df      	b.n	8004272 <_fflush_r+0x22>
 80042b2:	4b04      	ldr	r3, [pc, #16]	; (80042c4 <_fflush_r+0x74>)
 80042b4:	429c      	cmp	r4, r3
 80042b6:	bf08      	it	eq
 80042b8:	68ec      	ldreq	r4, [r5, #12]
 80042ba:	e7da      	b.n	8004272 <_fflush_r+0x22>
 80042bc:	0800a10c 	.word	0x0800a10c
 80042c0:	0800a12c 	.word	0x0800a12c
 80042c4:	0800a0ec 	.word	0x0800a0ec

080042c8 <std>:
 80042c8:	2300      	movs	r3, #0
 80042ca:	b510      	push	{r4, lr}
 80042cc:	4604      	mov	r4, r0
 80042ce:	e9c0 3300 	strd	r3, r3, [r0]
 80042d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80042d6:	6083      	str	r3, [r0, #8]
 80042d8:	8181      	strh	r1, [r0, #12]
 80042da:	6643      	str	r3, [r0, #100]	; 0x64
 80042dc:	81c2      	strh	r2, [r0, #14]
 80042de:	6183      	str	r3, [r0, #24]
 80042e0:	4619      	mov	r1, r3
 80042e2:	2208      	movs	r2, #8
 80042e4:	305c      	adds	r0, #92	; 0x5c
 80042e6:	f7ff fce7 	bl	8003cb8 <memset>
 80042ea:	4b05      	ldr	r3, [pc, #20]	; (8004300 <std+0x38>)
 80042ec:	6263      	str	r3, [r4, #36]	; 0x24
 80042ee:	4b05      	ldr	r3, [pc, #20]	; (8004304 <std+0x3c>)
 80042f0:	62a3      	str	r3, [r4, #40]	; 0x28
 80042f2:	4b05      	ldr	r3, [pc, #20]	; (8004308 <std+0x40>)
 80042f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80042f6:	4b05      	ldr	r3, [pc, #20]	; (800430c <std+0x44>)
 80042f8:	6224      	str	r4, [r4, #32]
 80042fa:	6323      	str	r3, [r4, #48]	; 0x30
 80042fc:	bd10      	pop	{r4, pc}
 80042fe:	bf00      	nop
 8004300:	08004b79 	.word	0x08004b79
 8004304:	08004b9b 	.word	0x08004b9b
 8004308:	08004bd3 	.word	0x08004bd3
 800430c:	08004bf7 	.word	0x08004bf7

08004310 <_cleanup_r>:
 8004310:	4901      	ldr	r1, [pc, #4]	; (8004318 <_cleanup_r+0x8>)
 8004312:	f000 b8af 	b.w	8004474 <_fwalk_reent>
 8004316:	bf00      	nop
 8004318:	08004251 	.word	0x08004251

0800431c <__sfmoreglue>:
 800431c:	b570      	push	{r4, r5, r6, lr}
 800431e:	2268      	movs	r2, #104	; 0x68
 8004320:	1e4d      	subs	r5, r1, #1
 8004322:	4355      	muls	r5, r2
 8004324:	460e      	mov	r6, r1
 8004326:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800432a:	f7ff fd39 	bl	8003da0 <_malloc_r>
 800432e:	4604      	mov	r4, r0
 8004330:	b140      	cbz	r0, 8004344 <__sfmoreglue+0x28>
 8004332:	2100      	movs	r1, #0
 8004334:	e9c0 1600 	strd	r1, r6, [r0]
 8004338:	300c      	adds	r0, #12
 800433a:	60a0      	str	r0, [r4, #8]
 800433c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004340:	f7ff fcba 	bl	8003cb8 <memset>
 8004344:	4620      	mov	r0, r4
 8004346:	bd70      	pop	{r4, r5, r6, pc}

08004348 <__sfp_lock_acquire>:
 8004348:	4801      	ldr	r0, [pc, #4]	; (8004350 <__sfp_lock_acquire+0x8>)
 800434a:	f000 b8b3 	b.w	80044b4 <__retarget_lock_acquire_recursive>
 800434e:	bf00      	nop
 8004350:	20000271 	.word	0x20000271

08004354 <__sfp_lock_release>:
 8004354:	4801      	ldr	r0, [pc, #4]	; (800435c <__sfp_lock_release+0x8>)
 8004356:	f000 b8ae 	b.w	80044b6 <__retarget_lock_release_recursive>
 800435a:	bf00      	nop
 800435c:	20000271 	.word	0x20000271

08004360 <__sinit_lock_acquire>:
 8004360:	4801      	ldr	r0, [pc, #4]	; (8004368 <__sinit_lock_acquire+0x8>)
 8004362:	f000 b8a7 	b.w	80044b4 <__retarget_lock_acquire_recursive>
 8004366:	bf00      	nop
 8004368:	20000272 	.word	0x20000272

0800436c <__sinit_lock_release>:
 800436c:	4801      	ldr	r0, [pc, #4]	; (8004374 <__sinit_lock_release+0x8>)
 800436e:	f000 b8a2 	b.w	80044b6 <__retarget_lock_release_recursive>
 8004372:	bf00      	nop
 8004374:	20000272 	.word	0x20000272

08004378 <__sinit>:
 8004378:	b510      	push	{r4, lr}
 800437a:	4604      	mov	r4, r0
 800437c:	f7ff fff0 	bl	8004360 <__sinit_lock_acquire>
 8004380:	69a3      	ldr	r3, [r4, #24]
 8004382:	b11b      	cbz	r3, 800438c <__sinit+0x14>
 8004384:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004388:	f7ff bff0 	b.w	800436c <__sinit_lock_release>
 800438c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004390:	6523      	str	r3, [r4, #80]	; 0x50
 8004392:	4b13      	ldr	r3, [pc, #76]	; (80043e0 <__sinit+0x68>)
 8004394:	4a13      	ldr	r2, [pc, #76]	; (80043e4 <__sinit+0x6c>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	62a2      	str	r2, [r4, #40]	; 0x28
 800439a:	42a3      	cmp	r3, r4
 800439c:	bf04      	itt	eq
 800439e:	2301      	moveq	r3, #1
 80043a0:	61a3      	streq	r3, [r4, #24]
 80043a2:	4620      	mov	r0, r4
 80043a4:	f000 f820 	bl	80043e8 <__sfp>
 80043a8:	6060      	str	r0, [r4, #4]
 80043aa:	4620      	mov	r0, r4
 80043ac:	f000 f81c 	bl	80043e8 <__sfp>
 80043b0:	60a0      	str	r0, [r4, #8]
 80043b2:	4620      	mov	r0, r4
 80043b4:	f000 f818 	bl	80043e8 <__sfp>
 80043b8:	2200      	movs	r2, #0
 80043ba:	60e0      	str	r0, [r4, #12]
 80043bc:	2104      	movs	r1, #4
 80043be:	6860      	ldr	r0, [r4, #4]
 80043c0:	f7ff ff82 	bl	80042c8 <std>
 80043c4:	68a0      	ldr	r0, [r4, #8]
 80043c6:	2201      	movs	r2, #1
 80043c8:	2109      	movs	r1, #9
 80043ca:	f7ff ff7d 	bl	80042c8 <std>
 80043ce:	68e0      	ldr	r0, [r4, #12]
 80043d0:	2202      	movs	r2, #2
 80043d2:	2112      	movs	r1, #18
 80043d4:	f7ff ff78 	bl	80042c8 <std>
 80043d8:	2301      	movs	r3, #1
 80043da:	61a3      	str	r3, [r4, #24]
 80043dc:	e7d2      	b.n	8004384 <__sinit+0xc>
 80043de:	bf00      	nop
 80043e0:	0800a0e8 	.word	0x0800a0e8
 80043e4:	08004311 	.word	0x08004311

080043e8 <__sfp>:
 80043e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043ea:	4607      	mov	r7, r0
 80043ec:	f7ff ffac 	bl	8004348 <__sfp_lock_acquire>
 80043f0:	4b1e      	ldr	r3, [pc, #120]	; (800446c <__sfp+0x84>)
 80043f2:	681e      	ldr	r6, [r3, #0]
 80043f4:	69b3      	ldr	r3, [r6, #24]
 80043f6:	b913      	cbnz	r3, 80043fe <__sfp+0x16>
 80043f8:	4630      	mov	r0, r6
 80043fa:	f7ff ffbd 	bl	8004378 <__sinit>
 80043fe:	3648      	adds	r6, #72	; 0x48
 8004400:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004404:	3b01      	subs	r3, #1
 8004406:	d503      	bpl.n	8004410 <__sfp+0x28>
 8004408:	6833      	ldr	r3, [r6, #0]
 800440a:	b30b      	cbz	r3, 8004450 <__sfp+0x68>
 800440c:	6836      	ldr	r6, [r6, #0]
 800440e:	e7f7      	b.n	8004400 <__sfp+0x18>
 8004410:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004414:	b9d5      	cbnz	r5, 800444c <__sfp+0x64>
 8004416:	4b16      	ldr	r3, [pc, #88]	; (8004470 <__sfp+0x88>)
 8004418:	60e3      	str	r3, [r4, #12]
 800441a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800441e:	6665      	str	r5, [r4, #100]	; 0x64
 8004420:	f000 f847 	bl	80044b2 <__retarget_lock_init_recursive>
 8004424:	f7ff ff96 	bl	8004354 <__sfp_lock_release>
 8004428:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800442c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004430:	6025      	str	r5, [r4, #0]
 8004432:	61a5      	str	r5, [r4, #24]
 8004434:	2208      	movs	r2, #8
 8004436:	4629      	mov	r1, r5
 8004438:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800443c:	f7ff fc3c 	bl	8003cb8 <memset>
 8004440:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004444:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004448:	4620      	mov	r0, r4
 800444a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800444c:	3468      	adds	r4, #104	; 0x68
 800444e:	e7d9      	b.n	8004404 <__sfp+0x1c>
 8004450:	2104      	movs	r1, #4
 8004452:	4638      	mov	r0, r7
 8004454:	f7ff ff62 	bl	800431c <__sfmoreglue>
 8004458:	4604      	mov	r4, r0
 800445a:	6030      	str	r0, [r6, #0]
 800445c:	2800      	cmp	r0, #0
 800445e:	d1d5      	bne.n	800440c <__sfp+0x24>
 8004460:	f7ff ff78 	bl	8004354 <__sfp_lock_release>
 8004464:	230c      	movs	r3, #12
 8004466:	603b      	str	r3, [r7, #0]
 8004468:	e7ee      	b.n	8004448 <__sfp+0x60>
 800446a:	bf00      	nop
 800446c:	0800a0e8 	.word	0x0800a0e8
 8004470:	ffff0001 	.word	0xffff0001

08004474 <_fwalk_reent>:
 8004474:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004478:	4606      	mov	r6, r0
 800447a:	4688      	mov	r8, r1
 800447c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004480:	2700      	movs	r7, #0
 8004482:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004486:	f1b9 0901 	subs.w	r9, r9, #1
 800448a:	d505      	bpl.n	8004498 <_fwalk_reent+0x24>
 800448c:	6824      	ldr	r4, [r4, #0]
 800448e:	2c00      	cmp	r4, #0
 8004490:	d1f7      	bne.n	8004482 <_fwalk_reent+0xe>
 8004492:	4638      	mov	r0, r7
 8004494:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004498:	89ab      	ldrh	r3, [r5, #12]
 800449a:	2b01      	cmp	r3, #1
 800449c:	d907      	bls.n	80044ae <_fwalk_reent+0x3a>
 800449e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80044a2:	3301      	adds	r3, #1
 80044a4:	d003      	beq.n	80044ae <_fwalk_reent+0x3a>
 80044a6:	4629      	mov	r1, r5
 80044a8:	4630      	mov	r0, r6
 80044aa:	47c0      	blx	r8
 80044ac:	4307      	orrs	r7, r0
 80044ae:	3568      	adds	r5, #104	; 0x68
 80044b0:	e7e9      	b.n	8004486 <_fwalk_reent+0x12>

080044b2 <__retarget_lock_init_recursive>:
 80044b2:	4770      	bx	lr

080044b4 <__retarget_lock_acquire_recursive>:
 80044b4:	4770      	bx	lr

080044b6 <__retarget_lock_release_recursive>:
 80044b6:	4770      	bx	lr

080044b8 <__swhatbuf_r>:
 80044b8:	b570      	push	{r4, r5, r6, lr}
 80044ba:	460e      	mov	r6, r1
 80044bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044c0:	2900      	cmp	r1, #0
 80044c2:	b096      	sub	sp, #88	; 0x58
 80044c4:	4614      	mov	r4, r2
 80044c6:	461d      	mov	r5, r3
 80044c8:	da08      	bge.n	80044dc <__swhatbuf_r+0x24>
 80044ca:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80044ce:	2200      	movs	r2, #0
 80044d0:	602a      	str	r2, [r5, #0]
 80044d2:	061a      	lsls	r2, r3, #24
 80044d4:	d410      	bmi.n	80044f8 <__swhatbuf_r+0x40>
 80044d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80044da:	e00e      	b.n	80044fa <__swhatbuf_r+0x42>
 80044dc:	466a      	mov	r2, sp
 80044de:	f000 fbb1 	bl	8004c44 <_fstat_r>
 80044e2:	2800      	cmp	r0, #0
 80044e4:	dbf1      	blt.n	80044ca <__swhatbuf_r+0x12>
 80044e6:	9a01      	ldr	r2, [sp, #4]
 80044e8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80044ec:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80044f0:	425a      	negs	r2, r3
 80044f2:	415a      	adcs	r2, r3
 80044f4:	602a      	str	r2, [r5, #0]
 80044f6:	e7ee      	b.n	80044d6 <__swhatbuf_r+0x1e>
 80044f8:	2340      	movs	r3, #64	; 0x40
 80044fa:	2000      	movs	r0, #0
 80044fc:	6023      	str	r3, [r4, #0]
 80044fe:	b016      	add	sp, #88	; 0x58
 8004500:	bd70      	pop	{r4, r5, r6, pc}
	...

08004504 <__smakebuf_r>:
 8004504:	898b      	ldrh	r3, [r1, #12]
 8004506:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004508:	079d      	lsls	r5, r3, #30
 800450a:	4606      	mov	r6, r0
 800450c:	460c      	mov	r4, r1
 800450e:	d507      	bpl.n	8004520 <__smakebuf_r+0x1c>
 8004510:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004514:	6023      	str	r3, [r4, #0]
 8004516:	6123      	str	r3, [r4, #16]
 8004518:	2301      	movs	r3, #1
 800451a:	6163      	str	r3, [r4, #20]
 800451c:	b002      	add	sp, #8
 800451e:	bd70      	pop	{r4, r5, r6, pc}
 8004520:	ab01      	add	r3, sp, #4
 8004522:	466a      	mov	r2, sp
 8004524:	f7ff ffc8 	bl	80044b8 <__swhatbuf_r>
 8004528:	9900      	ldr	r1, [sp, #0]
 800452a:	4605      	mov	r5, r0
 800452c:	4630      	mov	r0, r6
 800452e:	f7ff fc37 	bl	8003da0 <_malloc_r>
 8004532:	b948      	cbnz	r0, 8004548 <__smakebuf_r+0x44>
 8004534:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004538:	059a      	lsls	r2, r3, #22
 800453a:	d4ef      	bmi.n	800451c <__smakebuf_r+0x18>
 800453c:	f023 0303 	bic.w	r3, r3, #3
 8004540:	f043 0302 	orr.w	r3, r3, #2
 8004544:	81a3      	strh	r3, [r4, #12]
 8004546:	e7e3      	b.n	8004510 <__smakebuf_r+0xc>
 8004548:	4b0d      	ldr	r3, [pc, #52]	; (8004580 <__smakebuf_r+0x7c>)
 800454a:	62b3      	str	r3, [r6, #40]	; 0x28
 800454c:	89a3      	ldrh	r3, [r4, #12]
 800454e:	6020      	str	r0, [r4, #0]
 8004550:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004554:	81a3      	strh	r3, [r4, #12]
 8004556:	9b00      	ldr	r3, [sp, #0]
 8004558:	6163      	str	r3, [r4, #20]
 800455a:	9b01      	ldr	r3, [sp, #4]
 800455c:	6120      	str	r0, [r4, #16]
 800455e:	b15b      	cbz	r3, 8004578 <__smakebuf_r+0x74>
 8004560:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004564:	4630      	mov	r0, r6
 8004566:	f000 fb7f 	bl	8004c68 <_isatty_r>
 800456a:	b128      	cbz	r0, 8004578 <__smakebuf_r+0x74>
 800456c:	89a3      	ldrh	r3, [r4, #12]
 800456e:	f023 0303 	bic.w	r3, r3, #3
 8004572:	f043 0301 	orr.w	r3, r3, #1
 8004576:	81a3      	strh	r3, [r4, #12]
 8004578:	89a0      	ldrh	r0, [r4, #12]
 800457a:	4305      	orrs	r5, r0
 800457c:	81a5      	strh	r5, [r4, #12]
 800457e:	e7cd      	b.n	800451c <__smakebuf_r+0x18>
 8004580:	08004311 	.word	0x08004311

08004584 <__malloc_lock>:
 8004584:	4801      	ldr	r0, [pc, #4]	; (800458c <__malloc_lock+0x8>)
 8004586:	f7ff bf95 	b.w	80044b4 <__retarget_lock_acquire_recursive>
 800458a:	bf00      	nop
 800458c:	20000270 	.word	0x20000270

08004590 <__malloc_unlock>:
 8004590:	4801      	ldr	r0, [pc, #4]	; (8004598 <__malloc_unlock+0x8>)
 8004592:	f7ff bf90 	b.w	80044b6 <__retarget_lock_release_recursive>
 8004596:	bf00      	nop
 8004598:	20000270 	.word	0x20000270

0800459c <__sfputc_r>:
 800459c:	6893      	ldr	r3, [r2, #8]
 800459e:	3b01      	subs	r3, #1
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	b410      	push	{r4}
 80045a4:	6093      	str	r3, [r2, #8]
 80045a6:	da08      	bge.n	80045ba <__sfputc_r+0x1e>
 80045a8:	6994      	ldr	r4, [r2, #24]
 80045aa:	42a3      	cmp	r3, r4
 80045ac:	db01      	blt.n	80045b2 <__sfputc_r+0x16>
 80045ae:	290a      	cmp	r1, #10
 80045b0:	d103      	bne.n	80045ba <__sfputc_r+0x1e>
 80045b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80045b6:	f7ff bd05 	b.w	8003fc4 <__swbuf_r>
 80045ba:	6813      	ldr	r3, [r2, #0]
 80045bc:	1c58      	adds	r0, r3, #1
 80045be:	6010      	str	r0, [r2, #0]
 80045c0:	7019      	strb	r1, [r3, #0]
 80045c2:	4608      	mov	r0, r1
 80045c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80045c8:	4770      	bx	lr

080045ca <__sfputs_r>:
 80045ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045cc:	4606      	mov	r6, r0
 80045ce:	460f      	mov	r7, r1
 80045d0:	4614      	mov	r4, r2
 80045d2:	18d5      	adds	r5, r2, r3
 80045d4:	42ac      	cmp	r4, r5
 80045d6:	d101      	bne.n	80045dc <__sfputs_r+0x12>
 80045d8:	2000      	movs	r0, #0
 80045da:	e007      	b.n	80045ec <__sfputs_r+0x22>
 80045dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80045e0:	463a      	mov	r2, r7
 80045e2:	4630      	mov	r0, r6
 80045e4:	f7ff ffda 	bl	800459c <__sfputc_r>
 80045e8:	1c43      	adds	r3, r0, #1
 80045ea:	d1f3      	bne.n	80045d4 <__sfputs_r+0xa>
 80045ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080045f0 <_vfiprintf_r>:
 80045f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045f4:	460d      	mov	r5, r1
 80045f6:	b09d      	sub	sp, #116	; 0x74
 80045f8:	4614      	mov	r4, r2
 80045fa:	4698      	mov	r8, r3
 80045fc:	4606      	mov	r6, r0
 80045fe:	b118      	cbz	r0, 8004608 <_vfiprintf_r+0x18>
 8004600:	6983      	ldr	r3, [r0, #24]
 8004602:	b90b      	cbnz	r3, 8004608 <_vfiprintf_r+0x18>
 8004604:	f7ff feb8 	bl	8004378 <__sinit>
 8004608:	4b89      	ldr	r3, [pc, #548]	; (8004830 <_vfiprintf_r+0x240>)
 800460a:	429d      	cmp	r5, r3
 800460c:	d11b      	bne.n	8004646 <_vfiprintf_r+0x56>
 800460e:	6875      	ldr	r5, [r6, #4]
 8004610:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004612:	07d9      	lsls	r1, r3, #31
 8004614:	d405      	bmi.n	8004622 <_vfiprintf_r+0x32>
 8004616:	89ab      	ldrh	r3, [r5, #12]
 8004618:	059a      	lsls	r2, r3, #22
 800461a:	d402      	bmi.n	8004622 <_vfiprintf_r+0x32>
 800461c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800461e:	f7ff ff49 	bl	80044b4 <__retarget_lock_acquire_recursive>
 8004622:	89ab      	ldrh	r3, [r5, #12]
 8004624:	071b      	lsls	r3, r3, #28
 8004626:	d501      	bpl.n	800462c <_vfiprintf_r+0x3c>
 8004628:	692b      	ldr	r3, [r5, #16]
 800462a:	b9eb      	cbnz	r3, 8004668 <_vfiprintf_r+0x78>
 800462c:	4629      	mov	r1, r5
 800462e:	4630      	mov	r0, r6
 8004630:	f7ff fd1a 	bl	8004068 <__swsetup_r>
 8004634:	b1c0      	cbz	r0, 8004668 <_vfiprintf_r+0x78>
 8004636:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004638:	07dc      	lsls	r4, r3, #31
 800463a:	d50e      	bpl.n	800465a <_vfiprintf_r+0x6a>
 800463c:	f04f 30ff 	mov.w	r0, #4294967295
 8004640:	b01d      	add	sp, #116	; 0x74
 8004642:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004646:	4b7b      	ldr	r3, [pc, #492]	; (8004834 <_vfiprintf_r+0x244>)
 8004648:	429d      	cmp	r5, r3
 800464a:	d101      	bne.n	8004650 <_vfiprintf_r+0x60>
 800464c:	68b5      	ldr	r5, [r6, #8]
 800464e:	e7df      	b.n	8004610 <_vfiprintf_r+0x20>
 8004650:	4b79      	ldr	r3, [pc, #484]	; (8004838 <_vfiprintf_r+0x248>)
 8004652:	429d      	cmp	r5, r3
 8004654:	bf08      	it	eq
 8004656:	68f5      	ldreq	r5, [r6, #12]
 8004658:	e7da      	b.n	8004610 <_vfiprintf_r+0x20>
 800465a:	89ab      	ldrh	r3, [r5, #12]
 800465c:	0598      	lsls	r0, r3, #22
 800465e:	d4ed      	bmi.n	800463c <_vfiprintf_r+0x4c>
 8004660:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004662:	f7ff ff28 	bl	80044b6 <__retarget_lock_release_recursive>
 8004666:	e7e9      	b.n	800463c <_vfiprintf_r+0x4c>
 8004668:	2300      	movs	r3, #0
 800466a:	9309      	str	r3, [sp, #36]	; 0x24
 800466c:	2320      	movs	r3, #32
 800466e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004672:	f8cd 800c 	str.w	r8, [sp, #12]
 8004676:	2330      	movs	r3, #48	; 0x30
 8004678:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800483c <_vfiprintf_r+0x24c>
 800467c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004680:	f04f 0901 	mov.w	r9, #1
 8004684:	4623      	mov	r3, r4
 8004686:	469a      	mov	sl, r3
 8004688:	f813 2b01 	ldrb.w	r2, [r3], #1
 800468c:	b10a      	cbz	r2, 8004692 <_vfiprintf_r+0xa2>
 800468e:	2a25      	cmp	r2, #37	; 0x25
 8004690:	d1f9      	bne.n	8004686 <_vfiprintf_r+0x96>
 8004692:	ebba 0b04 	subs.w	fp, sl, r4
 8004696:	d00b      	beq.n	80046b0 <_vfiprintf_r+0xc0>
 8004698:	465b      	mov	r3, fp
 800469a:	4622      	mov	r2, r4
 800469c:	4629      	mov	r1, r5
 800469e:	4630      	mov	r0, r6
 80046a0:	f7ff ff93 	bl	80045ca <__sfputs_r>
 80046a4:	3001      	adds	r0, #1
 80046a6:	f000 80aa 	beq.w	80047fe <_vfiprintf_r+0x20e>
 80046aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80046ac:	445a      	add	r2, fp
 80046ae:	9209      	str	r2, [sp, #36]	; 0x24
 80046b0:	f89a 3000 	ldrb.w	r3, [sl]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	f000 80a2 	beq.w	80047fe <_vfiprintf_r+0x20e>
 80046ba:	2300      	movs	r3, #0
 80046bc:	f04f 32ff 	mov.w	r2, #4294967295
 80046c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80046c4:	f10a 0a01 	add.w	sl, sl, #1
 80046c8:	9304      	str	r3, [sp, #16]
 80046ca:	9307      	str	r3, [sp, #28]
 80046cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80046d0:	931a      	str	r3, [sp, #104]	; 0x68
 80046d2:	4654      	mov	r4, sl
 80046d4:	2205      	movs	r2, #5
 80046d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80046da:	4858      	ldr	r0, [pc, #352]	; (800483c <_vfiprintf_r+0x24c>)
 80046dc:	f7fb fd80 	bl	80001e0 <memchr>
 80046e0:	9a04      	ldr	r2, [sp, #16]
 80046e2:	b9d8      	cbnz	r0, 800471c <_vfiprintf_r+0x12c>
 80046e4:	06d1      	lsls	r1, r2, #27
 80046e6:	bf44      	itt	mi
 80046e8:	2320      	movmi	r3, #32
 80046ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80046ee:	0713      	lsls	r3, r2, #28
 80046f0:	bf44      	itt	mi
 80046f2:	232b      	movmi	r3, #43	; 0x2b
 80046f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80046f8:	f89a 3000 	ldrb.w	r3, [sl]
 80046fc:	2b2a      	cmp	r3, #42	; 0x2a
 80046fe:	d015      	beq.n	800472c <_vfiprintf_r+0x13c>
 8004700:	9a07      	ldr	r2, [sp, #28]
 8004702:	4654      	mov	r4, sl
 8004704:	2000      	movs	r0, #0
 8004706:	f04f 0c0a 	mov.w	ip, #10
 800470a:	4621      	mov	r1, r4
 800470c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004710:	3b30      	subs	r3, #48	; 0x30
 8004712:	2b09      	cmp	r3, #9
 8004714:	d94e      	bls.n	80047b4 <_vfiprintf_r+0x1c4>
 8004716:	b1b0      	cbz	r0, 8004746 <_vfiprintf_r+0x156>
 8004718:	9207      	str	r2, [sp, #28]
 800471a:	e014      	b.n	8004746 <_vfiprintf_r+0x156>
 800471c:	eba0 0308 	sub.w	r3, r0, r8
 8004720:	fa09 f303 	lsl.w	r3, r9, r3
 8004724:	4313      	orrs	r3, r2
 8004726:	9304      	str	r3, [sp, #16]
 8004728:	46a2      	mov	sl, r4
 800472a:	e7d2      	b.n	80046d2 <_vfiprintf_r+0xe2>
 800472c:	9b03      	ldr	r3, [sp, #12]
 800472e:	1d19      	adds	r1, r3, #4
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	9103      	str	r1, [sp, #12]
 8004734:	2b00      	cmp	r3, #0
 8004736:	bfbb      	ittet	lt
 8004738:	425b      	neglt	r3, r3
 800473a:	f042 0202 	orrlt.w	r2, r2, #2
 800473e:	9307      	strge	r3, [sp, #28]
 8004740:	9307      	strlt	r3, [sp, #28]
 8004742:	bfb8      	it	lt
 8004744:	9204      	strlt	r2, [sp, #16]
 8004746:	7823      	ldrb	r3, [r4, #0]
 8004748:	2b2e      	cmp	r3, #46	; 0x2e
 800474a:	d10c      	bne.n	8004766 <_vfiprintf_r+0x176>
 800474c:	7863      	ldrb	r3, [r4, #1]
 800474e:	2b2a      	cmp	r3, #42	; 0x2a
 8004750:	d135      	bne.n	80047be <_vfiprintf_r+0x1ce>
 8004752:	9b03      	ldr	r3, [sp, #12]
 8004754:	1d1a      	adds	r2, r3, #4
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	9203      	str	r2, [sp, #12]
 800475a:	2b00      	cmp	r3, #0
 800475c:	bfb8      	it	lt
 800475e:	f04f 33ff 	movlt.w	r3, #4294967295
 8004762:	3402      	adds	r4, #2
 8004764:	9305      	str	r3, [sp, #20]
 8004766:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800484c <_vfiprintf_r+0x25c>
 800476a:	7821      	ldrb	r1, [r4, #0]
 800476c:	2203      	movs	r2, #3
 800476e:	4650      	mov	r0, sl
 8004770:	f7fb fd36 	bl	80001e0 <memchr>
 8004774:	b140      	cbz	r0, 8004788 <_vfiprintf_r+0x198>
 8004776:	2340      	movs	r3, #64	; 0x40
 8004778:	eba0 000a 	sub.w	r0, r0, sl
 800477c:	fa03 f000 	lsl.w	r0, r3, r0
 8004780:	9b04      	ldr	r3, [sp, #16]
 8004782:	4303      	orrs	r3, r0
 8004784:	3401      	adds	r4, #1
 8004786:	9304      	str	r3, [sp, #16]
 8004788:	f814 1b01 	ldrb.w	r1, [r4], #1
 800478c:	482c      	ldr	r0, [pc, #176]	; (8004840 <_vfiprintf_r+0x250>)
 800478e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004792:	2206      	movs	r2, #6
 8004794:	f7fb fd24 	bl	80001e0 <memchr>
 8004798:	2800      	cmp	r0, #0
 800479a:	d03f      	beq.n	800481c <_vfiprintf_r+0x22c>
 800479c:	4b29      	ldr	r3, [pc, #164]	; (8004844 <_vfiprintf_r+0x254>)
 800479e:	bb1b      	cbnz	r3, 80047e8 <_vfiprintf_r+0x1f8>
 80047a0:	9b03      	ldr	r3, [sp, #12]
 80047a2:	3307      	adds	r3, #7
 80047a4:	f023 0307 	bic.w	r3, r3, #7
 80047a8:	3308      	adds	r3, #8
 80047aa:	9303      	str	r3, [sp, #12]
 80047ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047ae:	443b      	add	r3, r7
 80047b0:	9309      	str	r3, [sp, #36]	; 0x24
 80047b2:	e767      	b.n	8004684 <_vfiprintf_r+0x94>
 80047b4:	fb0c 3202 	mla	r2, ip, r2, r3
 80047b8:	460c      	mov	r4, r1
 80047ba:	2001      	movs	r0, #1
 80047bc:	e7a5      	b.n	800470a <_vfiprintf_r+0x11a>
 80047be:	2300      	movs	r3, #0
 80047c0:	3401      	adds	r4, #1
 80047c2:	9305      	str	r3, [sp, #20]
 80047c4:	4619      	mov	r1, r3
 80047c6:	f04f 0c0a 	mov.w	ip, #10
 80047ca:	4620      	mov	r0, r4
 80047cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80047d0:	3a30      	subs	r2, #48	; 0x30
 80047d2:	2a09      	cmp	r2, #9
 80047d4:	d903      	bls.n	80047de <_vfiprintf_r+0x1ee>
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d0c5      	beq.n	8004766 <_vfiprintf_r+0x176>
 80047da:	9105      	str	r1, [sp, #20]
 80047dc:	e7c3      	b.n	8004766 <_vfiprintf_r+0x176>
 80047de:	fb0c 2101 	mla	r1, ip, r1, r2
 80047e2:	4604      	mov	r4, r0
 80047e4:	2301      	movs	r3, #1
 80047e6:	e7f0      	b.n	80047ca <_vfiprintf_r+0x1da>
 80047e8:	ab03      	add	r3, sp, #12
 80047ea:	9300      	str	r3, [sp, #0]
 80047ec:	462a      	mov	r2, r5
 80047ee:	4b16      	ldr	r3, [pc, #88]	; (8004848 <_vfiprintf_r+0x258>)
 80047f0:	a904      	add	r1, sp, #16
 80047f2:	4630      	mov	r0, r6
 80047f4:	f3af 8000 	nop.w
 80047f8:	4607      	mov	r7, r0
 80047fa:	1c78      	adds	r0, r7, #1
 80047fc:	d1d6      	bne.n	80047ac <_vfiprintf_r+0x1bc>
 80047fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004800:	07d9      	lsls	r1, r3, #31
 8004802:	d405      	bmi.n	8004810 <_vfiprintf_r+0x220>
 8004804:	89ab      	ldrh	r3, [r5, #12]
 8004806:	059a      	lsls	r2, r3, #22
 8004808:	d402      	bmi.n	8004810 <_vfiprintf_r+0x220>
 800480a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800480c:	f7ff fe53 	bl	80044b6 <__retarget_lock_release_recursive>
 8004810:	89ab      	ldrh	r3, [r5, #12]
 8004812:	065b      	lsls	r3, r3, #25
 8004814:	f53f af12 	bmi.w	800463c <_vfiprintf_r+0x4c>
 8004818:	9809      	ldr	r0, [sp, #36]	; 0x24
 800481a:	e711      	b.n	8004640 <_vfiprintf_r+0x50>
 800481c:	ab03      	add	r3, sp, #12
 800481e:	9300      	str	r3, [sp, #0]
 8004820:	462a      	mov	r2, r5
 8004822:	4b09      	ldr	r3, [pc, #36]	; (8004848 <_vfiprintf_r+0x258>)
 8004824:	a904      	add	r1, sp, #16
 8004826:	4630      	mov	r0, r6
 8004828:	f000 f880 	bl	800492c <_printf_i>
 800482c:	e7e4      	b.n	80047f8 <_vfiprintf_r+0x208>
 800482e:	bf00      	nop
 8004830:	0800a10c 	.word	0x0800a10c
 8004834:	0800a12c 	.word	0x0800a12c
 8004838:	0800a0ec 	.word	0x0800a0ec
 800483c:	0800a14c 	.word	0x0800a14c
 8004840:	0800a156 	.word	0x0800a156
 8004844:	00000000 	.word	0x00000000
 8004848:	080045cb 	.word	0x080045cb
 800484c:	0800a152 	.word	0x0800a152

08004850 <_printf_common>:
 8004850:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004854:	4616      	mov	r6, r2
 8004856:	4699      	mov	r9, r3
 8004858:	688a      	ldr	r2, [r1, #8]
 800485a:	690b      	ldr	r3, [r1, #16]
 800485c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004860:	4293      	cmp	r3, r2
 8004862:	bfb8      	it	lt
 8004864:	4613      	movlt	r3, r2
 8004866:	6033      	str	r3, [r6, #0]
 8004868:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800486c:	4607      	mov	r7, r0
 800486e:	460c      	mov	r4, r1
 8004870:	b10a      	cbz	r2, 8004876 <_printf_common+0x26>
 8004872:	3301      	adds	r3, #1
 8004874:	6033      	str	r3, [r6, #0]
 8004876:	6823      	ldr	r3, [r4, #0]
 8004878:	0699      	lsls	r1, r3, #26
 800487a:	bf42      	ittt	mi
 800487c:	6833      	ldrmi	r3, [r6, #0]
 800487e:	3302      	addmi	r3, #2
 8004880:	6033      	strmi	r3, [r6, #0]
 8004882:	6825      	ldr	r5, [r4, #0]
 8004884:	f015 0506 	ands.w	r5, r5, #6
 8004888:	d106      	bne.n	8004898 <_printf_common+0x48>
 800488a:	f104 0a19 	add.w	sl, r4, #25
 800488e:	68e3      	ldr	r3, [r4, #12]
 8004890:	6832      	ldr	r2, [r6, #0]
 8004892:	1a9b      	subs	r3, r3, r2
 8004894:	42ab      	cmp	r3, r5
 8004896:	dc26      	bgt.n	80048e6 <_printf_common+0x96>
 8004898:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800489c:	1e13      	subs	r3, r2, #0
 800489e:	6822      	ldr	r2, [r4, #0]
 80048a0:	bf18      	it	ne
 80048a2:	2301      	movne	r3, #1
 80048a4:	0692      	lsls	r2, r2, #26
 80048a6:	d42b      	bmi.n	8004900 <_printf_common+0xb0>
 80048a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80048ac:	4649      	mov	r1, r9
 80048ae:	4638      	mov	r0, r7
 80048b0:	47c0      	blx	r8
 80048b2:	3001      	adds	r0, #1
 80048b4:	d01e      	beq.n	80048f4 <_printf_common+0xa4>
 80048b6:	6823      	ldr	r3, [r4, #0]
 80048b8:	68e5      	ldr	r5, [r4, #12]
 80048ba:	6832      	ldr	r2, [r6, #0]
 80048bc:	f003 0306 	and.w	r3, r3, #6
 80048c0:	2b04      	cmp	r3, #4
 80048c2:	bf08      	it	eq
 80048c4:	1aad      	subeq	r5, r5, r2
 80048c6:	68a3      	ldr	r3, [r4, #8]
 80048c8:	6922      	ldr	r2, [r4, #16]
 80048ca:	bf0c      	ite	eq
 80048cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80048d0:	2500      	movne	r5, #0
 80048d2:	4293      	cmp	r3, r2
 80048d4:	bfc4      	itt	gt
 80048d6:	1a9b      	subgt	r3, r3, r2
 80048d8:	18ed      	addgt	r5, r5, r3
 80048da:	2600      	movs	r6, #0
 80048dc:	341a      	adds	r4, #26
 80048de:	42b5      	cmp	r5, r6
 80048e0:	d11a      	bne.n	8004918 <_printf_common+0xc8>
 80048e2:	2000      	movs	r0, #0
 80048e4:	e008      	b.n	80048f8 <_printf_common+0xa8>
 80048e6:	2301      	movs	r3, #1
 80048e8:	4652      	mov	r2, sl
 80048ea:	4649      	mov	r1, r9
 80048ec:	4638      	mov	r0, r7
 80048ee:	47c0      	blx	r8
 80048f0:	3001      	adds	r0, #1
 80048f2:	d103      	bne.n	80048fc <_printf_common+0xac>
 80048f4:	f04f 30ff 	mov.w	r0, #4294967295
 80048f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048fc:	3501      	adds	r5, #1
 80048fe:	e7c6      	b.n	800488e <_printf_common+0x3e>
 8004900:	18e1      	adds	r1, r4, r3
 8004902:	1c5a      	adds	r2, r3, #1
 8004904:	2030      	movs	r0, #48	; 0x30
 8004906:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800490a:	4422      	add	r2, r4
 800490c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004910:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004914:	3302      	adds	r3, #2
 8004916:	e7c7      	b.n	80048a8 <_printf_common+0x58>
 8004918:	2301      	movs	r3, #1
 800491a:	4622      	mov	r2, r4
 800491c:	4649      	mov	r1, r9
 800491e:	4638      	mov	r0, r7
 8004920:	47c0      	blx	r8
 8004922:	3001      	adds	r0, #1
 8004924:	d0e6      	beq.n	80048f4 <_printf_common+0xa4>
 8004926:	3601      	adds	r6, #1
 8004928:	e7d9      	b.n	80048de <_printf_common+0x8e>
	...

0800492c <_printf_i>:
 800492c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004930:	7e0f      	ldrb	r7, [r1, #24]
 8004932:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004934:	2f78      	cmp	r7, #120	; 0x78
 8004936:	4691      	mov	r9, r2
 8004938:	4680      	mov	r8, r0
 800493a:	460c      	mov	r4, r1
 800493c:	469a      	mov	sl, r3
 800493e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004942:	d807      	bhi.n	8004954 <_printf_i+0x28>
 8004944:	2f62      	cmp	r7, #98	; 0x62
 8004946:	d80a      	bhi.n	800495e <_printf_i+0x32>
 8004948:	2f00      	cmp	r7, #0
 800494a:	f000 80d8 	beq.w	8004afe <_printf_i+0x1d2>
 800494e:	2f58      	cmp	r7, #88	; 0x58
 8004950:	f000 80a3 	beq.w	8004a9a <_printf_i+0x16e>
 8004954:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004958:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800495c:	e03a      	b.n	80049d4 <_printf_i+0xa8>
 800495e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004962:	2b15      	cmp	r3, #21
 8004964:	d8f6      	bhi.n	8004954 <_printf_i+0x28>
 8004966:	a101      	add	r1, pc, #4	; (adr r1, 800496c <_printf_i+0x40>)
 8004968:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800496c:	080049c5 	.word	0x080049c5
 8004970:	080049d9 	.word	0x080049d9
 8004974:	08004955 	.word	0x08004955
 8004978:	08004955 	.word	0x08004955
 800497c:	08004955 	.word	0x08004955
 8004980:	08004955 	.word	0x08004955
 8004984:	080049d9 	.word	0x080049d9
 8004988:	08004955 	.word	0x08004955
 800498c:	08004955 	.word	0x08004955
 8004990:	08004955 	.word	0x08004955
 8004994:	08004955 	.word	0x08004955
 8004998:	08004ae5 	.word	0x08004ae5
 800499c:	08004a09 	.word	0x08004a09
 80049a0:	08004ac7 	.word	0x08004ac7
 80049a4:	08004955 	.word	0x08004955
 80049a8:	08004955 	.word	0x08004955
 80049ac:	08004b07 	.word	0x08004b07
 80049b0:	08004955 	.word	0x08004955
 80049b4:	08004a09 	.word	0x08004a09
 80049b8:	08004955 	.word	0x08004955
 80049bc:	08004955 	.word	0x08004955
 80049c0:	08004acf 	.word	0x08004acf
 80049c4:	682b      	ldr	r3, [r5, #0]
 80049c6:	1d1a      	adds	r2, r3, #4
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	602a      	str	r2, [r5, #0]
 80049cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80049d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80049d4:	2301      	movs	r3, #1
 80049d6:	e0a3      	b.n	8004b20 <_printf_i+0x1f4>
 80049d8:	6820      	ldr	r0, [r4, #0]
 80049da:	6829      	ldr	r1, [r5, #0]
 80049dc:	0606      	lsls	r6, r0, #24
 80049de:	f101 0304 	add.w	r3, r1, #4
 80049e2:	d50a      	bpl.n	80049fa <_printf_i+0xce>
 80049e4:	680e      	ldr	r6, [r1, #0]
 80049e6:	602b      	str	r3, [r5, #0]
 80049e8:	2e00      	cmp	r6, #0
 80049ea:	da03      	bge.n	80049f4 <_printf_i+0xc8>
 80049ec:	232d      	movs	r3, #45	; 0x2d
 80049ee:	4276      	negs	r6, r6
 80049f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80049f4:	485e      	ldr	r0, [pc, #376]	; (8004b70 <_printf_i+0x244>)
 80049f6:	230a      	movs	r3, #10
 80049f8:	e019      	b.n	8004a2e <_printf_i+0x102>
 80049fa:	680e      	ldr	r6, [r1, #0]
 80049fc:	602b      	str	r3, [r5, #0]
 80049fe:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004a02:	bf18      	it	ne
 8004a04:	b236      	sxthne	r6, r6
 8004a06:	e7ef      	b.n	80049e8 <_printf_i+0xbc>
 8004a08:	682b      	ldr	r3, [r5, #0]
 8004a0a:	6820      	ldr	r0, [r4, #0]
 8004a0c:	1d19      	adds	r1, r3, #4
 8004a0e:	6029      	str	r1, [r5, #0]
 8004a10:	0601      	lsls	r1, r0, #24
 8004a12:	d501      	bpl.n	8004a18 <_printf_i+0xec>
 8004a14:	681e      	ldr	r6, [r3, #0]
 8004a16:	e002      	b.n	8004a1e <_printf_i+0xf2>
 8004a18:	0646      	lsls	r6, r0, #25
 8004a1a:	d5fb      	bpl.n	8004a14 <_printf_i+0xe8>
 8004a1c:	881e      	ldrh	r6, [r3, #0]
 8004a1e:	4854      	ldr	r0, [pc, #336]	; (8004b70 <_printf_i+0x244>)
 8004a20:	2f6f      	cmp	r7, #111	; 0x6f
 8004a22:	bf0c      	ite	eq
 8004a24:	2308      	moveq	r3, #8
 8004a26:	230a      	movne	r3, #10
 8004a28:	2100      	movs	r1, #0
 8004a2a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004a2e:	6865      	ldr	r5, [r4, #4]
 8004a30:	60a5      	str	r5, [r4, #8]
 8004a32:	2d00      	cmp	r5, #0
 8004a34:	bfa2      	ittt	ge
 8004a36:	6821      	ldrge	r1, [r4, #0]
 8004a38:	f021 0104 	bicge.w	r1, r1, #4
 8004a3c:	6021      	strge	r1, [r4, #0]
 8004a3e:	b90e      	cbnz	r6, 8004a44 <_printf_i+0x118>
 8004a40:	2d00      	cmp	r5, #0
 8004a42:	d04d      	beq.n	8004ae0 <_printf_i+0x1b4>
 8004a44:	4615      	mov	r5, r2
 8004a46:	fbb6 f1f3 	udiv	r1, r6, r3
 8004a4a:	fb03 6711 	mls	r7, r3, r1, r6
 8004a4e:	5dc7      	ldrb	r7, [r0, r7]
 8004a50:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004a54:	4637      	mov	r7, r6
 8004a56:	42bb      	cmp	r3, r7
 8004a58:	460e      	mov	r6, r1
 8004a5a:	d9f4      	bls.n	8004a46 <_printf_i+0x11a>
 8004a5c:	2b08      	cmp	r3, #8
 8004a5e:	d10b      	bne.n	8004a78 <_printf_i+0x14c>
 8004a60:	6823      	ldr	r3, [r4, #0]
 8004a62:	07de      	lsls	r6, r3, #31
 8004a64:	d508      	bpl.n	8004a78 <_printf_i+0x14c>
 8004a66:	6923      	ldr	r3, [r4, #16]
 8004a68:	6861      	ldr	r1, [r4, #4]
 8004a6a:	4299      	cmp	r1, r3
 8004a6c:	bfde      	ittt	le
 8004a6e:	2330      	movle	r3, #48	; 0x30
 8004a70:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004a74:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004a78:	1b52      	subs	r2, r2, r5
 8004a7a:	6122      	str	r2, [r4, #16]
 8004a7c:	f8cd a000 	str.w	sl, [sp]
 8004a80:	464b      	mov	r3, r9
 8004a82:	aa03      	add	r2, sp, #12
 8004a84:	4621      	mov	r1, r4
 8004a86:	4640      	mov	r0, r8
 8004a88:	f7ff fee2 	bl	8004850 <_printf_common>
 8004a8c:	3001      	adds	r0, #1
 8004a8e:	d14c      	bne.n	8004b2a <_printf_i+0x1fe>
 8004a90:	f04f 30ff 	mov.w	r0, #4294967295
 8004a94:	b004      	add	sp, #16
 8004a96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a9a:	4835      	ldr	r0, [pc, #212]	; (8004b70 <_printf_i+0x244>)
 8004a9c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004aa0:	6829      	ldr	r1, [r5, #0]
 8004aa2:	6823      	ldr	r3, [r4, #0]
 8004aa4:	f851 6b04 	ldr.w	r6, [r1], #4
 8004aa8:	6029      	str	r1, [r5, #0]
 8004aaa:	061d      	lsls	r5, r3, #24
 8004aac:	d514      	bpl.n	8004ad8 <_printf_i+0x1ac>
 8004aae:	07df      	lsls	r7, r3, #31
 8004ab0:	bf44      	itt	mi
 8004ab2:	f043 0320 	orrmi.w	r3, r3, #32
 8004ab6:	6023      	strmi	r3, [r4, #0]
 8004ab8:	b91e      	cbnz	r6, 8004ac2 <_printf_i+0x196>
 8004aba:	6823      	ldr	r3, [r4, #0]
 8004abc:	f023 0320 	bic.w	r3, r3, #32
 8004ac0:	6023      	str	r3, [r4, #0]
 8004ac2:	2310      	movs	r3, #16
 8004ac4:	e7b0      	b.n	8004a28 <_printf_i+0xfc>
 8004ac6:	6823      	ldr	r3, [r4, #0]
 8004ac8:	f043 0320 	orr.w	r3, r3, #32
 8004acc:	6023      	str	r3, [r4, #0]
 8004ace:	2378      	movs	r3, #120	; 0x78
 8004ad0:	4828      	ldr	r0, [pc, #160]	; (8004b74 <_printf_i+0x248>)
 8004ad2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004ad6:	e7e3      	b.n	8004aa0 <_printf_i+0x174>
 8004ad8:	0659      	lsls	r1, r3, #25
 8004ada:	bf48      	it	mi
 8004adc:	b2b6      	uxthmi	r6, r6
 8004ade:	e7e6      	b.n	8004aae <_printf_i+0x182>
 8004ae0:	4615      	mov	r5, r2
 8004ae2:	e7bb      	b.n	8004a5c <_printf_i+0x130>
 8004ae4:	682b      	ldr	r3, [r5, #0]
 8004ae6:	6826      	ldr	r6, [r4, #0]
 8004ae8:	6961      	ldr	r1, [r4, #20]
 8004aea:	1d18      	adds	r0, r3, #4
 8004aec:	6028      	str	r0, [r5, #0]
 8004aee:	0635      	lsls	r5, r6, #24
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	d501      	bpl.n	8004af8 <_printf_i+0x1cc>
 8004af4:	6019      	str	r1, [r3, #0]
 8004af6:	e002      	b.n	8004afe <_printf_i+0x1d2>
 8004af8:	0670      	lsls	r0, r6, #25
 8004afa:	d5fb      	bpl.n	8004af4 <_printf_i+0x1c8>
 8004afc:	8019      	strh	r1, [r3, #0]
 8004afe:	2300      	movs	r3, #0
 8004b00:	6123      	str	r3, [r4, #16]
 8004b02:	4615      	mov	r5, r2
 8004b04:	e7ba      	b.n	8004a7c <_printf_i+0x150>
 8004b06:	682b      	ldr	r3, [r5, #0]
 8004b08:	1d1a      	adds	r2, r3, #4
 8004b0a:	602a      	str	r2, [r5, #0]
 8004b0c:	681d      	ldr	r5, [r3, #0]
 8004b0e:	6862      	ldr	r2, [r4, #4]
 8004b10:	2100      	movs	r1, #0
 8004b12:	4628      	mov	r0, r5
 8004b14:	f7fb fb64 	bl	80001e0 <memchr>
 8004b18:	b108      	cbz	r0, 8004b1e <_printf_i+0x1f2>
 8004b1a:	1b40      	subs	r0, r0, r5
 8004b1c:	6060      	str	r0, [r4, #4]
 8004b1e:	6863      	ldr	r3, [r4, #4]
 8004b20:	6123      	str	r3, [r4, #16]
 8004b22:	2300      	movs	r3, #0
 8004b24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b28:	e7a8      	b.n	8004a7c <_printf_i+0x150>
 8004b2a:	6923      	ldr	r3, [r4, #16]
 8004b2c:	462a      	mov	r2, r5
 8004b2e:	4649      	mov	r1, r9
 8004b30:	4640      	mov	r0, r8
 8004b32:	47d0      	blx	sl
 8004b34:	3001      	adds	r0, #1
 8004b36:	d0ab      	beq.n	8004a90 <_printf_i+0x164>
 8004b38:	6823      	ldr	r3, [r4, #0]
 8004b3a:	079b      	lsls	r3, r3, #30
 8004b3c:	d413      	bmi.n	8004b66 <_printf_i+0x23a>
 8004b3e:	68e0      	ldr	r0, [r4, #12]
 8004b40:	9b03      	ldr	r3, [sp, #12]
 8004b42:	4298      	cmp	r0, r3
 8004b44:	bfb8      	it	lt
 8004b46:	4618      	movlt	r0, r3
 8004b48:	e7a4      	b.n	8004a94 <_printf_i+0x168>
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	4632      	mov	r2, r6
 8004b4e:	4649      	mov	r1, r9
 8004b50:	4640      	mov	r0, r8
 8004b52:	47d0      	blx	sl
 8004b54:	3001      	adds	r0, #1
 8004b56:	d09b      	beq.n	8004a90 <_printf_i+0x164>
 8004b58:	3501      	adds	r5, #1
 8004b5a:	68e3      	ldr	r3, [r4, #12]
 8004b5c:	9903      	ldr	r1, [sp, #12]
 8004b5e:	1a5b      	subs	r3, r3, r1
 8004b60:	42ab      	cmp	r3, r5
 8004b62:	dcf2      	bgt.n	8004b4a <_printf_i+0x21e>
 8004b64:	e7eb      	b.n	8004b3e <_printf_i+0x212>
 8004b66:	2500      	movs	r5, #0
 8004b68:	f104 0619 	add.w	r6, r4, #25
 8004b6c:	e7f5      	b.n	8004b5a <_printf_i+0x22e>
 8004b6e:	bf00      	nop
 8004b70:	0800a15d 	.word	0x0800a15d
 8004b74:	0800a16e 	.word	0x0800a16e

08004b78 <__sread>:
 8004b78:	b510      	push	{r4, lr}
 8004b7a:	460c      	mov	r4, r1
 8004b7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b80:	f000 f894 	bl	8004cac <_read_r>
 8004b84:	2800      	cmp	r0, #0
 8004b86:	bfab      	itete	ge
 8004b88:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004b8a:	89a3      	ldrhlt	r3, [r4, #12]
 8004b8c:	181b      	addge	r3, r3, r0
 8004b8e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004b92:	bfac      	ite	ge
 8004b94:	6563      	strge	r3, [r4, #84]	; 0x54
 8004b96:	81a3      	strhlt	r3, [r4, #12]
 8004b98:	bd10      	pop	{r4, pc}

08004b9a <__swrite>:
 8004b9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b9e:	461f      	mov	r7, r3
 8004ba0:	898b      	ldrh	r3, [r1, #12]
 8004ba2:	05db      	lsls	r3, r3, #23
 8004ba4:	4605      	mov	r5, r0
 8004ba6:	460c      	mov	r4, r1
 8004ba8:	4616      	mov	r6, r2
 8004baa:	d505      	bpl.n	8004bb8 <__swrite+0x1e>
 8004bac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004bb0:	2302      	movs	r3, #2
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	f000 f868 	bl	8004c88 <_lseek_r>
 8004bb8:	89a3      	ldrh	r3, [r4, #12]
 8004bba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004bbe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004bc2:	81a3      	strh	r3, [r4, #12]
 8004bc4:	4632      	mov	r2, r6
 8004bc6:	463b      	mov	r3, r7
 8004bc8:	4628      	mov	r0, r5
 8004bca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004bce:	f000 b817 	b.w	8004c00 <_write_r>

08004bd2 <__sseek>:
 8004bd2:	b510      	push	{r4, lr}
 8004bd4:	460c      	mov	r4, r1
 8004bd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004bda:	f000 f855 	bl	8004c88 <_lseek_r>
 8004bde:	1c43      	adds	r3, r0, #1
 8004be0:	89a3      	ldrh	r3, [r4, #12]
 8004be2:	bf15      	itete	ne
 8004be4:	6560      	strne	r0, [r4, #84]	; 0x54
 8004be6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004bea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004bee:	81a3      	strheq	r3, [r4, #12]
 8004bf0:	bf18      	it	ne
 8004bf2:	81a3      	strhne	r3, [r4, #12]
 8004bf4:	bd10      	pop	{r4, pc}

08004bf6 <__sclose>:
 8004bf6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004bfa:	f000 b813 	b.w	8004c24 <_close_r>
	...

08004c00 <_write_r>:
 8004c00:	b538      	push	{r3, r4, r5, lr}
 8004c02:	4d07      	ldr	r5, [pc, #28]	; (8004c20 <_write_r+0x20>)
 8004c04:	4604      	mov	r4, r0
 8004c06:	4608      	mov	r0, r1
 8004c08:	4611      	mov	r1, r2
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	602a      	str	r2, [r5, #0]
 8004c0e:	461a      	mov	r2, r3
 8004c10:	f7fd fd6f 	bl	80026f2 <_write>
 8004c14:	1c43      	adds	r3, r0, #1
 8004c16:	d102      	bne.n	8004c1e <_write_r+0x1e>
 8004c18:	682b      	ldr	r3, [r5, #0]
 8004c1a:	b103      	cbz	r3, 8004c1e <_write_r+0x1e>
 8004c1c:	6023      	str	r3, [r4, #0]
 8004c1e:	bd38      	pop	{r3, r4, r5, pc}
 8004c20:	20000274 	.word	0x20000274

08004c24 <_close_r>:
 8004c24:	b538      	push	{r3, r4, r5, lr}
 8004c26:	4d06      	ldr	r5, [pc, #24]	; (8004c40 <_close_r+0x1c>)
 8004c28:	2300      	movs	r3, #0
 8004c2a:	4604      	mov	r4, r0
 8004c2c:	4608      	mov	r0, r1
 8004c2e:	602b      	str	r3, [r5, #0]
 8004c30:	f7fd fd7b 	bl	800272a <_close>
 8004c34:	1c43      	adds	r3, r0, #1
 8004c36:	d102      	bne.n	8004c3e <_close_r+0x1a>
 8004c38:	682b      	ldr	r3, [r5, #0]
 8004c3a:	b103      	cbz	r3, 8004c3e <_close_r+0x1a>
 8004c3c:	6023      	str	r3, [r4, #0]
 8004c3e:	bd38      	pop	{r3, r4, r5, pc}
 8004c40:	20000274 	.word	0x20000274

08004c44 <_fstat_r>:
 8004c44:	b538      	push	{r3, r4, r5, lr}
 8004c46:	4d07      	ldr	r5, [pc, #28]	; (8004c64 <_fstat_r+0x20>)
 8004c48:	2300      	movs	r3, #0
 8004c4a:	4604      	mov	r4, r0
 8004c4c:	4608      	mov	r0, r1
 8004c4e:	4611      	mov	r1, r2
 8004c50:	602b      	str	r3, [r5, #0]
 8004c52:	f7fd fd76 	bl	8002742 <_fstat>
 8004c56:	1c43      	adds	r3, r0, #1
 8004c58:	d102      	bne.n	8004c60 <_fstat_r+0x1c>
 8004c5a:	682b      	ldr	r3, [r5, #0]
 8004c5c:	b103      	cbz	r3, 8004c60 <_fstat_r+0x1c>
 8004c5e:	6023      	str	r3, [r4, #0]
 8004c60:	bd38      	pop	{r3, r4, r5, pc}
 8004c62:	bf00      	nop
 8004c64:	20000274 	.word	0x20000274

08004c68 <_isatty_r>:
 8004c68:	b538      	push	{r3, r4, r5, lr}
 8004c6a:	4d06      	ldr	r5, [pc, #24]	; (8004c84 <_isatty_r+0x1c>)
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	4604      	mov	r4, r0
 8004c70:	4608      	mov	r0, r1
 8004c72:	602b      	str	r3, [r5, #0]
 8004c74:	f7fd fd75 	bl	8002762 <_isatty>
 8004c78:	1c43      	adds	r3, r0, #1
 8004c7a:	d102      	bne.n	8004c82 <_isatty_r+0x1a>
 8004c7c:	682b      	ldr	r3, [r5, #0]
 8004c7e:	b103      	cbz	r3, 8004c82 <_isatty_r+0x1a>
 8004c80:	6023      	str	r3, [r4, #0]
 8004c82:	bd38      	pop	{r3, r4, r5, pc}
 8004c84:	20000274 	.word	0x20000274

08004c88 <_lseek_r>:
 8004c88:	b538      	push	{r3, r4, r5, lr}
 8004c8a:	4d07      	ldr	r5, [pc, #28]	; (8004ca8 <_lseek_r+0x20>)
 8004c8c:	4604      	mov	r4, r0
 8004c8e:	4608      	mov	r0, r1
 8004c90:	4611      	mov	r1, r2
 8004c92:	2200      	movs	r2, #0
 8004c94:	602a      	str	r2, [r5, #0]
 8004c96:	461a      	mov	r2, r3
 8004c98:	f7fd fd6e 	bl	8002778 <_lseek>
 8004c9c:	1c43      	adds	r3, r0, #1
 8004c9e:	d102      	bne.n	8004ca6 <_lseek_r+0x1e>
 8004ca0:	682b      	ldr	r3, [r5, #0]
 8004ca2:	b103      	cbz	r3, 8004ca6 <_lseek_r+0x1e>
 8004ca4:	6023      	str	r3, [r4, #0]
 8004ca6:	bd38      	pop	{r3, r4, r5, pc}
 8004ca8:	20000274 	.word	0x20000274

08004cac <_read_r>:
 8004cac:	b538      	push	{r3, r4, r5, lr}
 8004cae:	4d07      	ldr	r5, [pc, #28]	; (8004ccc <_read_r+0x20>)
 8004cb0:	4604      	mov	r4, r0
 8004cb2:	4608      	mov	r0, r1
 8004cb4:	4611      	mov	r1, r2
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	602a      	str	r2, [r5, #0]
 8004cba:	461a      	mov	r2, r3
 8004cbc:	f7fd fcfc 	bl	80026b8 <_read>
 8004cc0:	1c43      	adds	r3, r0, #1
 8004cc2:	d102      	bne.n	8004cca <_read_r+0x1e>
 8004cc4:	682b      	ldr	r3, [r5, #0]
 8004cc6:	b103      	cbz	r3, 8004cca <_read_r+0x1e>
 8004cc8:	6023      	str	r3, [r4, #0]
 8004cca:	bd38      	pop	{r3, r4, r5, pc}
 8004ccc:	20000274 	.word	0x20000274

08004cd0 <_init>:
 8004cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cd2:	bf00      	nop
 8004cd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cd6:	bc08      	pop	{r3}
 8004cd8:	469e      	mov	lr, r3
 8004cda:	4770      	bx	lr

08004cdc <_fini>:
 8004cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cde:	bf00      	nop
 8004ce0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ce2:	bc08      	pop	{r3}
 8004ce4:	469e      	mov	lr, r3
 8004ce6:	4770      	bx	lr
