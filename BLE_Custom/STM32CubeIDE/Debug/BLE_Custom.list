
BLE_Custom.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000100d0  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001efc  08010210  08010210  00020210  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801210c  0801210c  0002210c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08012114  08012114  00022114  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08012118  08012118  00022118  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000220  20000008  0801211c  00030008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 00000035  20000228  0801233c  00030228  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  20000260  08012371  00030260  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001834  20000274  08012382  00030274  2**2
                  ALLOC
 10 ._user_heap_stack 00001400  20001aa8  08012382  00031aa8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030271  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  00040000  2**2
                  ALLOC
 13 MB_MEM1       000001bc  20030028  20030028  00040000  2**2
                  ALLOC
 14 MB_MEM2       00000883  200301e4  200301e4  00040000  2**2
                  ALLOC
 15 .debug_info   0003253c  00000000  00000000  000302a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00006b2e  00000000  00000000  000627dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00002b18  00000000  00000000  00069310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 00002840  00000000  00000000  0006be28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002e7a1  00000000  00000000  0006e668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   000336b4  00000000  00000000  0009ce09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000fccc1  00000000  00000000  000d04bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000050  00000000  00000000  001cd17e  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0000c39c  00000000  00000000  001cd1d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000274 	.word	0x20000274
 800015c:	00000000 	.word	0x00000000
 8000160:	080101f8 	.word	0x080101f8

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000278 	.word	0x20000278
 800017c:	080101f8 	.word	0x080101f8

08000180 <strcmp>:
 8000180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000188:	2a01      	cmp	r2, #1
 800018a:	bf28      	it	cs
 800018c:	429a      	cmpcs	r2, r3
 800018e:	d0f7      	beq.n	8000180 <strcmp>
 8000190:	1ad0      	subs	r0, r2, r3
 8000192:	4770      	bx	lr

08000194 <strlen>:
 8000194:	4603      	mov	r3, r0
 8000196:	f813 2b01 	ldrb.w	r2, [r3], #1
 800019a:	2a00      	cmp	r2, #0
 800019c:	d1fb      	bne.n	8000196 <strlen+0x2>
 800019e:	1a18      	subs	r0, r3, r0
 80001a0:	3801      	subs	r0, #1
 80001a2:	4770      	bx	lr
	...

080001b0 <memchr>:
 80001b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001b4:	2a10      	cmp	r2, #16
 80001b6:	db2b      	blt.n	8000210 <memchr+0x60>
 80001b8:	f010 0f07 	tst.w	r0, #7
 80001bc:	d008      	beq.n	80001d0 <memchr+0x20>
 80001be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001c2:	3a01      	subs	r2, #1
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d02d      	beq.n	8000224 <memchr+0x74>
 80001c8:	f010 0f07 	tst.w	r0, #7
 80001cc:	b342      	cbz	r2, 8000220 <memchr+0x70>
 80001ce:	d1f6      	bne.n	80001be <memchr+0xe>
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
 80001d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001da:	f022 0407 	bic.w	r4, r2, #7
 80001de:	f07f 0700 	mvns.w	r7, #0
 80001e2:	2300      	movs	r3, #0
 80001e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001e8:	3c08      	subs	r4, #8
 80001ea:	ea85 0501 	eor.w	r5, r5, r1
 80001ee:	ea86 0601 	eor.w	r6, r6, r1
 80001f2:	fa85 f547 	uadd8	r5, r5, r7
 80001f6:	faa3 f587 	sel	r5, r3, r7
 80001fa:	fa86 f647 	uadd8	r6, r6, r7
 80001fe:	faa5 f687 	sel	r6, r5, r7
 8000202:	b98e      	cbnz	r6, 8000228 <memchr+0x78>
 8000204:	d1ee      	bne.n	80001e4 <memchr+0x34>
 8000206:	bcf0      	pop	{r4, r5, r6, r7}
 8000208:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800020c:	f002 0207 	and.w	r2, r2, #7
 8000210:	b132      	cbz	r2, 8000220 <memchr+0x70>
 8000212:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000216:	3a01      	subs	r2, #1
 8000218:	ea83 0301 	eor.w	r3, r3, r1
 800021c:	b113      	cbz	r3, 8000224 <memchr+0x74>
 800021e:	d1f8      	bne.n	8000212 <memchr+0x62>
 8000220:	2000      	movs	r0, #0
 8000222:	4770      	bx	lr
 8000224:	3801      	subs	r0, #1
 8000226:	4770      	bx	lr
 8000228:	2d00      	cmp	r5, #0
 800022a:	bf06      	itte	eq
 800022c:	4635      	moveq	r5, r6
 800022e:	3803      	subeq	r0, #3
 8000230:	3807      	subne	r0, #7
 8000232:	f015 0f01 	tst.w	r5, #1
 8000236:	d107      	bne.n	8000248 <memchr+0x98>
 8000238:	3001      	adds	r0, #1
 800023a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800023e:	bf02      	ittt	eq
 8000240:	3001      	addeq	r0, #1
 8000242:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000246:	3001      	addeq	r0, #1
 8000248:	bcf0      	pop	{r4, r5, r6, r7}
 800024a:	3801      	subs	r0, #1
 800024c:	4770      	bx	lr
 800024e:	bf00      	nop

08000250 <__aeabi_drsub>:
 8000250:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000254:	e002      	b.n	800025c <__adddf3>
 8000256:	bf00      	nop

08000258 <__aeabi_dsub>:
 8000258:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800025c <__adddf3>:
 800025c:	b530      	push	{r4, r5, lr}
 800025e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000262:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000266:	ea94 0f05 	teq	r4, r5
 800026a:	bf08      	it	eq
 800026c:	ea90 0f02 	teqeq	r0, r2
 8000270:	bf1f      	itttt	ne
 8000272:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000276:	ea55 0c02 	orrsne.w	ip, r5, r2
 800027a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800027e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000282:	f000 80e2 	beq.w	800044a <__adddf3+0x1ee>
 8000286:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800028a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800028e:	bfb8      	it	lt
 8000290:	426d      	neglt	r5, r5
 8000292:	dd0c      	ble.n	80002ae <__adddf3+0x52>
 8000294:	442c      	add	r4, r5
 8000296:	ea80 0202 	eor.w	r2, r0, r2
 800029a:	ea81 0303 	eor.w	r3, r1, r3
 800029e:	ea82 0000 	eor.w	r0, r2, r0
 80002a2:	ea83 0101 	eor.w	r1, r3, r1
 80002a6:	ea80 0202 	eor.w	r2, r0, r2
 80002aa:	ea81 0303 	eor.w	r3, r1, r3
 80002ae:	2d36      	cmp	r5, #54	; 0x36
 80002b0:	bf88      	it	hi
 80002b2:	bd30      	pophi	{r4, r5, pc}
 80002b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002c4:	d002      	beq.n	80002cc <__adddf3+0x70>
 80002c6:	4240      	negs	r0, r0
 80002c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002d8:	d002      	beq.n	80002e0 <__adddf3+0x84>
 80002da:	4252      	negs	r2, r2
 80002dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002e0:	ea94 0f05 	teq	r4, r5
 80002e4:	f000 80a7 	beq.w	8000436 <__adddf3+0x1da>
 80002e8:	f1a4 0401 	sub.w	r4, r4, #1
 80002ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80002f0:	db0d      	blt.n	800030e <__adddf3+0xb2>
 80002f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002f6:	fa22 f205 	lsr.w	r2, r2, r5
 80002fa:	1880      	adds	r0, r0, r2
 80002fc:	f141 0100 	adc.w	r1, r1, #0
 8000300:	fa03 f20e 	lsl.w	r2, r3, lr
 8000304:	1880      	adds	r0, r0, r2
 8000306:	fa43 f305 	asr.w	r3, r3, r5
 800030a:	4159      	adcs	r1, r3
 800030c:	e00e      	b.n	800032c <__adddf3+0xd0>
 800030e:	f1a5 0520 	sub.w	r5, r5, #32
 8000312:	f10e 0e20 	add.w	lr, lr, #32
 8000316:	2a01      	cmp	r2, #1
 8000318:	fa03 fc0e 	lsl.w	ip, r3, lr
 800031c:	bf28      	it	cs
 800031e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000322:	fa43 f305 	asr.w	r3, r3, r5
 8000326:	18c0      	adds	r0, r0, r3
 8000328:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800032c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000330:	d507      	bpl.n	8000342 <__adddf3+0xe6>
 8000332:	f04f 0e00 	mov.w	lr, #0
 8000336:	f1dc 0c00 	rsbs	ip, ip, #0
 800033a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800033e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000342:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000346:	d31b      	bcc.n	8000380 <__adddf3+0x124>
 8000348:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800034c:	d30c      	bcc.n	8000368 <__adddf3+0x10c>
 800034e:	0849      	lsrs	r1, r1, #1
 8000350:	ea5f 0030 	movs.w	r0, r0, rrx
 8000354:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000358:	f104 0401 	add.w	r4, r4, #1
 800035c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000360:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000364:	f080 809a 	bcs.w	800049c <__adddf3+0x240>
 8000368:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800036c:	bf08      	it	eq
 800036e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000372:	f150 0000 	adcs.w	r0, r0, #0
 8000376:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800037a:	ea41 0105 	orr.w	r1, r1, r5
 800037e:	bd30      	pop	{r4, r5, pc}
 8000380:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000384:	4140      	adcs	r0, r0
 8000386:	eb41 0101 	adc.w	r1, r1, r1
 800038a:	3c01      	subs	r4, #1
 800038c:	bf28      	it	cs
 800038e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000392:	d2e9      	bcs.n	8000368 <__adddf3+0x10c>
 8000394:	f091 0f00 	teq	r1, #0
 8000398:	bf04      	itt	eq
 800039a:	4601      	moveq	r1, r0
 800039c:	2000      	moveq	r0, #0
 800039e:	fab1 f381 	clz	r3, r1
 80003a2:	bf08      	it	eq
 80003a4:	3320      	addeq	r3, #32
 80003a6:	f1a3 030b 	sub.w	r3, r3, #11
 80003aa:	f1b3 0220 	subs.w	r2, r3, #32
 80003ae:	da0c      	bge.n	80003ca <__adddf3+0x16e>
 80003b0:	320c      	adds	r2, #12
 80003b2:	dd08      	ble.n	80003c6 <__adddf3+0x16a>
 80003b4:	f102 0c14 	add.w	ip, r2, #20
 80003b8:	f1c2 020c 	rsb	r2, r2, #12
 80003bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003c0:	fa21 f102 	lsr.w	r1, r1, r2
 80003c4:	e00c      	b.n	80003e0 <__adddf3+0x184>
 80003c6:	f102 0214 	add.w	r2, r2, #20
 80003ca:	bfd8      	it	le
 80003cc:	f1c2 0c20 	rsble	ip, r2, #32
 80003d0:	fa01 f102 	lsl.w	r1, r1, r2
 80003d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003d8:	bfdc      	itt	le
 80003da:	ea41 010c 	orrle.w	r1, r1, ip
 80003de:	4090      	lslle	r0, r2
 80003e0:	1ae4      	subs	r4, r4, r3
 80003e2:	bfa2      	ittt	ge
 80003e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003e8:	4329      	orrge	r1, r5
 80003ea:	bd30      	popge	{r4, r5, pc}
 80003ec:	ea6f 0404 	mvn.w	r4, r4
 80003f0:	3c1f      	subs	r4, #31
 80003f2:	da1c      	bge.n	800042e <__adddf3+0x1d2>
 80003f4:	340c      	adds	r4, #12
 80003f6:	dc0e      	bgt.n	8000416 <__adddf3+0x1ba>
 80003f8:	f104 0414 	add.w	r4, r4, #20
 80003fc:	f1c4 0220 	rsb	r2, r4, #32
 8000400:	fa20 f004 	lsr.w	r0, r0, r4
 8000404:	fa01 f302 	lsl.w	r3, r1, r2
 8000408:	ea40 0003 	orr.w	r0, r0, r3
 800040c:	fa21 f304 	lsr.w	r3, r1, r4
 8000410:	ea45 0103 	orr.w	r1, r5, r3
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f1c4 040c 	rsb	r4, r4, #12
 800041a:	f1c4 0220 	rsb	r2, r4, #32
 800041e:	fa20 f002 	lsr.w	r0, r0, r2
 8000422:	fa01 f304 	lsl.w	r3, r1, r4
 8000426:	ea40 0003 	orr.w	r0, r0, r3
 800042a:	4629      	mov	r1, r5
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	fa21 f004 	lsr.w	r0, r1, r4
 8000432:	4629      	mov	r1, r5
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f094 0f00 	teq	r4, #0
 800043a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800043e:	bf06      	itte	eq
 8000440:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000444:	3401      	addeq	r4, #1
 8000446:	3d01      	subne	r5, #1
 8000448:	e74e      	b.n	80002e8 <__adddf3+0x8c>
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf18      	it	ne
 8000450:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000454:	d029      	beq.n	80004aa <__adddf3+0x24e>
 8000456:	ea94 0f05 	teq	r4, r5
 800045a:	bf08      	it	eq
 800045c:	ea90 0f02 	teqeq	r0, r2
 8000460:	d005      	beq.n	800046e <__adddf3+0x212>
 8000462:	ea54 0c00 	orrs.w	ip, r4, r0
 8000466:	bf04      	itt	eq
 8000468:	4619      	moveq	r1, r3
 800046a:	4610      	moveq	r0, r2
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	ea91 0f03 	teq	r1, r3
 8000472:	bf1e      	ittt	ne
 8000474:	2100      	movne	r1, #0
 8000476:	2000      	movne	r0, #0
 8000478:	bd30      	popne	{r4, r5, pc}
 800047a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800047e:	d105      	bne.n	800048c <__adddf3+0x230>
 8000480:	0040      	lsls	r0, r0, #1
 8000482:	4149      	adcs	r1, r1
 8000484:	bf28      	it	cs
 8000486:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800048a:	bd30      	pop	{r4, r5, pc}
 800048c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000490:	bf3c      	itt	cc
 8000492:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000496:	bd30      	popcc	{r4, r5, pc}
 8000498:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800049c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004a4:	f04f 0000 	mov.w	r0, #0
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf1a      	itte	ne
 80004b0:	4619      	movne	r1, r3
 80004b2:	4610      	movne	r0, r2
 80004b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004b8:	bf1c      	itt	ne
 80004ba:	460b      	movne	r3, r1
 80004bc:	4602      	movne	r2, r0
 80004be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004c2:	bf06      	itte	eq
 80004c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004c8:	ea91 0f03 	teqeq	r1, r3
 80004cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004d0:	bd30      	pop	{r4, r5, pc}
 80004d2:	bf00      	nop

080004d4 <__aeabi_ui2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f04f 0500 	mov.w	r5, #0
 80004ec:	f04f 0100 	mov.w	r1, #0
 80004f0:	e750      	b.n	8000394 <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_i2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800050c:	bf48      	it	mi
 800050e:	4240      	negmi	r0, r0
 8000510:	f04f 0100 	mov.w	r1, #0
 8000514:	e73e      	b.n	8000394 <__adddf3+0x138>
 8000516:	bf00      	nop

08000518 <__aeabi_f2d>:
 8000518:	0042      	lsls	r2, r0, #1
 800051a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800051e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000522:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000526:	bf1f      	itttt	ne
 8000528:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800052c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000530:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000534:	4770      	bxne	lr
 8000536:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800053a:	bf08      	it	eq
 800053c:	4770      	bxeq	lr
 800053e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000542:	bf04      	itt	eq
 8000544:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000548:	4770      	bxeq	lr
 800054a:	b530      	push	{r4, r5, lr}
 800054c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000550:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000554:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000558:	e71c      	b.n	8000394 <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_ul2d>:
 800055c:	ea50 0201 	orrs.w	r2, r0, r1
 8000560:	bf08      	it	eq
 8000562:	4770      	bxeq	lr
 8000564:	b530      	push	{r4, r5, lr}
 8000566:	f04f 0500 	mov.w	r5, #0
 800056a:	e00a      	b.n	8000582 <__aeabi_l2d+0x16>

0800056c <__aeabi_l2d>:
 800056c:	ea50 0201 	orrs.w	r2, r0, r1
 8000570:	bf08      	it	eq
 8000572:	4770      	bxeq	lr
 8000574:	b530      	push	{r4, r5, lr}
 8000576:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800057a:	d502      	bpl.n	8000582 <__aeabi_l2d+0x16>
 800057c:	4240      	negs	r0, r0
 800057e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000582:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000586:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800058a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800058e:	f43f aed8 	beq.w	8000342 <__adddf3+0xe6>
 8000592:	f04f 0203 	mov.w	r2, #3
 8000596:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800059a:	bf18      	it	ne
 800059c:	3203      	addne	r2, #3
 800059e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005a2:	bf18      	it	ne
 80005a4:	3203      	addne	r2, #3
 80005a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005aa:	f1c2 0320 	rsb	r3, r2, #32
 80005ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80005b2:	fa20 f002 	lsr.w	r0, r0, r2
 80005b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ba:	ea40 000e 	orr.w	r0, r0, lr
 80005be:	fa21 f102 	lsr.w	r1, r1, r2
 80005c2:	4414      	add	r4, r2
 80005c4:	e6bd      	b.n	8000342 <__adddf3+0xe6>
 80005c6:	bf00      	nop

080005c8 <__aeabi_dmul>:
 80005c8:	b570      	push	{r4, r5, r6, lr}
 80005ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005d6:	bf1d      	ittte	ne
 80005d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005dc:	ea94 0f0c 	teqne	r4, ip
 80005e0:	ea95 0f0c 	teqne	r5, ip
 80005e4:	f000 f8de 	bleq	80007a4 <__aeabi_dmul+0x1dc>
 80005e8:	442c      	add	r4, r5
 80005ea:	ea81 0603 	eor.w	r6, r1, r3
 80005ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005fa:	bf18      	it	ne
 80005fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000600:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000604:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000608:	d038      	beq.n	800067c <__aeabi_dmul+0xb4>
 800060a:	fba0 ce02 	umull	ip, lr, r0, r2
 800060e:	f04f 0500 	mov.w	r5, #0
 8000612:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000616:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800061a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800061e:	f04f 0600 	mov.w	r6, #0
 8000622:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000626:	f09c 0f00 	teq	ip, #0
 800062a:	bf18      	it	ne
 800062c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000630:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000634:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000638:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800063c:	d204      	bcs.n	8000648 <__aeabi_dmul+0x80>
 800063e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000642:	416d      	adcs	r5, r5
 8000644:	eb46 0606 	adc.w	r6, r6, r6
 8000648:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800064c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000650:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000654:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000658:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800065c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000660:	bf88      	it	hi
 8000662:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000666:	d81e      	bhi.n	80006a6 <__aeabi_dmul+0xde>
 8000668:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800066c:	bf08      	it	eq
 800066e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000672:	f150 0000 	adcs.w	r0, r0, #0
 8000676:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000680:	ea46 0101 	orr.w	r1, r6, r1
 8000684:	ea40 0002 	orr.w	r0, r0, r2
 8000688:	ea81 0103 	eor.w	r1, r1, r3
 800068c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000690:	bfc2      	ittt	gt
 8000692:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000696:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800069a:	bd70      	popgt	{r4, r5, r6, pc}
 800069c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006a0:	f04f 0e00 	mov.w	lr, #0
 80006a4:	3c01      	subs	r4, #1
 80006a6:	f300 80ab 	bgt.w	8000800 <__aeabi_dmul+0x238>
 80006aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ae:	bfde      	ittt	le
 80006b0:	2000      	movle	r0, #0
 80006b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006b6:	bd70      	pople	{r4, r5, r6, pc}
 80006b8:	f1c4 0400 	rsb	r4, r4, #0
 80006bc:	3c20      	subs	r4, #32
 80006be:	da35      	bge.n	800072c <__aeabi_dmul+0x164>
 80006c0:	340c      	adds	r4, #12
 80006c2:	dc1b      	bgt.n	80006fc <__aeabi_dmul+0x134>
 80006c4:	f104 0414 	add.w	r4, r4, #20
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f305 	lsl.w	r3, r0, r5
 80006d0:	fa20 f004 	lsr.w	r0, r0, r4
 80006d4:	fa01 f205 	lsl.w	r2, r1, r5
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e8:	fa21 f604 	lsr.w	r6, r1, r4
 80006ec:	eb42 0106 	adc.w	r1, r2, r6
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f1c4 040c 	rsb	r4, r4, #12
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f304 	lsl.w	r3, r0, r4
 8000708:	fa20 f005 	lsr.w	r0, r0, r5
 800070c:	fa01 f204 	lsl.w	r2, r1, r4
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000718:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800071c:	f141 0100 	adc.w	r1, r1, #0
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 0520 	rsb	r5, r4, #32
 8000730:	fa00 f205 	lsl.w	r2, r0, r5
 8000734:	ea4e 0e02 	orr.w	lr, lr, r2
 8000738:	fa20 f304 	lsr.w	r3, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea43 0302 	orr.w	r3, r3, r2
 8000744:	fa21 f004 	lsr.w	r0, r1, r4
 8000748:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800074c:	fa21 f204 	lsr.w	r2, r1, r4
 8000750:	ea20 0002 	bic.w	r0, r0, r2
 8000754:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f094 0f00 	teq	r4, #0
 8000768:	d10f      	bne.n	800078a <__aeabi_dmul+0x1c2>
 800076a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800076e:	0040      	lsls	r0, r0, #1
 8000770:	eb41 0101 	adc.w	r1, r1, r1
 8000774:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3c01      	subeq	r4, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1a6>
 800077e:	ea41 0106 	orr.w	r1, r1, r6
 8000782:	f095 0f00 	teq	r5, #0
 8000786:	bf18      	it	ne
 8000788:	4770      	bxne	lr
 800078a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800078e:	0052      	lsls	r2, r2, #1
 8000790:	eb43 0303 	adc.w	r3, r3, r3
 8000794:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3d01      	subeq	r5, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1c6>
 800079e:	ea43 0306 	orr.w	r3, r3, r6
 80007a2:	4770      	bx	lr
 80007a4:	ea94 0f0c 	teq	r4, ip
 80007a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ac:	bf18      	it	ne
 80007ae:	ea95 0f0c 	teqne	r5, ip
 80007b2:	d00c      	beq.n	80007ce <__aeabi_dmul+0x206>
 80007b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b8:	bf18      	it	ne
 80007ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007be:	d1d1      	bne.n	8000764 <__aeabi_dmul+0x19c>
 80007c0:	ea81 0103 	eor.w	r1, r1, r3
 80007c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c8:	f04f 0000 	mov.w	r0, #0
 80007cc:	bd70      	pop	{r4, r5, r6, pc}
 80007ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d2:	bf06      	itte	eq
 80007d4:	4610      	moveq	r0, r2
 80007d6:	4619      	moveq	r1, r3
 80007d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007dc:	d019      	beq.n	8000812 <__aeabi_dmul+0x24a>
 80007de:	ea94 0f0c 	teq	r4, ip
 80007e2:	d102      	bne.n	80007ea <__aeabi_dmul+0x222>
 80007e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007e8:	d113      	bne.n	8000812 <__aeabi_dmul+0x24a>
 80007ea:	ea95 0f0c 	teq	r5, ip
 80007ee:	d105      	bne.n	80007fc <__aeabi_dmul+0x234>
 80007f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007f4:	bf1c      	itt	ne
 80007f6:	4610      	movne	r0, r2
 80007f8:	4619      	movne	r1, r3
 80007fa:	d10a      	bne.n	8000812 <__aeabi_dmul+0x24a>
 80007fc:	ea81 0103 	eor.w	r1, r1, r3
 8000800:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000804:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000808:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800080c:	f04f 0000 	mov.w	r0, #0
 8000810:	bd70      	pop	{r4, r5, r6, pc}
 8000812:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000816:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800081a:	bd70      	pop	{r4, r5, r6, pc}

0800081c <__aeabi_ddiv>:
 800081c:	b570      	push	{r4, r5, r6, lr}
 800081e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000822:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000826:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800082a:	bf1d      	ittte	ne
 800082c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000830:	ea94 0f0c 	teqne	r4, ip
 8000834:	ea95 0f0c 	teqne	r5, ip
 8000838:	f000 f8a7 	bleq	800098a <__aeabi_ddiv+0x16e>
 800083c:	eba4 0405 	sub.w	r4, r4, r5
 8000840:	ea81 0e03 	eor.w	lr, r1, r3
 8000844:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000848:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800084c:	f000 8088 	beq.w	8000960 <__aeabi_ddiv+0x144>
 8000850:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000854:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000858:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800085c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000860:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000864:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000868:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800086c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000870:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000874:	429d      	cmp	r5, r3
 8000876:	bf08      	it	eq
 8000878:	4296      	cmpeq	r6, r2
 800087a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800087e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000882:	d202      	bcs.n	800088a <__aeabi_ddiv+0x6e>
 8000884:	085b      	lsrs	r3, r3, #1
 8000886:	ea4f 0232 	mov.w	r2, r2, rrx
 800088a:	1ab6      	subs	r6, r6, r2
 800088c:	eb65 0503 	sbc.w	r5, r5, r3
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800089a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008fc:	d018      	beq.n	8000930 <__aeabi_ddiv+0x114>
 80008fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000902:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000906:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800090a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800090e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000912:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000916:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800091a:	d1c0      	bne.n	800089e <__aeabi_ddiv+0x82>
 800091c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000920:	d10b      	bne.n	800093a <__aeabi_ddiv+0x11e>
 8000922:	ea41 0100 	orr.w	r1, r1, r0
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800092e:	e7b6      	b.n	800089e <__aeabi_ddiv+0x82>
 8000930:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000934:	bf04      	itt	eq
 8000936:	4301      	orreq	r1, r0
 8000938:	2000      	moveq	r0, #0
 800093a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800093e:	bf88      	it	hi
 8000940:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000944:	f63f aeaf 	bhi.w	80006a6 <__aeabi_dmul+0xde>
 8000948:	ebb5 0c03 	subs.w	ip, r5, r3
 800094c:	bf04      	itt	eq
 800094e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000952:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000956:	f150 0000 	adcs.w	r0, r0, #0
 800095a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800095e:	bd70      	pop	{r4, r5, r6, pc}
 8000960:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000964:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000968:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800096c:	bfc2      	ittt	gt
 800096e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000972:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000976:	bd70      	popgt	{r4, r5, r6, pc}
 8000978:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800097c:	f04f 0e00 	mov.w	lr, #0
 8000980:	3c01      	subs	r4, #1
 8000982:	e690      	b.n	80006a6 <__aeabi_dmul+0xde>
 8000984:	ea45 0e06 	orr.w	lr, r5, r6
 8000988:	e68d      	b.n	80006a6 <__aeabi_dmul+0xde>
 800098a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800098e:	ea94 0f0c 	teq	r4, ip
 8000992:	bf08      	it	eq
 8000994:	ea95 0f0c 	teqeq	r5, ip
 8000998:	f43f af3b 	beq.w	8000812 <__aeabi_dmul+0x24a>
 800099c:	ea94 0f0c 	teq	r4, ip
 80009a0:	d10a      	bne.n	80009b8 <__aeabi_ddiv+0x19c>
 80009a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009a6:	f47f af34 	bne.w	8000812 <__aeabi_dmul+0x24a>
 80009aa:	ea95 0f0c 	teq	r5, ip
 80009ae:	f47f af25 	bne.w	80007fc <__aeabi_dmul+0x234>
 80009b2:	4610      	mov	r0, r2
 80009b4:	4619      	mov	r1, r3
 80009b6:	e72c      	b.n	8000812 <__aeabi_dmul+0x24a>
 80009b8:	ea95 0f0c 	teq	r5, ip
 80009bc:	d106      	bne.n	80009cc <__aeabi_ddiv+0x1b0>
 80009be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009c2:	f43f aefd 	beq.w	80007c0 <__aeabi_dmul+0x1f8>
 80009c6:	4610      	mov	r0, r2
 80009c8:	4619      	mov	r1, r3
 80009ca:	e722      	b.n	8000812 <__aeabi_dmul+0x24a>
 80009cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009d0:	bf18      	it	ne
 80009d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009d6:	f47f aec5 	bne.w	8000764 <__aeabi_dmul+0x19c>
 80009da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009de:	f47f af0d 	bne.w	80007fc <__aeabi_dmul+0x234>
 80009e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009e6:	f47f aeeb 	bne.w	80007c0 <__aeabi_dmul+0x1f8>
 80009ea:	e712      	b.n	8000812 <__aeabi_dmul+0x24a>

080009ec <__gedf2>:
 80009ec:	f04f 3cff 	mov.w	ip, #4294967295
 80009f0:	e006      	b.n	8000a00 <__cmpdf2+0x4>
 80009f2:	bf00      	nop

080009f4 <__ledf2>:
 80009f4:	f04f 0c01 	mov.w	ip, #1
 80009f8:	e002      	b.n	8000a00 <__cmpdf2+0x4>
 80009fa:	bf00      	nop

080009fc <__cmpdf2>:
 80009fc:	f04f 0c01 	mov.w	ip, #1
 8000a00:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a04:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a16:	d01b      	beq.n	8000a50 <__cmpdf2+0x54>
 8000a18:	b001      	add	sp, #4
 8000a1a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a1e:	bf0c      	ite	eq
 8000a20:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a24:	ea91 0f03 	teqne	r1, r3
 8000a28:	bf02      	ittt	eq
 8000a2a:	ea90 0f02 	teqeq	r0, r2
 8000a2e:	2000      	moveq	r0, #0
 8000a30:	4770      	bxeq	lr
 8000a32:	f110 0f00 	cmn.w	r0, #0
 8000a36:	ea91 0f03 	teq	r1, r3
 8000a3a:	bf58      	it	pl
 8000a3c:	4299      	cmppl	r1, r3
 8000a3e:	bf08      	it	eq
 8000a40:	4290      	cmpeq	r0, r2
 8000a42:	bf2c      	ite	cs
 8000a44:	17d8      	asrcs	r0, r3, #31
 8000a46:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a4a:	f040 0001 	orr.w	r0, r0, #1
 8000a4e:	4770      	bx	lr
 8000a50:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	d102      	bne.n	8000a60 <__cmpdf2+0x64>
 8000a5a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a5e:	d107      	bne.n	8000a70 <__cmpdf2+0x74>
 8000a60:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a68:	d1d6      	bne.n	8000a18 <__cmpdf2+0x1c>
 8000a6a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a6e:	d0d3      	beq.n	8000a18 <__cmpdf2+0x1c>
 8000a70:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <__aeabi_cdrcmple>:
 8000a78:	4684      	mov	ip, r0
 8000a7a:	4610      	mov	r0, r2
 8000a7c:	4662      	mov	r2, ip
 8000a7e:	468c      	mov	ip, r1
 8000a80:	4619      	mov	r1, r3
 8000a82:	4663      	mov	r3, ip
 8000a84:	e000      	b.n	8000a88 <__aeabi_cdcmpeq>
 8000a86:	bf00      	nop

08000a88 <__aeabi_cdcmpeq>:
 8000a88:	b501      	push	{r0, lr}
 8000a8a:	f7ff ffb7 	bl	80009fc <__cmpdf2>
 8000a8e:	2800      	cmp	r0, #0
 8000a90:	bf48      	it	mi
 8000a92:	f110 0f00 	cmnmi.w	r0, #0
 8000a96:	bd01      	pop	{r0, pc}

08000a98 <__aeabi_dcmpeq>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff fff4 	bl	8000a88 <__aeabi_cdcmpeq>
 8000aa0:	bf0c      	ite	eq
 8000aa2:	2001      	moveq	r0, #1
 8000aa4:	2000      	movne	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmplt>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff ffea 	bl	8000a88 <__aeabi_cdcmpeq>
 8000ab4:	bf34      	ite	cc
 8000ab6:	2001      	movcc	r0, #1
 8000ab8:	2000      	movcs	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmple>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffe0 	bl	8000a88 <__aeabi_cdcmpeq>
 8000ac8:	bf94      	ite	ls
 8000aca:	2001      	movls	r0, #1
 8000acc:	2000      	movhi	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmpge>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffce 	bl	8000a78 <__aeabi_cdrcmple>
 8000adc:	bf94      	ite	ls
 8000ade:	2001      	movls	r0, #1
 8000ae0:	2000      	movhi	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmpgt>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffc4 	bl	8000a78 <__aeabi_cdrcmple>
 8000af0:	bf34      	ite	cc
 8000af2:	2001      	movcc	r0, #1
 8000af4:	2000      	movcs	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpun>:
 8000afc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b04:	d102      	bne.n	8000b0c <__aeabi_dcmpun+0x10>
 8000b06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b0a:	d10a      	bne.n	8000b22 <__aeabi_dcmpun+0x26>
 8000b0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b14:	d102      	bne.n	8000b1c <__aeabi_dcmpun+0x20>
 8000b16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b1a:	d102      	bne.n	8000b22 <__aeabi_dcmpun+0x26>
 8000b1c:	f04f 0000 	mov.w	r0, #0
 8000b20:	4770      	bx	lr
 8000b22:	f04f 0001 	mov.w	r0, #1
 8000b26:	4770      	bx	lr

08000b28 <__aeabi_d2iz>:
 8000b28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b30:	d215      	bcs.n	8000b5e <__aeabi_d2iz+0x36>
 8000b32:	d511      	bpl.n	8000b58 <__aeabi_d2iz+0x30>
 8000b34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b3c:	d912      	bls.n	8000b64 <__aeabi_d2iz+0x3c>
 8000b3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b52:	bf18      	it	ne
 8000b54:	4240      	negne	r0, r0
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b62:	d105      	bne.n	8000b70 <__aeabi_d2iz+0x48>
 8000b64:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b68:	bf08      	it	eq
 8000b6a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b6e:	4770      	bx	lr
 8000b70:	f04f 0000 	mov.w	r0, #0
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop

08000b78 <__aeabi_uldivmod>:
 8000b78:	b953      	cbnz	r3, 8000b90 <__aeabi_uldivmod+0x18>
 8000b7a:	b94a      	cbnz	r2, 8000b90 <__aeabi_uldivmod+0x18>
 8000b7c:	2900      	cmp	r1, #0
 8000b7e:	bf08      	it	eq
 8000b80:	2800      	cmpeq	r0, #0
 8000b82:	bf1c      	itt	ne
 8000b84:	f04f 31ff 	movne.w	r1, #4294967295
 8000b88:	f04f 30ff 	movne.w	r0, #4294967295
 8000b8c:	f000 b974 	b.w	8000e78 <__aeabi_idiv0>
 8000b90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b98:	f000 f806 	bl	8000ba8 <__udivmoddi4>
 8000b9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ba0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ba4:	b004      	add	sp, #16
 8000ba6:	4770      	bx	lr

08000ba8 <__udivmoddi4>:
 8000ba8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bac:	9d08      	ldr	r5, [sp, #32]
 8000bae:	4604      	mov	r4, r0
 8000bb0:	468e      	mov	lr, r1
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d14d      	bne.n	8000c52 <__udivmoddi4+0xaa>
 8000bb6:	428a      	cmp	r2, r1
 8000bb8:	4694      	mov	ip, r2
 8000bba:	d969      	bls.n	8000c90 <__udivmoddi4+0xe8>
 8000bbc:	fab2 f282 	clz	r2, r2
 8000bc0:	b152      	cbz	r2, 8000bd8 <__udivmoddi4+0x30>
 8000bc2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bc6:	f1c2 0120 	rsb	r1, r2, #32
 8000bca:	fa20 f101 	lsr.w	r1, r0, r1
 8000bce:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bd2:	ea41 0e03 	orr.w	lr, r1, r3
 8000bd6:	4094      	lsls	r4, r2
 8000bd8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bdc:	0c21      	lsrs	r1, r4, #16
 8000bde:	fbbe f6f8 	udiv	r6, lr, r8
 8000be2:	fa1f f78c 	uxth.w	r7, ip
 8000be6:	fb08 e316 	mls	r3, r8, r6, lr
 8000bea:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000bee:	fb06 f107 	mul.w	r1, r6, r7
 8000bf2:	4299      	cmp	r1, r3
 8000bf4:	d90a      	bls.n	8000c0c <__udivmoddi4+0x64>
 8000bf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bfa:	f106 30ff 	add.w	r0, r6, #4294967295
 8000bfe:	f080 811f 	bcs.w	8000e40 <__udivmoddi4+0x298>
 8000c02:	4299      	cmp	r1, r3
 8000c04:	f240 811c 	bls.w	8000e40 <__udivmoddi4+0x298>
 8000c08:	3e02      	subs	r6, #2
 8000c0a:	4463      	add	r3, ip
 8000c0c:	1a5b      	subs	r3, r3, r1
 8000c0e:	b2a4      	uxth	r4, r4
 8000c10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c14:	fb08 3310 	mls	r3, r8, r0, r3
 8000c18:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c1c:	fb00 f707 	mul.w	r7, r0, r7
 8000c20:	42a7      	cmp	r7, r4
 8000c22:	d90a      	bls.n	8000c3a <__udivmoddi4+0x92>
 8000c24:	eb1c 0404 	adds.w	r4, ip, r4
 8000c28:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c2c:	f080 810a 	bcs.w	8000e44 <__udivmoddi4+0x29c>
 8000c30:	42a7      	cmp	r7, r4
 8000c32:	f240 8107 	bls.w	8000e44 <__udivmoddi4+0x29c>
 8000c36:	4464      	add	r4, ip
 8000c38:	3802      	subs	r0, #2
 8000c3a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c3e:	1be4      	subs	r4, r4, r7
 8000c40:	2600      	movs	r6, #0
 8000c42:	b11d      	cbz	r5, 8000c4c <__udivmoddi4+0xa4>
 8000c44:	40d4      	lsrs	r4, r2
 8000c46:	2300      	movs	r3, #0
 8000c48:	e9c5 4300 	strd	r4, r3, [r5]
 8000c4c:	4631      	mov	r1, r6
 8000c4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c52:	428b      	cmp	r3, r1
 8000c54:	d909      	bls.n	8000c6a <__udivmoddi4+0xc2>
 8000c56:	2d00      	cmp	r5, #0
 8000c58:	f000 80ef 	beq.w	8000e3a <__udivmoddi4+0x292>
 8000c5c:	2600      	movs	r6, #0
 8000c5e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c62:	4630      	mov	r0, r6
 8000c64:	4631      	mov	r1, r6
 8000c66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6a:	fab3 f683 	clz	r6, r3
 8000c6e:	2e00      	cmp	r6, #0
 8000c70:	d14a      	bne.n	8000d08 <__udivmoddi4+0x160>
 8000c72:	428b      	cmp	r3, r1
 8000c74:	d302      	bcc.n	8000c7c <__udivmoddi4+0xd4>
 8000c76:	4282      	cmp	r2, r0
 8000c78:	f200 80f9 	bhi.w	8000e6e <__udivmoddi4+0x2c6>
 8000c7c:	1a84      	subs	r4, r0, r2
 8000c7e:	eb61 0303 	sbc.w	r3, r1, r3
 8000c82:	2001      	movs	r0, #1
 8000c84:	469e      	mov	lr, r3
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	d0e0      	beq.n	8000c4c <__udivmoddi4+0xa4>
 8000c8a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c8e:	e7dd      	b.n	8000c4c <__udivmoddi4+0xa4>
 8000c90:	b902      	cbnz	r2, 8000c94 <__udivmoddi4+0xec>
 8000c92:	deff      	udf	#255	; 0xff
 8000c94:	fab2 f282 	clz	r2, r2
 8000c98:	2a00      	cmp	r2, #0
 8000c9a:	f040 8092 	bne.w	8000dc2 <__udivmoddi4+0x21a>
 8000c9e:	eba1 010c 	sub.w	r1, r1, ip
 8000ca2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ca6:	fa1f fe8c 	uxth.w	lr, ip
 8000caa:	2601      	movs	r6, #1
 8000cac:	0c20      	lsrs	r0, r4, #16
 8000cae:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cb2:	fb07 1113 	mls	r1, r7, r3, r1
 8000cb6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cba:	fb0e f003 	mul.w	r0, lr, r3
 8000cbe:	4288      	cmp	r0, r1
 8000cc0:	d908      	bls.n	8000cd4 <__udivmoddi4+0x12c>
 8000cc2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cc6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cca:	d202      	bcs.n	8000cd2 <__udivmoddi4+0x12a>
 8000ccc:	4288      	cmp	r0, r1
 8000cce:	f200 80cb 	bhi.w	8000e68 <__udivmoddi4+0x2c0>
 8000cd2:	4643      	mov	r3, r8
 8000cd4:	1a09      	subs	r1, r1, r0
 8000cd6:	b2a4      	uxth	r4, r4
 8000cd8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cdc:	fb07 1110 	mls	r1, r7, r0, r1
 8000ce0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ce4:	fb0e fe00 	mul.w	lr, lr, r0
 8000ce8:	45a6      	cmp	lr, r4
 8000cea:	d908      	bls.n	8000cfe <__udivmoddi4+0x156>
 8000cec:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cf4:	d202      	bcs.n	8000cfc <__udivmoddi4+0x154>
 8000cf6:	45a6      	cmp	lr, r4
 8000cf8:	f200 80bb 	bhi.w	8000e72 <__udivmoddi4+0x2ca>
 8000cfc:	4608      	mov	r0, r1
 8000cfe:	eba4 040e 	sub.w	r4, r4, lr
 8000d02:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d06:	e79c      	b.n	8000c42 <__udivmoddi4+0x9a>
 8000d08:	f1c6 0720 	rsb	r7, r6, #32
 8000d0c:	40b3      	lsls	r3, r6
 8000d0e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d12:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d16:	fa20 f407 	lsr.w	r4, r0, r7
 8000d1a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d1e:	431c      	orrs	r4, r3
 8000d20:	40f9      	lsrs	r1, r7
 8000d22:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d26:	fa00 f306 	lsl.w	r3, r0, r6
 8000d2a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d2e:	0c20      	lsrs	r0, r4, #16
 8000d30:	fa1f fe8c 	uxth.w	lr, ip
 8000d34:	fb09 1118 	mls	r1, r9, r8, r1
 8000d38:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d3c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d40:	4288      	cmp	r0, r1
 8000d42:	fa02 f206 	lsl.w	r2, r2, r6
 8000d46:	d90b      	bls.n	8000d60 <__udivmoddi4+0x1b8>
 8000d48:	eb1c 0101 	adds.w	r1, ip, r1
 8000d4c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d50:	f080 8088 	bcs.w	8000e64 <__udivmoddi4+0x2bc>
 8000d54:	4288      	cmp	r0, r1
 8000d56:	f240 8085 	bls.w	8000e64 <__udivmoddi4+0x2bc>
 8000d5a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d5e:	4461      	add	r1, ip
 8000d60:	1a09      	subs	r1, r1, r0
 8000d62:	b2a4      	uxth	r4, r4
 8000d64:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d68:	fb09 1110 	mls	r1, r9, r0, r1
 8000d6c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d70:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d74:	458e      	cmp	lr, r1
 8000d76:	d908      	bls.n	8000d8a <__udivmoddi4+0x1e2>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d80:	d26c      	bcs.n	8000e5c <__udivmoddi4+0x2b4>
 8000d82:	458e      	cmp	lr, r1
 8000d84:	d96a      	bls.n	8000e5c <__udivmoddi4+0x2b4>
 8000d86:	3802      	subs	r0, #2
 8000d88:	4461      	add	r1, ip
 8000d8a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d8e:	fba0 9402 	umull	r9, r4, r0, r2
 8000d92:	eba1 010e 	sub.w	r1, r1, lr
 8000d96:	42a1      	cmp	r1, r4
 8000d98:	46c8      	mov	r8, r9
 8000d9a:	46a6      	mov	lr, r4
 8000d9c:	d356      	bcc.n	8000e4c <__udivmoddi4+0x2a4>
 8000d9e:	d053      	beq.n	8000e48 <__udivmoddi4+0x2a0>
 8000da0:	b15d      	cbz	r5, 8000dba <__udivmoddi4+0x212>
 8000da2:	ebb3 0208 	subs.w	r2, r3, r8
 8000da6:	eb61 010e 	sbc.w	r1, r1, lr
 8000daa:	fa01 f707 	lsl.w	r7, r1, r7
 8000dae:	fa22 f306 	lsr.w	r3, r2, r6
 8000db2:	40f1      	lsrs	r1, r6
 8000db4:	431f      	orrs	r7, r3
 8000db6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dba:	2600      	movs	r6, #0
 8000dbc:	4631      	mov	r1, r6
 8000dbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dc2:	f1c2 0320 	rsb	r3, r2, #32
 8000dc6:	40d8      	lsrs	r0, r3
 8000dc8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dcc:	fa21 f303 	lsr.w	r3, r1, r3
 8000dd0:	4091      	lsls	r1, r2
 8000dd2:	4301      	orrs	r1, r0
 8000dd4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dd8:	fa1f fe8c 	uxth.w	lr, ip
 8000ddc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000de0:	fb07 3610 	mls	r6, r7, r0, r3
 8000de4:	0c0b      	lsrs	r3, r1, #16
 8000de6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000dea:	fb00 f60e 	mul.w	r6, r0, lr
 8000dee:	429e      	cmp	r6, r3
 8000df0:	fa04 f402 	lsl.w	r4, r4, r2
 8000df4:	d908      	bls.n	8000e08 <__udivmoddi4+0x260>
 8000df6:	eb1c 0303 	adds.w	r3, ip, r3
 8000dfa:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dfe:	d22f      	bcs.n	8000e60 <__udivmoddi4+0x2b8>
 8000e00:	429e      	cmp	r6, r3
 8000e02:	d92d      	bls.n	8000e60 <__udivmoddi4+0x2b8>
 8000e04:	3802      	subs	r0, #2
 8000e06:	4463      	add	r3, ip
 8000e08:	1b9b      	subs	r3, r3, r6
 8000e0a:	b289      	uxth	r1, r1
 8000e0c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e10:	fb07 3316 	mls	r3, r7, r6, r3
 8000e14:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e18:	fb06 f30e 	mul.w	r3, r6, lr
 8000e1c:	428b      	cmp	r3, r1
 8000e1e:	d908      	bls.n	8000e32 <__udivmoddi4+0x28a>
 8000e20:	eb1c 0101 	adds.w	r1, ip, r1
 8000e24:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e28:	d216      	bcs.n	8000e58 <__udivmoddi4+0x2b0>
 8000e2a:	428b      	cmp	r3, r1
 8000e2c:	d914      	bls.n	8000e58 <__udivmoddi4+0x2b0>
 8000e2e:	3e02      	subs	r6, #2
 8000e30:	4461      	add	r1, ip
 8000e32:	1ac9      	subs	r1, r1, r3
 8000e34:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e38:	e738      	b.n	8000cac <__udivmoddi4+0x104>
 8000e3a:	462e      	mov	r6, r5
 8000e3c:	4628      	mov	r0, r5
 8000e3e:	e705      	b.n	8000c4c <__udivmoddi4+0xa4>
 8000e40:	4606      	mov	r6, r0
 8000e42:	e6e3      	b.n	8000c0c <__udivmoddi4+0x64>
 8000e44:	4618      	mov	r0, r3
 8000e46:	e6f8      	b.n	8000c3a <__udivmoddi4+0x92>
 8000e48:	454b      	cmp	r3, r9
 8000e4a:	d2a9      	bcs.n	8000da0 <__udivmoddi4+0x1f8>
 8000e4c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e50:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e54:	3801      	subs	r0, #1
 8000e56:	e7a3      	b.n	8000da0 <__udivmoddi4+0x1f8>
 8000e58:	4646      	mov	r6, r8
 8000e5a:	e7ea      	b.n	8000e32 <__udivmoddi4+0x28a>
 8000e5c:	4620      	mov	r0, r4
 8000e5e:	e794      	b.n	8000d8a <__udivmoddi4+0x1e2>
 8000e60:	4640      	mov	r0, r8
 8000e62:	e7d1      	b.n	8000e08 <__udivmoddi4+0x260>
 8000e64:	46d0      	mov	r8, sl
 8000e66:	e77b      	b.n	8000d60 <__udivmoddi4+0x1b8>
 8000e68:	3b02      	subs	r3, #2
 8000e6a:	4461      	add	r1, ip
 8000e6c:	e732      	b.n	8000cd4 <__udivmoddi4+0x12c>
 8000e6e:	4630      	mov	r0, r6
 8000e70:	e709      	b.n	8000c86 <__udivmoddi4+0xde>
 8000e72:	4464      	add	r4, ip
 8000e74:	3802      	subs	r0, #2
 8000e76:	e742      	b.n	8000cfe <__udivmoddi4+0x156>

08000e78 <__aeabi_idiv0>:
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop

08000e7c <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000e84:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <LL_EXTI_EnableIT_32_63+0x24>)
 8000e86:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000e8a:	4905      	ldr	r1, [pc, #20]	; (8000ea0 <LL_EXTI_EnableIT_32_63+0x24>)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000e94:	bf00      	nop
 8000e96:	370c      	adds	r7, #12
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr
 8000ea0:	58000800 	.word	0x58000800

08000ea4 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b085      	sub	sp, #20
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000eac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000eb0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000eb2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000ebc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ec0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ec8:	68fb      	ldr	r3, [r7, #12]
}
 8000eca:	bf00      	nop
 8000ecc:	3714      	adds	r7, #20
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr

08000ed6 <LL_C2_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000ed6:	b480      	push	{r7}
 8000ed8:	b085      	sub	sp, #20
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB2ENR, Periphs);
 8000ede:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ee2:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 8000ee6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	4313      	orrs	r3, r2
 8000eee:	f8c1 314c 	str.w	r3, [r1, #332]	; 0x14c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB2ENR, Periphs);
 8000ef2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ef6:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	4013      	ands	r3, r2
 8000efe:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f00:	68fb      	ldr	r3, [r7, #12]
}
 8000f02:	bf00      	nop
 8000f04:	3714      	adds	r7, #20
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr

08000f0e <APPD_Init>:
static void APPD_BleDtbCfg( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPD_Init( void )
{
 8000f0e:	b580      	push	{r7, lr}
 8000f10:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_Init */
#if (CFG_DEBUGGER_SUPPORTED == 1)
  /**
   * Keep debugger enabled while in any low power mode
   */
  HAL_DBGMCU_EnableDBGSleepMode();
 8000f12:	f004 f911 	bl	8005138 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 8000f16:	f004 f915 	bl	8005144 <HAL_DBGMCU_EnableDBGStopMode>

  /***************** ENABLE DEBUGGER *************************************/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 8000f1a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000f1e:	f7ff ffad 	bl	8000e7c <LL_EXTI_EnableIT_32_63>
  HAL_DBGMCU_DisableDBGStandbyMode();

#endif /* (CFG_DEBUGGER_SUPPORTED == 1) */

#if(CFG_DEBUG_TRACE != 0)
  DbgTraceInit();
 8000f22:	f00a fc07 	bl	800b734 <DbgTraceInit>
#endif

  APPD_SetCPU2GpioConfig( );
 8000f26:	f000 f821 	bl	8000f6c <APPD_SetCPU2GpioConfig>
  APPD_BleDtbCfg( );
 8000f2a:	f000 f8c3 	bl	80010b4 <APPD_BleDtbCfg>

/* USER CODE END APPD_Init */
  return;
 8000f2e:	bf00      	nop
}
 8000f30:	bd80      	pop	{r7, pc}
	...

08000f34 <APPD_EnableCPU2>:

void APPD_EnableCPU2( void )
{
 8000f34:	b5b0      	push	{r4, r5, r7, lr}
 8000f36:	b088      	sub	sp, #32
 8000f38:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8000f3a:	4b0b      	ldr	r3, [pc, #44]	; (8000f68 <APPD_EnableCPU2+0x34>)
 8000f3c:	1d3c      	adds	r4, r7, #4
 8000f3e:	461d      	mov	r5, r3
 8000f40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f44:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f48:	c403      	stmia	r4!, {r0, r1}
 8000f4a:	8022      	strh	r2, [r4, #0]
 8000f4c:	3402      	adds	r4, #2
 8000f4e:	0c13      	lsrs	r3, r2, #16
 8000f50:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8000f52:	f00c f813 	bl	800cf7c <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8000f56:	1d3b      	adds	r3, r7, #4
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f00a fe64 	bl	800bc26 <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 8000f5e:	bf00      	nop
}
 8000f60:	3720      	adds	r7, #32
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bdb0      	pop	{r4, r5, r7, pc}
 8000f66:	bf00      	nop
 8000f68:	08010210 	.word	0x08010210

08000f6c <APPD_SetCPU2GpioConfig>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void APPD_SetCPU2GpioConfig( void )
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b088      	sub	sp, #32
 8000f70:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_SetCPU2GpioConfig */
  GPIO_InitTypeDef gpio_config = {0};
 8000f72:	1d3b      	adds	r3, r7, #4
 8000f74:	2200      	movs	r2, #0
 8000f76:	601a      	str	r2, [r3, #0]
 8000f78:	605a      	str	r2, [r3, #4]
 8000f7a:	609a      	str	r2, [r3, #8]
 8000f7c:	60da      	str	r2, [r3, #12]
 8000f7e:	611a      	str	r2, [r3, #16]
  uint8_t local_loop;
  uint16_t gpioa_pin_list;
  uint16_t gpiob_pin_list;
  uint16_t gpioc_pin_list;

  gpioa_pin_list = 0;
 8000f80:	2300      	movs	r3, #0
 8000f82:	83bb      	strh	r3, [r7, #28]
  gpiob_pin_list = 0;
 8000f84:	2300      	movs	r3, #0
 8000f86:	837b      	strh	r3, [r7, #26]
  gpioc_pin_list = 0;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	833b      	strh	r3, [r7, #24]

  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	77fb      	strb	r3, [r7, #31]
 8000f90:	e038      	b.n	8001004 <APPD_SetCPU2GpioConfig+0x98>
  {
    if( aGpioConfigList[local_loop].enable != 0)
 8000f92:	7ffb      	ldrb	r3, [r7, #31]
 8000f94:	4a44      	ldr	r2, [pc, #272]	; (80010a8 <APPD_SetCPU2GpioConfig+0x13c>)
 8000f96:	00db      	lsls	r3, r3, #3
 8000f98:	4413      	add	r3, r2
 8000f9a:	799b      	ldrb	r3, [r3, #6]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d02b      	beq.n	8000ff8 <APPD_SetCPU2GpioConfig+0x8c>
    {
      switch((uint32_t)aGpioConfigList[local_loop].port)
 8000fa0:	7ffb      	ldrb	r3, [r7, #31]
 8000fa2:	4a41      	ldr	r2, [pc, #260]	; (80010a8 <APPD_SetCPU2GpioConfig+0x13c>)
 8000fa4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000fa8:	4a40      	ldr	r2, [pc, #256]	; (80010ac <APPD_SetCPU2GpioConfig+0x140>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d01b      	beq.n	8000fe6 <APPD_SetCPU2GpioConfig+0x7a>
 8000fae:	4a3f      	ldr	r2, [pc, #252]	; (80010ac <APPD_SetCPU2GpioConfig+0x140>)
 8000fb0:	4293      	cmp	r3, r2
 8000fb2:	d823      	bhi.n	8000ffc <APPD_SetCPU2GpioConfig+0x90>
 8000fb4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000fb8:	d003      	beq.n	8000fc2 <APPD_SetCPU2GpioConfig+0x56>
 8000fba:	4a3d      	ldr	r2, [pc, #244]	; (80010b0 <APPD_SetCPU2GpioConfig+0x144>)
 8000fbc:	4293      	cmp	r3, r2
 8000fbe:	d009      	beq.n	8000fd4 <APPD_SetCPU2GpioConfig+0x68>
        case (uint32_t)GPIOC:
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
          break;

        default:
          break;
 8000fc0:	e01c      	b.n	8000ffc <APPD_SetCPU2GpioConfig+0x90>
            gpioa_pin_list |= aGpioConfigList[local_loop].pin;
 8000fc2:	7ffb      	ldrb	r3, [r7, #31]
 8000fc4:	4a38      	ldr	r2, [pc, #224]	; (80010a8 <APPD_SetCPU2GpioConfig+0x13c>)
 8000fc6:	00db      	lsls	r3, r3, #3
 8000fc8:	4413      	add	r3, r2
 8000fca:	889a      	ldrh	r2, [r3, #4]
 8000fcc:	8bbb      	ldrh	r3, [r7, #28]
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	83bb      	strh	r3, [r7, #28]
          break;
 8000fd2:	e014      	b.n	8000ffe <APPD_SetCPU2GpioConfig+0x92>
            gpiob_pin_list |= aGpioConfigList[local_loop].pin;
 8000fd4:	7ffb      	ldrb	r3, [r7, #31]
 8000fd6:	4a34      	ldr	r2, [pc, #208]	; (80010a8 <APPD_SetCPU2GpioConfig+0x13c>)
 8000fd8:	00db      	lsls	r3, r3, #3
 8000fda:	4413      	add	r3, r2
 8000fdc:	889a      	ldrh	r2, [r3, #4]
 8000fde:	8b7b      	ldrh	r3, [r7, #26]
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	837b      	strh	r3, [r7, #26]
          break;
 8000fe4:	e00b      	b.n	8000ffe <APPD_SetCPU2GpioConfig+0x92>
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
 8000fe6:	7ffb      	ldrb	r3, [r7, #31]
 8000fe8:	4a2f      	ldr	r2, [pc, #188]	; (80010a8 <APPD_SetCPU2GpioConfig+0x13c>)
 8000fea:	00db      	lsls	r3, r3, #3
 8000fec:	4413      	add	r3, r2
 8000fee:	889a      	ldrh	r2, [r3, #4]
 8000ff0:	8b3b      	ldrh	r3, [r7, #24]
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	833b      	strh	r3, [r7, #24]
          break;
 8000ff6:	e002      	b.n	8000ffe <APPD_SetCPU2GpioConfig+0x92>
      }
    }
 8000ff8:	bf00      	nop
 8000ffa:	e000      	b.n	8000ffe <APPD_SetCPU2GpioConfig+0x92>
          break;
 8000ffc:	bf00      	nop
  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8000ffe:	7ffb      	ldrb	r3, [r7, #31]
 8001000:	3301      	adds	r3, #1
 8001002:	77fb      	strb	r3, [r7, #31]
 8001004:	7ffb      	ldrb	r3, [r7, #31]
 8001006:	2b25      	cmp	r3, #37	; 0x25
 8001008:	d9c3      	bls.n	8000f92 <APPD_SetCPU2GpioConfig+0x26>
  }

  gpio_config.Pull = GPIO_NOPULL;
 800100a:	2300      	movs	r3, #0
 800100c:	60fb      	str	r3, [r7, #12]
  gpio_config.Mode = GPIO_MODE_OUTPUT_PP;
 800100e:	2301      	movs	r3, #1
 8001010:	60bb      	str	r3, [r7, #8]
  gpio_config.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001012:	2303      	movs	r3, #3
 8001014:	613b      	str	r3, [r7, #16]

  if(gpioa_pin_list != 0)
 8001016:	8bbb      	ldrh	r3, [r7, #28]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d014      	beq.n	8001046 <APPD_SetCPU2GpioConfig+0xda>
  {
    gpio_config.Pin = gpioa_pin_list;
 800101c:	8bbb      	ldrh	r3, [r7, #28]
 800101e:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001020:	2001      	movs	r0, #1
 8001022:	f7ff ff3f 	bl	8000ea4 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOA_CLK_ENABLE();
 8001026:	2001      	movs	r0, #1
 8001028:	f7ff ff55 	bl	8000ed6 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOA, &gpio_config);
 800102c:	1d3b      	adds	r3, r7, #4
 800102e:	4619      	mov	r1, r3
 8001030:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001034:	f004 fdba 	bl	8005bac <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA, gpioa_pin_list, GPIO_PIN_RESET);
 8001038:	8bbb      	ldrh	r3, [r7, #28]
 800103a:	2200      	movs	r2, #0
 800103c:	4619      	mov	r1, r3
 800103e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001042:	f004 ff23 	bl	8005e8c <HAL_GPIO_WritePin>
  }

  if(gpiob_pin_list != 0)
 8001046:	8b7b      	ldrh	r3, [r7, #26]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d012      	beq.n	8001072 <APPD_SetCPU2GpioConfig+0x106>
  {
    gpio_config.Pin = gpiob_pin_list;
 800104c:	8b7b      	ldrh	r3, [r7, #26]
 800104e:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001050:	2002      	movs	r0, #2
 8001052:	f7ff ff27 	bl	8000ea4 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOB_CLK_ENABLE();
 8001056:	2002      	movs	r0, #2
 8001058:	f7ff ff3d 	bl	8000ed6 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOB, &gpio_config);
 800105c:	1d3b      	adds	r3, r7, #4
 800105e:	4619      	mov	r1, r3
 8001060:	4813      	ldr	r0, [pc, #76]	; (80010b0 <APPD_SetCPU2GpioConfig+0x144>)
 8001062:	f004 fda3 	bl	8005bac <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOB, gpiob_pin_list, GPIO_PIN_RESET);
 8001066:	8b7b      	ldrh	r3, [r7, #26]
 8001068:	2200      	movs	r2, #0
 800106a:	4619      	mov	r1, r3
 800106c:	4810      	ldr	r0, [pc, #64]	; (80010b0 <APPD_SetCPU2GpioConfig+0x144>)
 800106e:	f004 ff0d 	bl	8005e8c <HAL_GPIO_WritePin>
  }

  if(gpioc_pin_list != 0)
 8001072:	8b3b      	ldrh	r3, [r7, #24]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d013      	beq.n	80010a0 <APPD_SetCPU2GpioConfig+0x134>
  {
    gpio_config.Pin = gpioc_pin_list;
 8001078:	8b3b      	ldrh	r3, [r7, #24]
 800107a:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800107c:	2004      	movs	r0, #4
 800107e:	f7ff ff11 	bl	8000ea4 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOC_CLK_ENABLE();
 8001082:	2004      	movs	r0, #4
 8001084:	f7ff ff27 	bl	8000ed6 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOC, &gpio_config);
 8001088:	1d3b      	adds	r3, r7, #4
 800108a:	4619      	mov	r1, r3
 800108c:	4807      	ldr	r0, [pc, #28]	; (80010ac <APPD_SetCPU2GpioConfig+0x140>)
 800108e:	f004 fd8d 	bl	8005bac <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOC, gpioc_pin_list, GPIO_PIN_RESET);
 8001092:	8b3b      	ldrh	r3, [r7, #24]
 8001094:	2200      	movs	r2, #0
 8001096:	4619      	mov	r1, r3
 8001098:	4804      	ldr	r0, [pc, #16]	; (80010ac <APPD_SetCPU2GpioConfig+0x140>)
 800109a:	f004 fef7 	bl	8005e8c <HAL_GPIO_WritePin>
  }
  
/* USER CODE END APPD_SetCPU2GpioConfig */
  return;
 800109e:	bf00      	nop
 80010a0:	bf00      	nop
}
 80010a2:	3720      	adds	r7, #32
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	08011aec 	.word	0x08011aec
 80010ac:	48000800 	.word	0x48000800
 80010b0:	48000400 	.word	0x48000400

080010b4 <APPD_BleDtbCfg>:

static void APPD_BleDtbCfg( void )
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
    HAL_GPIO_Init(GPIOB, &gpio_config);
  }
#endif

/* USER CODE END APPD_BleDtbCfg */
  return;
 80010b8:	bf00      	nop
}
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr

080010c2 <DbgOutputInit>:
 * WRAP FUNCTIONS
 *
*************************************************************/
#if(CFG_DEBUG_TRACE != 0)
void DbgOutputInit( void )
{
 80010c2:	b580      	push	{r7, lr}
 80010c4:	af00      	add	r7, sp, #0
#endif
  }
  else if (CFG_DEBUG_TRACE_UART == hw_uart1)
  {
#if(CFG_HW_USART1_ENABLED == 1)
    MX_USART1_UART_Init();
 80010c6:	f001 fcc1 	bl	8002a4c <MX_USART1_UART_Init>
#endif
  }
#endif

/* USER CODE END DbgOutputInit */
  return;
 80010ca:	bf00      	nop
}
 80010cc:	bd80      	pop	{r7, pc}

080010ce <DbgOutputTraces>:

void DbgOutputTraces(  uint8_t *p_data, uint16_t size, void (*cb)(void) )
{
 80010ce:	b580      	push	{r7, lr}
 80010d0:	b084      	sub	sp, #16
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	60f8      	str	r0, [r7, #12]
 80010d6:	460b      	mov	r3, r1
 80010d8:	607a      	str	r2, [r7, #4]
 80010da:	817b      	strh	r3, [r7, #10]
/* USER CODE END DbgOutputTraces */
  HW_UART_Transmit_DMA(CFG_DEBUG_TRACE_UART, p_data, size, cb);
 80010dc:	897a      	ldrh	r2, [r7, #10]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	68f9      	ldr	r1, [r7, #12]
 80010e2:	2000      	movs	r0, #0
 80010e4:	f001 fb02 	bl	80026ec <HW_UART_Transmit_DMA>

/* USER CODE END DbgOutputTraces */
  return;
 80010e8:	bf00      	nop
}
 80010ea:	3710      	adds	r7, #16
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}

080010f0 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 80010f8:	4b07      	ldr	r3, [pc, #28]	; (8001118 <LL_C2_PWR_SetPowerMode+0x28>)
 80010fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80010fe:	f023 0207 	bic.w	r2, r3, #7
 8001102:	4905      	ldr	r1, [pc, #20]	; (8001118 <LL_C2_PWR_SetPowerMode+0x28>)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	4313      	orrs	r3, r2
 8001108:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 800110c:	bf00      	nop
 800110e:	370c      	adds	r7, #12
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr
 8001118:	58000400 	.word	0x58000400

0800111c <LL_EXTI_EnableIT_32_63>:
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8001124:	4b06      	ldr	r3, [pc, #24]	; (8001140 <LL_EXTI_EnableIT_32_63+0x24>)
 8001126:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800112a:	4905      	ldr	r1, [pc, #20]	; (8001140 <LL_EXTI_EnableIT_32_63+0x24>)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	4313      	orrs	r3, r2
 8001130:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001134:	bf00      	nop
 8001136:	370c      	adds	r7, #12
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr
 8001140:	58000800 	.word	0x58000800

08001144 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 800114c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001150:	4a0a      	ldr	r2, [pc, #40]	; (800117c <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8001152:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8001156:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800115a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800115e:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	021b      	lsls	r3, r3, #8
 8001166:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800116a:	4313      	orrs	r3, r2
 800116c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 8001170:	bf00      	nop
 8001172:	370c      	adds	r7, #12
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr
 800117c:	cafecafe 	.word	0xcafecafe

08001180 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8001188:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800118c:	689b      	ldr	r3, [r3, #8]
 800118e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8001192:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4313      	orrs	r3, r2
 800119a:	608b      	str	r3, [r1, #8]
}
 800119c:	bf00      	nop
 800119e:	370c      	adds	r7, #12
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr

080011a8 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80011ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80011b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80011c0:	bf00      	nop
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr

080011ca <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 80011ca:	b480      	push	{r7}
 80011cc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80011ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80011da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80011e2:	bf00      	nop
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr

080011ec <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 80011f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011f8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80011fc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001200:	d101      	bne.n	8001206 <LL_RCC_IsActiveFlag_PINRST+0x1a>
 8001202:	2301      	movs	r3, #1
 8001204:	e000      	b.n	8001208 <LL_RCC_IsActiveFlag_PINRST+0x1c>
 8001206:	2300      	movs	r3, #0
}
 8001208:	4618      	mov	r0, r3
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr

08001212 <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 8001212:	b480      	push	{r7}
 8001214:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 8001216:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800121a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800121e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001222:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001226:	d101      	bne.n	800122c <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 8001228:	2301      	movs	r3, #1
 800122a:	e000      	b.n	800122e <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 800122c:	2300      	movs	r3, #0
}
 800122e:	4618      	mov	r0, r3
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr

08001238 <LL_AHB3_GRP1_EnableClock>:
{
 8001238:	b480      	push	{r7}
 800123a:	b085      	sub	sp, #20
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001240:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001244:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001246:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4313      	orrs	r3, r2
 800124e:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001250:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001254:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4013      	ands	r3, r2
 800125a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800125c:	68fb      	ldr	r3, [r7, #12]
}
 800125e:	bf00      	nop
 8001260:	3714      	adds	r7, #20
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
	...

0800126c <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 8001270:	4b04      	ldr	r3, [pc, #16]	; (8001284 <LL_DBGMCU_GetDeviceID+0x18>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8001278:	4618      	mov	r0, r3
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	e0042000 	.word	0xe0042000

08001288 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 800128c:	4b04      	ldr	r3, [pc, #16]	; (80012a0 <LL_DBGMCU_GetRevisionID+0x18>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	0c1b      	lsrs	r3, r3, #16
 8001292:	b29b      	uxth	r3, r3
}
 8001294:	4618      	mov	r0, r3
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	e0042000 	.word	0xe0042000

080012a4 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
 80012ac:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	685a      	ldr	r2, [r3, #4]
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	041b      	lsls	r3, r3, #16
 80012b6:	431a      	orrs	r2, r3
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	605a      	str	r2, [r3, #4]
}
 80012bc:	bf00      	nop
 80012be:	370c      	adds	r7, #12
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr

080012c8 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
 80012d0:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	685a      	ldr	r2, [r3, #4]
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	431a      	orrs	r2, r3
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	605a      	str	r2, [r3, #4]
}
 80012de:	bf00      	nop
 80012e0:	370c      	adds	r7, #12
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr

080012ea <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80012ea:	b480      	push	{r7}
 80012ec:	b083      	sub	sp, #12
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	6078      	str	r0, [r7, #4]
 80012f2:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	695a      	ldr	r2, [r3, #20]
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	041b      	lsls	r3, r3, #16
 80012fc:	431a      	orrs	r2, r3
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	615a      	str	r2, [r3, #20]
}
 8001302:	bf00      	nop
 8001304:	370c      	adds	r7, #12
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr

0800130e <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800130e:	b480      	push	{r7}
 8001310:	b083      	sub	sp, #12
 8001312:	af00      	add	r7, sp, #0
 8001314:	6078      	str	r0, [r7, #4]
 8001316:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	695a      	ldr	r2, [r3, #20]
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	431a      	orrs	r2, r3
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	615a      	str	r2, [r3, #20]
}
 8001324:	bf00      	nop
 8001326:	370c      	adds	r7, #12
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr

08001330 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001330:	b480      	push	{r7}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
 8001338:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	683a      	ldr	r2, [r7, #0]
 800133e:	609a      	str	r2, [r3, #8]
}
 8001340:	bf00      	nop
 8001342:	370c      	adds	r7, #12
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr

0800134c <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	683a      	ldr	r2, [r7, #0]
 800135a:	619a      	str	r2, [r3, #24]
}
 800135c:	bf00      	nop
 800135e:	370c      	adds	r7, #12
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr

08001368 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800136c:	4b05      	ldr	r3, [pc, #20]	; (8001384 <LL_LPM_EnableSleep+0x1c>)
 800136e:	691b      	ldr	r3, [r3, #16]
 8001370:	4a04      	ldr	r2, [pc, #16]	; (8001384 <LL_LPM_EnableSleep+0x1c>)
 8001372:	f023 0304 	bic.w	r3, r3, #4
 8001376:	6113      	str	r3, [r2, #16]
}
 8001378:	bf00      	nop
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	e000ed00 	.word	0xe000ed00

08001388 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8001388:	b480      	push	{r7}
 800138a:	b083      	sub	sp, #12
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	22ff      	movs	r2, #255	; 0xff
 8001394:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001396:	bf00      	nop
 8001398:	370c      	adds	r7, #12
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr

080013a2 <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 80013a2:	b480      	push	{r7}
 80013a4:	b083      	sub	sp, #12
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	22ca      	movs	r2, #202	; 0xca
 80013ae:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2253      	movs	r2, #83	; 0x53
 80013b4:	625a      	str	r2, [r3, #36]	; 0x24
}
 80013b6:	bf00      	nop
 80013b8:	370c      	adds	r7, #12
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr

080013c2 <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 80013c2:	b480      	push	{r7}
 80013c4:	b083      	sub	sp, #12
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	6078      	str	r0, [r7, #4]
 80013ca:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	689b      	ldr	r3, [r3, #8]
 80013d0:	f023 0207 	bic.w	r2, r3, #7
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	431a      	orrs	r2, r3
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	609a      	str	r2, [r3, #8]
}
 80013dc:	bf00      	nop
 80013de:	370c      	adds	r7, #12
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr

080013e8 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80013ec:	4b04      	ldr	r3, [pc, #16]	; (8001400 <MX_APPE_Config+0x18>)
 80013ee:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80013f2:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 80013f4:	f000 f830 	bl	8001458 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 80013f8:	f000 f870 	bl	80014dc <Config_HSE>

  return;
 80013fc:	bf00      	nop
}
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	58004000 	.word	0x58004000

08001404 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 8001408:	f000 f87c 	bl	8001504 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 800140c:	f000 f894 	bl	8001538 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8001410:	4909      	ldr	r1, [pc, #36]	; (8001438 <MX_APPE_Init+0x34>)
 8001412:	2000      	movs	r0, #0
 8001414:	f000 ff3e 	bl	8002294 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */
  APPD_Init();
 8001418:	f7ff fd79 	bl	8000f0e <APPD_Init>
  
  /**
   * The Standby mode should not be entered before the initialization is over
   * The default state of the Low Power Manager is to allow the Standby Mode so an request is needed here
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
 800141c:	2101      	movs	r1, #1
 800141e:	2001      	movs	r0, #1
 8001420:	f00b fe4a 	bl	800d0b8 <UTIL_LPM_SetOffMode>

  Led_Init();
 8001424:	f000 f9ea 	bl	80017fc <Led_Init>

  Button_Init();
 8001428:	f000 f9f8 	bl	800181c <Button_Init>
  
  RxUART_Init();
 800142c:	f000 fa86 	bl	800193c <RxUART_Init>

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8001430:	f000 f890 	bl	8001554 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 8001434:	bf00      	nop
}
 8001436:	bd80      	pop	{r7, pc}
 8001438:	2000068c 	.word	0x2000068c

0800143c <Init_Smps>:

void Init_Smps(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 8001440:	bf00      	nop
}
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr

0800144a <Init_Exti>:

void Init_Exti(void)
{
 800144a:	b580      	push	{r7, lr}
 800144c:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 800144e:	2050      	movs	r0, #80	; 0x50
 8001450:	f7ff fe64 	bl	800111c <LL_EXTI_EnableIT_32_63>

  return;
 8001454:	bf00      	nop
}
 8001456:	bd80      	pop	{r7, pc}

08001458 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
#if (CFG_HW_RESET_BY_FW == 1)
  Reset_BackupDomain();
 800145c:	f000 f804 	bl	8001468 <Reset_BackupDomain>

  Reset_IPCC();
 8001460:	f000 f81a 	bl	8001498 <Reset_IPCC>
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 8001464:	bf00      	nop
}
 8001466:	bd80      	pop	{r7, pc}

08001468 <Reset_BackupDomain>:

#if (CFG_HW_RESET_BY_FW == 1)
static void Reset_BackupDomain(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 800146c:	f7ff febe 	bl	80011ec <LL_RCC_IsActiveFlag_PINRST>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d00d      	beq.n	8001492 <Reset_BackupDomain+0x2a>
 8001476:	f7ff fecc 	bl	8001212 <LL_RCC_IsActiveFlag_SFTRST>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d108      	bne.n	8001492 <Reset_BackupDomain+0x2a>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8001480:	f004 fdde 	bl	8006040 <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 8001484:	f004 fddc 	bl	8006040 <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 8001488:	f7ff fe8e 	bl	80011a8 <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 800148c:	f7ff fe9d 	bl	80011ca <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 8001490:	bf00      	nop
 8001492:	bf00      	nop
}
 8001494:	bd80      	pop	{r7, pc}
	...

08001498 <Reset_IPCC>:

static void Reset_IPCC(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 800149c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80014a0:	f7ff feca 	bl	8001238 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 80014a4:	213f      	movs	r1, #63	; 0x3f
 80014a6:	480c      	ldr	r0, [pc, #48]	; (80014d8 <Reset_IPCC+0x40>)
 80014a8:	f7ff ff42 	bl	8001330 <LL_C1_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 80014ac:	213f      	movs	r1, #63	; 0x3f
 80014ae:	480a      	ldr	r0, [pc, #40]	; (80014d8 <Reset_IPCC+0x40>)
 80014b0:	f7ff ff4c 	bl	800134c <LL_C2_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 80014b4:	213f      	movs	r1, #63	; 0x3f
 80014b6:	4808      	ldr	r0, [pc, #32]	; (80014d8 <Reset_IPCC+0x40>)
 80014b8:	f7ff fef4 	bl	80012a4 <LL_C1_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 80014bc:	213f      	movs	r1, #63	; 0x3f
 80014be:	4806      	ldr	r0, [pc, #24]	; (80014d8 <Reset_IPCC+0x40>)
 80014c0:	f7ff ff13 	bl	80012ea <LL_C2_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 80014c4:	213f      	movs	r1, #63	; 0x3f
 80014c6:	4804      	ldr	r0, [pc, #16]	; (80014d8 <Reset_IPCC+0x40>)
 80014c8:	f7ff fefe 	bl	80012c8 <LL_C1_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 80014cc:	213f      	movs	r1, #63	; 0x3f
 80014ce:	4802      	ldr	r0, [pc, #8]	; (80014d8 <Reset_IPCC+0x40>)
 80014d0:	f7ff ff1d 	bl	800130e <LL_C2_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 80014d4:	bf00      	nop
}
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	58000c00 	.word	0x58000c00

080014dc <Config_HSE>:
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 80014e2:	2000      	movs	r0, #0
 80014e4:	f00a fb60 	bl	800bba8 <OTP_Read>
 80014e8:	6078      	str	r0, [r7, #4]
  if (p_otp)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d005      	beq.n	80014fc <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	799b      	ldrb	r3, [r3, #6]
 80014f4:	4618      	mov	r0, r3
 80014f6:	f7ff fe25 	bl	8001144 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 80014fa:	bf00      	nop
 80014fc:	bf00      	nop
}
 80014fe:	3708      	adds	r7, #8
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}

08001504 <System_Init>:

static void System_Init(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
  Init_Smps();
 8001508:	f7ff ff98 	bl	800143c <Init_Smps>

  Init_Exti();
 800150c:	f7ff ff9d 	bl	800144a <Init_Exti>

  Init_Rtc();
 8001510:	f000 f802 	bl	8001518 <Init_Rtc>

  return;
 8001514:	bf00      	nop
}
 8001516:	bd80      	pop	{r7, pc}

08001518 <Init_Rtc>:

static void Init_Rtc(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 800151c:	4805      	ldr	r0, [pc, #20]	; (8001534 <Init_Rtc+0x1c>)
 800151e:	f7ff ff40 	bl	80013a2 <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 8001522:	2100      	movs	r1, #0
 8001524:	4803      	ldr	r0, [pc, #12]	; (8001534 <Init_Rtc+0x1c>)
 8001526:	f7ff ff4c 	bl	80013c2 <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 800152a:	4802      	ldr	r0, [pc, #8]	; (8001534 <Init_Rtc+0x1c>)
 800152c:	f7ff ff2c 	bl	8001388 <LL_RTC_EnableWriteProtection>

  return;
 8001530:	bf00      	nop
}
 8001532:	bd80      	pop	{r7, pc}
 8001534:	40002800 	.word	0x40002800

08001538 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 800153c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001540:	f7ff fe1e 	bl	8001180 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8001544:	f00b fda6 	bl	800d094 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8001548:	2004      	movs	r0, #4
 800154a:	f7ff fdd1 	bl	80010f0 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 800154e:	bf00      	nop
}
 8001550:	bd80      	pop	{r7, pc}
	...

08001554 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b088      	sub	sp, #32
 8001558:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 800155a:	f00b fb59 	bl	800cc10 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 800155e:	4a11      	ldr	r2, [pc, #68]	; (80015a4 <appe_Tl_Init+0x50>)
 8001560:	2100      	movs	r1, #0
 8001562:	2040      	movs	r0, #64	; 0x40
 8001564:	f00b fed4 	bl	800d310 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8001568:	4b0f      	ldr	r3, [pc, #60]	; (80015a8 <appe_Tl_Init+0x54>)
 800156a:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 800156c:	4b0f      	ldr	r3, [pc, #60]	; (80015ac <appe_Tl_Init+0x58>)
 800156e:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8001570:	463b      	mov	r3, r7
 8001572:	4619      	mov	r1, r3
 8001574:	480e      	ldr	r0, [pc, #56]	; (80015b0 <appe_Tl_Init+0x5c>)
 8001576:	f00a fc31 	bl	800bddc <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 800157a:	4b0e      	ldr	r3, [pc, #56]	; (80015b4 <appe_Tl_Init+0x60>)
 800157c:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 800157e:	4b0e      	ldr	r3, [pc, #56]	; (80015b8 <appe_Tl_Init+0x64>)
 8001580:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8001582:	4b0e      	ldr	r3, [pc, #56]	; (80015bc <appe_Tl_Init+0x68>)
 8001584:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8001586:	f240 533c 	movw	r3, #1340	; 0x53c
 800158a:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 800158c:	f107 0308 	add.w	r3, r7, #8
 8001590:	4618      	mov	r0, r3
 8001592:	f00b fc7f 	bl	800ce94 <TL_MM_Init>

  TL_Enable();
 8001596:	f00b fb35 	bl	800cc04 <TL_Enable>

  return;
 800159a:	bf00      	nop
}
 800159c:	3720      	adds	r7, #32
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	0800be15 	.word	0x0800be15
 80015a8:	20030734 	.word	0x20030734
 80015ac:	080015c1 	.word	0x080015c1
 80015b0:	080015d9 	.word	0x080015d9
 80015b4:	2003094c 	.word	0x2003094c
 80015b8:	20030840 	.word	0x20030840
 80015bc:	200301f8 	.word	0x200301f8

080015c0 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	4603      	mov	r3, r0
 80015c8:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 80015ca:	bf00      	nop
}
 80015cc:	370c      	adds	r7, #12
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr
	...

080015d8 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b088      	sub	sp, #32
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	330b      	adds	r3, #11
 80015e6:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 80015e8:	69fb      	ldr	r3, [r7, #28]
 80015ea:	881b      	ldrh	r3, [r3, #0]
 80015ec:	b29b      	uxth	r3, r3
 80015ee:	f5a3 4312 	sub.w	r3, r3, #37376	; 0x9200
 80015f2:	2b07      	cmp	r3, #7
 80015f4:	d860      	bhi.n	80016b8 <APPE_SysUserEvtRx+0xe0>
 80015f6:	a201      	add	r2, pc, #4	; (adr r2, 80015fc <APPE_SysUserEvtRx+0x24>)
 80015f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015fc:	0800161d 	.word	0x0800161d
 8001600:	0800165f 	.word	0x0800165f
 8001604:	0800166d 	.word	0x0800166d
 8001608:	080016b9 	.word	0x080016b9
 800160c:	08001689 	.word	0x08001689
 8001610:	08001699 	.word	0x08001699
 8001614:	080016a1 	.word	0x080016a1
 8001618:	080016b1 	.word	0x080016b1
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 800161c:	f107 030c 	add.w	r3, r7, #12
 8001620:	4618      	mov	r0, r3
 8001622:	f00a fb2d 	bl	800bc80 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
 8001626:	7b3b      	ldrb	r3, [r7, #12]
 8001628:	4619      	mov	r1, r3
 800162a:	7b7b      	ldrb	r3, [r7, #13]
 800162c:	461a      	mov	r2, r3
 800162e:	7bbb      	ldrb	r3, [r7, #14]
 8001630:	4824      	ldr	r0, [pc, #144]	; (80016c4 <APPE_SysUserEvtRx+0xec>)
 8001632:	f00c fc59 	bl	800dee8 <iprintf>
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
 8001636:	7c3b      	ldrb	r3, [r7, #16]
 8001638:	4619      	mov	r1, r3
 800163a:	4823      	ldr	r0, [pc, #140]	; (80016c8 <APPE_SysUserEvtRx+0xf0>)
 800163c:	f00c fc54 	bl	800dee8 <iprintf>
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);
 8001640:	7dbb      	ldrb	r3, [r7, #22]
 8001642:	4619      	mov	r1, r3
 8001644:	7dfb      	ldrb	r3, [r7, #23]
 8001646:	461a      	mov	r2, r3
 8001648:	7e3b      	ldrb	r3, [r7, #24]
 800164a:	4820      	ldr	r0, [pc, #128]	; (80016cc <APPE_SysUserEvtRx+0xf4>)
 800164c:	f00c fc4c 	bl	800dee8 <iprintf>

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
 8001650:	481f      	ldr	r0, [pc, #124]	; (80016d0 <APPE_SysUserEvtRx+0xf8>)
 8001652:	f00c fc49 	bl	800dee8 <iprintf>
    APPE_SysEvtReadyProcessing(pPayload);
 8001656:	6878      	ldr	r0, [r7, #4]
 8001658:	f000 f870 	bl	800173c <APPE_SysEvtReadyProcessing>
    break;
 800165c:	e02d      	b.n	80016ba <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
 800165e:	481d      	ldr	r0, [pc, #116]	; (80016d4 <APPE_SysUserEvtRx+0xfc>)
 8001660:	f00c fc42 	bl	800dee8 <iprintf>
    APPE_SysEvtError(pPayload);
 8001664:	6878      	ldr	r0, [r7, #4]
 8001666:	f000 f843 	bl	80016f0 <APPE_SysEvtError>
    break;
 800166a:	e026      	b.n	80016ba <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE -- BLE NVM RAM HAS BEEN UPDATED BY CPU2 \n");
 800166c:	481a      	ldr	r0, [pc, #104]	; (80016d8 <APPE_SysUserEvtRx+0x100>)
 800166e:	f00c fcd7 	bl	800e020 <puts>
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->StartAddress,
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	3302      	adds	r3, #2
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
 8001676:	6819      	ldr	r1, [r3, #0]
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->Size);
 8001678:	69fb      	ldr	r3, [r7, #28]
 800167a:	3302      	adds	r3, #2
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	461a      	mov	r2, r3
 8001680:	4816      	ldr	r0, [pc, #88]	; (80016dc <APPE_SysUserEvtRx+0x104>)
 8001682:	f00c fc31 	bl	800dee8 <iprintf>
    break;
 8001686:	e018      	b.n	80016ba <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_START_WRITE:
    APP_DBG_MSG("==>> SHCI_SUB_EVT_NVM_START_WRITE : NumberOfWords = %ld\n",
                ((SHCI_C2_NvmStartWrite_Evt_t*)p_sys_event->payload)->NumberOfWords);
 8001688:	69fb      	ldr	r3, [r7, #28]
 800168a:	3302      	adds	r3, #2
    APP_DBG_MSG("==>> SHCI_SUB_EVT_NVM_START_WRITE : NumberOfWords = %ld\n",
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4619      	mov	r1, r3
 8001690:	4813      	ldr	r0, [pc, #76]	; (80016e0 <APPE_SysUserEvtRx+0x108>)
 8001692:	f00c fc29 	bl	800dee8 <iprintf>
    break;
 8001696:	e010      	b.n	80016ba <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_END_WRITE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_WRITE\n\r");
 8001698:	4812      	ldr	r0, [pc, #72]	; (80016e4 <APPE_SysUserEvtRx+0x10c>)
 800169a:	f00c fc25 	bl	800dee8 <iprintf>
    break;
 800169e:	e00c      	b.n	80016ba <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_START_ERASE:
    APP_DBG_MSG("==>>SHCI_SUB_EVT_NVM_START_ERASE : NumberOfSectors = %ld\n",
                ((SHCI_C2_NvmStartErase_Evt_t*)p_sys_event->payload)->NumberOfSectors);
 80016a0:	69fb      	ldr	r3, [r7, #28]
 80016a2:	3302      	adds	r3, #2
    APP_DBG_MSG("==>>SHCI_SUB_EVT_NVM_START_ERASE : NumberOfSectors = %ld\n",
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4619      	mov	r1, r3
 80016a8:	480f      	ldr	r0, [pc, #60]	; (80016e8 <APPE_SysUserEvtRx+0x110>)
 80016aa:	f00c fc1d 	bl	800dee8 <iprintf>
    break;
 80016ae:	e004      	b.n	80016ba <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
 80016b0:	480e      	ldr	r0, [pc, #56]	; (80016ec <APPE_SysUserEvtRx+0x114>)
 80016b2:	f00c fc19 	bl	800dee8 <iprintf>
    break;
 80016b6:	e000      	b.n	80016ba <APPE_SysUserEvtRx+0xe2>

  default:
    break;
 80016b8:	bf00      	nop
  }

  return;
 80016ba:	bf00      	nop
}
 80016bc:	3720      	adds	r7, #32
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	0801022c 	.word	0x0801022c
 80016c8:	08010250 	.word	0x08010250
 80016cc:	0801026c 	.word	0x0801026c
 80016d0:	08010284 	.word	0x08010284
 80016d4:	080102a4 	.word	0x080102a4
 80016d8:	080102c8 	.word	0x080102c8
 80016dc:	08010318 	.word	0x08010318
 80016e0:	08010340 	.word	0x08010340
 80016e4:	0801037c 	.word	0x0801037c
 80016e8:	080103a0 	.word	0x080103a0
 80016ec:	080103dc 	.word	0x080103dc

080016f0 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b084      	sub	sp, #16
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	330b      	adds	r3, #11
 80016fe:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	3302      	adds	r3, #2
 8001704:	60bb      	str	r3, [r7, #8]

  APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON %x \n\r",(*p_sys_error_code));
 8001706:	68bb      	ldr	r3, [r7, #8]
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	4619      	mov	r1, r3
 800170c:	4808      	ldr	r0, [pc, #32]	; (8001730 <APPE_SysEvtError+0x40>)
 800170e:	f00c fbeb 	bl	800dee8 <iprintf>

  if ((*p_sys_error_code) == ERR_BLE_INIT)
 8001712:	68bb      	ldr	r3, [r7, #8]
 8001714:	781b      	ldrb	r3, [r3, #0]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d103      	bne.n	8001722 <APPE_SysEvtError+0x32>
  {
    /* Error during BLE stack initialization */
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - ERR_BLE_INIT \n");
 800171a:	4806      	ldr	r0, [pc, #24]	; (8001734 <APPE_SysEvtError+0x44>)
 800171c:	f00c fc80 	bl	800e020 <puts>
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 8001720:	e003      	b.n	800172a <APPE_SysEvtError+0x3a>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
 8001722:	4805      	ldr	r0, [pc, #20]	; (8001738 <APPE_SysEvtError+0x48>)
 8001724:	f00c fc7c 	bl	800e020 <puts>
  return;
 8001728:	bf00      	nop
}
 800172a:	3710      	adds	r7, #16
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	08010400 	.word	0x08010400
 8001734:	08010430 	.word	0x08010430
 8001738:	0801046c 	.word	0x0801046c

0800173c <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b08a      	sub	sp, #40	; 0x28
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 8001744:	f107 0308 	add.w	r3, r7, #8
 8001748:	2200      	movs	r2, #0
 800174a:	601a      	str	r2, [r3, #0]
 800174c:	605a      	str	r2, [r3, #4]
 800174e:	609a      	str	r2, [r3, #8]
 8001750:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 8001752:	2300      	movs	r3, #0
 8001754:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t DeviceID=0;
 8001756:	2300      	movs	r3, #0
 8001758:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	330b      	adds	r3, #11
 8001760:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	3302      	adds	r3, #2
 8001766:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 8001768:	69bb      	ldr	r3, [r7, #24]
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d128      	bne.n	80017c2 <APPE_SysEvtReadyProcessing+0x86>
  {
    /**
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");
 8001770:	481d      	ldr	r0, [pc, #116]	; (80017e8 <APPE_SysEvtReadyProcessing+0xac>)
 8001772:	f00c fc55 	bl	800e020 <puts>

    /* Traces channel initialization */
    APPD_EnableCPU2();
 8001776:	f7ff fbdd 	bl	8000f34 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 800177a:	230f      	movs	r3, #15
 800177c:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 800177e:	237f      	movs	r3, #127	; 0x7f
 8001780:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 8001782:	f7ff fd81 	bl	8001288 <LL_DBGMCU_GetRevisionID>
 8001786:	6278      	str	r0, [r7, #36]	; 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);
 8001788:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800178a:	4818      	ldr	r0, [pc, #96]	; (80017ec <APPE_SysEvtReadyProcessing+0xb0>)
 800178c:	f00c fbac 	bl	800dee8 <iprintf>

    config_param.RevisionID = (uint16_t)RevisionID;
 8001790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001792:	b29b      	uxth	r3, r3
 8001794:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 8001796:	f7ff fd69 	bl	800126c <LL_DBGMCU_GetDeviceID>
 800179a:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
 800179c:	6a39      	ldr	r1, [r7, #32]
 800179e:	4814      	ldr	r0, [pc, #80]	; (80017f0 <APPE_SysEvtReadyProcessing+0xb4>)
 80017a0:	f00c fba2 	bl	800dee8 <iprintf>
    config_param.DeviceID = (uint16_t)DeviceID;
 80017a4:	6a3b      	ldr	r3, [r7, #32]
 80017a6:	b29b      	uxth	r3, r3
 80017a8:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 80017aa:	f107 0308 	add.w	r3, r7, #8
 80017ae:	4618      	mov	r0, r3
 80017b0:	f00a fa50 	bl	800bc54 <SHCI_C2_Config>

    APP_BLE_Init();
 80017b4:	f001 fdd8 	bl	8003368 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 80017b8:	2100      	movs	r1, #0
 80017ba:	2001      	movs	r0, #1
 80017bc:	f00b fc7c 	bl	800d0b8 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 80017c0:	e00e      	b.n	80017e0 <APPE_SysEvtReadyProcessing+0xa4>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 80017c2:	69bb      	ldr	r3, [r7, #24]
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d106      	bne.n	80017d8 <APPE_SysEvtReadyProcessing+0x9c>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - FUS_FW_RUNNING \n\r");
 80017ca:	480a      	ldr	r0, [pc, #40]	; (80017f4 <APPE_SysEvtReadyProcessing+0xb8>)
 80017cc:	f00c fb8c 	bl	800dee8 <iprintf>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2200      	movs	r2, #0
 80017d4:	701a      	strb	r2, [r3, #0]
  return;
 80017d6:	e003      	b.n	80017e0 <APPE_SysEvtReadyProcessing+0xa4>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
 80017d8:	4807      	ldr	r0, [pc, #28]	; (80017f8 <APPE_SysEvtReadyProcessing+0xbc>)
 80017da:	f00c fb85 	bl	800dee8 <iprintf>
  return;
 80017de:	bf00      	nop
}
 80017e0:	3728      	adds	r7, #40	; 0x28
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	080104a4 	.word	0x080104a4
 80017ec:	080104c0 	.word	0x080104c0
 80017f0:	080104e4 	.word	0x080104e4
 80017f4:	08010504 	.word	0x08010504
 80017f8:	08010538 	.word	0x08010538

080017fc <Led_Init>:

/* USER CODE BEGIN FD_LOCAL_FUNCTIONS */
static void Led_Init( void )
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
#if (CFG_LED_SUPPORTED == 1)
  /**
   * Leds Initialization
   */
  BSP_LED_Init(LED_BLUE);
 8001800:	2000      	movs	r0, #0
 8001802:	f003 facd 	bl	8004da0 <BSP_LED_Init>
  BSP_LED_Init(LED_GREEN);
 8001806:	2001      	movs	r0, #1
 8001808:	f003 faca 	bl	8004da0 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 800180c:	2002      	movs	r0, #2
 800180e:	f003 fac7 	bl	8004da0 <BSP_LED_Init>

  BSP_LED_On(LED_GREEN);
 8001812:	2001      	movs	r0, #1
 8001814:	f003 fafe 	bl	8004e14 <BSP_LED_On>
#endif

  return;
 8001818:	bf00      	nop
}
 800181a:	bd80      	pop	{r7, pc}

0800181c <Button_Init>:

static void Button_Init( void )
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
#if (CFG_BUTTON_SUPPORTED == 1)
  /**
   * Button Initialization
   */
  BSP_PB_Init(BUTTON_SW1, BUTTON_MODE_EXTI);
 8001820:	2101      	movs	r1, #1
 8001822:	2000      	movs	r0, #0
 8001824:	f003 fb10 	bl	8004e48 <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW2, BUTTON_MODE_EXTI);
 8001828:	2101      	movs	r1, #1
 800182a:	2001      	movs	r0, #1
 800182c:	f003 fb0c 	bl	8004e48 <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW3, BUTTON_MODE_EXTI);
 8001830:	2101      	movs	r1, #1
 8001832:	2002      	movs	r0, #2
 8001834:	f003 fb08 	bl	8004e48 <BSP_PB_Init>
#endif

  return;
 8001838:	bf00      	nop
}
 800183a:	bd80      	pop	{r7, pc}

0800183c <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b084      	sub	sp, #16
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001844:	f003 fc54 	bl	80050f0 <HAL_GetTick>
 8001848:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001854:	d00a      	beq.n	800186c <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 8001856:	f003 fc63 	bl	8005120 <HAL_GetTickFreq>
 800185a:	4603      	mov	r3, r0
 800185c:	461a      	mov	r2, r3
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	4413      	add	r3, r2
 8001862:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001864:	e002      	b.n	800186c <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 8001866:	f7ff fd7f 	bl	8001368 <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM)
    __force_stores();
  #endif /* __CC_ARM */

    __WFI();
 800186a:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 800186c:	f003 fc40 	bl	80050f0 <HAL_GetTick>
 8001870:	4602      	mov	r2, r0
 8001872:	68bb      	ldr	r3, [r7, #8]
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	68fa      	ldr	r2, [r7, #12]
 8001878:	429a      	cmp	r2, r3
 800187a:	d8f4      	bhi.n	8001866 <HAL_Delay+0x2a>
  }
}
 800187c:	bf00      	nop
 800187e:	bf00      	nop
 8001880:	3710      	adds	r7, #16
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}

08001886 <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 8001886:	b580      	push	{r7, lr}
 8001888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800188a:	f04f 30ff 	mov.w	r0, #4294967295
 800188e:	f00b fc43 	bl	800d118 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8001892:	bf00      	nop
 8001894:	bd80      	pop	{r7, pc}

08001896 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 8001896:	b480      	push	{r7}
 8001898:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 800189a:	bf00      	nop
}
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr

080018a4 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
 80018ac:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80018ae:	f04f 30ff 	mov.w	r0, #4294967295
 80018b2:	f00b fc31 	bl	800d118 <UTIL_SEQ_Run>

  return;
 80018b6:	bf00      	nop
}
 80018b8:	3708      	adds	r7, #8
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}

080018be <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 80018be:	b580      	push	{r7, lr}
 80018c0:	b082      	sub	sp, #8
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80018c6:	2100      	movs	r1, #0
 80018c8:	2040      	movs	r0, #64	; 0x40
 80018ca:	f00b fd43 	bl	800d354 <UTIL_SEQ_SetTask>
  return;
 80018ce:	bf00      	nop
}
 80018d0:	3708      	adds	r7, #8
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}

080018d6 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 80018d6:	b580      	push	{r7, lr}
 80018d8:	b082      	sub	sp, #8
 80018da:	af00      	add	r7, sp, #0
 80018dc:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80018de:	2002      	movs	r0, #2
 80018e0:	f00b fda4 	bl	800d42c <UTIL_SEQ_SetEvt>
  return;
 80018e4:	bf00      	nop
}
 80018e6:	3708      	adds	r7, #8
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}

080018ec <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80018f4:	2002      	movs	r0, #2
 80018f6:	f00b fdb9 	bl	800d46c <UTIL_SEQ_WaitEvt>
  return;
 80018fa:	bf00      	nop
}
 80018fc:	3708      	adds	r7, #8
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}

08001902 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN FD_WRAP_FUNCTIONS */
void HAL_GPIO_EXTI_Callback( uint16_t GPIO_Pin )
{
 8001902:	b580      	push	{r7, lr}
 8001904:	b082      	sub	sp, #8
 8001906:	af00      	add	r7, sp, #0
 8001908:	4603      	mov	r3, r0
 800190a:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 800190c:	88fb      	ldrh	r3, [r7, #6]
 800190e:	2b10      	cmp	r3, #16
 8001910:	d006      	beq.n	8001920 <HAL_GPIO_EXTI_Callback+0x1e>
 8001912:	2b10      	cmp	r3, #16
 8001914:	dc0d      	bgt.n	8001932 <HAL_GPIO_EXTI_Callback+0x30>
 8001916:	2b01      	cmp	r3, #1
 8001918:	d005      	beq.n	8001926 <HAL_GPIO_EXTI_Callback+0x24>
 800191a:	2b02      	cmp	r3, #2
 800191c:	d006      	beq.n	800192c <HAL_GPIO_EXTI_Callback+0x2a>
    case SW3_User_Pin:
      APP_BLE_Key_Button3_Action();
      break; 

    default:
      break;
 800191e:	e008      	b.n	8001932 <HAL_GPIO_EXTI_Callback+0x30>
      APP_BLE_Key_Button1_Action();
 8001920:	f002 fa50 	bl	8003dc4 <APP_BLE_Key_Button1_Action>
      break; 
 8001924:	e006      	b.n	8001934 <HAL_GPIO_EXTI_Callback+0x32>
      APP_BLE_Key_Button2_Action();
 8001926:	f002 fa53 	bl	8003dd0 <APP_BLE_Key_Button2_Action>
      break; 
 800192a:	e003      	b.n	8001934 <HAL_GPIO_EXTI_Callback+0x32>
      APP_BLE_Key_Button3_Action();
 800192c:	f002 fa72 	bl	8003e14 <APP_BLE_Key_Button3_Action>
      break; 
 8001930:	e000      	b.n	8001934 <HAL_GPIO_EXTI_Callback+0x32>
      break;
 8001932:	bf00      	nop

  }
  return;
 8001934:	bf00      	nop
}
 8001936:	3708      	adds	r7, #8
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}

0800193c <RxUART_Init>:

static void RxUART_Init(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0
  HW_UART_Receive_IT((hw_uart_id_t)CFG_DEBUG_TRACE_UART, aRxBuffer, 1U, RxCpltCallback);
 8001940:	4b03      	ldr	r3, [pc, #12]	; (8001950 <RxUART_Init+0x14>)
 8001942:	2201      	movs	r2, #1
 8001944:	4903      	ldr	r1, [pc, #12]	; (8001954 <RxUART_Init+0x18>)
 8001946:	2000      	movs	r0, #0
 8001948:	f000 fe96 	bl	8002678 <HW_UART_Receive_IT>
}
 800194c:	bf00      	nop
 800194e:	bd80      	pop	{r7, pc}
 8001950:	08001959 	.word	0x08001959
 8001954:	20000298 	.word	0x20000298

08001958 <RxCpltCallback>:

static void RxCpltCallback(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
  /* Filling buffer and wait for '\r' char */
  if (indexReceiveChar < C_SIZE_CMD_STRING)
 800195c:	4b15      	ldr	r3, [pc, #84]	; (80019b4 <RxCpltCallback+0x5c>)
 800195e:	881b      	ldrh	r3, [r3, #0]
 8001960:	2bff      	cmp	r3, #255	; 0xff
 8001962:	d81e      	bhi.n	80019a2 <RxCpltCallback+0x4a>
  {
    if (aRxBuffer[0] == '\r')
 8001964:	4b14      	ldr	r3, [pc, #80]	; (80019b8 <RxCpltCallback+0x60>)
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	2b0d      	cmp	r3, #13
 800196a:	d10f      	bne.n	800198c <RxCpltCallback+0x34>
    {
      APP_DBG_MSG("received %s\n", CommandString);
 800196c:	4913      	ldr	r1, [pc, #76]	; (80019bc <RxCpltCallback+0x64>)
 800196e:	4814      	ldr	r0, [pc, #80]	; (80019c0 <RxCpltCallback+0x68>)
 8001970:	f00c faba 	bl	800dee8 <iprintf>

      UartCmdExecute();
 8001974:	f000 f828 	bl	80019c8 <UartCmdExecute>

      /* Clear receive buffer and character counter*/
      indexReceiveChar = 0;
 8001978:	4b0e      	ldr	r3, [pc, #56]	; (80019b4 <RxCpltCallback+0x5c>)
 800197a:	2200      	movs	r2, #0
 800197c:	801a      	strh	r2, [r3, #0]
      memset(CommandString, 0, C_SIZE_CMD_STRING);
 800197e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001982:	2100      	movs	r1, #0
 8001984:	480d      	ldr	r0, [pc, #52]	; (80019bc <RxCpltCallback+0x64>)
 8001986:	f00b fe3d 	bl	800d604 <memset>
 800198a:	e00a      	b.n	80019a2 <RxCpltCallback+0x4a>
    }
    else
    {
      CommandString[indexReceiveChar++] = aRxBuffer[0];
 800198c:	4b09      	ldr	r3, [pc, #36]	; (80019b4 <RxCpltCallback+0x5c>)
 800198e:	881b      	ldrh	r3, [r3, #0]
 8001990:	1c5a      	adds	r2, r3, #1
 8001992:	b291      	uxth	r1, r2
 8001994:	4a07      	ldr	r2, [pc, #28]	; (80019b4 <RxCpltCallback+0x5c>)
 8001996:	8011      	strh	r1, [r2, #0]
 8001998:	461a      	mov	r2, r3
 800199a:	4b07      	ldr	r3, [pc, #28]	; (80019b8 <RxCpltCallback+0x60>)
 800199c:	7819      	ldrb	r1, [r3, #0]
 800199e:	4b07      	ldr	r3, [pc, #28]	; (80019bc <RxCpltCallback+0x64>)
 80019a0:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Once a character has been sent, put back the device in reception mode */
  HW_UART_Receive_IT((hw_uart_id_t)CFG_DEBUG_TRACE_UART, aRxBuffer, 1U, RxCpltCallback);
 80019a2:	4b08      	ldr	r3, [pc, #32]	; (80019c4 <RxCpltCallback+0x6c>)
 80019a4:	2201      	movs	r2, #1
 80019a6:	4904      	ldr	r1, [pc, #16]	; (80019b8 <RxCpltCallback+0x60>)
 80019a8:	2000      	movs	r0, #0
 80019aa:	f000 fe65 	bl	8002678 <HW_UART_Receive_IT>
}
 80019ae:	bf00      	nop
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	200003a0 	.word	0x200003a0
 80019b8:	20000298 	.word	0x20000298
 80019bc:	200002a0 	.word	0x200002a0
 80019c0:	0801056c 	.word	0x0801056c
 80019c4:	08001959 	.word	0x08001959

080019c8 <UartCmdExecute>:

static void UartCmdExecute(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
  /* Parse received CommandString */
  if(strcmp((char const*)CommandString, "SW1") == 0)
 80019cc:	491c      	ldr	r1, [pc, #112]	; (8001a40 <UartCmdExecute+0x78>)
 80019ce:	481d      	ldr	r0, [pc, #116]	; (8001a44 <UartCmdExecute+0x7c>)
 80019d0:	f7fe fbd6 	bl	8000180 <strcmp>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d109      	bne.n	80019ee <UartCmdExecute+0x26>
  {
    APP_DBG_MSG("SW1 OK\n");
 80019da:	481b      	ldr	r0, [pc, #108]	; (8001a48 <UartCmdExecute+0x80>)
 80019dc:	f00c fb20 	bl	800e020 <puts>
    exti_handle.Line = EXTI_LINE_4;
 80019e0:	4b1a      	ldr	r3, [pc, #104]	; (8001a4c <UartCmdExecute+0x84>)
 80019e2:	4a1b      	ldr	r2, [pc, #108]	; (8001a50 <UartCmdExecute+0x88>)
 80019e4:	601a      	str	r2, [r3, #0]
    HAL_EXTI_GenerateSWI(&exti_handle);
 80019e6:	4819      	ldr	r0, [pc, #100]	; (8001a4c <UartCmdExecute+0x84>)
 80019e8:	f004 f8be 	bl	8005b68 <HAL_EXTI_GenerateSWI>
  }
  else
  {
    APP_DBG_MSG("NOT RECOGNIZED COMMAND : %s\n", CommandString);
  }
}
 80019ec:	e026      	b.n	8001a3c <UartCmdExecute+0x74>
  else if (strcmp((char const*)CommandString, "SW2") == 0)
 80019ee:	4919      	ldr	r1, [pc, #100]	; (8001a54 <UartCmdExecute+0x8c>)
 80019f0:	4814      	ldr	r0, [pc, #80]	; (8001a44 <UartCmdExecute+0x7c>)
 80019f2:	f7fe fbc5 	bl	8000180 <strcmp>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d10a      	bne.n	8001a12 <UartCmdExecute+0x4a>
    APP_DBG_MSG("SW2 OK\n");
 80019fc:	4816      	ldr	r0, [pc, #88]	; (8001a58 <UartCmdExecute+0x90>)
 80019fe:	f00c fb0f 	bl	800e020 <puts>
    exti_handle.Line = EXTI_LINE_0;
 8001a02:	4b12      	ldr	r3, [pc, #72]	; (8001a4c <UartCmdExecute+0x84>)
 8001a04:	f04f 52b0 	mov.w	r2, #369098752	; 0x16000000
 8001a08:	601a      	str	r2, [r3, #0]
    HAL_EXTI_GenerateSWI(&exti_handle);
 8001a0a:	4810      	ldr	r0, [pc, #64]	; (8001a4c <UartCmdExecute+0x84>)
 8001a0c:	f004 f8ac 	bl	8005b68 <HAL_EXTI_GenerateSWI>
}
 8001a10:	e014      	b.n	8001a3c <UartCmdExecute+0x74>
  else if (strcmp((char const*)CommandString, "SW3") == 0)
 8001a12:	4912      	ldr	r1, [pc, #72]	; (8001a5c <UartCmdExecute+0x94>)
 8001a14:	480b      	ldr	r0, [pc, #44]	; (8001a44 <UartCmdExecute+0x7c>)
 8001a16:	f7fe fbb3 	bl	8000180 <strcmp>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d109      	bne.n	8001a34 <UartCmdExecute+0x6c>
    APP_DBG_MSG("SW3 OK\n");
 8001a20:	480f      	ldr	r0, [pc, #60]	; (8001a60 <UartCmdExecute+0x98>)
 8001a22:	f00c fafd 	bl	800e020 <puts>
    exti_handle.Line = EXTI_LINE_1;
 8001a26:	4b09      	ldr	r3, [pc, #36]	; (8001a4c <UartCmdExecute+0x84>)
 8001a28:	4a0e      	ldr	r2, [pc, #56]	; (8001a64 <UartCmdExecute+0x9c>)
 8001a2a:	601a      	str	r2, [r3, #0]
    HAL_EXTI_GenerateSWI(&exti_handle);
 8001a2c:	4807      	ldr	r0, [pc, #28]	; (8001a4c <UartCmdExecute+0x84>)
 8001a2e:	f004 f89b 	bl	8005b68 <HAL_EXTI_GenerateSWI>
}
 8001a32:	e003      	b.n	8001a3c <UartCmdExecute+0x74>
    APP_DBG_MSG("NOT RECOGNIZED COMMAND : %s\n", CommandString);
 8001a34:	4903      	ldr	r1, [pc, #12]	; (8001a44 <UartCmdExecute+0x7c>)
 8001a36:	480c      	ldr	r0, [pc, #48]	; (8001a68 <UartCmdExecute+0xa0>)
 8001a38:	f00c fa56 	bl	800dee8 <iprintf>
}
 8001a3c:	bf00      	nop
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	0801057c 	.word	0x0801057c
 8001a44:	200002a0 	.word	0x200002a0
 8001a48:	08010580 	.word	0x08010580
 8001a4c:	20000290 	.word	0x20000290
 8001a50:	16000004 	.word	0x16000004
 8001a54:	08010588 	.word	0x08010588
 8001a58:	0801058c 	.word	0x0801058c
 8001a5c:	08010594 	.word	0x08010594
 8001a60:	08010598 	.word	0x08010598
 8001a64:	16000001 	.word	0x16000001
 8001a68:	080105a0 	.word	0x080105a0

08001a6c <LL_EXTI_EnableIT_0_31>:
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001a74:	4b06      	ldr	r3, [pc, #24]	; (8001a90 <LL_EXTI_EnableIT_0_31+0x24>)
 8001a76:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001a7a:	4905      	ldr	r1, [pc, #20]	; (8001a90 <LL_EXTI_EnableIT_0_31+0x24>)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8001a84:	bf00      	nop
 8001a86:	370c      	adds	r7, #12
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr
 8001a90:	58000800 	.word	0x58000800

08001a94 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8001a9c:	4b05      	ldr	r3, [pc, #20]	; (8001ab4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	4904      	ldr	r1, [pc, #16]	; (8001ab4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	600b      	str	r3, [r1, #0]

}
 8001aa8:	bf00      	nop
 8001aaa:	370c      	adds	r7, #12
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr
 8001ab4:	58000800 	.word	0x58000800

08001ab8 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b083      	sub	sp, #12
 8001abc:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001abe:	4b0d      	ldr	r3, [pc, #52]	; (8001af4 <ReadRtcSsrValue+0x3c>)
 8001ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ac2:	b29b      	uxth	r3, r3
 8001ac4:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001ac6:	4b0b      	ldr	r3, [pc, #44]	; (8001af4 <ReadRtcSsrValue+0x3c>)
 8001ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aca:	b29b      	uxth	r3, r3
 8001acc:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8001ace:	e005      	b.n	8001adc <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001ad4:	4b07      	ldr	r3, [pc, #28]	; (8001af4 <ReadRtcSsrValue+0x3c>)
 8001ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ad8:	b29b      	uxth	r3, r3
 8001ada:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8001adc:	687a      	ldr	r2, [r7, #4]
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d1f5      	bne.n	8001ad0 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8001ae4:	683b      	ldr	r3, [r7, #0]
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	370c      	adds	r7, #12
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	40002800 	.word	0x40002800

08001af8 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b085      	sub	sp, #20
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	4603      	mov	r3, r0
 8001b00:	460a      	mov	r2, r1
 8001b02:	71fb      	strb	r3, [r7, #7]
 8001b04:	4613      	mov	r3, r2
 8001b06:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8001b08:	79ba      	ldrb	r2, [r7, #6]
 8001b0a:	491d      	ldr	r1, [pc, #116]	; (8001b80 <LinkTimerAfter+0x88>)
 8001b0c:	4613      	mov	r3, r2
 8001b0e:	005b      	lsls	r3, r3, #1
 8001b10:	4413      	add	r3, r2
 8001b12:	00db      	lsls	r3, r3, #3
 8001b14:	440b      	add	r3, r1
 8001b16:	3315      	adds	r3, #21
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001b1c:	7bfb      	ldrb	r3, [r7, #15]
 8001b1e:	2b06      	cmp	r3, #6
 8001b20:	d009      	beq.n	8001b36 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8001b22:	7bfa      	ldrb	r2, [r7, #15]
 8001b24:	4916      	ldr	r1, [pc, #88]	; (8001b80 <LinkTimerAfter+0x88>)
 8001b26:	4613      	mov	r3, r2
 8001b28:	005b      	lsls	r3, r3, #1
 8001b2a:	4413      	add	r3, r2
 8001b2c:	00db      	lsls	r3, r3, #3
 8001b2e:	440b      	add	r3, r1
 8001b30:	3314      	adds	r3, #20
 8001b32:	79fa      	ldrb	r2, [r7, #7]
 8001b34:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8001b36:	79fa      	ldrb	r2, [r7, #7]
 8001b38:	4911      	ldr	r1, [pc, #68]	; (8001b80 <LinkTimerAfter+0x88>)
 8001b3a:	4613      	mov	r3, r2
 8001b3c:	005b      	lsls	r3, r3, #1
 8001b3e:	4413      	add	r3, r2
 8001b40:	00db      	lsls	r3, r3, #3
 8001b42:	440b      	add	r3, r1
 8001b44:	3315      	adds	r3, #21
 8001b46:	7bfa      	ldrb	r2, [r7, #15]
 8001b48:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8001b4a:	79fa      	ldrb	r2, [r7, #7]
 8001b4c:	490c      	ldr	r1, [pc, #48]	; (8001b80 <LinkTimerAfter+0x88>)
 8001b4e:	4613      	mov	r3, r2
 8001b50:	005b      	lsls	r3, r3, #1
 8001b52:	4413      	add	r3, r2
 8001b54:	00db      	lsls	r3, r3, #3
 8001b56:	440b      	add	r3, r1
 8001b58:	3314      	adds	r3, #20
 8001b5a:	79ba      	ldrb	r2, [r7, #6]
 8001b5c:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8001b5e:	79ba      	ldrb	r2, [r7, #6]
 8001b60:	4907      	ldr	r1, [pc, #28]	; (8001b80 <LinkTimerAfter+0x88>)
 8001b62:	4613      	mov	r3, r2
 8001b64:	005b      	lsls	r3, r3, #1
 8001b66:	4413      	add	r3, r2
 8001b68:	00db      	lsls	r3, r3, #3
 8001b6a:	440b      	add	r3, r1
 8001b6c:	3315      	adds	r3, #21
 8001b6e:	79fa      	ldrb	r2, [r7, #7]
 8001b70:	701a      	strb	r2, [r3, #0]

  return;
 8001b72:	bf00      	nop
}
 8001b74:	3714      	adds	r7, #20
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop
 8001b80:	200003a4 	.word	0x200003a4

08001b84 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b085      	sub	sp, #20
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	460a      	mov	r2, r1
 8001b8e:	71fb      	strb	r3, [r7, #7]
 8001b90:	4613      	mov	r3, r2
 8001b92:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8001b94:	4b29      	ldr	r3, [pc, #164]	; (8001c3c <LinkTimerBefore+0xb8>)
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	79ba      	ldrb	r2, [r7, #6]
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d032      	beq.n	8001c06 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8001ba0:	79ba      	ldrb	r2, [r7, #6]
 8001ba2:	4927      	ldr	r1, [pc, #156]	; (8001c40 <LinkTimerBefore+0xbc>)
 8001ba4:	4613      	mov	r3, r2
 8001ba6:	005b      	lsls	r3, r3, #1
 8001ba8:	4413      	add	r3, r2
 8001baa:	00db      	lsls	r3, r3, #3
 8001bac:	440b      	add	r3, r1
 8001bae:	3314      	adds	r3, #20
 8001bb0:	781b      	ldrb	r3, [r3, #0]
 8001bb2:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8001bb4:	7bfa      	ldrb	r2, [r7, #15]
 8001bb6:	4922      	ldr	r1, [pc, #136]	; (8001c40 <LinkTimerBefore+0xbc>)
 8001bb8:	4613      	mov	r3, r2
 8001bba:	005b      	lsls	r3, r3, #1
 8001bbc:	4413      	add	r3, r2
 8001bbe:	00db      	lsls	r3, r3, #3
 8001bc0:	440b      	add	r3, r1
 8001bc2:	3315      	adds	r3, #21
 8001bc4:	79fa      	ldrb	r2, [r7, #7]
 8001bc6:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8001bc8:	79fa      	ldrb	r2, [r7, #7]
 8001bca:	491d      	ldr	r1, [pc, #116]	; (8001c40 <LinkTimerBefore+0xbc>)
 8001bcc:	4613      	mov	r3, r2
 8001bce:	005b      	lsls	r3, r3, #1
 8001bd0:	4413      	add	r3, r2
 8001bd2:	00db      	lsls	r3, r3, #3
 8001bd4:	440b      	add	r3, r1
 8001bd6:	3315      	adds	r3, #21
 8001bd8:	79ba      	ldrb	r2, [r7, #6]
 8001bda:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8001bdc:	79fa      	ldrb	r2, [r7, #7]
 8001bde:	4918      	ldr	r1, [pc, #96]	; (8001c40 <LinkTimerBefore+0xbc>)
 8001be0:	4613      	mov	r3, r2
 8001be2:	005b      	lsls	r3, r3, #1
 8001be4:	4413      	add	r3, r2
 8001be6:	00db      	lsls	r3, r3, #3
 8001be8:	440b      	add	r3, r1
 8001bea:	3314      	adds	r3, #20
 8001bec:	7bfa      	ldrb	r2, [r7, #15]
 8001bee:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001bf0:	79ba      	ldrb	r2, [r7, #6]
 8001bf2:	4913      	ldr	r1, [pc, #76]	; (8001c40 <LinkTimerBefore+0xbc>)
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	005b      	lsls	r3, r3, #1
 8001bf8:	4413      	add	r3, r2
 8001bfa:	00db      	lsls	r3, r3, #3
 8001bfc:	440b      	add	r3, r1
 8001bfe:	3314      	adds	r3, #20
 8001c00:	79fa      	ldrb	r2, [r7, #7]
 8001c02:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8001c04:	e014      	b.n	8001c30 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8001c06:	79fa      	ldrb	r2, [r7, #7]
 8001c08:	490d      	ldr	r1, [pc, #52]	; (8001c40 <LinkTimerBefore+0xbc>)
 8001c0a:	4613      	mov	r3, r2
 8001c0c:	005b      	lsls	r3, r3, #1
 8001c0e:	4413      	add	r3, r2
 8001c10:	00db      	lsls	r3, r3, #3
 8001c12:	440b      	add	r3, r1
 8001c14:	3315      	adds	r3, #21
 8001c16:	79ba      	ldrb	r2, [r7, #6]
 8001c18:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001c1a:	79ba      	ldrb	r2, [r7, #6]
 8001c1c:	4908      	ldr	r1, [pc, #32]	; (8001c40 <LinkTimerBefore+0xbc>)
 8001c1e:	4613      	mov	r3, r2
 8001c20:	005b      	lsls	r3, r3, #1
 8001c22:	4413      	add	r3, r2
 8001c24:	00db      	lsls	r3, r3, #3
 8001c26:	440b      	add	r3, r1
 8001c28:	3314      	adds	r3, #20
 8001c2a:	79fa      	ldrb	r2, [r7, #7]
 8001c2c:	701a      	strb	r2, [r3, #0]
  return;
 8001c2e:	bf00      	nop
}
 8001c30:	3714      	adds	r7, #20
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr
 8001c3a:	bf00      	nop
 8001c3c:	20000434 	.word	0x20000434
 8001c40:	200003a4 	.word	0x200003a4

08001c44 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b084      	sub	sp, #16
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001c4e:	4b4e      	ldr	r3, [pc, #312]	; (8001d88 <linkTimer+0x144>)
 8001c50:	781b      	ldrb	r3, [r3, #0]
 8001c52:	b2db      	uxtb	r3, r3
 8001c54:	2b06      	cmp	r3, #6
 8001c56:	d118      	bne.n	8001c8a <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001c58:	4b4b      	ldr	r3, [pc, #300]	; (8001d88 <linkTimer+0x144>)
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	b2da      	uxtb	r2, r3
 8001c5e:	4b4b      	ldr	r3, [pc, #300]	; (8001d8c <linkTimer+0x148>)
 8001c60:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8001c62:	4a49      	ldr	r2, [pc, #292]	; (8001d88 <linkTimer+0x144>)
 8001c64:	79fb      	ldrb	r3, [r7, #7]
 8001c66:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8001c68:	79fa      	ldrb	r2, [r7, #7]
 8001c6a:	4949      	ldr	r1, [pc, #292]	; (8001d90 <linkTimer+0x14c>)
 8001c6c:	4613      	mov	r3, r2
 8001c6e:	005b      	lsls	r3, r3, #1
 8001c70:	4413      	add	r3, r2
 8001c72:	00db      	lsls	r3, r3, #3
 8001c74:	440b      	add	r3, r1
 8001c76:	3315      	adds	r3, #21
 8001c78:	2206      	movs	r2, #6
 8001c7a:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001c7c:	4b45      	ldr	r3, [pc, #276]	; (8001d94 <linkTimer+0x150>)
 8001c7e:	f04f 32ff 	mov.w	r2, #4294967295
 8001c82:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8001c84:	2300      	movs	r3, #0
 8001c86:	81fb      	strh	r3, [r7, #14]
 8001c88:	e078      	b.n	8001d7c <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8001c8a:	f000 f909 	bl	8001ea0 <ReturnTimeElapsed>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8001c92:	79fa      	ldrb	r2, [r7, #7]
 8001c94:	493e      	ldr	r1, [pc, #248]	; (8001d90 <linkTimer+0x14c>)
 8001c96:	4613      	mov	r3, r2
 8001c98:	005b      	lsls	r3, r3, #1
 8001c9a:	4413      	add	r3, r2
 8001c9c:	00db      	lsls	r3, r3, #3
 8001c9e:	440b      	add	r3, r1
 8001ca0:	3308      	adds	r3, #8
 8001ca2:	6819      	ldr	r1, [r3, #0]
 8001ca4:	89fb      	ldrh	r3, [r7, #14]
 8001ca6:	79fa      	ldrb	r2, [r7, #7]
 8001ca8:	4419      	add	r1, r3
 8001caa:	4839      	ldr	r0, [pc, #228]	; (8001d90 <linkTimer+0x14c>)
 8001cac:	4613      	mov	r3, r2
 8001cae:	005b      	lsls	r3, r3, #1
 8001cb0:	4413      	add	r3, r2
 8001cb2:	00db      	lsls	r3, r3, #3
 8001cb4:	4403      	add	r3, r0
 8001cb6:	3308      	adds	r3, #8
 8001cb8:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8001cba:	79fa      	ldrb	r2, [r7, #7]
 8001cbc:	4934      	ldr	r1, [pc, #208]	; (8001d90 <linkTimer+0x14c>)
 8001cbe:	4613      	mov	r3, r2
 8001cc0:	005b      	lsls	r3, r3, #1
 8001cc2:	4413      	add	r3, r2
 8001cc4:	00db      	lsls	r3, r3, #3
 8001cc6:	440b      	add	r3, r1
 8001cc8:	3308      	adds	r3, #8
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8001cce:	4b2e      	ldr	r3, [pc, #184]	; (8001d88 <linkTimer+0x144>)
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	b2db      	uxtb	r3, r3
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	4a2e      	ldr	r2, [pc, #184]	; (8001d90 <linkTimer+0x14c>)
 8001cd8:	460b      	mov	r3, r1
 8001cda:	005b      	lsls	r3, r3, #1
 8001cdc:	440b      	add	r3, r1
 8001cde:	00db      	lsls	r3, r3, #3
 8001ce0:	4413      	add	r3, r2
 8001ce2:	3308      	adds	r3, #8
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	68ba      	ldr	r2, [r7, #8]
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d337      	bcc.n	8001d5c <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8001cec:	4b26      	ldr	r3, [pc, #152]	; (8001d88 <linkTimer+0x144>)
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8001cf2:	7b7a      	ldrb	r2, [r7, #13]
 8001cf4:	4926      	ldr	r1, [pc, #152]	; (8001d90 <linkTimer+0x14c>)
 8001cf6:	4613      	mov	r3, r2
 8001cf8:	005b      	lsls	r3, r3, #1
 8001cfa:	4413      	add	r3, r2
 8001cfc:	00db      	lsls	r3, r3, #3
 8001cfe:	440b      	add	r3, r1
 8001d00:	3315      	adds	r3, #21
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001d06:	e013      	b.n	8001d30 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8001d08:	7b7a      	ldrb	r2, [r7, #13]
 8001d0a:	4921      	ldr	r1, [pc, #132]	; (8001d90 <linkTimer+0x14c>)
 8001d0c:	4613      	mov	r3, r2
 8001d0e:	005b      	lsls	r3, r3, #1
 8001d10:	4413      	add	r3, r2
 8001d12:	00db      	lsls	r3, r3, #3
 8001d14:	440b      	add	r3, r1
 8001d16:	3315      	adds	r3, #21
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8001d1c:	7b7a      	ldrb	r2, [r7, #13]
 8001d1e:	491c      	ldr	r1, [pc, #112]	; (8001d90 <linkTimer+0x14c>)
 8001d20:	4613      	mov	r3, r2
 8001d22:	005b      	lsls	r3, r3, #1
 8001d24:	4413      	add	r3, r2
 8001d26:	00db      	lsls	r3, r3, #3
 8001d28:	440b      	add	r3, r1
 8001d2a:	3315      	adds	r3, #21
 8001d2c:	781b      	ldrb	r3, [r3, #0]
 8001d2e:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001d30:	7b3b      	ldrb	r3, [r7, #12]
 8001d32:	2b06      	cmp	r3, #6
 8001d34:	d00b      	beq.n	8001d4e <linkTimer+0x10a>
 8001d36:	7b3a      	ldrb	r2, [r7, #12]
 8001d38:	4915      	ldr	r1, [pc, #84]	; (8001d90 <linkTimer+0x14c>)
 8001d3a:	4613      	mov	r3, r2
 8001d3c:	005b      	lsls	r3, r3, #1
 8001d3e:	4413      	add	r3, r2
 8001d40:	00db      	lsls	r3, r3, #3
 8001d42:	440b      	add	r3, r1
 8001d44:	3308      	adds	r3, #8
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	68ba      	ldr	r2, [r7, #8]
 8001d4a:	429a      	cmp	r2, r3
 8001d4c:	d2dc      	bcs.n	8001d08 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8001d4e:	7b7a      	ldrb	r2, [r7, #13]
 8001d50:	79fb      	ldrb	r3, [r7, #7]
 8001d52:	4611      	mov	r1, r2
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7ff fecf 	bl	8001af8 <LinkTimerAfter>
 8001d5a:	e00f      	b.n	8001d7c <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8001d5c:	4b0a      	ldr	r3, [pc, #40]	; (8001d88 <linkTimer+0x144>)
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	b2da      	uxtb	r2, r3
 8001d62:	79fb      	ldrb	r3, [r7, #7]
 8001d64:	4611      	mov	r1, r2
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7ff ff0c 	bl	8001b84 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8001d6c:	4b06      	ldr	r3, [pc, #24]	; (8001d88 <linkTimer+0x144>)
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	b2da      	uxtb	r2, r3
 8001d72:	4b06      	ldr	r3, [pc, #24]	; (8001d8c <linkTimer+0x148>)
 8001d74:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8001d76:	4a04      	ldr	r2, [pc, #16]	; (8001d88 <linkTimer+0x144>)
 8001d78:	79fb      	ldrb	r3, [r7, #7]
 8001d7a:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8001d7c:	89fb      	ldrh	r3, [r7, #14]
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3710      	adds	r7, #16
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	20000434 	.word	0x20000434
 8001d8c:	20000435 	.word	0x20000435
 8001d90:	200003a4 	.word	0x200003a4
 8001d94:	20000438 	.word	0x20000438

08001d98 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b085      	sub	sp, #20
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	4603      	mov	r3, r0
 8001da0:	460a      	mov	r2, r1
 8001da2:	71fb      	strb	r3, [r7, #7]
 8001da4:	4613      	mov	r3, r2
 8001da6:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8001da8:	4b39      	ldr	r3, [pc, #228]	; (8001e90 <UnlinkTimer+0xf8>)
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	79fa      	ldrb	r2, [r7, #7]
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d111      	bne.n	8001dd8 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001db4:	4b36      	ldr	r3, [pc, #216]	; (8001e90 <UnlinkTimer+0xf8>)
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	b2da      	uxtb	r2, r3
 8001dba:	4b36      	ldr	r3, [pc, #216]	; (8001e94 <UnlinkTimer+0xfc>)
 8001dbc:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8001dbe:	79fa      	ldrb	r2, [r7, #7]
 8001dc0:	4935      	ldr	r1, [pc, #212]	; (8001e98 <UnlinkTimer+0x100>)
 8001dc2:	4613      	mov	r3, r2
 8001dc4:	005b      	lsls	r3, r3, #1
 8001dc6:	4413      	add	r3, r2
 8001dc8:	00db      	lsls	r3, r3, #3
 8001dca:	440b      	add	r3, r1
 8001dcc:	3315      	adds	r3, #21
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	b2da      	uxtb	r2, r3
 8001dd2:	4b2f      	ldr	r3, [pc, #188]	; (8001e90 <UnlinkTimer+0xf8>)
 8001dd4:	701a      	strb	r2, [r3, #0]
 8001dd6:	e03e      	b.n	8001e56 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8001dd8:	79fa      	ldrb	r2, [r7, #7]
 8001dda:	492f      	ldr	r1, [pc, #188]	; (8001e98 <UnlinkTimer+0x100>)
 8001ddc:	4613      	mov	r3, r2
 8001dde:	005b      	lsls	r3, r3, #1
 8001de0:	4413      	add	r3, r2
 8001de2:	00db      	lsls	r3, r3, #3
 8001de4:	440b      	add	r3, r1
 8001de6:	3314      	adds	r3, #20
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8001dec:	79fa      	ldrb	r2, [r7, #7]
 8001dee:	492a      	ldr	r1, [pc, #168]	; (8001e98 <UnlinkTimer+0x100>)
 8001df0:	4613      	mov	r3, r2
 8001df2:	005b      	lsls	r3, r3, #1
 8001df4:	4413      	add	r3, r2
 8001df6:	00db      	lsls	r3, r3, #3
 8001df8:	440b      	add	r3, r1
 8001dfa:	3315      	adds	r3, #21
 8001dfc:	781b      	ldrb	r3, [r3, #0]
 8001dfe:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8001e00:	79f9      	ldrb	r1, [r7, #7]
 8001e02:	7bfa      	ldrb	r2, [r7, #15]
 8001e04:	4824      	ldr	r0, [pc, #144]	; (8001e98 <UnlinkTimer+0x100>)
 8001e06:	460b      	mov	r3, r1
 8001e08:	005b      	lsls	r3, r3, #1
 8001e0a:	440b      	add	r3, r1
 8001e0c:	00db      	lsls	r3, r3, #3
 8001e0e:	4403      	add	r3, r0
 8001e10:	3315      	adds	r3, #21
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	b2d8      	uxtb	r0, r3
 8001e16:	4920      	ldr	r1, [pc, #128]	; (8001e98 <UnlinkTimer+0x100>)
 8001e18:	4613      	mov	r3, r2
 8001e1a:	005b      	lsls	r3, r3, #1
 8001e1c:	4413      	add	r3, r2
 8001e1e:	00db      	lsls	r3, r3, #3
 8001e20:	440b      	add	r3, r1
 8001e22:	3315      	adds	r3, #21
 8001e24:	4602      	mov	r2, r0
 8001e26:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001e28:	7bbb      	ldrb	r3, [r7, #14]
 8001e2a:	2b06      	cmp	r3, #6
 8001e2c:	d013      	beq.n	8001e56 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8001e2e:	79f9      	ldrb	r1, [r7, #7]
 8001e30:	7bba      	ldrb	r2, [r7, #14]
 8001e32:	4819      	ldr	r0, [pc, #100]	; (8001e98 <UnlinkTimer+0x100>)
 8001e34:	460b      	mov	r3, r1
 8001e36:	005b      	lsls	r3, r3, #1
 8001e38:	440b      	add	r3, r1
 8001e3a:	00db      	lsls	r3, r3, #3
 8001e3c:	4403      	add	r3, r0
 8001e3e:	3314      	adds	r3, #20
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	b2d8      	uxtb	r0, r3
 8001e44:	4914      	ldr	r1, [pc, #80]	; (8001e98 <UnlinkTimer+0x100>)
 8001e46:	4613      	mov	r3, r2
 8001e48:	005b      	lsls	r3, r3, #1
 8001e4a:	4413      	add	r3, r2
 8001e4c:	00db      	lsls	r3, r3, #3
 8001e4e:	440b      	add	r3, r1
 8001e50:	3314      	adds	r3, #20
 8001e52:	4602      	mov	r2, r0
 8001e54:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8001e56:	79fa      	ldrb	r2, [r7, #7]
 8001e58:	490f      	ldr	r1, [pc, #60]	; (8001e98 <UnlinkTimer+0x100>)
 8001e5a:	4613      	mov	r3, r2
 8001e5c:	005b      	lsls	r3, r3, #1
 8001e5e:	4413      	add	r3, r2
 8001e60:	00db      	lsls	r3, r3, #3
 8001e62:	440b      	add	r3, r1
 8001e64:	330c      	adds	r3, #12
 8001e66:	2201      	movs	r2, #1
 8001e68:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8001e6a:	4b09      	ldr	r3, [pc, #36]	; (8001e90 <UnlinkTimer+0xf8>)
 8001e6c:	781b      	ldrb	r3, [r3, #0]
 8001e6e:	b2db      	uxtb	r3, r3
 8001e70:	2b06      	cmp	r3, #6
 8001e72:	d107      	bne.n	8001e84 <UnlinkTimer+0xec>
 8001e74:	79bb      	ldrb	r3, [r7, #6]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d104      	bne.n	8001e84 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001e7a:	4b08      	ldr	r3, [pc, #32]	; (8001e9c <UnlinkTimer+0x104>)
 8001e7c:	f04f 32ff 	mov.w	r2, #4294967295
 8001e80:	601a      	str	r2, [r3, #0]
  }

  return;
 8001e82:	bf00      	nop
 8001e84:	bf00      	nop
}
 8001e86:	3714      	adds	r7, #20
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr
 8001e90:	20000434 	.word	0x20000434
 8001e94:	20000435 	.word	0x20000435
 8001e98:	200003a4 	.word	0x200003a4
 8001e9c:	20000438 	.word	0x20000438

08001ea0 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8001ea6:	4b1a      	ldr	r3, [pc, #104]	; (8001f10 <ReturnTimeElapsed+0x70>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eae:	d026      	beq.n	8001efe <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8001eb0:	f7ff fe02 	bl	8001ab8 <ReadRtcSsrValue>
 8001eb4:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8001eb6:	4b16      	ldr	r3, [pc, #88]	; (8001f10 <ReturnTimeElapsed+0x70>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	687a      	ldr	r2, [r7, #4]
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d805      	bhi.n	8001ecc <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8001ec0:	4b13      	ldr	r3, [pc, #76]	; (8001f10 <ReturnTimeElapsed+0x70>)
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	1ad3      	subs	r3, r2, r3
 8001ec8:	607b      	str	r3, [r7, #4]
 8001eca:	e00a      	b.n	8001ee2 <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8001ecc:	4b11      	ldr	r3, [pc, #68]	; (8001f14 <ReturnTimeElapsed+0x74>)
 8001ece:	881b      	ldrh	r3, [r3, #0]
 8001ed0:	461a      	mov	r2, r3
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8001ed8:	4b0d      	ldr	r3, [pc, #52]	; (8001f10 <ReturnTimeElapsed+0x70>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	683a      	ldr	r2, [r7, #0]
 8001ede:	4413      	add	r3, r2
 8001ee0:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8001ee2:	4b0d      	ldr	r3, [pc, #52]	; (8001f18 <ReturnTimeElapsed+0x78>)
 8001ee4:	781b      	ldrb	r3, [r3, #0]
 8001ee6:	461a      	mov	r2, r3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	fb02 f303 	mul.w	r3, r2, r3
 8001eee:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8001ef0:	4b0a      	ldr	r3, [pc, #40]	; (8001f1c <ReturnTimeElapsed+0x7c>)
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	461a      	mov	r2, r3
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	40d3      	lsrs	r3, r2
 8001efa:	607b      	str	r3, [r7, #4]
 8001efc:	e001      	b.n	8001f02 <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8001efe:	2300      	movs	r3, #0
 8001f00:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	b29b      	uxth	r3, r3
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3708      	adds	r7, #8
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	20000438 	.word	0x20000438
 8001f14:	20000440 	.word	0x20000440
 8001f18:	2000043e 	.word	0x2000043e
 8001f1c:	2000043d 	.word	0x2000043d

08001f20 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	4603      	mov	r3, r0
 8001f28:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 8001f2a:	88fb      	ldrh	r3, [r7, #6]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d108      	bne.n	8001f42 <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001f30:	f7ff fdc2 	bl	8001ab8 <ReadRtcSsrValue>
 8001f34:	4603      	mov	r3, r0
 8001f36:	4a21      	ldr	r2, [pc, #132]	; (8001fbc <RestartWakeupCounter+0x9c>)
 8001f38:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001f3a:	2003      	movs	r0, #3
 8001f3c:	f003 fa85 	bl	800544a <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8001f40:	e039      	b.n	8001fb6 <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8001f42:	88fb      	ldrh	r3, [r7, #6]
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d803      	bhi.n	8001f50 <RestartWakeupCounter+0x30>
 8001f48:	4b1d      	ldr	r3, [pc, #116]	; (8001fc0 <RestartWakeupCounter+0xa0>)
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d002      	beq.n	8001f56 <RestartWakeupCounter+0x36>
      Value -= 1;
 8001f50:	88fb      	ldrh	r3, [r7, #6]
 8001f52:	3b01      	subs	r3, #1
 8001f54:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001f56:	bf00      	nop
 8001f58:	4b1a      	ldr	r3, [pc, #104]	; (8001fc4 <RestartWakeupCounter+0xa4>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	68db      	ldr	r3, [r3, #12]
 8001f5e:	f003 0304 	and.w	r3, r3, #4
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d0f8      	beq.n	8001f58 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001f66:	4b17      	ldr	r3, [pc, #92]	; (8001fc4 <RestartWakeupCounter+0xa4>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	b2da      	uxtb	r2, r3
 8001f6e:	4b15      	ldr	r3, [pc, #84]	; (8001fc4 <RestartWakeupCounter+0xa4>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001f76:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001f78:	4b13      	ldr	r3, [pc, #76]	; (8001fc8 <RestartWakeupCounter+0xa8>)
 8001f7a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001f7e:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001f80:	2003      	movs	r0, #3
 8001f82:	f003 fa70 	bl	8005466 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8001f86:	4b11      	ldr	r3, [pc, #68]	; (8001fcc <RestartWakeupCounter+0xac>)
 8001f88:	695b      	ldr	r3, [r3, #20]
 8001f8a:	0c1b      	lsrs	r3, r3, #16
 8001f8c:	041b      	lsls	r3, r3, #16
 8001f8e:	88fa      	ldrh	r2, [r7, #6]
 8001f90:	490e      	ldr	r1, [pc, #56]	; (8001fcc <RestartWakeupCounter+0xac>)
 8001f92:	4313      	orrs	r3, r2
 8001f94:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001f96:	f7ff fd8f 	bl	8001ab8 <ReadRtcSsrValue>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	4a07      	ldr	r2, [pc, #28]	; (8001fbc <RestartWakeupCounter+0x9c>)
 8001f9e:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8001fa0:	4b08      	ldr	r3, [pc, #32]	; (8001fc4 <RestartWakeupCounter+0xa4>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	689a      	ldr	r2, [r3, #8]
 8001fa6:	4b07      	ldr	r3, [pc, #28]	; (8001fc4 <RestartWakeupCounter+0xa4>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001fae:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8001fb0:	f3af 8000 	nop.w
  return ;
 8001fb4:	bf00      	nop
}
 8001fb6:	3708      	adds	r7, #8
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	20000438 	.word	0x20000438
 8001fc0:	2000043d 	.word	0x2000043d
 8001fc4:	2000068c 	.word	0x2000068c
 8001fc8:	58000800 	.word	0x58000800
 8001fcc:	40002800 	.word	0x40002800

08001fd0 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b084      	sub	sp, #16
 8001fd4:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001fd6:	4b45      	ldr	r3, [pc, #276]	; (80020ec <RescheduleTimerList+0x11c>)
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fe2:	d107      	bne.n	8001ff4 <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8001fe4:	bf00      	nop
 8001fe6:	4b42      	ldr	r3, [pc, #264]	; (80020f0 <RescheduleTimerList+0x120>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	f003 0304 	and.w	r3, r3, #4
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d1f8      	bne.n	8001fe6 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8001ff4:	4b3e      	ldr	r3, [pc, #248]	; (80020f0 <RescheduleTimerList+0x120>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	689a      	ldr	r2, [r3, #8]
 8001ffa:	4b3d      	ldr	r3, [pc, #244]	; (80020f0 <RescheduleTimerList+0x120>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002002:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8002004:	4b3b      	ldr	r3, [pc, #236]	; (80020f4 <RescheduleTimerList+0x124>)
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 800200a:	7bfa      	ldrb	r2, [r7, #15]
 800200c:	493a      	ldr	r1, [pc, #232]	; (80020f8 <RescheduleTimerList+0x128>)
 800200e:	4613      	mov	r3, r2
 8002010:	005b      	lsls	r3, r3, #1
 8002012:	4413      	add	r3, r2
 8002014:	00db      	lsls	r3, r3, #3
 8002016:	440b      	add	r3, r1
 8002018:	3308      	adds	r3, #8
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 800201e:	f7ff ff3f 	bl	8001ea0 <ReturnTimeElapsed>
 8002022:	4603      	mov	r3, r0
 8002024:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8002026:	88fb      	ldrh	r3, [r7, #6]
 8002028:	68ba      	ldr	r2, [r7, #8]
 800202a:	429a      	cmp	r2, r3
 800202c:	d205      	bcs.n	800203a <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 800202e:	2300      	movs	r3, #0
 8002030:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8002032:	4b32      	ldr	r3, [pc, #200]	; (80020fc <RescheduleTimerList+0x12c>)
 8002034:	2201      	movs	r2, #1
 8002036:	701a      	strb	r2, [r3, #0]
 8002038:	e04d      	b.n	80020d6 <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 800203a:	88fb      	ldrh	r3, [r7, #6]
 800203c:	4a30      	ldr	r2, [pc, #192]	; (8002100 <RescheduleTimerList+0x130>)
 800203e:	8812      	ldrh	r2, [r2, #0]
 8002040:	b292      	uxth	r2, r2
 8002042:	4413      	add	r3, r2
 8002044:	461a      	mov	r2, r3
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	4293      	cmp	r3, r2
 800204a:	d906      	bls.n	800205a <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 800204c:	4b2c      	ldr	r3, [pc, #176]	; (8002100 <RescheduleTimerList+0x130>)
 800204e:	881b      	ldrh	r3, [r3, #0]
 8002050:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8002052:	4b2a      	ldr	r3, [pc, #168]	; (80020fc <RescheduleTimerList+0x12c>)
 8002054:	2200      	movs	r2, #0
 8002056:	701a      	strb	r2, [r3, #0]
 8002058:	e03d      	b.n	80020d6 <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	b29a      	uxth	r2, r3
 800205e:	88fb      	ldrh	r3, [r7, #6]
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8002064:	4b25      	ldr	r3, [pc, #148]	; (80020fc <RescheduleTimerList+0x12c>)
 8002066:	2201      	movs	r2, #1
 8002068:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800206a:	e034      	b.n	80020d6 <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 800206c:	7bfa      	ldrb	r2, [r7, #15]
 800206e:	4922      	ldr	r1, [pc, #136]	; (80020f8 <RescheduleTimerList+0x128>)
 8002070:	4613      	mov	r3, r2
 8002072:	005b      	lsls	r3, r3, #1
 8002074:	4413      	add	r3, r2
 8002076:	00db      	lsls	r3, r3, #3
 8002078:	440b      	add	r3, r1
 800207a:	3308      	adds	r3, #8
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	88fb      	ldrh	r3, [r7, #6]
 8002080:	429a      	cmp	r2, r3
 8002082:	d20a      	bcs.n	800209a <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8002084:	7bfa      	ldrb	r2, [r7, #15]
 8002086:	491c      	ldr	r1, [pc, #112]	; (80020f8 <RescheduleTimerList+0x128>)
 8002088:	4613      	mov	r3, r2
 800208a:	005b      	lsls	r3, r3, #1
 800208c:	4413      	add	r3, r2
 800208e:	00db      	lsls	r3, r3, #3
 8002090:	440b      	add	r3, r1
 8002092:	3308      	adds	r3, #8
 8002094:	2200      	movs	r2, #0
 8002096:	601a      	str	r2, [r3, #0]
 8002098:	e013      	b.n	80020c2 <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 800209a:	7bfa      	ldrb	r2, [r7, #15]
 800209c:	4916      	ldr	r1, [pc, #88]	; (80020f8 <RescheduleTimerList+0x128>)
 800209e:	4613      	mov	r3, r2
 80020a0:	005b      	lsls	r3, r3, #1
 80020a2:	4413      	add	r3, r2
 80020a4:	00db      	lsls	r3, r3, #3
 80020a6:	440b      	add	r3, r1
 80020a8:	3308      	adds	r3, #8
 80020aa:	6819      	ldr	r1, [r3, #0]
 80020ac:	88fb      	ldrh	r3, [r7, #6]
 80020ae:	7bfa      	ldrb	r2, [r7, #15]
 80020b0:	1ac9      	subs	r1, r1, r3
 80020b2:	4811      	ldr	r0, [pc, #68]	; (80020f8 <RescheduleTimerList+0x128>)
 80020b4:	4613      	mov	r3, r2
 80020b6:	005b      	lsls	r3, r3, #1
 80020b8:	4413      	add	r3, r2
 80020ba:	00db      	lsls	r3, r3, #3
 80020bc:	4403      	add	r3, r0
 80020be:	3308      	adds	r3, #8
 80020c0:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 80020c2:	7bfa      	ldrb	r2, [r7, #15]
 80020c4:	490c      	ldr	r1, [pc, #48]	; (80020f8 <RescheduleTimerList+0x128>)
 80020c6:	4613      	mov	r3, r2
 80020c8:	005b      	lsls	r3, r3, #1
 80020ca:	4413      	add	r3, r2
 80020cc:	00db      	lsls	r3, r3, #3
 80020ce:	440b      	add	r3, r1
 80020d0:	3315      	adds	r3, #21
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80020d6:	7bfb      	ldrb	r3, [r7, #15]
 80020d8:	2b06      	cmp	r3, #6
 80020da:	d1c7      	bne.n	800206c <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 80020dc:	89bb      	ldrh	r3, [r7, #12]
 80020de:	4618      	mov	r0, r3
 80020e0:	f7ff ff1e 	bl	8001f20 <RestartWakeupCounter>

  return ;
 80020e4:	bf00      	nop
}
 80020e6:	3710      	adds	r7, #16
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	40002800 	.word	0x40002800
 80020f0:	2000068c 	.word	0x2000068c
 80020f4:	20000434 	.word	0x20000434
 80020f8:	200003a4 	.word	0x200003a4
 80020fc:	2000043c 	.word	0x2000043c
 8002100:	20000442 	.word	0x20000442

08002104 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b08a      	sub	sp, #40	; 0x28
 8002108:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800210a:	f3ef 8310 	mrs	r3, PRIMASK
 800210e:	617b      	str	r3, [r7, #20]
  return(result);
 8002110:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8002112:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8002114:	b672      	cpsid	i
}
 8002116:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002118:	4b59      	ldr	r3, [pc, #356]	; (8002280 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	22ca      	movs	r2, #202	; 0xca
 800211e:	625a      	str	r2, [r3, #36]	; 0x24
 8002120:	4b57      	ldr	r3, [pc, #348]	; (8002280 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	2253      	movs	r2, #83	; 0x53
 8002126:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 8002128:	4b55      	ldr	r3, [pc, #340]	; (8002280 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	689a      	ldr	r2, [r3, #8]
 800212e:	4b54      	ldr	r3, [pc, #336]	; (8002280 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002136:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8002138:	4b52      	ldr	r3, [pc, #328]	; (8002284 <HW_TS_RTC_Wakeup_Handler+0x180>)
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8002140:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002144:	4950      	ldr	r1, [pc, #320]	; (8002288 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002146:	4613      	mov	r3, r2
 8002148:	005b      	lsls	r3, r3, #1
 800214a:	4413      	add	r3, r2
 800214c:	00db      	lsls	r3, r3, #3
 800214e:	440b      	add	r3, r1
 8002150:	330c      	adds	r3, #12
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	b2db      	uxtb	r3, r3
 8002156:	2b02      	cmp	r3, #2
 8002158:	d16e      	bne.n	8002238 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 800215a:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800215e:	494a      	ldr	r1, [pc, #296]	; (8002288 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002160:	4613      	mov	r3, r2
 8002162:	005b      	lsls	r3, r3, #1
 8002164:	4413      	add	r3, r2
 8002166:	00db      	lsls	r3, r3, #3
 8002168:	440b      	add	r3, r1
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 800216e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002172:	4945      	ldr	r1, [pc, #276]	; (8002288 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002174:	4613      	mov	r3, r2
 8002176:	005b      	lsls	r3, r3, #1
 8002178:	4413      	add	r3, r2
 800217a:	00db      	lsls	r3, r3, #3
 800217c:	440b      	add	r3, r1
 800217e:	3310      	adds	r3, #16
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8002184:	4b41      	ldr	r3, [pc, #260]	; (800228c <HW_TS_RTC_Wakeup_Handler+0x188>)
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	b2db      	uxtb	r3, r3
 800218a:	2b00      	cmp	r3, #0
 800218c:	d04c      	beq.n	8002228 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 800218e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002192:	493d      	ldr	r1, [pc, #244]	; (8002288 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002194:	4613      	mov	r3, r2
 8002196:	005b      	lsls	r3, r3, #1
 8002198:	4413      	add	r3, r2
 800219a:	00db      	lsls	r3, r3, #3
 800219c:	440b      	add	r3, r1
 800219e:	330d      	adds	r3, #13
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	b2db      	uxtb	r3, r3
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d124      	bne.n	80021f2 <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 80021a8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80021ac:	2101      	movs	r1, #1
 80021ae:	4618      	mov	r0, r3
 80021b0:	f7ff fdf2 	bl	8001d98 <UnlinkTimer>
 80021b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b6:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	f383 8810 	msr	PRIMASK, r3
}
 80021be:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 80021c0:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80021c4:	4930      	ldr	r1, [pc, #192]	; (8002288 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80021c6:	4613      	mov	r3, r2
 80021c8:	005b      	lsls	r3, r3, #1
 80021ca:	4413      	add	r3, r2
 80021cc:	00db      	lsls	r3, r3, #3
 80021ce:	440b      	add	r3, r1
 80021d0:	3304      	adds	r3, #4
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80021d8:	4611      	mov	r1, r2
 80021da:	4618      	mov	r0, r3
 80021dc:	f000 f9b8 	bl	8002550 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80021e0:	4b27      	ldr	r3, [pc, #156]	; (8002280 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	22ca      	movs	r2, #202	; 0xca
 80021e6:	625a      	str	r2, [r3, #36]	; 0x24
 80021e8:	4b25      	ldr	r3, [pc, #148]	; (8002280 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	2253      	movs	r2, #83	; 0x53
 80021ee:	625a      	str	r2, [r3, #36]	; 0x24
 80021f0:	e012      	b.n	8002218 <HW_TS_RTC_Wakeup_Handler+0x114>
 80021f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	f383 8810 	msr	PRIMASK, r3
}
 80021fc:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 80021fe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002202:	4618      	mov	r0, r3
 8002204:	f000 f920 	bl	8002448 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002208:	4b1d      	ldr	r3, [pc, #116]	; (8002280 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	22ca      	movs	r2, #202	; 0xca
 800220e:	625a      	str	r2, [r3, #36]	; 0x24
 8002210:	4b1b      	ldr	r3, [pc, #108]	; (8002280 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	2253      	movs	r2, #83	; 0x53
 8002216:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8002218:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800221c:	69fa      	ldr	r2, [r7, #28]
 800221e:	4619      	mov	r1, r3
 8002220:	69b8      	ldr	r0, [r7, #24]
 8002222:	f000 fa1b 	bl	800265c <HW_TS_RTC_Int_AppNot>
 8002226:	e022      	b.n	800226e <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 8002228:	f7ff fed2 	bl	8001fd0 <RescheduleTimerList>
 800222c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	f383 8810 	msr	PRIMASK, r3
}
 8002236:	e01a      	b.n	800226e <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8002238:	bf00      	nop
 800223a:	4b11      	ldr	r3, [pc, #68]	; (8002280 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	f003 0304 	and.w	r3, r3, #4
 8002244:	2b00      	cmp	r3, #0
 8002246:	d0f8      	beq.n	800223a <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8002248:	4b0d      	ldr	r3, [pc, #52]	; (8002280 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	68db      	ldr	r3, [r3, #12]
 800224e:	b2da      	uxtb	r2, r3
 8002250:	4b0b      	ldr	r3, [pc, #44]	; (8002280 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002258:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 800225a:	4b0d      	ldr	r3, [pc, #52]	; (8002290 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 800225c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002260:	60da      	str	r2, [r3, #12]
 8002262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002264:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	f383 8810 	msr	PRIMASK, r3
}
 800226c:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 800226e:	4b04      	ldr	r3, [pc, #16]	; (8002280 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	22ff      	movs	r2, #255	; 0xff
 8002274:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 8002276:	bf00      	nop
}
 8002278:	3728      	adds	r7, #40	; 0x28
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	2000068c 	.word	0x2000068c
 8002284:	20000434 	.word	0x20000434
 8002288:	200003a4 	.word	0x200003a4
 800228c:	2000043c 	.word	0x2000043c
 8002290:	58000800 	.word	0x58000800

08002294 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b088      	sub	sp, #32
 8002298:	af00      	add	r7, sp, #0
 800229a:	4603      	mov	r3, r0
 800229c:	6039      	str	r1, [r7, #0]
 800229e:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80022a0:	4b5e      	ldr	r3, [pc, #376]	; (800241c <HW_TS_Init+0x188>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	22ca      	movs	r2, #202	; 0xca
 80022a6:	625a      	str	r2, [r3, #36]	; 0x24
 80022a8:	4b5c      	ldr	r3, [pc, #368]	; (800241c <HW_TS_Init+0x188>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	2253      	movs	r2, #83	; 0x53
 80022ae:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80022b0:	4b5b      	ldr	r3, [pc, #364]	; (8002420 <HW_TS_Init+0x18c>)
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	4a5a      	ldr	r2, [pc, #360]	; (8002420 <HW_TS_Init+0x18c>)
 80022b6:	f043 0320 	orr.w	r3, r3, #32
 80022ba:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 80022bc:	4b58      	ldr	r3, [pc, #352]	; (8002420 <HW_TS_Init+0x18c>)
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	f003 0307 	and.w	r3, r3, #7
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	f1c3 0304 	rsb	r3, r3, #4
 80022cc:	b2da      	uxtb	r2, r3
 80022ce:	4b55      	ldr	r3, [pc, #340]	; (8002424 <HW_TS_Init+0x190>)
 80022d0:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 80022d2:	4b53      	ldr	r3, [pc, #332]	; (8002420 <HW_TS_Init+0x18c>)
 80022d4:	691b      	ldr	r3, [r3, #16]
 80022d6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80022da:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 80022de:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022e0:	693a      	ldr	r2, [r7, #16]
 80022e2:	fa92 f2a2 	rbit	r2, r2
 80022e6:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80022e8:	68fa      	ldr	r2, [r7, #12]
 80022ea:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80022ec:	697a      	ldr	r2, [r7, #20]
 80022ee:	2a00      	cmp	r2, #0
 80022f0:	d101      	bne.n	80022f6 <HW_TS_Init+0x62>
  {
    return 32U;
 80022f2:	2220      	movs	r2, #32
 80022f4:	e003      	b.n	80022fe <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 80022f6:	697a      	ldr	r2, [r7, #20]
 80022f8:	fab2 f282 	clz	r2, r2
 80022fc:	b2d2      	uxtb	r2, r2
 80022fe:	40d3      	lsrs	r3, r2
 8002300:	b2db      	uxtb	r3, r3
 8002302:	3301      	adds	r3, #1
 8002304:	b2da      	uxtb	r2, r3
 8002306:	4b48      	ldr	r3, [pc, #288]	; (8002428 <HW_TS_Init+0x194>)
 8002308:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 800230a:	4b45      	ldr	r3, [pc, #276]	; (8002420 <HW_TS_Init+0x18c>)
 800230c:	691b      	ldr	r3, [r3, #16]
 800230e:	b29b      	uxth	r3, r3
 8002310:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002314:	b29b      	uxth	r3, r3
 8002316:	3301      	adds	r3, #1
 8002318:	b29a      	uxth	r2, r3
 800231a:	4b44      	ldr	r3, [pc, #272]	; (800242c <HW_TS_Init+0x198>)
 800231c:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 800231e:	4b43      	ldr	r3, [pc, #268]	; (800242c <HW_TS_Init+0x198>)
 8002320:	881b      	ldrh	r3, [r3, #0]
 8002322:	3b01      	subs	r3, #1
 8002324:	4a40      	ldr	r2, [pc, #256]	; (8002428 <HW_TS_Init+0x194>)
 8002326:	7812      	ldrb	r2, [r2, #0]
 8002328:	fb02 f303 	mul.w	r3, r2, r3
 800232c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002330:	4a3c      	ldr	r2, [pc, #240]	; (8002424 <HW_TS_Init+0x190>)
 8002332:	7812      	ldrb	r2, [r2, #0]
 8002334:	40d3      	lsrs	r3, r2
 8002336:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8002338:	69bb      	ldr	r3, [r7, #24]
 800233a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800233e:	4293      	cmp	r3, r2
 8002340:	d904      	bls.n	800234c <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8002342:	4b3b      	ldr	r3, [pc, #236]	; (8002430 <HW_TS_Init+0x19c>)
 8002344:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002348:	801a      	strh	r2, [r3, #0]
 800234a:	e003      	b.n	8002354 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 800234c:	69bb      	ldr	r3, [r7, #24]
 800234e:	b29a      	uxth	r2, r3
 8002350:	4b37      	ldr	r3, [pc, #220]	; (8002430 <HW_TS_Init+0x19c>)
 8002352:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8002354:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002358:	f7ff fb9c 	bl	8001a94 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 800235c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002360:	f7ff fb84 	bl	8001a6c <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8002364:	79fb      	ldrb	r3, [r7, #7]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d13d      	bne.n	80023e6 <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800236a:	4b32      	ldr	r3, [pc, #200]	; (8002434 <HW_TS_Init+0x1a0>)
 800236c:	2201      	movs	r2, #1
 800236e:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8002370:	4b31      	ldr	r3, [pc, #196]	; (8002438 <HW_TS_Init+0x1a4>)
 8002372:	f04f 32ff 	mov.w	r2, #4294967295
 8002376:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8002378:	2300      	movs	r3, #0
 800237a:	77fb      	strb	r3, [r7, #31]
 800237c:	e00c      	b.n	8002398 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 800237e:	7ffa      	ldrb	r2, [r7, #31]
 8002380:	492e      	ldr	r1, [pc, #184]	; (800243c <HW_TS_Init+0x1a8>)
 8002382:	4613      	mov	r3, r2
 8002384:	005b      	lsls	r3, r3, #1
 8002386:	4413      	add	r3, r2
 8002388:	00db      	lsls	r3, r3, #3
 800238a:	440b      	add	r3, r1
 800238c:	330c      	adds	r3, #12
 800238e:	2200      	movs	r2, #0
 8002390:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8002392:	7ffb      	ldrb	r3, [r7, #31]
 8002394:	3301      	adds	r3, #1
 8002396:	77fb      	strb	r3, [r7, #31]
 8002398:	7ffb      	ldrb	r3, [r7, #31]
 800239a:	2b05      	cmp	r3, #5
 800239c:	d9ef      	bls.n	800237e <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 800239e:	4b28      	ldr	r3, [pc, #160]	; (8002440 <HW_TS_Init+0x1ac>)
 80023a0:	2206      	movs	r2, #6
 80023a2:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 80023a4:	4b1d      	ldr	r3, [pc, #116]	; (800241c <HW_TS_Init+0x188>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	689a      	ldr	r2, [r3, #8]
 80023aa:	4b1c      	ldr	r3, [pc, #112]	; (800241c <HW_TS_Init+0x188>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023b2:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 80023b4:	4b19      	ldr	r3, [pc, #100]	; (800241c <HW_TS_Init+0x188>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	68db      	ldr	r3, [r3, #12]
 80023ba:	b2da      	uxtb	r2, r3
 80023bc:	4b17      	ldr	r3, [pc, #92]	; (800241c <HW_TS_Init+0x188>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80023c4:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 80023c6:	4b1f      	ldr	r3, [pc, #124]	; (8002444 <HW_TS_Init+0x1b0>)
 80023c8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80023cc:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 80023ce:	2003      	movs	r0, #3
 80023d0:	f003 f849 	bl	8005466 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 80023d4:	4b11      	ldr	r3, [pc, #68]	; (800241c <HW_TS_Init+0x188>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	689a      	ldr	r2, [r3, #8]
 80023da:	4b10      	ldr	r3, [pc, #64]	; (800241c <HW_TS_Init+0x188>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80023e2:	609a      	str	r2, [r3, #8]
 80023e4:	e009      	b.n	80023fa <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 80023e6:	4b0d      	ldr	r3, [pc, #52]	; (800241c <HW_TS_Init+0x188>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d002      	beq.n	80023fa <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80023f4:	2003      	movs	r0, #3
 80023f6:	f003 f828 	bl	800544a <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80023fa:	4b08      	ldr	r3, [pc, #32]	; (800241c <HW_TS_Init+0x188>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	22ff      	movs	r2, #255	; 0xff
 8002400:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8002402:	2200      	movs	r2, #0
 8002404:	2103      	movs	r1, #3
 8002406:	2003      	movs	r0, #3
 8002408:	f002 ffdd 	bl	80053c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 800240c:	2003      	movs	r0, #3
 800240e:	f002 fff4 	bl	80053fa <HAL_NVIC_EnableIRQ>

  return;
 8002412:	bf00      	nop
}
 8002414:	3720      	adds	r7, #32
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	2000068c 	.word	0x2000068c
 8002420:	40002800 	.word	0x40002800
 8002424:	2000043d 	.word	0x2000043d
 8002428:	2000043e 	.word	0x2000043e
 800242c:	20000440 	.word	0x20000440
 8002430:	20000442 	.word	0x20000442
 8002434:	2000043c 	.word	0x2000043c
 8002438:	20000438 	.word	0x20000438
 800243c:	200003a4 	.word	0x200003a4
 8002440:	20000434 	.word	0x20000434
 8002444:	58000800 	.word	0x58000800

08002448 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b086      	sub	sp, #24
 800244c:	af00      	add	r7, sp, #0
 800244e:	4603      	mov	r3, r0
 8002450:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002452:	f3ef 8310 	mrs	r3, PRIMASK
 8002456:	60fb      	str	r3, [r7, #12]
  return(result);
 8002458:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800245a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800245c:	b672      	cpsid	i
}
 800245e:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8002460:	2003      	movs	r0, #3
 8002462:	f002 ffd8 	bl	8005416 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002466:	4b34      	ldr	r3, [pc, #208]	; (8002538 <HW_TS_Stop+0xf0>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	22ca      	movs	r2, #202	; 0xca
 800246c:	625a      	str	r2, [r3, #36]	; 0x24
 800246e:	4b32      	ldr	r3, [pc, #200]	; (8002538 <HW_TS_Stop+0xf0>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	2253      	movs	r2, #83	; 0x53
 8002474:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8002476:	79fa      	ldrb	r2, [r7, #7]
 8002478:	4930      	ldr	r1, [pc, #192]	; (800253c <HW_TS_Stop+0xf4>)
 800247a:	4613      	mov	r3, r2
 800247c:	005b      	lsls	r3, r3, #1
 800247e:	4413      	add	r3, r2
 8002480:	00db      	lsls	r3, r3, #3
 8002482:	440b      	add	r3, r1
 8002484:	330c      	adds	r3, #12
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	b2db      	uxtb	r3, r3
 800248a:	2b02      	cmp	r3, #2
 800248c:	d142      	bne.n	8002514 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 800248e:	79fb      	ldrb	r3, [r7, #7]
 8002490:	2100      	movs	r1, #0
 8002492:	4618      	mov	r0, r3
 8002494:	f7ff fc80 	bl	8001d98 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8002498:	4b29      	ldr	r3, [pc, #164]	; (8002540 <HW_TS_Stop+0xf8>)
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800249e:	7cfb      	ldrb	r3, [r7, #19]
 80024a0:	2b06      	cmp	r3, #6
 80024a2:	d12f      	bne.n	8002504 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80024a4:	4b27      	ldr	r3, [pc, #156]	; (8002544 <HW_TS_Stop+0xfc>)
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024b0:	d107      	bne.n	80024c2 <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 80024b2:	bf00      	nop
 80024b4:	4b20      	ldr	r3, [pc, #128]	; (8002538 <HW_TS_Stop+0xf0>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	68db      	ldr	r3, [r3, #12]
 80024ba:	f003 0304 	and.w	r3, r3, #4
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d1f8      	bne.n	80024b4 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 80024c2:	4b1d      	ldr	r3, [pc, #116]	; (8002538 <HW_TS_Stop+0xf0>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	689a      	ldr	r2, [r3, #8]
 80024c8:	4b1b      	ldr	r3, [pc, #108]	; (8002538 <HW_TS_Stop+0xf0>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024d0:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80024d2:	bf00      	nop
 80024d4:	4b18      	ldr	r3, [pc, #96]	; (8002538 <HW_TS_Stop+0xf0>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	68db      	ldr	r3, [r3, #12]
 80024da:	f003 0304 	and.w	r3, r3, #4
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d0f8      	beq.n	80024d4 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80024e2:	4b15      	ldr	r3, [pc, #84]	; (8002538 <HW_TS_Stop+0xf0>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	b2da      	uxtb	r2, r3
 80024ea:	4b13      	ldr	r3, [pc, #76]	; (8002538 <HW_TS_Stop+0xf0>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80024f2:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80024f4:	4b14      	ldr	r3, [pc, #80]	; (8002548 <HW_TS_Stop+0x100>)
 80024f6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80024fa:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80024fc:	2003      	movs	r0, #3
 80024fe:	f002 ffb2 	bl	8005466 <HAL_NVIC_ClearPendingIRQ>
 8002502:	e007      	b.n	8002514 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8002504:	4b11      	ldr	r3, [pc, #68]	; (800254c <HW_TS_Stop+0x104>)
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	b2db      	uxtb	r3, r3
 800250a:	7cfa      	ldrb	r2, [r7, #19]
 800250c:	429a      	cmp	r2, r3
 800250e:	d001      	beq.n	8002514 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 8002510:	f7ff fd5e 	bl	8001fd0 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8002514:	4b08      	ldr	r3, [pc, #32]	; (8002538 <HW_TS_Stop+0xf0>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	22ff      	movs	r2, #255	; 0xff
 800251a:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 800251c:	2003      	movs	r0, #3
 800251e:	f002 ff6c 	bl	80053fa <HAL_NVIC_EnableIRQ>
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	f383 8810 	msr	PRIMASK, r3
}
 800252c:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 800252e:	bf00      	nop
}
 8002530:	3718      	adds	r7, #24
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	2000068c 	.word	0x2000068c
 800253c:	200003a4 	.word	0x200003a4
 8002540:	20000434 	.word	0x20000434
 8002544:	40002800 	.word	0x40002800
 8002548:	58000800 	.word	0x58000800
 800254c:	20000435 	.word	0x20000435

08002550 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b086      	sub	sp, #24
 8002554:	af00      	add	r7, sp, #0
 8002556:	4603      	mov	r3, r0
 8002558:	6039      	str	r1, [r7, #0]
 800255a:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 800255c:	79fa      	ldrb	r2, [r7, #7]
 800255e:	493b      	ldr	r1, [pc, #236]	; (800264c <HW_TS_Start+0xfc>)
 8002560:	4613      	mov	r3, r2
 8002562:	005b      	lsls	r3, r3, #1
 8002564:	4413      	add	r3, r2
 8002566:	00db      	lsls	r3, r3, #3
 8002568:	440b      	add	r3, r1
 800256a:	330c      	adds	r3, #12
 800256c:	781b      	ldrb	r3, [r3, #0]
 800256e:	b2db      	uxtb	r3, r3
 8002570:	2b02      	cmp	r3, #2
 8002572:	d103      	bne.n	800257c <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8002574:	79fb      	ldrb	r3, [r7, #7]
 8002576:	4618      	mov	r0, r3
 8002578:	f7ff ff66 	bl	8002448 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800257c:	f3ef 8310 	mrs	r3, PRIMASK
 8002580:	60fb      	str	r3, [r7, #12]
  return(result);
 8002582:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8002584:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002586:	b672      	cpsid	i
}
 8002588:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 800258a:	2003      	movs	r0, #3
 800258c:	f002 ff43 	bl	8005416 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002590:	4b2f      	ldr	r3, [pc, #188]	; (8002650 <HW_TS_Start+0x100>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	22ca      	movs	r2, #202	; 0xca
 8002596:	625a      	str	r2, [r3, #36]	; 0x24
 8002598:	4b2d      	ldr	r3, [pc, #180]	; (8002650 <HW_TS_Start+0x100>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	2253      	movs	r2, #83	; 0x53
 800259e:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 80025a0:	79fa      	ldrb	r2, [r7, #7]
 80025a2:	492a      	ldr	r1, [pc, #168]	; (800264c <HW_TS_Start+0xfc>)
 80025a4:	4613      	mov	r3, r2
 80025a6:	005b      	lsls	r3, r3, #1
 80025a8:	4413      	add	r3, r2
 80025aa:	00db      	lsls	r3, r3, #3
 80025ac:	440b      	add	r3, r1
 80025ae:	330c      	adds	r3, #12
 80025b0:	2202      	movs	r2, #2
 80025b2:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 80025b4:	79fa      	ldrb	r2, [r7, #7]
 80025b6:	4925      	ldr	r1, [pc, #148]	; (800264c <HW_TS_Start+0xfc>)
 80025b8:	4613      	mov	r3, r2
 80025ba:	005b      	lsls	r3, r3, #1
 80025bc:	4413      	add	r3, r2
 80025be:	00db      	lsls	r3, r3, #3
 80025c0:	440b      	add	r3, r1
 80025c2:	3308      	adds	r3, #8
 80025c4:	683a      	ldr	r2, [r7, #0]
 80025c6:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 80025c8:	79fa      	ldrb	r2, [r7, #7]
 80025ca:	4920      	ldr	r1, [pc, #128]	; (800264c <HW_TS_Start+0xfc>)
 80025cc:	4613      	mov	r3, r2
 80025ce:	005b      	lsls	r3, r3, #1
 80025d0:	4413      	add	r3, r2
 80025d2:	00db      	lsls	r3, r3, #3
 80025d4:	440b      	add	r3, r1
 80025d6:	3304      	adds	r3, #4
 80025d8:	683a      	ldr	r2, [r7, #0]
 80025da:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 80025dc:	79fb      	ldrb	r3, [r7, #7]
 80025de:	4618      	mov	r0, r3
 80025e0:	f7ff fb30 	bl	8001c44 <linkTimer>
 80025e4:	4603      	mov	r3, r0
 80025e6:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 80025e8:	4b1a      	ldr	r3, [pc, #104]	; (8002654 <HW_TS_Start+0x104>)
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80025ee:	4b1a      	ldr	r3, [pc, #104]	; (8002658 <HW_TS_Start+0x108>)
 80025f0:	781b      	ldrb	r3, [r3, #0]
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	7c7a      	ldrb	r2, [r7, #17]
 80025f6:	429a      	cmp	r2, r3
 80025f8:	d002      	beq.n	8002600 <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 80025fa:	f7ff fce9 	bl	8001fd0 <RescheduleTimerList>
 80025fe:	e013      	b.n	8002628 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8002600:	79fa      	ldrb	r2, [r7, #7]
 8002602:	4912      	ldr	r1, [pc, #72]	; (800264c <HW_TS_Start+0xfc>)
 8002604:	4613      	mov	r3, r2
 8002606:	005b      	lsls	r3, r3, #1
 8002608:	4413      	add	r3, r2
 800260a:	00db      	lsls	r3, r3, #3
 800260c:	440b      	add	r3, r1
 800260e:	3308      	adds	r3, #8
 8002610:	6819      	ldr	r1, [r3, #0]
 8002612:	8a7b      	ldrh	r3, [r7, #18]
 8002614:	79fa      	ldrb	r2, [r7, #7]
 8002616:	1ac9      	subs	r1, r1, r3
 8002618:	480c      	ldr	r0, [pc, #48]	; (800264c <HW_TS_Start+0xfc>)
 800261a:	4613      	mov	r3, r2
 800261c:	005b      	lsls	r3, r3, #1
 800261e:	4413      	add	r3, r2
 8002620:	00db      	lsls	r3, r3, #3
 8002622:	4403      	add	r3, r0
 8002624:	3308      	adds	r3, #8
 8002626:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8002628:	4b09      	ldr	r3, [pc, #36]	; (8002650 <HW_TS_Start+0x100>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	22ff      	movs	r2, #255	; 0xff
 800262e:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8002630:	2003      	movs	r0, #3
 8002632:	f002 fee2 	bl	80053fa <HAL_NVIC_EnableIRQ>
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	f383 8810 	msr	PRIMASK, r3
}
 8002640:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8002642:	bf00      	nop
}
 8002644:	3718      	adds	r7, #24
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	200003a4 	.word	0x200003a4
 8002650:	2000068c 	.word	0x2000068c
 8002654:	20000434 	.word	0x20000434
 8002658:	20000435 	.word	0x20000435

0800265c <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b084      	sub	sp, #16
 8002660:	af00      	add	r7, sp, #0
 8002662:	60f8      	str	r0, [r7, #12]
 8002664:	460b      	mov	r3, r1
 8002666:	607a      	str	r2, [r7, #4]
 8002668:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	4798      	blx	r3

  return;
 800266e:	bf00      	nop
}
 8002670:	3710      	adds	r7, #16
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
	...

08002678 <HW_UART_Receive_IT>:
    void (*HW_hlpuart1RxCb)(void);
    void (*HW_hlpuart1TxCb)(void);
#endif

void HW_UART_Receive_IT(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b084      	sub	sp, #16
 800267c:	af00      	add	r7, sp, #0
 800267e:	60b9      	str	r1, [r7, #8]
 8002680:	607b      	str	r3, [r7, #4]
 8002682:	4603      	mov	r3, r0
 8002684:	73fb      	strb	r3, [r7, #15]
 8002686:	4613      	mov	r3, r2
 8002688:	81bb      	strh	r3, [r7, #12]
    switch (hw_uart_id)
 800268a:	7bfb      	ldrb	r3, [r7, #15]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d002      	beq.n	8002696 <HW_UART_Receive_IT+0x1e>
 8002690:	2b02      	cmp	r3, #2
 8002692:	d00d      	beq.n	80026b0 <HW_UART_Receive_IT+0x38>
            HW_UART_RX_IT(hlpuart1, LPUART1);
            break;
#endif

        default:
            break;
 8002694:	e019      	b.n	80026ca <HW_UART_Receive_IT+0x52>
            HW_UART_RX_IT(huart1, USART1);
 8002696:	4a0f      	ldr	r2, [pc, #60]	; (80026d4 <HW_UART_Receive_IT+0x5c>)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6013      	str	r3, [r2, #0]
 800269c:	4b0e      	ldr	r3, [pc, #56]	; (80026d8 <HW_UART_Receive_IT+0x60>)
 800269e:	4a0f      	ldr	r2, [pc, #60]	; (80026dc <HW_UART_Receive_IT+0x64>)
 80026a0:	601a      	str	r2, [r3, #0]
 80026a2:	89bb      	ldrh	r3, [r7, #12]
 80026a4:	461a      	mov	r2, r3
 80026a6:	68b9      	ldr	r1, [r7, #8]
 80026a8:	480b      	ldr	r0, [pc, #44]	; (80026d8 <HW_UART_Receive_IT+0x60>)
 80026aa:	f005 fcf7 	bl	800809c <HAL_UART_Receive_IT>
            break;
 80026ae:	e00c      	b.n	80026ca <HW_UART_Receive_IT+0x52>
            HW_UART_RX_IT(hlpuart1, LPUART1);
 80026b0:	4a0b      	ldr	r2, [pc, #44]	; (80026e0 <HW_UART_Receive_IT+0x68>)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6013      	str	r3, [r2, #0]
 80026b6:	4b0b      	ldr	r3, [pc, #44]	; (80026e4 <HW_UART_Receive_IT+0x6c>)
 80026b8:	4a0b      	ldr	r2, [pc, #44]	; (80026e8 <HW_UART_Receive_IT+0x70>)
 80026ba:	601a      	str	r2, [r3, #0]
 80026bc:	89bb      	ldrh	r3, [r7, #12]
 80026be:	461a      	mov	r2, r3
 80026c0:	68b9      	ldr	r1, [r7, #8]
 80026c2:	4808      	ldr	r0, [pc, #32]	; (80026e4 <HW_UART_Receive_IT+0x6c>)
 80026c4:	f005 fcea 	bl	800809c <HAL_UART_Receive_IT>
            break;
 80026c8:	bf00      	nop
    }

    return;
 80026ca:	bf00      	nop
}
 80026cc:	3710      	adds	r7, #16
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	20000444 	.word	0x20000444
 80026d8:	20000524 	.word	0x20000524
 80026dc:	40013800 	.word	0x40013800
 80026e0:	2000044c 	.word	0x2000044c
 80026e4:	20000490 	.word	0x20000490
 80026e8:	40008000 	.word	0x40008000

080026ec <HW_UART_Transmit_DMA>:

    return hw_status;
}

hw_status_t HW_UART_Transmit_DMA(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b086      	sub	sp, #24
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	60b9      	str	r1, [r7, #8]
 80026f4:	607b      	str	r3, [r7, #4]
 80026f6:	4603      	mov	r3, r0
 80026f8:	73fb      	strb	r3, [r7, #15]
 80026fa:	4613      	mov	r3, r2
 80026fc:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef hal_status = HAL_OK;
 80026fe:	2300      	movs	r3, #0
 8002700:	75fb      	strb	r3, [r7, #23]
    hw_status_t hw_status = hw_uart_ok;
 8002702:	2300      	movs	r3, #0
 8002704:	75bb      	strb	r3, [r7, #22]

    switch (hw_uart_id)
 8002706:	7bfb      	ldrb	r3, [r7, #15]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d002      	beq.n	8002712 <HW_UART_Transmit_DMA+0x26>
 800270c:	2b02      	cmp	r3, #2
 800270e:	d00f      	beq.n	8002730 <HW_UART_Transmit_DMA+0x44>
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
            break;
#endif

        default:
            break;
 8002710:	e01d      	b.n	800274e <HW_UART_Transmit_DMA+0x62>
            HW_huart1TxCb = cb;
 8002712:	4a1f      	ldr	r2, [pc, #124]	; (8002790 <HW_UART_Transmit_DMA+0xa4>)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6013      	str	r3, [r2, #0]
            huart1.Instance = USART1;
 8002718:	4b1e      	ldr	r3, [pc, #120]	; (8002794 <HW_UART_Transmit_DMA+0xa8>)
 800271a:	4a1f      	ldr	r2, [pc, #124]	; (8002798 <HW_UART_Transmit_DMA+0xac>)
 800271c:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&huart1, p_data, size);
 800271e:	89bb      	ldrh	r3, [r7, #12]
 8002720:	461a      	mov	r2, r3
 8002722:	68b9      	ldr	r1, [r7, #8]
 8002724:	481b      	ldr	r0, [pc, #108]	; (8002794 <HW_UART_Transmit_DMA+0xa8>)
 8002726:	f005 fd05 	bl	8008134 <HAL_UART_Transmit_DMA>
 800272a:	4603      	mov	r3, r0
 800272c:	75fb      	strb	r3, [r7, #23]
            break;
 800272e:	e00e      	b.n	800274e <HW_UART_Transmit_DMA+0x62>
            HW_hlpuart1TxCb = cb;
 8002730:	4a1a      	ldr	r2, [pc, #104]	; (800279c <HW_UART_Transmit_DMA+0xb0>)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6013      	str	r3, [r2, #0]
            hlpuart1.Instance = LPUART1;
 8002736:	4b1a      	ldr	r3, [pc, #104]	; (80027a0 <HW_UART_Transmit_DMA+0xb4>)
 8002738:	4a1a      	ldr	r2, [pc, #104]	; (80027a4 <HW_UART_Transmit_DMA+0xb8>)
 800273a:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
 800273c:	89bb      	ldrh	r3, [r7, #12]
 800273e:	461a      	mov	r2, r3
 8002740:	68b9      	ldr	r1, [r7, #8]
 8002742:	4817      	ldr	r0, [pc, #92]	; (80027a0 <HW_UART_Transmit_DMA+0xb4>)
 8002744:	f005 fcf6 	bl	8008134 <HAL_UART_Transmit_DMA>
 8002748:	4603      	mov	r3, r0
 800274a:	75fb      	strb	r3, [r7, #23]
            break;
 800274c:	bf00      	nop
    }

    switch (hal_status)
 800274e:	7dfb      	ldrb	r3, [r7, #23]
 8002750:	2b03      	cmp	r3, #3
 8002752:	d817      	bhi.n	8002784 <HW_UART_Transmit_DMA+0x98>
 8002754:	a201      	add	r2, pc, #4	; (adr r2, 800275c <HW_UART_Transmit_DMA+0x70>)
 8002756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800275a:	bf00      	nop
 800275c:	0800276d 	.word	0x0800276d
 8002760:	08002773 	.word	0x08002773
 8002764:	08002779 	.word	0x08002779
 8002768:	0800277f 	.word	0x0800277f
    {
        case HAL_OK:
            hw_status = hw_uart_ok;
 800276c:	2300      	movs	r3, #0
 800276e:	75bb      	strb	r3, [r7, #22]
            break;
 8002770:	e009      	b.n	8002786 <HW_UART_Transmit_DMA+0x9a>

        case HAL_ERROR:
            hw_status = hw_uart_error;
 8002772:	2301      	movs	r3, #1
 8002774:	75bb      	strb	r3, [r7, #22]
            break;
 8002776:	e006      	b.n	8002786 <HW_UART_Transmit_DMA+0x9a>

        case HAL_BUSY:
            hw_status = hw_uart_busy;
 8002778:	2302      	movs	r3, #2
 800277a:	75bb      	strb	r3, [r7, #22]
            break;
 800277c:	e003      	b.n	8002786 <HW_UART_Transmit_DMA+0x9a>

        case HAL_TIMEOUT:
            hw_status = hw_uart_to;
 800277e:	2303      	movs	r3, #3
 8002780:	75bb      	strb	r3, [r7, #22]
            break;
 8002782:	e000      	b.n	8002786 <HW_UART_Transmit_DMA+0x9a>

        default:
            break;
 8002784:	bf00      	nop
    }

    return hw_status;
 8002786:	7dbb      	ldrb	r3, [r7, #22]
}
 8002788:	4618      	mov	r0, r3
 800278a:	3718      	adds	r7, #24
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}
 8002790:	20000448 	.word	0x20000448
 8002794:	20000524 	.word	0x20000524
 8002798:	40013800 	.word	0x40013800
 800279c:	20000450 	.word	0x20000450
 80027a0:	20000490 	.word	0x20000490
 80027a4:	40008000 	.word	0x40008000

080027a8 <HAL_UART_RxCpltCallback>:

    return;
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b082      	sub	sp, #8
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a0f      	ldr	r2, [pc, #60]	; (80027f4 <HAL_UART_RxCpltCallback+0x4c>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d00a      	beq.n	80027d0 <HAL_UART_RxCpltCallback+0x28>
 80027ba:	4a0f      	ldr	r2, [pc, #60]	; (80027f8 <HAL_UART_RxCpltCallback+0x50>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d10f      	bne.n	80027e0 <HAL_UART_RxCpltCallback+0x38>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1RxCb)
 80027c0:	4b0e      	ldr	r3, [pc, #56]	; (80027fc <HAL_UART_RxCpltCallback+0x54>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d00d      	beq.n	80027e4 <HAL_UART_RxCpltCallback+0x3c>
            {
                HW_huart1RxCb();
 80027c8:	4b0c      	ldr	r3, [pc, #48]	; (80027fc <HAL_UART_RxCpltCallback+0x54>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4798      	blx	r3
            }
            break;
 80027ce:	e009      	b.n	80027e4 <HAL_UART_RxCpltCallback+0x3c>
#endif

#if (CFG_HW_LPUART1_ENABLED == 1)
        case (uint32_t)LPUART1:
            if(HW_hlpuart1RxCb)
 80027d0:	4b0b      	ldr	r3, [pc, #44]	; (8002800 <HAL_UART_RxCpltCallback+0x58>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d007      	beq.n	80027e8 <HAL_UART_RxCpltCallback+0x40>
            {
                HW_hlpuart1RxCb();
 80027d8:	4b09      	ldr	r3, [pc, #36]	; (8002800 <HAL_UART_RxCpltCallback+0x58>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4798      	blx	r3
            }
            break;
 80027de:	e003      	b.n	80027e8 <HAL_UART_RxCpltCallback+0x40>
#endif

        default:
            break;
 80027e0:	bf00      	nop
 80027e2:	e002      	b.n	80027ea <HAL_UART_RxCpltCallback+0x42>
            break;
 80027e4:	bf00      	nop
 80027e6:	e000      	b.n	80027ea <HAL_UART_RxCpltCallback+0x42>
            break;
 80027e8:	bf00      	nop
    }

    return;
 80027ea:	bf00      	nop
}
 80027ec:	3708      	adds	r7, #8
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	40008000 	.word	0x40008000
 80027f8:	40013800 	.word	0x40013800
 80027fc:	20000444 	.word	0x20000444
 8002800:	2000044c 	.word	0x2000044c

08002804 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b082      	sub	sp, #8
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a0f      	ldr	r2, [pc, #60]	; (8002850 <HAL_UART_TxCpltCallback+0x4c>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d00a      	beq.n	800282c <HAL_UART_TxCpltCallback+0x28>
 8002816:	4a0f      	ldr	r2, [pc, #60]	; (8002854 <HAL_UART_TxCpltCallback+0x50>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d10f      	bne.n	800283c <HAL_UART_TxCpltCallback+0x38>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1TxCb)
 800281c:	4b0e      	ldr	r3, [pc, #56]	; (8002858 <HAL_UART_TxCpltCallback+0x54>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d00d      	beq.n	8002840 <HAL_UART_TxCpltCallback+0x3c>
            {
                HW_huart1TxCb();
 8002824:	4b0c      	ldr	r3, [pc, #48]	; (8002858 <HAL_UART_TxCpltCallback+0x54>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4798      	blx	r3
            }
            break;
 800282a:	e009      	b.n	8002840 <HAL_UART_TxCpltCallback+0x3c>
#endif

#if (CFG_HW_LPUART1_ENABLED == 1)
        case (uint32_t)LPUART1:
            if(HW_hlpuart1TxCb)
 800282c:	4b0b      	ldr	r3, [pc, #44]	; (800285c <HAL_UART_TxCpltCallback+0x58>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d007      	beq.n	8002844 <HAL_UART_TxCpltCallback+0x40>
            {
                HW_hlpuart1TxCb();
 8002834:	4b09      	ldr	r3, [pc, #36]	; (800285c <HAL_UART_TxCpltCallback+0x58>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4798      	blx	r3
            }
            break;
 800283a:	e003      	b.n	8002844 <HAL_UART_TxCpltCallback+0x40>
#endif

        default:
            break;
 800283c:	bf00      	nop
 800283e:	e002      	b.n	8002846 <HAL_UART_TxCpltCallback+0x42>
            break;
 8002840:	bf00      	nop
 8002842:	e000      	b.n	8002846 <HAL_UART_TxCpltCallback+0x42>
            break;
 8002844:	bf00      	nop
    }

    return;
 8002846:	bf00      	nop
}
 8002848:	3708      	adds	r7, #8
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	40008000 	.word	0x40008000
 8002854:	40013800 	.word	0x40013800
 8002858:	20000448 	.word	0x20000448
 800285c:	20000450 	.word	0x20000450

08002860 <LL_RCC_LSE_SetDriveCapability>:
{
 8002860:	b480      	push	{r7}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8002868:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800286c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002870:	f023 0218 	bic.w	r2, r3, #24
 8002874:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	4313      	orrs	r3, r2
 800287c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002880:	bf00      	nop
 8002882:	370c      	adds	r7, #12
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr

0800288c <LL_AHB1_GRP1_EnableClock>:
{
 800288c:	b480      	push	{r7}
 800288e:	b085      	sub	sp, #20
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002894:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002898:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800289a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	4313      	orrs	r3, r2
 80028a2:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80028a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4013      	ands	r3, r2
 80028ae:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80028b0:	68fb      	ldr	r3, [r7, #12]
}
 80028b2:	bf00      	nop
 80028b4:	3714      	adds	r7, #20
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr

080028be <LL_AHB2_GRP1_EnableClock>:
{
 80028be:	b480      	push	{r7}
 80028c0:	b085      	sub	sp, #20
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80028c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80028cc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	4313      	orrs	r3, r2
 80028d4:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80028d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	4013      	ands	r3, r2
 80028e0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80028e2:	68fb      	ldr	r3, [r7, #12]
}
 80028e4:	bf00      	nop
 80028e6:	3714      	adds	r7, #20
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr

080028f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80028f4:	f002 fb8e 	bl	8005014 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 80028f8:	f7fe fd76 	bl	80013e8 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80028fc:	f000 f814 	bl	8002928 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8002900:	f000 f870 	bl	80029e4 <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 8002904:	f000 f88e 	bl	8002a24 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002908:	f000 f95e 	bl	8002bc8 <MX_GPIO_Init>
  MX_DMA_Init();
 800290c:	f000 f93e 	bl	8002b8c <MX_DMA_Init>
  MX_RTC_Init();
 8002910:	f000 f908 	bl	8002b24 <MX_RTC_Init>
  MX_RNG_Init();
 8002914:	f000 f8f0 	bl	8002af8 <MX_RNG_Init>
  MX_RF_Init();
 8002918:	f000 f8e6 	bl	8002ae8 <MX_RF_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 800291c:	f7fe fd72 	bl	8001404 <MX_APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while(1)
	{
    /* USER CODE END WHILE */
    MX_APPE_Process();
 8002920:	f7fe ffb1 	bl	8001886 <MX_APPE_Process>
 8002924:	e7fc      	b.n	8002920 <main+0x30>
	...

08002928 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b09a      	sub	sp, #104	; 0x68
 800292c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800292e:	f107 0320 	add.w	r3, r7, #32
 8002932:	2248      	movs	r2, #72	; 0x48
 8002934:	2100      	movs	r1, #0
 8002936:	4618      	mov	r0, r3
 8002938:	f00a fe64 	bl	800d604 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800293c:	1d3b      	adds	r3, r7, #4
 800293e:	2200      	movs	r2, #0
 8002940:	601a      	str	r2, [r3, #0]
 8002942:	605a      	str	r2, [r3, #4]
 8002944:	609a      	str	r2, [r3, #8]
 8002946:	60da      	str	r2, [r3, #12]
 8002948:	611a      	str	r2, [r3, #16]
 800294a:	615a      	str	r2, [r3, #20]
 800294c:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800294e:	f003 fb77 	bl	8006040 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002952:	2000      	movs	r0, #0
 8002954:	f7ff ff84 	bl	8002860 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002958:	4b21      	ldr	r3, [pc, #132]	; (80029e0 <SystemClock_Config+0xb8>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002960:	4a1f      	ldr	r2, [pc, #124]	; (80029e0 <SystemClock_Config+0xb8>)
 8002962:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002966:	6013      	str	r3, [r2, #0]
 8002968:	4b1d      	ldr	r3, [pc, #116]	; (80029e0 <SystemClock_Config+0xb8>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002970:	603b      	str	r3, [r7, #0]
 8002972:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 8002974:	2347      	movs	r3, #71	; 0x47
 8002976:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002978:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800297c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800297e:	2301      	movs	r3, #1
 8002980:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002982:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002986:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8002988:	2301      	movs	r3, #1
 800298a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800298c:	2340      	movs	r3, #64	; 0x40
 800298e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002990:	2300      	movs	r3, #0
 8002992:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002994:	f107 0320 	add.w	r3, r7, #32
 8002998:	4618      	mov	r0, r3
 800299a:	f003 fee5 	bl	8006768 <HAL_RCC_OscConfig>
 800299e:	4603      	mov	r3, r0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d001      	beq.n	80029a8 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80029a4:	f000 f972 	bl	8002c8c <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80029a8:	236f      	movs	r3, #111	; 0x6f
 80029aa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80029ac:	2302      	movs	r3, #2
 80029ae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80029b0:	2300      	movs	r3, #0
 80029b2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80029b4:	2300      	movs	r3, #0
 80029b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80029b8:	2300      	movs	r3, #0
 80029ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80029bc:	2300      	movs	r3, #0
 80029be:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80029c0:	2300      	movs	r3, #0
 80029c2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80029c4:	1d3b      	adds	r3, r7, #4
 80029c6:	2101      	movs	r1, #1
 80029c8:	4618      	mov	r0, r3
 80029ca:	f004 fa41 	bl	8006e50 <HAL_RCC_ClockConfig>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d001      	beq.n	80029d8 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80029d4:	f000 f95a 	bl	8002c8c <Error_Handler>
  }
}
 80029d8:	bf00      	nop
 80029da:	3768      	adds	r7, #104	; 0x68
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	58000400 	.word	0x58000400

080029e4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b094      	sub	sp, #80	; 0x50
 80029e8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80029ea:	463b      	mov	r3, r7
 80029ec:	2250      	movs	r2, #80	; 0x50
 80029ee:	2100      	movs	r1, #0
 80029f0:	4618      	mov	r0, r3
 80029f2:	f00a fe07 	bl	800d604 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 80029f6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80029fa:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 80029fc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002a00:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 8002a02:	2302      	movs	r3, #2
 8002a04:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8002a06:	2310      	movs	r3, #16
 8002a08:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a0a:	463b      	mov	r3, r7
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f004 fe5c 	bl	80076ca <HAL_RCCEx_PeriphCLKConfig>
 8002a12:	4603      	mov	r3, r0
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d001      	beq.n	8002a1c <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8002a18:	f000 f938 	bl	8002c8c <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8002a1c:	bf00      	nop
 8002a1e:	3750      	adds	r7, #80	; 0x50
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}

08002a24 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8002a28:	4b06      	ldr	r3, [pc, #24]	; (8002a44 <MX_IPCC_Init+0x20>)
 8002a2a:	4a07      	ldr	r2, [pc, #28]	; (8002a48 <MX_IPCC_Init+0x24>)
 8002a2c:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8002a2e:	4805      	ldr	r0, [pc, #20]	; (8002a44 <MX_IPCC_Init+0x20>)
 8002a30:	f003 fa80 	bl	8005f34 <HAL_IPCC_Init>
 8002a34:	4603      	mov	r3, r0
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d001      	beq.n	8002a3e <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8002a3a:	f000 f927 	bl	8002c8c <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8002a3e:	bf00      	nop
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop
 8002a44:	20000454 	.word	0x20000454
 8002a48:	58000c00 	.word	0x58000c00

08002a4c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002a50:	4b23      	ldr	r3, [pc, #140]	; (8002ae0 <MX_USART1_UART_Init+0x94>)
 8002a52:	4a24      	ldr	r2, [pc, #144]	; (8002ae4 <MX_USART1_UART_Init+0x98>)
 8002a54:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002a56:	4b22      	ldr	r3, [pc, #136]	; (8002ae0 <MX_USART1_UART_Init+0x94>)
 8002a58:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002a5c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002a5e:	4b20      	ldr	r3, [pc, #128]	; (8002ae0 <MX_USART1_UART_Init+0x94>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002a64:	4b1e      	ldr	r3, [pc, #120]	; (8002ae0 <MX_USART1_UART_Init+0x94>)
 8002a66:	2200      	movs	r2, #0
 8002a68:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002a6a:	4b1d      	ldr	r3, [pc, #116]	; (8002ae0 <MX_USART1_UART_Init+0x94>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002a70:	4b1b      	ldr	r3, [pc, #108]	; (8002ae0 <MX_USART1_UART_Init+0x94>)
 8002a72:	220c      	movs	r2, #12
 8002a74:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a76:	4b1a      	ldr	r3, [pc, #104]	; (8002ae0 <MX_USART1_UART_Init+0x94>)
 8002a78:	2200      	movs	r2, #0
 8002a7a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8002a7c:	4b18      	ldr	r3, [pc, #96]	; (8002ae0 <MX_USART1_UART_Init+0x94>)
 8002a7e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002a82:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002a84:	4b16      	ldr	r3, [pc, #88]	; (8002ae0 <MX_USART1_UART_Init+0x94>)
 8002a86:	2200      	movs	r2, #0
 8002a88:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002a8a:	4b15      	ldr	r3, [pc, #84]	; (8002ae0 <MX_USART1_UART_Init+0x94>)
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002a90:	4b13      	ldr	r3, [pc, #76]	; (8002ae0 <MX_USART1_UART_Init+0x94>)
 8002a92:	2200      	movs	r2, #0
 8002a94:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002a96:	4812      	ldr	r0, [pc, #72]	; (8002ae0 <MX_USART1_UART_Init+0x94>)
 8002a98:	f005 fab0 	bl	8007ffc <HAL_UART_Init>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d001      	beq.n	8002aa6 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8002aa2:	f000 f8f3 	bl	8002c8c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002aa6:	2100      	movs	r1, #0
 8002aa8:	480d      	ldr	r0, [pc, #52]	; (8002ae0 <MX_USART1_UART_Init+0x94>)
 8002aaa:	f007 fafc 	bl	800a0a6 <HAL_UARTEx_SetTxFifoThreshold>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d001      	beq.n	8002ab8 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8002ab4:	f000 f8ea 	bl	8002c8c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002ab8:	2100      	movs	r1, #0
 8002aba:	4809      	ldr	r0, [pc, #36]	; (8002ae0 <MX_USART1_UART_Init+0x94>)
 8002abc:	f007 fb31 	bl	800a122 <HAL_UARTEx_SetRxFifoThreshold>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d001      	beq.n	8002aca <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8002ac6:	f000 f8e1 	bl	8002c8c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002aca:	4805      	ldr	r0, [pc, #20]	; (8002ae0 <MX_USART1_UART_Init+0x94>)
 8002acc:	f007 fab2 	bl	800a034 <HAL_UARTEx_DisableFifoMode>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d001      	beq.n	8002ada <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8002ad6:	f000 f8d9 	bl	8002c8c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002ada:	bf00      	nop
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	20000524 	.word	0x20000524
 8002ae4:	40013800 	.word	0x40013800

08002ae8 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8002aec:	bf00      	nop
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr
	...

08002af8 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8002afc:	4b07      	ldr	r3, [pc, #28]	; (8002b1c <MX_RNG_Init+0x24>)
 8002afe:	4a08      	ldr	r2, [pc, #32]	; (8002b20 <MX_RNG_Init+0x28>)
 8002b00:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8002b02:	4b06      	ldr	r3, [pc, #24]	; (8002b1c <MX_RNG_Init+0x24>)
 8002b04:	2200      	movs	r2, #0
 8002b06:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8002b08:	4804      	ldr	r0, [pc, #16]	; (8002b1c <MX_RNG_Init+0x24>)
 8002b0a:	f005 f865 	bl	8007bd8 <HAL_RNG_Init>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d001      	beq.n	8002b18 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 8002b14:	f000 f8ba 	bl	8002c8c <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8002b18:	bf00      	nop
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	20000678 	.word	0x20000678
 8002b20:	58001000 	.word	0x58001000

08002b24 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002b28:	4b16      	ldr	r3, [pc, #88]	; (8002b84 <MX_RTC_Init+0x60>)
 8002b2a:	4a17      	ldr	r2, [pc, #92]	; (8002b88 <MX_RTC_Init+0x64>)
 8002b2c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002b2e:	4b15      	ldr	r3, [pc, #84]	; (8002b84 <MX_RTC_Init+0x60>)
 8002b30:	2200      	movs	r2, #0
 8002b32:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8002b34:	4b13      	ldr	r3, [pc, #76]	; (8002b84 <MX_RTC_Init+0x60>)
 8002b36:	220f      	movs	r2, #15
 8002b38:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8002b3a:	4b12      	ldr	r3, [pc, #72]	; (8002b84 <MX_RTC_Init+0x60>)
 8002b3c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8002b40:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002b42:	4b10      	ldr	r3, [pc, #64]	; (8002b84 <MX_RTC_Init+0x60>)
 8002b44:	2200      	movs	r2, #0
 8002b46:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002b48:	4b0e      	ldr	r3, [pc, #56]	; (8002b84 <MX_RTC_Init+0x60>)
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002b4e:	4b0d      	ldr	r3, [pc, #52]	; (8002b84 <MX_RTC_Init+0x60>)
 8002b50:	2200      	movs	r2, #0
 8002b52:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002b54:	4b0b      	ldr	r3, [pc, #44]	; (8002b84 <MX_RTC_Init+0x60>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002b5a:	480a      	ldr	r0, [pc, #40]	; (8002b84 <MX_RTC_Init+0x60>)
 8002b5c:	f005 f872 	bl	8007c44 <HAL_RTC_Init>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d001      	beq.n	8002b6a <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8002b66:	f000 f891 	bl	8002c8c <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	2100      	movs	r1, #0
 8002b6e:	4805      	ldr	r0, [pc, #20]	; (8002b84 <MX_RTC_Init+0x60>)
 8002b70:	f005 f968 	bl	8007e44 <HAL_RTCEx_SetWakeUpTimer_IT>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d001      	beq.n	8002b7e <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8002b7a:	f000 f887 	bl	8002c8c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002b7e:	bf00      	nop
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	2000068c 	.word	0x2000068c
 8002b88:	40002800 	.word	0x40002800

08002b8c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002b90:	2004      	movs	r0, #4
 8002b92:	f7ff fe7b 	bl	800288c <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002b96:	2001      	movs	r0, #1
 8002b98:	f7ff fe78 	bl	800288c <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002b9c:	2002      	movs	r0, #2
 8002b9e:	f7ff fe75 	bl	800288c <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 15, 0);
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	210f      	movs	r1, #15
 8002ba6:	200e      	movs	r0, #14
 8002ba8:	f002 fc0d 	bl	80053c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8002bac:	200e      	movs	r0, #14
 8002bae:	f002 fc24 	bl	80053fa <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 15, 0);
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	210f      	movs	r1, #15
 8002bb6:	203a      	movs	r0, #58	; 0x3a
 8002bb8:	f002 fc05 	bl	80053c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 8002bbc:	203a      	movs	r0, #58	; 0x3a
 8002bbe:	f002 fc1c 	bl	80053fa <HAL_NVIC_EnableIRQ>

}
 8002bc2:	bf00      	nop
 8002bc4:	bd80      	pop	{r7, pc}
	...

08002bc8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b086      	sub	sp, #24
 8002bcc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bce:	1d3b      	adds	r3, r7, #4
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	601a      	str	r2, [r3, #0]
 8002bd4:	605a      	str	r2, [r3, #4]
 8002bd6:	609a      	str	r2, [r3, #8]
 8002bd8:	60da      	str	r2, [r3, #12]
 8002bda:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bdc:	2004      	movs	r0, #4
 8002bde:	f7ff fe6e 	bl	80028be <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002be2:	2001      	movs	r0, #1
 8002be4:	f7ff fe6b 	bl	80028be <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002be8:	2008      	movs	r0, #8
 8002bea:	f7ff fe68 	bl	80028be <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bee:	2002      	movs	r0, #2
 8002bf0:	f7ff fe65 	bl	80028be <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Blue_Led_GPIO_Port, Blue_Led_Pin, GPIO_PIN_RESET);
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	2120      	movs	r1, #32
 8002bf8:	4821      	ldr	r0, [pc, #132]	; (8002c80 <MX_GPIO_Init+0xb8>)
 8002bfa:	f003 f947 	bl	8005e8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SW1_User_Pin */
  GPIO_InitStruct.Pin = SW1_User_Pin;
 8002bfe:	2310      	movs	r3, #16
 8002c00:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002c02:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002c06:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(SW1_User_GPIO_Port, &GPIO_InitStruct);
 8002c0c:	1d3b      	adds	r3, r7, #4
 8002c0e:	4619      	mov	r1, r3
 8002c10:	481c      	ldr	r0, [pc, #112]	; (8002c84 <MX_GPIO_Init+0xbc>)
 8002c12:	f002 ffcb 	bl	8005bac <HAL_GPIO_Init>

  /*Configure GPIO pins : SW2_User_Pin SW3_User_Pin */
  GPIO_InitStruct.Pin = SW2_User_Pin|SW3_User_Pin;
 8002c16:	2303      	movs	r3, #3
 8002c18:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002c1a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002c1e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c20:	2301      	movs	r3, #1
 8002c22:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c24:	1d3b      	adds	r3, r7, #4
 8002c26:	4619      	mov	r1, r3
 8002c28:	4817      	ldr	r0, [pc, #92]	; (8002c88 <MX_GPIO_Init+0xc0>)
 8002c2a:	f002 ffbf 	bl	8005bac <HAL_GPIO_Init>

  /*Configure GPIO pin : Blue_Led_Pin */
  GPIO_InitStruct.Pin = Blue_Led_Pin;
 8002c2e:	2320      	movs	r3, #32
 8002c30:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c32:	2301      	movs	r3, #1
 8002c34:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c36:	2300      	movs	r3, #0
 8002c38:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c3a:	2302      	movs	r3, #2
 8002c3c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(Blue_Led_GPIO_Port, &GPIO_InitStruct);
 8002c3e:	1d3b      	adds	r3, r7, #4
 8002c40:	4619      	mov	r1, r3
 8002c42:	480f      	ldr	r0, [pc, #60]	; (8002c80 <MX_GPIO_Init+0xb8>)
 8002c44:	f002 ffb2 	bl	8005bac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002c48:	2200      	movs	r2, #0
 8002c4a:	2100      	movs	r1, #0
 8002c4c:	2006      	movs	r0, #6
 8002c4e:	f002 fbba 	bl	80053c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002c52:	2006      	movs	r0, #6
 8002c54:	f002 fbd1 	bl	80053fa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8002c58:	2200      	movs	r2, #0
 8002c5a:	2100      	movs	r1, #0
 8002c5c:	2007      	movs	r0, #7
 8002c5e:	f002 fbb2 	bl	80053c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002c62:	2007      	movs	r0, #7
 8002c64:	f002 fbc9 	bl	80053fa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8002c68:	2200      	movs	r2, #0
 8002c6a:	2100      	movs	r1, #0
 8002c6c:	200a      	movs	r0, #10
 8002c6e:	f002 fbaa 	bl	80053c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8002c72:	200a      	movs	r0, #10
 8002c74:	f002 fbc1 	bl	80053fa <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002c78:	bf00      	nop
 8002c7a:	3718      	adds	r7, #24
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	48000400 	.word	0x48000400
 8002c84:	48000800 	.word	0x48000800
 8002c88:	48000c00 	.word	0x48000c00

08002c8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002c90:	bf00      	nop
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr

08002c9a <LL_RCC_EnableRTC>:
{
 8002c9a:	b480      	push	{r7}
 8002c9c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8002c9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ca6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002caa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002cae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002cb2:	bf00      	nop
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cba:	4770      	bx	lr

08002cbc <LL_AHB2_GRP1_EnableClock>:
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b085      	sub	sp, #20
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002cc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cc8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002cca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002cd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cd8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4013      	ands	r3, r2
 8002cde:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
}
 8002ce2:	bf00      	nop
 8002ce4:	3714      	adds	r7, #20
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr

08002cee <LL_AHB3_GRP1_EnableClock>:
{
 8002cee:	b480      	push	{r7}
 8002cf0:	b085      	sub	sp, #20
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8002cf6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cfa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002cfc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8002d06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d0a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	4013      	ands	r3, r2
 8002d10:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002d12:	68fb      	ldr	r3, [r7, #12]
}
 8002d14:	bf00      	nop
 8002d16:	3714      	adds	r7, #20
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr

08002d20 <LL_APB1_GRP1_EnableClock>:
{
 8002d20:	b480      	push	{r7}
 8002d22:	b085      	sub	sp, #20
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002d28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d2c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002d2e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	4313      	orrs	r3, r2
 8002d36:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002d38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d3c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	4013      	ands	r3, r2
 8002d42:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002d44:	68fb      	ldr	r3, [r7, #12]
}
 8002d46:	bf00      	nop
 8002d48:	3714      	adds	r7, #20
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr

08002d52 <LL_APB1_GRP2_EnableClock>:
{
 8002d52:	b480      	push	{r7}
 8002d54:	b085      	sub	sp, #20
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR2, Periphs);
 8002d5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d5e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002d60:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	4313      	orrs	r3, r2
 8002d68:	65cb      	str	r3, [r1, #92]	; 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8002d6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d6e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	4013      	ands	r3, r2
 8002d74:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002d76:	68fb      	ldr	r3, [r7, #12]
}
 8002d78:	bf00      	nop
 8002d7a:	3714      	adds	r7, #20
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d82:	4770      	bx	lr

08002d84 <LL_APB2_GRP1_EnableClock>:
{
 8002d84:	b480      	push	{r7}
 8002d86:	b085      	sub	sp, #20
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002d8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d90:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002d92:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002d9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002da0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	4013      	ands	r3, r2
 8002da6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002da8:	68fb      	ldr	r3, [r7, #12]
}
 8002daa:	bf00      	nop
 8002dac:	3714      	adds	r7, #20
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr

08002db6 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002db6:	b580      	push	{r7, lr}
 8002db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8002dba:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002dbe:	f7ff ff96 	bl	8002cee <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	2100      	movs	r1, #0
 8002dc6:	202e      	movs	r0, #46	; 0x2e
 8002dc8:	f002 fafd 	bl	80053c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8002dcc:	202e      	movs	r0, #46	; 0x2e
 8002dce:	f002 fb14 	bl	80053fa <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002dd2:	bf00      	nop
 8002dd4:	bd80      	pop	{r7, pc}
	...

08002dd8 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b082      	sub	sp, #8
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a0d      	ldr	r2, [pc, #52]	; (8002e1c <HAL_IPCC_MspInit+0x44>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d113      	bne.n	8002e12 <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8002dea:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002dee:	f7ff ff7e 	bl	8002cee <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8002df2:	2200      	movs	r2, #0
 8002df4:	2100      	movs	r1, #0
 8002df6:	202c      	movs	r0, #44	; 0x2c
 8002df8:	f002 fae5 	bl	80053c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8002dfc:	202c      	movs	r0, #44	; 0x2c
 8002dfe:	f002 fafc 	bl	80053fa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8002e02:	2200      	movs	r2, #0
 8002e04:	2100      	movs	r1, #0
 8002e06:	202d      	movs	r0, #45	; 0x2d
 8002e08:	f002 fadd 	bl	80053c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8002e0c:	202d      	movs	r0, #45	; 0x2d
 8002e0e:	f002 faf4 	bl	80053fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 8002e12:	bf00      	nop
 8002e14:	3708      	adds	r7, #8
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	bf00      	nop
 8002e1c:	58000c00 	.word	0x58000c00

08002e20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b0a0      	sub	sp, #128	; 0x80
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e28:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	601a      	str	r2, [r3, #0]
 8002e30:	605a      	str	r2, [r3, #4]
 8002e32:	609a      	str	r2, [r3, #8]
 8002e34:	60da      	str	r2, [r3, #12]
 8002e36:	611a      	str	r2, [r3, #16]
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002e38:	f107 030c 	add.w	r3, r7, #12
 8002e3c:	2250      	movs	r2, #80	; 0x50
 8002e3e:	2100      	movs	r1, #0
 8002e40:	4618      	mov	r0, r3
 8002e42:	f00a fbdf 	bl	800d604 <memset>
  if(huart->Instance==LPUART1)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a68      	ldr	r2, [pc, #416]	; (8002fec <HAL_UART_MspInit+0x1cc>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d16e      	bne.n	8002f2e <HAL_UART_MspInit+0x10e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002e50:	2302      	movs	r3, #2
 8002e52:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002e54:	2300      	movs	r3, #0
 8002e56:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002e58:	f107 030c 	add.w	r3, r7, #12
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f004 fc34 	bl	80076ca <HAL_RCCEx_PeriphCLKConfig>
 8002e62:	4603      	mov	r3, r0
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d001      	beq.n	8002e6c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002e68:	f7ff ff10 	bl	8002c8c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002e6c:	2001      	movs	r0, #1
 8002e6e:	f7ff ff70 	bl	8002d52 <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e72:	2001      	movs	r0, #1
 8002e74:	f7ff ff22 	bl	8002cbc <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002e78:	230c      	movs	r3, #12
 8002e7a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e7c:	2302      	movs	r3, #2
 8002e7e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e80:	2300      	movs	r3, #0
 8002e82:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e84:	2303      	movs	r3, #3
 8002e86:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002e88:	2308      	movs	r3, #8
 8002e8a:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e8c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002e90:	4619      	mov	r1, r3
 8002e92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e96:	f002 fe89 	bl	8005bac <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel4;
 8002e9a:	4b55      	ldr	r3, [pc, #340]	; (8002ff0 <HAL_UART_MspInit+0x1d0>)
 8002e9c:	4a55      	ldr	r2, [pc, #340]	; (8002ff4 <HAL_UART_MspInit+0x1d4>)
 8002e9e:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8002ea0:	4b53      	ldr	r3, [pc, #332]	; (8002ff0 <HAL_UART_MspInit+0x1d0>)
 8002ea2:	2211      	movs	r2, #17
 8002ea4:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002ea6:	4b52      	ldr	r3, [pc, #328]	; (8002ff0 <HAL_UART_MspInit+0x1d0>)
 8002ea8:	2210      	movs	r2, #16
 8002eaa:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002eac:	4b50      	ldr	r3, [pc, #320]	; (8002ff0 <HAL_UART_MspInit+0x1d0>)
 8002eae:	2200      	movs	r2, #0
 8002eb0:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002eb2:	4b4f      	ldr	r3, [pc, #316]	; (8002ff0 <HAL_UART_MspInit+0x1d0>)
 8002eb4:	2280      	movs	r2, #128	; 0x80
 8002eb6:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002eb8:	4b4d      	ldr	r3, [pc, #308]	; (8002ff0 <HAL_UART_MspInit+0x1d0>)
 8002eba:	2200      	movs	r2, #0
 8002ebc:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ebe:	4b4c      	ldr	r3, [pc, #304]	; (8002ff0 <HAL_UART_MspInit+0x1d0>)
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8002ec4:	4b4a      	ldr	r3, [pc, #296]	; (8002ff0 <HAL_UART_MspInit+0x1d0>)
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002eca:	4b49      	ldr	r3, [pc, #292]	; (8002ff0 <HAL_UART_MspInit+0x1d0>)
 8002ecc:	2200      	movs	r2, #0
 8002ece:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8002ed0:	4847      	ldr	r0, [pc, #284]	; (8002ff0 <HAL_UART_MspInit+0x1d0>)
 8002ed2:	f002 fad7 	bl	8005484 <HAL_DMA_Init>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d001      	beq.n	8002ee0 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 8002edc:	f7ff fed6 	bl	8002c8c <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_DMAMUX1_CH1_EVT;
 8002ee0:	f04f 5388 	mov.w	r3, #285212672	; 0x11000000
 8002ee4:	65fb      	str	r3, [r7, #92]	; 0x5c
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	663b      	str	r3, [r7, #96]	; 0x60
    pSyncConfig.SyncEnable = DISABLE;
 8002eea:	2300      	movs	r3, #0
 8002eec:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
    pSyncConfig.EventEnable = DISABLE;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
    pSyncConfig.RequestNumber = 1;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_DMAEx_ConfigMuxSync(&hdma_lpuart1_tx, &pSyncConfig) != HAL_OK)
 8002efa:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002efe:	4619      	mov	r1, r3
 8002f00:	483b      	ldr	r0, [pc, #236]	; (8002ff0 <HAL_UART_MspInit+0x1d0>)
 8002f02:	f002 fdf1 	bl	8005ae8 <HAL_DMAEx_ConfigMuxSync>
 8002f06:	4603      	mov	r3, r0
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d001      	beq.n	8002f10 <HAL_UART_MspInit+0xf0>
    {
      Error_Handler();
 8002f0c:	f7ff febe 	bl	8002c8c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	4a37      	ldr	r2, [pc, #220]	; (8002ff0 <HAL_UART_MspInit+0x1d0>)
 8002f14:	67da      	str	r2, [r3, #124]	; 0x7c
 8002f16:	4a36      	ldr	r2, [pc, #216]	; (8002ff0 <HAL_UART_MspInit+0x1d0>)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	2100      	movs	r1, #0
 8002f20:	2025      	movs	r0, #37	; 0x25
 8002f22:	f002 fa50 	bl	80053c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8002f26:	2025      	movs	r0, #37	; 0x25
 8002f28:	f002 fa67 	bl	80053fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002f2c:	e05a      	b.n	8002fe4 <HAL_UART_MspInit+0x1c4>
  else if(huart->Instance==USART1)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a31      	ldr	r2, [pc, #196]	; (8002ff8 <HAL_UART_MspInit+0x1d8>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d155      	bne.n	8002fe4 <HAL_UART_MspInit+0x1c4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002f40:	f107 030c 	add.w	r3, r7, #12
 8002f44:	4618      	mov	r0, r3
 8002f46:	f004 fbc0 	bl	80076ca <HAL_RCCEx_PeriphCLKConfig>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d001      	beq.n	8002f54 <HAL_UART_MspInit+0x134>
      Error_Handler();
 8002f50:	f7ff fe9c 	bl	8002c8c <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002f54:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002f58:	f7ff ff14 	bl	8002d84 <LL_APB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f5c:	2002      	movs	r0, #2
 8002f5e:	f7ff fead 	bl	8002cbc <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002f62:	23c0      	movs	r3, #192	; 0xc0
 8002f64:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f66:	2302      	movs	r3, #2
 8002f68:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002f72:	2307      	movs	r3, #7
 8002f74:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f76:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002f7a:	4619      	mov	r1, r3
 8002f7c:	481f      	ldr	r0, [pc, #124]	; (8002ffc <HAL_UART_MspInit+0x1dc>)
 8002f7e:	f002 fe15 	bl	8005bac <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA2_Channel4;
 8002f82:	4b1f      	ldr	r3, [pc, #124]	; (8003000 <HAL_UART_MspInit+0x1e0>)
 8002f84:	4a1f      	ldr	r2, [pc, #124]	; (8003004 <HAL_UART_MspInit+0x1e4>)
 8002f86:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8002f88:	4b1d      	ldr	r3, [pc, #116]	; (8003000 <HAL_UART_MspInit+0x1e0>)
 8002f8a:	220f      	movs	r2, #15
 8002f8c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002f8e:	4b1c      	ldr	r3, [pc, #112]	; (8003000 <HAL_UART_MspInit+0x1e0>)
 8002f90:	2210      	movs	r2, #16
 8002f92:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f94:	4b1a      	ldr	r3, [pc, #104]	; (8003000 <HAL_UART_MspInit+0x1e0>)
 8002f96:	2200      	movs	r2, #0
 8002f98:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002f9a:	4b19      	ldr	r3, [pc, #100]	; (8003000 <HAL_UART_MspInit+0x1e0>)
 8002f9c:	2280      	movs	r2, #128	; 0x80
 8002f9e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002fa0:	4b17      	ldr	r3, [pc, #92]	; (8003000 <HAL_UART_MspInit+0x1e0>)
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002fa6:	4b16      	ldr	r3, [pc, #88]	; (8003000 <HAL_UART_MspInit+0x1e0>)
 8002fa8:	2200      	movs	r2, #0
 8002faa:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002fac:	4b14      	ldr	r3, [pc, #80]	; (8003000 <HAL_UART_MspInit+0x1e0>)
 8002fae:	2200      	movs	r2, #0
 8002fb0:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002fb2:	4b13      	ldr	r3, [pc, #76]	; (8003000 <HAL_UART_MspInit+0x1e0>)
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002fb8:	4811      	ldr	r0, [pc, #68]	; (8003000 <HAL_UART_MspInit+0x1e0>)
 8002fba:	f002 fa63 	bl	8005484 <HAL_DMA_Init>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d001      	beq.n	8002fc8 <HAL_UART_MspInit+0x1a8>
      Error_Handler();
 8002fc4:	f7ff fe62 	bl	8002c8c <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	4a0d      	ldr	r2, [pc, #52]	; (8003000 <HAL_UART_MspInit+0x1e0>)
 8002fcc:	67da      	str	r2, [r3, #124]	; 0x7c
 8002fce:	4a0c      	ldr	r2, [pc, #48]	; (8003000 <HAL_UART_MspInit+0x1e0>)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	2100      	movs	r1, #0
 8002fd8:	2024      	movs	r0, #36	; 0x24
 8002fda:	f002 f9f4 	bl	80053c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002fde:	2024      	movs	r0, #36	; 0x24
 8002fe0:	f002 fa0b 	bl	80053fa <HAL_NVIC_EnableIRQ>
}
 8002fe4:	bf00      	nop
 8002fe6:	3780      	adds	r7, #128	; 0x80
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	40008000 	.word	0x40008000
 8002ff0:	200005b8 	.word	0x200005b8
 8002ff4:	40020044 	.word	0x40020044
 8002ff8:	40013800 	.word	0x40013800
 8002ffc:	48000400 	.word	0x48000400
 8003000:	20000618 	.word	0x20000618
 8003004:	40020444 	.word	0x40020444

08003008 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b096      	sub	sp, #88	; 0x58
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003010:	f107 0308 	add.w	r3, r7, #8
 8003014:	2250      	movs	r2, #80	; 0x50
 8003016:	2100      	movs	r1, #0
 8003018:	4618      	mov	r0, r3
 800301a:	f00a faf3 	bl	800d604 <memset>
  if(hrng->Instance==RNG)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a0d      	ldr	r2, [pc, #52]	; (8003058 <HAL_RNG_MspInit+0x50>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d113      	bne.n	8003050 <HAL_RNG_MspInit+0x48>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8003028:	f44f 7300 	mov.w	r3, #512	; 0x200
 800302c:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 800302e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003032:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003034:	f107 0308 	add.w	r3, r7, #8
 8003038:	4618      	mov	r0, r3
 800303a:	f004 fb46 	bl	80076ca <HAL_RCCEx_PeriphCLKConfig>
 800303e:	4603      	mov	r3, r0
 8003040:	2b00      	cmp	r3, #0
 8003042:	d001      	beq.n	8003048 <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 8003044:	f7ff fe22 	bl	8002c8c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8003048:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800304c:	f7ff fe4f 	bl	8002cee <LL_AHB3_GRP1_EnableClock>
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8003050:	bf00      	nop
 8003052:	3758      	adds	r7, #88	; 0x58
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}
 8003058:	58001000 	.word	0x58001000

0800305c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b096      	sub	sp, #88	; 0x58
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003064:	f107 0308 	add.w	r3, r7, #8
 8003068:	2250      	movs	r2, #80	; 0x50
 800306a:	2100      	movs	r1, #0
 800306c:	4618      	mov	r0, r3
 800306e:	f00a fac9 	bl	800d604 <memset>
  if(hrtc->Instance==RTC)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a12      	ldr	r2, [pc, #72]	; (80030c0 <HAL_RTC_MspInit+0x64>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d11d      	bne.n	80030b8 <HAL_RTC_MspInit+0x5c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800307c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003080:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003082:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003086:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003088:	f107 0308 	add.w	r3, r7, #8
 800308c:	4618      	mov	r0, r3
 800308e:	f004 fb1c 	bl	80076ca <HAL_RCCEx_PeriphCLKConfig>
 8003092:	4603      	mov	r3, r0
 8003094:	2b00      	cmp	r3, #0
 8003096:	d001      	beq.n	800309c <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8003098:	f7ff fdf8 	bl	8002c8c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800309c:	f7ff fdfd 	bl	8002c9a <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80030a0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80030a4:	f7ff fe3c 	bl	8002d20 <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 80030a8:	2200      	movs	r2, #0
 80030aa:	2100      	movs	r1, #0
 80030ac:	2003      	movs	r0, #3
 80030ae:	f002 f98a 	bl	80053c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 80030b2:	2003      	movs	r0, #3
 80030b4:	f002 f9a1 	bl	80053fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80030b8:	bf00      	nop
 80030ba:	3758      	adds	r7, #88	; 0x58
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	40002800 	.word	0x40002800

080030c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80030c4:	b480      	push	{r7}
 80030c6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80030c8:	bf00      	nop
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr

080030d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80030d2:	b480      	push	{r7}
 80030d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80030d6:	e7fe      	b.n	80030d6 <HardFault_Handler+0x4>

080030d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80030d8:	b480      	push	{r7}
 80030da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80030dc:	e7fe      	b.n	80030dc <MemManage_Handler+0x4>

080030de <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80030de:	b480      	push	{r7}
 80030e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80030e2:	e7fe      	b.n	80030e2 <BusFault_Handler+0x4>

080030e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80030e4:	b480      	push	{r7}
 80030e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80030e8:	e7fe      	b.n	80030e8 <UsageFault_Handler+0x4>

080030ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80030ea:	b480      	push	{r7}
 80030ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80030ee:	bf00      	nop
 80030f0:	46bd      	mov	sp, r7
 80030f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f6:	4770      	bx	lr

080030f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80030f8:	b480      	push	{r7}
 80030fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80030fc:	bf00      	nop
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr

08003106 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003106:	b480      	push	{r7}
 8003108:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800310a:	bf00      	nop
 800310c:	46bd      	mov	sp, r7
 800310e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003112:	4770      	bx	lr

08003114 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003118:	f001 ffd6 	bl	80050c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800311c:	bf00      	nop
 800311e:	bd80      	pop	{r7, pc}

08003120 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8003124:	f7fe ffee 	bl	8002104 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8003128:	bf00      	nop
 800312a:	bd80      	pop	{r7, pc}

0800312c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW2_User_Pin);
 8003130:	2001      	movs	r0, #1
 8003132:	f002 fec3 	bl	8005ebc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003136:	bf00      	nop
 8003138:	bd80      	pop	{r7, pc}

0800313a <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800313a:	b580      	push	{r7, lr}
 800313c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW3_User_Pin);
 800313e:	2002      	movs	r0, #2
 8003140:	f002 febc 	bl	8005ebc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8003144:	bf00      	nop
 8003146:	bd80      	pop	{r7, pc}

08003148 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW1_User_Pin);
 800314c:	2010      	movs	r0, #16
 800314e:	f002 feb5 	bl	8005ebc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8003152:	bf00      	nop
 8003154:	bd80      	pop	{r7, pc}
	...

08003158 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 800315c:	4802      	ldr	r0, [pc, #8]	; (8003168 <DMA1_Channel4_IRQHandler+0x10>)
 800315e:	f002 fb72 	bl	8005846 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8003162:	bf00      	nop
 8003164:	bd80      	pop	{r7, pc}
 8003166:	bf00      	nop
 8003168:	200005b8 	.word	0x200005b8

0800316c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003170:	4802      	ldr	r0, [pc, #8]	; (800317c <USART1_IRQHandler+0x10>)
 8003172:	f005 f85f 	bl	8008234 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003176:	bf00      	nop
 8003178:	bd80      	pop	{r7, pc}
 800317a:	bf00      	nop
 800317c:	20000524 	.word	0x20000524

08003180 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8003184:	4802      	ldr	r0, [pc, #8]	; (8003190 <LPUART1_IRQHandler+0x10>)
 8003186:	f005 f855 	bl	8008234 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 800318a:	bf00      	nop
 800318c:	bd80      	pop	{r7, pc}
 800318e:	bf00      	nop
 8003190:	20000490 	.word	0x20000490

08003194 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8003198:	f001 fc6e 	bl	8004a78 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 800319c:	bf00      	nop
 800319e:	bd80      	pop	{r7, pc}

080031a0 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 80031a4:	f001 fca0 	bl	8004ae8 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 80031a8:	bf00      	nop
 80031aa:	bd80      	pop	{r7, pc}

080031ac <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 80031b0:	f002 fe9c 	bl	8005eec <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 80031b4:	bf00      	nop
 80031b6:	bd80      	pop	{r7, pc}

080031b8 <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80031bc:	4802      	ldr	r0, [pc, #8]	; (80031c8 <DMA2_Channel4_IRQHandler+0x10>)
 80031be:	f002 fb42 	bl	8005846 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 80031c2:	bf00      	nop
 80031c4:	bd80      	pop	{r7, pc}
 80031c6:	bf00      	nop
 80031c8:	20000618 	.word	0x20000618

080031cc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80031cc:	b480      	push	{r7}
 80031ce:	af00      	add	r7, sp, #0
  return 1;
 80031d0:	2301      	movs	r3, #1
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr

080031dc <_kill>:

int _kill(int pid, int sig)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b082      	sub	sp, #8
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
 80031e4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80031e6:	f00a f9d5 	bl	800d594 <__errno>
 80031ea:	4603      	mov	r3, r0
 80031ec:	2216      	movs	r2, #22
 80031ee:	601a      	str	r2, [r3, #0]
  return -1;
 80031f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	3708      	adds	r7, #8
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}

080031fc <_exit>:

void _exit (int status)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b082      	sub	sp, #8
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003204:	f04f 31ff 	mov.w	r1, #4294967295
 8003208:	6878      	ldr	r0, [r7, #4]
 800320a:	f7ff ffe7 	bl	80031dc <_kill>
  while (1) {}    /* Make sure we hang here */
 800320e:	e7fe      	b.n	800320e <_exit+0x12>

08003210 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b086      	sub	sp, #24
 8003214:	af00      	add	r7, sp, #0
 8003216:	60f8      	str	r0, [r7, #12]
 8003218:	60b9      	str	r1, [r7, #8]
 800321a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800321c:	2300      	movs	r3, #0
 800321e:	617b      	str	r3, [r7, #20]
 8003220:	e00a      	b.n	8003238 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003222:	f3af 8000 	nop.w
 8003226:	4601      	mov	r1, r0
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	1c5a      	adds	r2, r3, #1
 800322c:	60ba      	str	r2, [r7, #8]
 800322e:	b2ca      	uxtb	r2, r1
 8003230:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	3301      	adds	r3, #1
 8003236:	617b      	str	r3, [r7, #20]
 8003238:	697a      	ldr	r2, [r7, #20]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	429a      	cmp	r2, r3
 800323e:	dbf0      	blt.n	8003222 <_read+0x12>
  }

  return len;
 8003240:	687b      	ldr	r3, [r7, #4]
}
 8003242:	4618      	mov	r0, r3
 8003244:	3718      	adds	r7, #24
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}

0800324a <_close>:
  }
  return len;
}

int _close(int file)
{
 800324a:	b480      	push	{r7}
 800324c:	b083      	sub	sp, #12
 800324e:	af00      	add	r7, sp, #0
 8003250:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003252:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003256:	4618      	mov	r0, r3
 8003258:	370c      	adds	r7, #12
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr

08003262 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003262:	b480      	push	{r7}
 8003264:	b083      	sub	sp, #12
 8003266:	af00      	add	r7, sp, #0
 8003268:	6078      	str	r0, [r7, #4]
 800326a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003272:	605a      	str	r2, [r3, #4]
  return 0;
 8003274:	2300      	movs	r3, #0
}
 8003276:	4618      	mov	r0, r3
 8003278:	370c      	adds	r7, #12
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr

08003282 <_isatty>:

int _isatty(int file)
{
 8003282:	b480      	push	{r7}
 8003284:	b083      	sub	sp, #12
 8003286:	af00      	add	r7, sp, #0
 8003288:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800328a:	2301      	movs	r3, #1
}
 800328c:	4618      	mov	r0, r3
 800328e:	370c      	adds	r7, #12
 8003290:	46bd      	mov	sp, r7
 8003292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003296:	4770      	bx	lr

08003298 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003298:	b480      	push	{r7}
 800329a:	b085      	sub	sp, #20
 800329c:	af00      	add	r7, sp, #0
 800329e:	60f8      	str	r0, [r7, #12]
 80032a0:	60b9      	str	r1, [r7, #8]
 80032a2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80032a4:	2300      	movs	r3, #0
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3714      	adds	r7, #20
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr
	...

080032b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b086      	sub	sp, #24
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80032bc:	4a14      	ldr	r2, [pc, #80]	; (8003310 <_sbrk+0x5c>)
 80032be:	4b15      	ldr	r3, [pc, #84]	; (8003314 <_sbrk+0x60>)
 80032c0:	1ad3      	subs	r3, r2, r3
 80032c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80032c8:	4b13      	ldr	r3, [pc, #76]	; (8003318 <_sbrk+0x64>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d102      	bne.n	80032d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80032d0:	4b11      	ldr	r3, [pc, #68]	; (8003318 <_sbrk+0x64>)
 80032d2:	4a12      	ldr	r2, [pc, #72]	; (800331c <_sbrk+0x68>)
 80032d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80032d6:	4b10      	ldr	r3, [pc, #64]	; (8003318 <_sbrk+0x64>)
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4413      	add	r3, r2
 80032de:	693a      	ldr	r2, [r7, #16]
 80032e0:	429a      	cmp	r2, r3
 80032e2:	d207      	bcs.n	80032f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80032e4:	f00a f956 	bl	800d594 <__errno>
 80032e8:	4603      	mov	r3, r0
 80032ea:	220c      	movs	r2, #12
 80032ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80032ee:	f04f 33ff 	mov.w	r3, #4294967295
 80032f2:	e009      	b.n	8003308 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80032f4:	4b08      	ldr	r3, [pc, #32]	; (8003318 <_sbrk+0x64>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80032fa:	4b07      	ldr	r3, [pc, #28]	; (8003318 <_sbrk+0x64>)
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	4413      	add	r3, r2
 8003302:	4a05      	ldr	r2, [pc, #20]	; (8003318 <_sbrk+0x64>)
 8003304:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003306:	68fb      	ldr	r3, [r7, #12]
}
 8003308:	4618      	mov	r0, r3
 800330a:	3718      	adds	r7, #24
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}
 8003310:	20030000 	.word	0x20030000
 8003314:	00001000 	.word	0x00001000
 8003318:	200006b0 	.word	0x200006b0
 800331c:	20001aa8 	.word	0x20001aa8

08003320 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8003320:	b480      	push	{r7}
 8003322:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 8003324:	4b03      	ldr	r3, [pc, #12]	; (8003334 <LL_FLASH_GetUDN+0x14>)
 8003326:	681b      	ldr	r3, [r3, #0]
}
 8003328:	4618      	mov	r0, r3
 800332a:	46bd      	mov	sp, r7
 800332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003330:	4770      	bx	lr
 8003332:	bf00      	nop
 8003334:	1fff7580 	.word	0x1fff7580

08003338 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8003338:	b480      	push	{r7}
 800333a:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 800333c:	4b03      	ldr	r3, [pc, #12]	; (800334c <LL_FLASH_GetDeviceID+0x14>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	b2db      	uxtb	r3, r3
}
 8003342:	4618      	mov	r0, r3
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr
 800334c:	1fff7584 	.word	0x1fff7584

08003350 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8003350:	b480      	push	{r7}
 8003352:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8003354:	4b03      	ldr	r3, [pc, #12]	; (8003364 <LL_FLASH_GetSTCompanyID+0x14>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	0a1b      	lsrs	r3, r3, #8
}
 800335a:	4618      	mov	r0, r3
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr
 8003364:	1fff7584 	.word	0x1fff7584

08003368 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 8003368:	b5b0      	push	{r4, r5, r7, lr}
 800336a:	b090      	sub	sp, #64	; 0x40
 800336c:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800336e:	2392      	movs	r3, #146	; 0x92
 8003370:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8003374:	4b36      	ldr	r3, [pc, #216]	; (8003450 <APP_BLE_Init+0xe8>)
 8003376:	1d3c      	adds	r4, r7, #4
 8003378:	461d      	mov	r5, r3
 800337a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800337c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800337e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003380:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003382:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003384:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003386:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800338a:	c403      	stmia	r4!, {r0, r1}
 800338c:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 800338e:	f000 fa3b 	bl	8003808 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 8003392:	2101      	movs	r1, #1
 8003394:	2002      	movs	r0, #2
 8003396:	f009 fe8f 	bl	800d0b8 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 800339a:	4a2e      	ldr	r2, [pc, #184]	; (8003454 <APP_BLE_Init+0xec>)
 800339c:	2100      	movs	r1, #0
 800339e:	2004      	movs	r0, #4
 80033a0:	f009 ffb6 	bl	800d310 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 80033a4:	1d3b      	adds	r3, r7, #4
 80033a6:	4618      	mov	r0, r3
 80033a8:	f008 fc26 	bl	800bbf8 <SHCI_C2_BLE_Init>
 80033ac:	4603      	mov	r3, r0
 80033ae:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  if (status != SHCI_Success)
 80033b2:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d008      	beq.n	80033cc <APP_BLE_Init+0x64>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
 80033ba:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80033be:	4619      	mov	r1, r3
 80033c0:	4825      	ldr	r0, [pc, #148]	; (8003458 <APP_BLE_Init+0xf0>)
 80033c2:	f00a fd91 	bl	800dee8 <iprintf>
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 80033c6:	f7ff fc61 	bl	8002c8c <Error_Handler>
 80033ca:	e002      	b.n	80033d2 <APP_BLE_Init+0x6a>
  }
  else
  {
    APP_DBG_MSG("  Success: SHCI_C2_BLE_Init command\n\r");
 80033cc:	4823      	ldr	r0, [pc, #140]	; (800345c <APP_BLE_Init+0xf4>)
 80033ce:	f00a fd8b 	bl	800dee8 <iprintf>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 80033d2:	f000 fa2f 	bl	8003834 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 80033d6:	f009 fb6f 	bl	800cab8 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 80033da:	4b21      	ldr	r3, [pc, #132]	; (8003460 <APP_BLE_Init+0xf8>)
 80033dc:	2200      	movs	r2, #0
 80033de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 80033e2:	4b1f      	ldr	r3, [pc, #124]	; (8003460 <APP_BLE_Init+0xf8>)
 80033e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80033e8:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */

  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 80033ea:	4a1e      	ldr	r2, [pc, #120]	; (8003464 <APP_BLE_Init+0xfc>)
 80033ec:	2100      	movs	r1, #0
 80033ee:	2001      	movs	r0, #1
 80033f0:	f009 ff8e 	bl	800d310 <UTIL_SEQ_RegTask>

  /* USER CODE BEGIN APP_BLE_Init_4 */
#if (L2CAP_REQUEST_NEW_CONN_PARAM != 0)
  UTIL_SEQ_RegTask(1<<CFG_TASK_CONN_UPDATE_REG_ID, UTIL_SEQ_RFU, Connection_Interval_Update_Req);
 80033f4:	4a1c      	ldr	r2, [pc, #112]	; (8003468 <APP_BLE_Init+0x100>)
 80033f6:	2100      	movs	r1, #0
 80033f8:	2002      	movs	r0, #2
 80033fa:	f009 ff89 	bl	800d310 <UTIL_SEQ_RegTask>

  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 80033fe:	2006      	movs	r0, #6
 8003400:	f007 ffcc 	bl	800b39c <aci_hal_set_radio_activity_mask>
 8003404:	4603      	mov	r3, r0
 8003406:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (ret != BLE_STATUS_SUCCESS)
 800340a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800340e:	2b00      	cmp	r3, #0
 8003410:	d006      	beq.n	8003420 <APP_BLE_Init+0xb8>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_radio_activity_mask command, result: 0x%x \n\r", ret);
 8003412:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003416:	4619      	mov	r1, r3
 8003418:	4814      	ldr	r0, [pc, #80]	; (800346c <APP_BLE_Init+0x104>)
 800341a:	f00a fd65 	bl	800dee8 <iprintf>
 800341e:	e002      	b.n	8003426 <APP_BLE_Init+0xbe>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_radio_activity_mask command\n\r");
 8003420:	4813      	ldr	r0, [pc, #76]	; (8003470 <APP_BLE_Init+0x108>)
 8003422:	f00a fd61 	bl	800dee8 <iprintf>
  }
#endif /* RADIO_ACTIVITY_EVENT != 0 */

#if (L2CAP_REQUEST_NEW_CONN_PARAM != 0)
  index_con_int = 0;
 8003426:	4b13      	ldr	r3, [pc, #76]	; (8003474 <APP_BLE_Init+0x10c>)
 8003428:	2200      	movs	r2, #0
 800342a:	701a      	strb	r2, [r3, #0]
  mutex = 1;
 800342c:	4b12      	ldr	r3, [pc, #72]	; (8003478 <APP_BLE_Init+0x110>)
 800342e:	2201      	movs	r2, #1
 8003430:	701a      	strb	r2, [r3, #0]
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 8003432:	f000 fe41 	bl	80040b8 <Custom_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 8003436:	4b0a      	ldr	r3, [pc, #40]	; (8003460 <APP_BLE_Init+0xf8>)
 8003438:	2200      	movs	r2, #0
 800343a:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 800343c:	4b08      	ldr	r3, [pc, #32]	; (8003460 <APP_BLE_Init+0xf8>)
 800343e:	2200      	movs	r2, #0
 8003440:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 8003442:	2001      	movs	r0, #1
 8003444:	f000 fb84 	bl	8003b50 <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 8003448:	bf00      	nop
}
 800344a:	3740      	adds	r7, #64	; 0x40
 800344c:	46bd      	mov	sp, r7
 800344e:	bdb0      	pop	{r4, r5, r7, pc}
 8003450:	0801069c 	.word	0x0801069c
 8003454:	0800b869 	.word	0x0800b869
 8003458:	080105c0 	.word	0x080105c0
 800345c:	080105f8 	.word	0x080105f8
 8003460:	200006bc 	.word	0x200006bc
 8003464:	08003c79 	.word	0x08003c79
 8003468:	08003d99 	.word	0x08003d99
 800346c:	08010620 	.word	0x08010620
 8003470:	08010664 	.word	0x08010664
 8003474:	20000744 	.word	0x20000744
 8003478:	20000745 	.word	0x20000745

0800347c <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 800347c:	b5b0      	push	{r4, r5, r7, lr}
 800347e:	b08e      	sub	sp, #56	; 0x38
 8003480:	af04      	add	r7, sp, #16
 8003482:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 8003484:	2392      	movs	r3, #146	; 0x92
 8003486:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	3301      	adds	r3, #1
 800348e:	623b      	str	r3, [r7, #32]

  switch (p_event_pckt->evt)
 8003490:	6a3b      	ldr	r3, [r7, #32]
 8003492:	781b      	ldrb	r3, [r3, #0]
 8003494:	2bff      	cmp	r3, #255	; 0xff
 8003496:	f000 80d7 	beq.w	8003648 <SVCCTL_App_Notification+0x1cc>
 800349a:	2bff      	cmp	r3, #255	; 0xff
 800349c:	f300 81a9 	bgt.w	80037f2 <SVCCTL_App_Notification+0x376>
 80034a0:	2b05      	cmp	r3, #5
 80034a2:	d002      	beq.n	80034aa <SVCCTL_App_Notification+0x2e>
 80034a4:	2b3e      	cmp	r3, #62	; 0x3e
 80034a6:	d02e      	beq.n	8003506 <SVCCTL_App_Notification+0x8a>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 80034a8:	e1a3      	b.n	80037f2 <SVCCTL_App_Notification+0x376>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 80034aa:	6a3b      	ldr	r3, [r7, #32]
 80034ac:	3302      	adds	r3, #2
 80034ae:	60bb      	str	r3, [r7, #8]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80034b6:	b29a      	uxth	r2, r3
 80034b8:	4bb2      	ldr	r3, [pc, #712]	; (8003784 <SVCCTL_App_Notification+0x308>)
 80034ba:	8adb      	ldrh	r3, [r3, #22]
 80034bc:	429a      	cmp	r2, r3
 80034be:	d114      	bne.n	80034ea <SVCCTL_App_Notification+0x6e>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 80034c0:	4bb0      	ldr	r3, [pc, #704]	; (8003784 <SVCCTL_App_Notification+0x308>)
 80034c2:	2200      	movs	r2, #0
 80034c4:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 80034c6:	4baf      	ldr	r3, [pc, #700]	; (8003784 <SVCCTL_App_Notification+0x308>)
 80034c8:	2200      	movs	r2, #0
 80034ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
        APP_DBG_MSG(">>== HCI_DISCONNECTION_COMPLETE_EVT_CODE\n");
 80034ce:	48ae      	ldr	r0, [pc, #696]	; (8003788 <SVCCTL_App_Notification+0x30c>)
 80034d0:	f00a fda6 	bl	800e020 <puts>
                    p_disconnection_complete_event->Connection_Handle,
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80034da:	b29b      	uxth	r3, r3
        APP_DBG_MSG("     - Connection Handle:   0x%x\n     - Reason:    0x%x\n\r",
 80034dc:	4619      	mov	r1, r3
                    p_disconnection_complete_event->Reason);
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	78db      	ldrb	r3, [r3, #3]
        APP_DBG_MSG("     - Connection Handle:   0x%x\n     - Reason:    0x%x\n\r",
 80034e2:	461a      	mov	r2, r3
 80034e4:	48a9      	ldr	r0, [pc, #676]	; (800378c <SVCCTL_App_Notification+0x310>)
 80034e6:	f00a fcff 	bl	800dee8 <iprintf>
      Adv_Request(APP_BLE_FAST_ADV);
 80034ea:	2001      	movs	r0, #1
 80034ec:	f000 fb30 	bl	8003b50 <Adv_Request>
      HandleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 80034f0:	4ba7      	ldr	r3, [pc, #668]	; (8003790 <SVCCTL_App_Notification+0x314>)
 80034f2:	2201      	movs	r2, #1
 80034f4:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 80034f6:	4ba3      	ldr	r3, [pc, #652]	; (8003784 <SVCCTL_App_Notification+0x308>)
 80034f8:	8ada      	ldrh	r2, [r3, #22]
 80034fa:	4ba5      	ldr	r3, [pc, #660]	; (8003790 <SVCCTL_App_Notification+0x314>)
 80034fc:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&HandleNotification);
 80034fe:	48a4      	ldr	r0, [pc, #656]	; (8003790 <SVCCTL_App_Notification+0x314>)
 8003500:	f000 fdc6 	bl	8004090 <Custom_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 8003504:	e178      	b.n	80037f8 <SVCCTL_App_Notification+0x37c>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 8003506:	6a3b      	ldr	r3, [r7, #32]
 8003508:	3302      	adds	r3, #2
 800350a:	617b      	str	r3, [r7, #20]
      switch (p_meta_evt->subevent)
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	781b      	ldrb	r3, [r3, #0]
 8003510:	2b01      	cmp	r3, #1
 8003512:	d02e      	beq.n	8003572 <SVCCTL_App_Notification+0xf6>
 8003514:	2b03      	cmp	r3, #3
 8003516:	f040 8095 	bne.w	8003644 <SVCCTL_App_Notification+0x1c8>
          p_connection_update_complete_event = (hci_le_connection_update_complete_event_rp0 *) p_meta_evt->data;
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	3301      	adds	r3, #1
 800351e:	613b      	str	r3, [r7, #16]
          APP_DBG_MSG(">>== HCI_LE_CONNECTION_UPDATE_COMPLETE_SUBEVT_CODE\n");
 8003520:	489c      	ldr	r0, [pc, #624]	; (8003794 <SVCCTL_App_Notification+0x318>)
 8003522:	f00a fd7d 	bl	800e020 <puts>
                       p_connection_update_complete_event->Conn_Interval*1.25,
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800352c:	b29b      	uxth	r3, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800352e:	4618      	mov	r0, r3
 8003530:	f7fc ffe0 	bl	80004f4 <__aeabi_i2d>
 8003534:	f04f 0200 	mov.w	r2, #0
 8003538:	4b97      	ldr	r3, [pc, #604]	; (8003798 <SVCCTL_App_Notification+0x31c>)
 800353a:	f7fd f845 	bl	80005c8 <__aeabi_dmul>
 800353e:	4602      	mov	r2, r0
 8003540:	460b      	mov	r3, r1
 8003542:	4610      	mov	r0, r2
 8003544:	4619      	mov	r1, r3
                       p_connection_update_complete_event->Conn_Latency,
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800354c:	b29b      	uxth	r3, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800354e:	461c      	mov	r4, r3
                       p_connection_update_complete_event->Supervision_Timeout*10);
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8003556:	b29b      	uxth	r3, r3
 8003558:	461a      	mov	r2, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800355a:	4613      	mov	r3, r2
 800355c:	009b      	lsls	r3, r3, #2
 800355e:	4413      	add	r3, r2
 8003560:	005b      	lsls	r3, r3, #1
 8003562:	9301      	str	r3, [sp, #4]
 8003564:	9400      	str	r4, [sp, #0]
 8003566:	4602      	mov	r2, r0
 8003568:	460b      	mov	r3, r1
 800356a:	488c      	ldr	r0, [pc, #560]	; (800379c <SVCCTL_App_Notification+0x320>)
 800356c:	f00a fcbc 	bl	800dee8 <iprintf>
          break;
 8003570:	e069      	b.n	8003646 <SVCCTL_App_Notification+0x1ca>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	3301      	adds	r3, #1
 8003576:	60fb      	str	r3, [r7, #12]
          APP_DBG_MSG(">>== HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE - Connection handle: 0x%x\n", p_connection_complete_event->Connection_Handle);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800357e:	b29b      	uxth	r3, r3
 8003580:	4619      	mov	r1, r3
 8003582:	4887      	ldr	r0, [pc, #540]	; (80037a0 <SVCCTL_App_Notification+0x324>)
 8003584:	f00a fcb0 	bl	800dee8 <iprintf>
                      p_connection_complete_event->Peer_Address[5],
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	7a9b      	ldrb	r3, [r3, #10]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 800358c:	4618      	mov	r0, r3
                      p_connection_complete_event->Peer_Address[4],
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	7a5b      	ldrb	r3, [r3, #9]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 8003592:	461c      	mov	r4, r3
                      p_connection_complete_event->Peer_Address[3],
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	7a1b      	ldrb	r3, [r3, #8]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 8003598:	461d      	mov	r5, r3
                      p_connection_complete_event->Peer_Address[2],
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	79db      	ldrb	r3, [r3, #7]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 800359e:	461a      	mov	r2, r3
                      p_connection_complete_event->Peer_Address[1],
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	799b      	ldrb	r3, [r3, #6]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 80035a4:	4619      	mov	r1, r3
                      p_connection_complete_event->Peer_Address[0]);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	795b      	ldrb	r3, [r3, #5]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 80035aa:	9302      	str	r3, [sp, #8]
 80035ac:	9101      	str	r1, [sp, #4]
 80035ae:	9200      	str	r2, [sp, #0]
 80035b0:	462b      	mov	r3, r5
 80035b2:	4622      	mov	r2, r4
 80035b4:	4601      	mov	r1, r0
 80035b6:	487b      	ldr	r0, [pc, #492]	; (80037a4 <SVCCTL_App_Notification+0x328>)
 80035b8:	f00a fc96 	bl	800dee8 <iprintf>
                      p_connection_complete_event->Conn_Interval*1.25,
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 80035c2:	b29b      	uxth	r3, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 80035c4:	4618      	mov	r0, r3
 80035c6:	f7fc ff95 	bl	80004f4 <__aeabi_i2d>
 80035ca:	f04f 0200 	mov.w	r2, #0
 80035ce:	4b72      	ldr	r3, [pc, #456]	; (8003798 <SVCCTL_App_Notification+0x31c>)
 80035d0:	f7fc fffa 	bl	80005c8 <__aeabi_dmul>
 80035d4:	4602      	mov	r2, r0
 80035d6:	460b      	mov	r3, r1
 80035d8:	4610      	mov	r0, r2
 80035da:	4619      	mov	r1, r3
                      p_connection_complete_event->Conn_Latency,
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	f8b3 300d 	ldrh.w	r3, [r3, #13]
 80035e2:	b29b      	uxth	r3, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 80035e4:	461c      	mov	r4, r3
                      p_connection_complete_event->Supervision_Timeout*10
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	f8b3 300f 	ldrh.w	r3, [r3, #15]
 80035ec:	b29b      	uxth	r3, r3
 80035ee:	461a      	mov	r2, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 80035f0:	4613      	mov	r3, r2
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	4413      	add	r3, r2
 80035f6:	005b      	lsls	r3, r3, #1
 80035f8:	9301      	str	r3, [sp, #4]
 80035fa:	9400      	str	r4, [sp, #0]
 80035fc:	4602      	mov	r2, r0
 80035fe:	460b      	mov	r3, r1
 8003600:	4866      	ldr	r0, [pc, #408]	; (800379c <SVCCTL_App_Notification+0x320>)
 8003602:	f00a fc71 	bl	800dee8 <iprintf>
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 8003606:	4b5f      	ldr	r3, [pc, #380]	; (8003784 <SVCCTL_App_Notification+0x308>)
 8003608:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800360c:	2b04      	cmp	r3, #4
 800360e:	d104      	bne.n	800361a <SVCCTL_App_Notification+0x19e>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 8003610:	4b5c      	ldr	r3, [pc, #368]	; (8003784 <SVCCTL_App_Notification+0x308>)
 8003612:	2206      	movs	r2, #6
 8003614:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 8003618:	e003      	b.n	8003622 <SVCCTL_App_Notification+0x1a6>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 800361a:	4b5a      	ldr	r3, [pc, #360]	; (8003784 <SVCCTL_App_Notification+0x308>)
 800361c:	2205      	movs	r2, #5
 800361e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8003628:	b29a      	uxth	r2, r3
 800362a:	4b56      	ldr	r3, [pc, #344]	; (8003784 <SVCCTL_App_Notification+0x308>)
 800362c:	82da      	strh	r2, [r3, #22]
          HandleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 800362e:	4b58      	ldr	r3, [pc, #352]	; (8003790 <SVCCTL_App_Notification+0x314>)
 8003630:	2200      	movs	r2, #0
 8003632:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8003634:	4b53      	ldr	r3, [pc, #332]	; (8003784 <SVCCTL_App_Notification+0x308>)
 8003636:	8ada      	ldrh	r2, [r3, #22]
 8003638:	4b55      	ldr	r3, [pc, #340]	; (8003790 <SVCCTL_App_Notification+0x314>)
 800363a:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&HandleNotification);
 800363c:	4854      	ldr	r0, [pc, #336]	; (8003790 <SVCCTL_App_Notification+0x314>)
 800363e:	f000 fd27 	bl	8004090 <Custom_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 8003642:	e000      	b.n	8003646 <SVCCTL_App_Notification+0x1ca>
          break;
 8003644:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 8003646:	e0d7      	b.n	80037f8 <SVCCTL_App_Notification+0x37c>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 8003648:	6a3b      	ldr	r3, [r7, #32]
 800364a:	3302      	adds	r3, #2
 800364c:	61fb      	str	r3, [r7, #28]
      switch (p_blecore_evt->ecode)
 800364e:	69fb      	ldr	r3, [r7, #28]
 8003650:	881b      	ldrh	r3, [r3, #0]
 8003652:	b29b      	uxth	r3, r3
 8003654:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003658:	d02e      	beq.n	80036b8 <SVCCTL_App_Notification+0x23c>
 800365a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800365e:	f300 80ca 	bgt.w	80037f6 <SVCCTL_App_Notification+0x37a>
 8003662:	2b04      	cmp	r3, #4
 8003664:	f000 80c3 	beq.w	80037ee <SVCCTL_App_Notification+0x372>
 8003668:	2b04      	cmp	r3, #4
 800366a:	f2c0 80c4 	blt.w	80037f6 <SVCCTL_App_Notification+0x37a>
 800366e:	f240 420a 	movw	r2, #1034	; 0x40a
 8003672:	4293      	cmp	r3, r2
 8003674:	f300 80bf 	bgt.w	80037f6 <SVCCTL_App_Notification+0x37a>
 8003678:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800367c:	f340 80bb 	ble.w	80037f6 <SVCCTL_App_Notification+0x37a>
 8003680:	f2a3 4301 	subw	r3, r3, #1025	; 0x401
 8003684:	2b09      	cmp	r3, #9
 8003686:	f200 80b6 	bhi.w	80037f6 <SVCCTL_App_Notification+0x37a>
 800368a:	a201      	add	r2, pc, #4	; (adr r2, 8003690 <SVCCTL_App_Notification+0x214>)
 800368c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003690:	0800375d 	.word	0x0800375d
 8003694:	080036d1 	.word	0x080036d1
 8003698:	080037f7 	.word	0x080037f7
 800369c:	080037f7 	.word	0x080037f7
 80036a0:	080037f7 	.word	0x080037f7
 80036a4:	080037f7 	.word	0x080037f7
 80036a8:	080036c1 	.word	0x080036c1
 80036ac:	080037f7 	.word	0x080037f7
 80036b0:	08003707 	.word	0x08003707
 80036b4:	080036c9 	.word	0x080036c9
          mutex = 1;
 80036b8:	4b3b      	ldr	r3, [pc, #236]	; (80037a8 <SVCCTL_App_Notification+0x32c>)
 80036ba:	2201      	movs	r2, #1
 80036bc:	701a      	strb	r2, [r3, #0]
          break;
 80036be:	e097      	b.n	80037f0 <SVCCTL_App_Notification+0x374>
          APP_DBG_MSG(">>== ACI_GAP_PROC_COMPLETE_VSEVT_CODE \r");
 80036c0:	483a      	ldr	r0, [pc, #232]	; (80037ac <SVCCTL_App_Notification+0x330>)
 80036c2:	f00a fc11 	bl	800dee8 <iprintf>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 80036c6:	e093      	b.n	80037f0 <SVCCTL_App_Notification+0x374>
          APP_DBG_MSG(">>== ACI_GAP_KEYPRESS_NOTIFICATION_VSEVT_CODE\n");
 80036c8:	4839      	ldr	r0, [pc, #228]	; (80037b0 <SVCCTL_App_Notification+0x334>)
 80036ca:	f00a fca9 	bl	800e020 <puts>
          break;
 80036ce:	e08f      	b.n	80037f0 <SVCCTL_App_Notification+0x374>
          APP_DBG_MSG(">>== ACI_GAP_PASS_KEY_REQ_VSEVT_CODE \n");
 80036d0:	4838      	ldr	r0, [pc, #224]	; (80037b4 <SVCCTL_App_Notification+0x338>)
 80036d2:	f00a fca5 	bl	800e020 <puts>
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 80036d6:	4b2b      	ldr	r3, [pc, #172]	; (8003784 <SVCCTL_App_Notification+0x308>)
 80036d8:	8adb      	ldrh	r3, [r3, #22]
 80036da:	4937      	ldr	r1, [pc, #220]	; (80037b8 <SVCCTL_App_Notification+0x33c>)
 80036dc:	4618      	mov	r0, r3
 80036de:	f006 ffe3 	bl	800a6a8 <aci_gap_pass_key_resp>
 80036e2:	4603      	mov	r3, r0
 80036e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          if (ret != BLE_STATUS_SUCCESS)
 80036e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d006      	beq.n	80036fe <SVCCTL_App_Notification+0x282>
            APP_DBG_MSG("==>> aci_gap_pass_key_resp : Fail, reason: 0x%x\n", ret);
 80036f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80036f4:	4619      	mov	r1, r3
 80036f6:	4831      	ldr	r0, [pc, #196]	; (80037bc <SVCCTL_App_Notification+0x340>)
 80036f8:	f00a fbf6 	bl	800dee8 <iprintf>
          break;
 80036fc:	e078      	b.n	80037f0 <SVCCTL_App_Notification+0x374>
            APP_DBG_MSG("==>> aci_gap_pass_key_resp : Success \n");
 80036fe:	4830      	ldr	r0, [pc, #192]	; (80037c0 <SVCCTL_App_Notification+0x344>)
 8003700:	f00a fc8e 	bl	800e020 <puts>
          break;
 8003704:	e074      	b.n	80037f0 <SVCCTL_App_Notification+0x374>
          APP_DBG_MSG(">>== ACI_GAP_NUMERIC_COMPARISON_VALUE_VSEVT_CODE\n");
 8003706:	482f      	ldr	r0, [pc, #188]	; (80037c4 <SVCCTL_App_Notification+0x348>)
 8003708:	f00a fc8a 	bl	800e020 <puts>
                      ((aci_gap_numeric_comparison_value_event_rp0 *)(p_blecore_evt->data))->Numeric_Value);
 800370c:	69fb      	ldr	r3, [r7, #28]
 800370e:	3302      	adds	r3, #2
          APP_DBG_MSG("     - numeric_value = %ld\n",
 8003710:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8003714:	4619      	mov	r1, r3
 8003716:	482c      	ldr	r0, [pc, #176]	; (80037c8 <SVCCTL_App_Notification+0x34c>)
 8003718:	f00a fbe6 	bl	800dee8 <iprintf>
                      ((aci_gap_numeric_comparison_value_event_rp0 *)(p_blecore_evt->data))->Numeric_Value);
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	3302      	adds	r3, #2
          APP_DBG_MSG("     - Hex_value = %lx\n",
 8003720:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8003724:	4619      	mov	r1, r3
 8003726:	4829      	ldr	r0, [pc, #164]	; (80037cc <SVCCTL_App_Notification+0x350>)
 8003728:	f00a fbde 	bl	800dee8 <iprintf>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 800372c:	4b15      	ldr	r3, [pc, #84]	; (8003784 <SVCCTL_App_Notification+0x308>)
 800372e:	8adb      	ldrh	r3, [r3, #22]
 8003730:	2101      	movs	r1, #1
 8003732:	4618      	mov	r0, r3
 8003734:	f007 f986 	bl	800aa44 <aci_gap_numeric_comparison_value_confirm_yesno>
 8003738:	4603      	mov	r3, r0
 800373a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          if (ret != BLE_STATUS_SUCCESS)
 800373e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003742:	2b00      	cmp	r3, #0
 8003744:	d006      	beq.n	8003754 <SVCCTL_App_Notification+0x2d8>
            APP_DBG_MSG("==>> aci_gap_numeric_comparison_value_confirm_yesno-->YES : Fail, reason: 0x%x\n", ret);
 8003746:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800374a:	4619      	mov	r1, r3
 800374c:	4820      	ldr	r0, [pc, #128]	; (80037d0 <SVCCTL_App_Notification+0x354>)
 800374e:	f00a fbcb 	bl	800dee8 <iprintf>
          break;
 8003752:	e04d      	b.n	80037f0 <SVCCTL_App_Notification+0x374>
            APP_DBG_MSG("==>> aci_gap_numeric_comparison_value_confirm_yesno-->YES : Success \n");
 8003754:	481f      	ldr	r0, [pc, #124]	; (80037d4 <SVCCTL_App_Notification+0x358>)
 8003756:	f00a fc63 	bl	800e020 <puts>
          break;
 800375a:	e049      	b.n	80037f0 <SVCCTL_App_Notification+0x374>
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 800375c:	69fb      	ldr	r3, [r7, #28]
 800375e:	3302      	adds	r3, #2
 8003760:	61bb      	str	r3, [r7, #24]
          APP_DBG_MSG(">>== ACI_GAP_PAIRING_COMPLETE_VSEVT_CODE\n");
 8003762:	481d      	ldr	r0, [pc, #116]	; (80037d8 <SVCCTL_App_Notification+0x35c>)
 8003764:	f00a fc5c 	bl	800e020 <puts>
          if (p_pairing_complete->Status != 0)
 8003768:	69bb      	ldr	r3, [r7, #24]
 800376a:	789b      	ldrb	r3, [r3, #2]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d037      	beq.n	80037e0 <SVCCTL_App_Notification+0x364>
            APP_DBG_MSG("     - Pairing KO \n     - Status: 0x%x\n     - Reason: 0x%x\n", p_pairing_complete->Status, p_pairing_complete->Reason);
 8003770:	69bb      	ldr	r3, [r7, #24]
 8003772:	789b      	ldrb	r3, [r3, #2]
 8003774:	4619      	mov	r1, r3
 8003776:	69bb      	ldr	r3, [r7, #24]
 8003778:	78db      	ldrb	r3, [r3, #3]
 800377a:	461a      	mov	r2, r3
 800377c:	4817      	ldr	r0, [pc, #92]	; (80037dc <SVCCTL_App_Notification+0x360>)
 800377e:	f00a fbb3 	bl	800dee8 <iprintf>
 8003782:	e030      	b.n	80037e6 <SVCCTL_App_Notification+0x36a>
 8003784:	200006bc 	.word	0x200006bc
 8003788:	080106d8 	.word	0x080106d8
 800378c:	08010704 	.word	0x08010704
 8003790:	20000740 	.word	0x20000740
 8003794:	08010740 	.word	0x08010740
 8003798:	3ff40000 	.word	0x3ff40000
 800379c:	08010774 	.word	0x08010774
 80037a0:	080107e0 	.word	0x080107e0
 80037a4:	08010828 	.word	0x08010828
 80037a8:	20000745 	.word	0x20000745
 80037ac:	08010878 	.word	0x08010878
 80037b0:	080108a0 	.word	0x080108a0
 80037b4:	080108d0 	.word	0x080108d0
 80037b8:	0001b207 	.word	0x0001b207
 80037bc:	080108f8 	.word	0x080108f8
 80037c0:	0801092c 	.word	0x0801092c
 80037c4:	08010954 	.word	0x08010954
 80037c8:	08010988 	.word	0x08010988
 80037cc:	080109a4 	.word	0x080109a4
 80037d0:	080109bc 	.word	0x080109bc
 80037d4:	08010a0c 	.word	0x08010a0c
 80037d8:	08010a54 	.word	0x08010a54
 80037dc:	08010a80 	.word	0x08010a80
            APP_DBG_MSG("     - Pairing Success\n");
 80037e0:	4808      	ldr	r0, [pc, #32]	; (8003804 <SVCCTL_App_Notification+0x388>)
 80037e2:	f00a fc1d 	bl	800e020 <puts>
          APP_DBG_MSG("\n");
 80037e6:	200a      	movs	r0, #10
 80037e8:	f00a fb96 	bl	800df18 <putchar>
          break;
 80037ec:	e000      	b.n	80037f0 <SVCCTL_App_Notification+0x374>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 80037ee:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 80037f0:	e001      	b.n	80037f6 <SVCCTL_App_Notification+0x37a>
      break;
 80037f2:	bf00      	nop
 80037f4:	e000      	b.n	80037f8 <SVCCTL_App_Notification+0x37c>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 80037f6:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 80037f8:	2301      	movs	r3, #1
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3728      	adds	r7, #40	; 0x28
 80037fe:	46bd      	mov	sp, r7
 8003800:	bdb0      	pop	{r4, r5, r7, pc}
 8003802:	bf00      	nop
 8003804:	08010abc 	.word	0x08010abc

08003808 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b082      	sub	sp, #8
 800380c:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 800380e:	4b06      	ldr	r3, [pc, #24]	; (8003828 <Ble_Tl_Init+0x20>)
 8003810:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 8003812:	4b06      	ldr	r3, [pc, #24]	; (800382c <Ble_Tl_Init+0x24>)
 8003814:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 8003816:	463b      	mov	r3, r7
 8003818:	4619      	mov	r1, r3
 800381a:	4805      	ldr	r0, [pc, #20]	; (8003830 <Ble_Tl_Init+0x28>)
 800381c:	f008 f808 	bl	800b830 <hci_init>

  return;
 8003820:	bf00      	nop
}
 8003822:	3708      	adds	r7, #8
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}
 8003828:	20030028 	.word	0x20030028
 800382c:	08003ea1 	.word	0x08003ea1
 8003830:	08003e69 	.word	0x08003e69

08003834 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 8003834:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003836:	b08d      	sub	sp, #52	; 0x34
 8003838:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 800383a:	2300      	movs	r3, #0
 800383c:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800383e:	2392      	movs	r3, #146	; 0x92
 8003840:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init*/

  APP_DBG_MSG("==>> Start Ble_Hci_Gap_Gatt_Init function\n");
 8003842:	48a5      	ldr	r0, [pc, #660]	; (8003ad8 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8003844:	f00a fbec 	bl	800e020 <puts>

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 8003848:	f007 fdfc 	bl	800b444 <hci_reset>
 800384c:	4603      	mov	r3, r0
 800384e:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8003850:	7dfb      	ldrb	r3, [r7, #23]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d005      	beq.n	8003862 <Ble_Hci_Gap_Gatt_Init+0x2e>
  {
    APP_DBG_MSG("  Fail   : hci_reset command, result: 0x%x \n", ret);
 8003856:	7dfb      	ldrb	r3, [r7, #23]
 8003858:	4619      	mov	r1, r3
 800385a:	48a0      	ldr	r0, [pc, #640]	; (8003adc <Ble_Hci_Gap_Gatt_Init+0x2a8>)
 800385c:	f00a fb44 	bl	800dee8 <iprintf>
 8003860:	e002      	b.n	8003868 <Ble_Hci_Gap_Gatt_Init+0x34>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_reset command\n");
 8003862:	489f      	ldr	r0, [pc, #636]	; (8003ae0 <Ble_Hci_Gap_Gatt_Init+0x2ac>)
 8003864:	f00a fbdc 	bl	800e020 <puts>
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 8003868:	f000 f9c2 	bl	8003bf0 <BleGetBdAddress>
 800386c:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 800386e:	693a      	ldr	r2, [r7, #16]
 8003870:	2106      	movs	r1, #6
 8003872:	2000      	movs	r0, #0
 8003874:	f007 fca6 	bl	800b1c4 <aci_hal_write_config_data>
 8003878:	4603      	mov	r3, r0
 800387a:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800387c:	7dfb      	ldrb	r3, [r7, #23]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d005      	beq.n	800388e <Ble_Hci_Gap_Gatt_Init+0x5a>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET, result: 0x%x \n", ret);
 8003882:	7dfb      	ldrb	r3, [r7, #23]
 8003884:	4619      	mov	r1, r3
 8003886:	4897      	ldr	r0, [pc, #604]	; (8003ae4 <Ble_Hci_Gap_Gatt_Init+0x2b0>)
 8003888:	f00a fb2e 	bl	800dee8 <iprintf>
 800388c:	e021      	b.n	80038d2 <Ble_Hci_Gap_Gatt_Init+0x9e>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET\n");
 800388e:	4896      	ldr	r0, [pc, #600]	; (8003ae8 <Ble_Hci_Gap_Gatt_Init+0x2b4>)
 8003890:	f00a fbc6 	bl	800e020 <puts>
    APP_DBG_MSG("  Public Bluetooth Address: %02x:%02x:%02x:%02x:%02x:%02x\n",p_bd_addr[5],p_bd_addr[4],p_bd_addr[3],p_bd_addr[2],p_bd_addr[1],p_bd_addr[0]);
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	3305      	adds	r3, #5
 8003898:	781b      	ldrb	r3, [r3, #0]
 800389a:	4618      	mov	r0, r3
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	3304      	adds	r3, #4
 80038a0:	781b      	ldrb	r3, [r3, #0]
 80038a2:	461c      	mov	r4, r3
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	3303      	adds	r3, #3
 80038a8:	781b      	ldrb	r3, [r3, #0]
 80038aa:	461d      	mov	r5, r3
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	3302      	adds	r3, #2
 80038b0:	781b      	ldrb	r3, [r3, #0]
 80038b2:	461a      	mov	r2, r3
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	3301      	adds	r3, #1
 80038b8:	781b      	ldrb	r3, [r3, #0]
 80038ba:	4619      	mov	r1, r3
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	781b      	ldrb	r3, [r3, #0]
 80038c0:	9302      	str	r3, [sp, #8]
 80038c2:	9101      	str	r1, [sp, #4]
 80038c4:	9200      	str	r2, [sp, #0]
 80038c6:	462b      	mov	r3, r5
 80038c8:	4622      	mov	r2, r4
 80038ca:	4601      	mov	r1, r0
 80038cc:	4887      	ldr	r0, [pc, #540]	; (8003aec <Ble_Hci_Gap_Gatt_Init+0x2b8>)
 80038ce:	f00a fb0b 	bl	800dee8 <iprintf>
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 80038d2:	4a87      	ldr	r2, [pc, #540]	; (8003af0 <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 80038d4:	2110      	movs	r1, #16
 80038d6:	2018      	movs	r0, #24
 80038d8:	f007 fc74 	bl	800b1c4 <aci_hal_write_config_data>
 80038dc:	4603      	mov	r3, r0
 80038de:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 80038e0:	7dfb      	ldrb	r3, [r7, #23]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d005      	beq.n	80038f2 <Ble_Hci_Gap_Gatt_Init+0xbe>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET, result: 0x%x \n", ret);
 80038e6:	7dfb      	ldrb	r3, [r7, #23]
 80038e8:	4619      	mov	r1, r3
 80038ea:	4882      	ldr	r0, [pc, #520]	; (8003af4 <Ble_Hci_Gap_Gatt_Init+0x2c0>)
 80038ec:	f00a fafc 	bl	800dee8 <iprintf>
 80038f0:	e002      	b.n	80038f8 <Ble_Hci_Gap_Gatt_Init+0xc4>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET\n");
 80038f2:	4881      	ldr	r0, [pc, #516]	; (8003af8 <Ble_Hci_Gap_Gatt_Init+0x2c4>)
 80038f4:	f00a fb94 	bl	800e020 <puts>
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 80038f8:	4a80      	ldr	r2, [pc, #512]	; (8003afc <Ble_Hci_Gap_Gatt_Init+0x2c8>)
 80038fa:	2110      	movs	r1, #16
 80038fc:	2008      	movs	r0, #8
 80038fe:	f007 fc61 	bl	800b1c4 <aci_hal_write_config_data>
 8003902:	4603      	mov	r3, r0
 8003904:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8003906:	7dfb      	ldrb	r3, [r7, #23]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d005      	beq.n	8003918 <Ble_Hci_Gap_Gatt_Init+0xe4>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET, result: 0x%x \n", ret);
 800390c:	7dfb      	ldrb	r3, [r7, #23]
 800390e:	4619      	mov	r1, r3
 8003910:	487b      	ldr	r0, [pc, #492]	; (8003b00 <Ble_Hci_Gap_Gatt_Init+0x2cc>)
 8003912:	f00a fae9 	bl	800dee8 <iprintf>
 8003916:	e002      	b.n	800391e <Ble_Hci_Gap_Gatt_Init+0xea>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET\n");
 8003918:	487a      	ldr	r0, [pc, #488]	; (8003b04 <Ble_Hci_Gap_Gatt_Init+0x2d0>)
 800391a:	f00a fb81 	bl	800e020 <puts>
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 800391e:	2119      	movs	r1, #25
 8003920:	2001      	movs	r0, #1
 8003922:	f007 fcd4 	bl	800b2ce <aci_hal_set_tx_power_level>
 8003926:	4603      	mov	r3, r0
 8003928:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800392a:	7dfb      	ldrb	r3, [r7, #23]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d005      	beq.n	800393c <Ble_Hci_Gap_Gatt_Init+0x108>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_tx_power_level command, result: 0x%x \n", ret);
 8003930:	7dfb      	ldrb	r3, [r7, #23]
 8003932:	4619      	mov	r1, r3
 8003934:	4874      	ldr	r0, [pc, #464]	; (8003b08 <Ble_Hci_Gap_Gatt_Init+0x2d4>)
 8003936:	f00a fad7 	bl	800dee8 <iprintf>
 800393a:	e002      	b.n	8003942 <Ble_Hci_Gap_Gatt_Init+0x10e>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_tx_power_level command\n");
 800393c:	4873      	ldr	r0, [pc, #460]	; (8003b0c <Ble_Hci_Gap_Gatt_Init+0x2d8>)
 800393e:	f00a fb6f 	bl	800e020 <puts>
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 8003942:	f007 f8e6 	bl	800ab12 <aci_gatt_init>
 8003946:	4603      	mov	r3, r0
 8003948:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800394a:	7dfb      	ldrb	r3, [r7, #23]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d005      	beq.n	800395c <Ble_Hci_Gap_Gatt_Init+0x128>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_init command, result: 0x%x \n", ret);
 8003950:	7dfb      	ldrb	r3, [r7, #23]
 8003952:	4619      	mov	r1, r3
 8003954:	486e      	ldr	r0, [pc, #440]	; (8003b10 <Ble_Hci_Gap_Gatt_Init+0x2dc>)
 8003956:	f00a fac7 	bl	800dee8 <iprintf>
 800395a:	e002      	b.n	8003962 <Ble_Hci_Gap_Gatt_Init+0x12e>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_init command\n");
 800395c:	486d      	ldr	r0, [pc, #436]	; (8003b14 <Ble_Hci_Gap_Gatt_Init+0x2e0>)
 800395e:	f00a fb5f 	bl	800e020 <puts>
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 8003962:	2300      	movs	r3, #0
 8003964:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 8003966:	7bfb      	ldrb	r3, [r7, #15]
 8003968:	f043 0301 	orr.w	r3, r3, #1
 800396c:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 800396e:	7bfb      	ldrb	r3, [r7, #15]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d02b      	beq.n	80039cc <Ble_Hci_Gap_Gatt_Init+0x198>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 8003974:	4b68      	ldr	r3, [pc, #416]	; (8003b18 <Ble_Hci_Gap_Gatt_Init+0x2e4>)
 8003976:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 8003978:	1dba      	adds	r2, r7, #6
 800397a:	7bf8      	ldrb	r0, [r7, #15]
 800397c:	1cbb      	adds	r3, r7, #2
 800397e:	9301      	str	r3, [sp, #4]
 8003980:	1d3b      	adds	r3, r7, #4
 8003982:	9300      	str	r3, [sp, #0]
 8003984:	4613      	mov	r3, r2
 8003986:	2209      	movs	r2, #9
 8003988:	2100      	movs	r1, #0
 800398a:	f006 fef4 	bl	800a776 <aci_gap_init>
 800398e:	4603      	mov	r3, r0
 8003990:	75fb      	strb	r3, [r7, #23]
                       CFG_GAP_DEVICE_NAME_LENGTH,
                       &gap_service_handle,
                       &gap_dev_name_char_handle,
                       &gap_appearance_char_handle);

    if (ret != BLE_STATUS_SUCCESS)
 8003992:	7dfb      	ldrb	r3, [r7, #23]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d005      	beq.n	80039a4 <Ble_Hci_Gap_Gatt_Init+0x170>
    {
      APP_DBG_MSG("  Fail   : aci_gap_init command, result: 0x%x \n", ret);
 8003998:	7dfb      	ldrb	r3, [r7, #23]
 800399a:	4619      	mov	r1, r3
 800399c:	485f      	ldr	r0, [pc, #380]	; (8003b1c <Ble_Hci_Gap_Gatt_Init+0x2e8>)
 800399e:	f00a faa3 	bl	800dee8 <iprintf>
 80039a2:	e002      	b.n	80039aa <Ble_Hci_Gap_Gatt_Init+0x176>
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
 80039a4:	485e      	ldr	r0, [pc, #376]	; (8003b20 <Ble_Hci_Gap_Gatt_Init+0x2ec>)
 80039a6:	f00a fb3b 	bl	800e020 <puts>
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 80039aa:	88fc      	ldrh	r4, [r7, #6]
 80039ac:	88bd      	ldrh	r5, [r7, #4]
 80039ae:	68b8      	ldr	r0, [r7, #8]
 80039b0:	f7fc fbf0 	bl	8000194 <strlen>
 80039b4:	4603      	mov	r3, r0
 80039b6:	b2da      	uxtb	r2, r3
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	9300      	str	r3, [sp, #0]
 80039bc:	4613      	mov	r3, r2
 80039be:	2200      	movs	r2, #0
 80039c0:	4629      	mov	r1, r5
 80039c2:	4620      	mov	r0, r4
 80039c4:	f007 faa8 	bl	800af18 <aci_gatt_update_char_value>
 80039c8:	4603      	mov	r3, r0
 80039ca:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 80039cc:	88f8      	ldrh	r0, [r7, #6]
 80039ce:	8879      	ldrh	r1, [r7, #2]
 80039d0:	463b      	mov	r3, r7
 80039d2:	9300      	str	r3, [sp, #0]
 80039d4:	2302      	movs	r3, #2
 80039d6:	2200      	movs	r2, #0
 80039d8:	f007 fa9e 	bl	800af18 <aci_gatt_update_char_value>
 80039dc:	4603      	mov	r3, r0
 80039de:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 80039e0:	2202      	movs	r2, #2
 80039e2:	2102      	movs	r1, #2
 80039e4:	2000      	movs	r0, #0
 80039e6:	f007 fd51 	bl	800b48c <hci_le_set_default_phy>
 80039ea:	4603      	mov	r3, r0
 80039ec:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 80039ee:	7dfb      	ldrb	r3, [r7, #23]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d005      	beq.n	8003a00 <Ble_Hci_Gap_Gatt_Init+0x1cc>
  {
    APP_DBG_MSG("  Fail   : hci_le_set_default_phy command, result: 0x%x \n", ret);
 80039f4:	7dfb      	ldrb	r3, [r7, #23]
 80039f6:	4619      	mov	r1, r3
 80039f8:	484a      	ldr	r0, [pc, #296]	; (8003b24 <Ble_Hci_Gap_Gatt_Init+0x2f0>)
 80039fa:	f00a fa75 	bl	800dee8 <iprintf>
 80039fe:	e002      	b.n	8003a06 <Ble_Hci_Gap_Gatt_Init+0x1d2>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_le_set_default_phy command\n");
 8003a00:	4849      	ldr	r0, [pc, #292]	; (8003b28 <Ble_Hci_Gap_Gatt_Init+0x2f4>)
 8003a02:	f00a fb0d 	bl	800e020 <puts>
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 8003a06:	4b49      	ldr	r3, [pc, #292]	; (8003b2c <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 8003a08:	2201      	movs	r2, #1
 8003a0a:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 8003a0c:	4b47      	ldr	r3, [pc, #284]	; (8003b2c <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 8003a0e:	781b      	ldrb	r3, [r3, #0]
 8003a10:	4618      	mov	r0, r3
 8003a12:	f006 fd31 	bl	800a478 <aci_gap_set_io_capability>
 8003a16:	4603      	mov	r3, r0
 8003a18:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8003a1a:	7dfb      	ldrb	r3, [r7, #23]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d005      	beq.n	8003a2c <Ble_Hci_Gap_Gatt_Init+0x1f8>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_io_capability command, result: 0x%x \n", ret);
 8003a20:	7dfb      	ldrb	r3, [r7, #23]
 8003a22:	4619      	mov	r1, r3
 8003a24:	4842      	ldr	r0, [pc, #264]	; (8003b30 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 8003a26:	f00a fa5f 	bl	800dee8 <iprintf>
 8003a2a:	e002      	b.n	8003a32 <Ble_Hci_Gap_Gatt_Init+0x1fe>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_io_capability command\n");
 8003a2c:	4841      	ldr	r0, [pc, #260]	; (8003b34 <Ble_Hci_Gap_Gatt_Init+0x300>)
 8003a2e:	f00a faf7 	bl	800e020 <puts>
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 8003a32:	4b3e      	ldr	r3, [pc, #248]	; (8003b2c <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 8003a34:	2201      	movs	r2, #1
 8003a36:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 8003a38:	4b3c      	ldr	r3, [pc, #240]	; (8003b2c <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 8003a3a:	2208      	movs	r2, #8
 8003a3c:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 8003a3e:	4b3b      	ldr	r3, [pc, #236]	; (8003b2c <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 8003a40:	2210      	movs	r2, #16
 8003a42:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 8003a44:	4b39      	ldr	r3, [pc, #228]	; (8003b2c <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 8003a46:	2200      	movs	r2, #0
 8003a48:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 8003a4a:	4b38      	ldr	r3, [pc, #224]	; (8003b2c <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 8003a4c:	4a3a      	ldr	r2, [pc, #232]	; (8003b38 <Ble_Hci_Gap_Gatt_Init+0x304>)
 8003a4e:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 8003a50:	4b36      	ldr	r3, [pc, #216]	; (8003b2c <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 8003a52:	2200      	movs	r2, #0
 8003a54:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 8003a56:	4b35      	ldr	r3, [pc, #212]	; (8003b2c <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 8003a58:	789c      	ldrb	r4, [r3, #2]
 8003a5a:	4b34      	ldr	r3, [pc, #208]	; (8003b2c <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 8003a5c:	785d      	ldrb	r5, [r3, #1]
 8003a5e:	4b33      	ldr	r3, [pc, #204]	; (8003b2c <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 8003a60:	791b      	ldrb	r3, [r3, #4]
 8003a62:	4a32      	ldr	r2, [pc, #200]	; (8003b2c <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 8003a64:	7952      	ldrb	r2, [r2, #5]
 8003a66:	4931      	ldr	r1, [pc, #196]	; (8003b2c <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 8003a68:	78c9      	ldrb	r1, [r1, #3]
 8003a6a:	4830      	ldr	r0, [pc, #192]	; (8003b2c <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 8003a6c:	6880      	ldr	r0, [r0, #8]
 8003a6e:	2600      	movs	r6, #0
 8003a70:	9604      	str	r6, [sp, #16]
 8003a72:	9003      	str	r0, [sp, #12]
 8003a74:	9102      	str	r1, [sp, #8]
 8003a76:	9201      	str	r2, [sp, #4]
 8003a78:	9300      	str	r3, [sp, #0]
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	4629      	mov	r1, r5
 8003a80:	4620      	mov	r0, r4
 8003a82:	f006 fd4d 	bl	800a520 <aci_gap_set_authentication_requirement>
 8003a86:	4603      	mov	r3, r0
 8003a88:	75fb      	strb	r3, [r7, #23]
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin,
                                               CFG_IDENTITY_ADDRESS);
  if (ret != BLE_STATUS_SUCCESS)
 8003a8a:	7dfb      	ldrb	r3, [r7, #23]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d005      	beq.n	8003a9c <Ble_Hci_Gap_Gatt_Init+0x268>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_authentication_requirement command, result: 0x%x \n", ret);
 8003a90:	7dfb      	ldrb	r3, [r7, #23]
 8003a92:	4619      	mov	r1, r3
 8003a94:	4829      	ldr	r0, [pc, #164]	; (8003b3c <Ble_Hci_Gap_Gatt_Init+0x308>)
 8003a96:	f00a fa27 	bl	800dee8 <iprintf>
 8003a9a:	e002      	b.n	8003aa2 <Ble_Hci_Gap_Gatt_Init+0x26e>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_authentication_requirement command\n");
 8003a9c:	4828      	ldr	r0, [pc, #160]	; (8003b40 <Ble_Hci_Gap_Gatt_Init+0x30c>)
 8003a9e:	f00a fabf 	bl	800e020 <puts>
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 8003aa2:	4b22      	ldr	r3, [pc, #136]	; (8003b2c <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 8003aa4:	789b      	ldrb	r3, [r3, #2]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d00f      	beq.n	8003aca <Ble_Hci_Gap_Gatt_Init+0x296>
  {
    ret = aci_gap_configure_whitelist();
 8003aaa:	f006 ff83 	bl	800a9b4 <aci_gap_configure_filter_accept_list>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	75fb      	strb	r3, [r7, #23]
    if (ret != BLE_STATUS_SUCCESS)
 8003ab2:	7dfb      	ldrb	r3, [r7, #23]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d005      	beq.n	8003ac4 <Ble_Hci_Gap_Gatt_Init+0x290>
    {
      APP_DBG_MSG("  Fail   : aci_gap_configure_whitelist command, result: 0x%x \n", ret);
 8003ab8:	7dfb      	ldrb	r3, [r7, #23]
 8003aba:	4619      	mov	r1, r3
 8003abc:	4821      	ldr	r0, [pc, #132]	; (8003b44 <Ble_Hci_Gap_Gatt_Init+0x310>)
 8003abe:	f00a fa13 	bl	800dee8 <iprintf>
 8003ac2:	e002      	b.n	8003aca <Ble_Hci_Gap_Gatt_Init+0x296>
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
 8003ac4:	4820      	ldr	r0, [pc, #128]	; (8003b48 <Ble_Hci_Gap_Gatt_Init+0x314>)
 8003ac6:	f00a faab 	bl	800e020 <puts>
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
 8003aca:	4820      	ldr	r0, [pc, #128]	; (8003b4c <Ble_Hci_Gap_Gatt_Init+0x318>)
 8003acc:	f00a fa0c 	bl	800dee8 <iprintf>
}
 8003ad0:	bf00      	nop
 8003ad2:	371c      	adds	r7, #28
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ad8:	08010ad4 	.word	0x08010ad4
 8003adc:	08010b00 	.word	0x08010b00
 8003ae0:	08010b30 	.word	0x08010b30
 8003ae4:	08010b50 	.word	0x08010b50
 8003ae8:	08010bac 	.word	0x08010bac
 8003aec:	08010bf8 	.word	0x08010bf8
 8003af0:	08011c24 	.word	0x08011c24
 8003af4:	08010c34 	.word	0x08010c34
 8003af8:	08010c8c 	.word	0x08010c8c
 8003afc:	08011c34 	.word	0x08011c34
 8003b00:	08010cd4 	.word	0x08010cd4
 8003b04:	08010d2c 	.word	0x08010d2c
 8003b08:	08010d74 	.word	0x08010d74
 8003b0c:	08010db4 	.word	0x08010db4
 8003b10:	08010de4 	.word	0x08010de4
 8003b14:	08010e18 	.word	0x08010e18
 8003b18:	08010e3c 	.word	0x08010e3c
 8003b1c:	08010e48 	.word	0x08010e48
 8003b20:	08010e78 	.word	0x08010e78
 8003b24:	08010e98 	.word	0x08010e98
 8003b28:	08010ed4 	.word	0x08010ed4
 8003b2c:	200006bc 	.word	0x200006bc
 8003b30:	08010f00 	.word	0x08010f00
 8003b34:	08010f40 	.word	0x08010f40
 8003b38:	0001b207 	.word	0x0001b207
 8003b3c:	08010f70 	.word	0x08010f70
 8003b40:	08010fbc 	.word	0x08010fbc
 8003b44:	08010ff8 	.word	0x08010ff8
 8003b48:	08011038 	.word	0x08011038
 8003b4c:	08011068 	.word	0x08011068

08003b50 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b08c      	sub	sp, #48	; 0x30
 8003b54:	af08      	add	r7, sp, #32
 8003b56:	4603      	mov	r3, r0
 8003b58:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8003b5a:	2392      	movs	r3, #146	; 0x92
 8003b5c:	73fb      	strb	r3, [r7, #15]

  BleApplicationContext.Device_Connection_Status = NewStatus;
 8003b5e:	4a1e      	ldr	r2, [pc, #120]	; (8003bd8 <Adv_Request+0x88>)
 8003b60:	79fb      	ldrb	r3, [r7, #7]
 8003b62:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_TYPE,
 8003b66:	2300      	movs	r3, #0
 8003b68:	9306      	str	r3, [sp, #24]
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	9305      	str	r3, [sp, #20]
 8003b6e:	2300      	movs	r3, #0
 8003b70:	9304      	str	r3, [sp, #16]
 8003b72:	2300      	movs	r3, #0
 8003b74:	9303      	str	r3, [sp, #12]
 8003b76:	2300      	movs	r3, #0
 8003b78:	9302      	str	r3, [sp, #8]
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	9301      	str	r3, [sp, #4]
 8003b7e:	2300      	movs	r3, #0
 8003b80:	9300      	str	r3, [sp, #0]
 8003b82:	2300      	movs	r3, #0
 8003b84:	22a0      	movs	r2, #160	; 0xa0
 8003b86:	2180      	movs	r1, #128	; 0x80
 8003b88:	2000      	movs	r0, #0
 8003b8a:	f006 fb7b 	bl	800a284 <aci_gap_set_discoverable>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	73fb      	strb	r3, [r7, #15]
                                 0,
                                 0,
                                 0,
                                 0,
                                 0);
  if (ret != BLE_STATUS_SUCCESS)
 8003b92:	7bfb      	ldrb	r3, [r7, #15]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d005      	beq.n	8003ba4 <Adv_Request+0x54>
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - fail, result: 0x%x \n", ret);
 8003b98:	7bfb      	ldrb	r3, [r7, #15]
 8003b9a:	4619      	mov	r1, r3
 8003b9c:	480f      	ldr	r0, [pc, #60]	; (8003bdc <Adv_Request+0x8c>)
 8003b9e:	f00a f9a3 	bl	800dee8 <iprintf>
 8003ba2:	e002      	b.n	8003baa <Adv_Request+0x5a>
  }
  else
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - Success\n");
 8003ba4:	480e      	ldr	r0, [pc, #56]	; (8003be0 <Adv_Request+0x90>)
 8003ba6:	f00a fa3b 	bl	800e020 <puts>
  }

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_AdvData), (uint8_t*) a_AdvData);
 8003baa:	490e      	ldr	r1, [pc, #56]	; (8003be4 <Adv_Request+0x94>)
 8003bac:	2013      	movs	r0, #19
 8003bae:	f006 fe8f 	bl	800a8d0 <aci_gap_update_adv_data>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	73fb      	strb	r3, [r7, #15]
  if (ret != BLE_STATUS_SUCCESS)
 8003bb6:	7bfb      	ldrb	r3, [r7, #15]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d005      	beq.n	8003bc8 <Adv_Request+0x78>
  {
      APP_DBG_MSG("==>> Start Fast Advertising Failed , result: %d \n\r", ret);
 8003bbc:	7bfb      	ldrb	r3, [r7, #15]
 8003bbe:	4619      	mov	r1, r3
 8003bc0:	4809      	ldr	r0, [pc, #36]	; (8003be8 <Adv_Request+0x98>)
 8003bc2:	f00a f991 	bl	800dee8 <iprintf>
  else
  {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
  }

  return;
 8003bc6:	e003      	b.n	8003bd0 <Adv_Request+0x80>
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
 8003bc8:	4808      	ldr	r0, [pc, #32]	; (8003bec <Adv_Request+0x9c>)
 8003bca:	f00a f98d 	bl	800dee8 <iprintf>
  return;
 8003bce:	bf00      	nop
}
 8003bd0:	3710      	adds	r7, #16
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	bf00      	nop
 8003bd8:	200006bc 	.word	0x200006bc
 8003bdc:	08011094 	.word	0x08011094
 8003be0:	080110cc 	.word	0x080110cc
 8003be4:	20000010 	.word	0x20000010
 8003be8:	080110f4 	.word	0x080110f4
 8003bec:	08011128 	.word	0x08011128

08003bf0 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b086      	sub	sp, #24
 8003bf4:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 8003bf6:	f7ff fb93 	bl	8003320 <LL_FLASH_GetUDN>
 8003bfa:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c02:	d023      	beq.n	8003c4c <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 8003c04:	f7ff fba4 	bl	8003350 <LL_FLASH_GetSTCompanyID>
 8003c08:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 8003c0a:	f7ff fb95 	bl	8003338 <LL_FLASH_GetDeviceID>
 8003c0e:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	b2da      	uxtb	r2, r3
 8003c14:	4b16      	ldr	r3, [pc, #88]	; (8003c70 <BleGetBdAddress+0x80>)
 8003c16:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	0a1b      	lsrs	r3, r3, #8
 8003c1c:	b2da      	uxtb	r2, r3
 8003c1e:	4b14      	ldr	r3, [pc, #80]	; (8003c70 <BleGetBdAddress+0x80>)
 8003c20:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	b2da      	uxtb	r2, r3
 8003c26:	4b12      	ldr	r3, [pc, #72]	; (8003c70 <BleGetBdAddress+0x80>)
 8003c28:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	b2da      	uxtb	r2, r3
 8003c2e:	4b10      	ldr	r3, [pc, #64]	; (8003c70 <BleGetBdAddress+0x80>)
 8003c30:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	0a1b      	lsrs	r3, r3, #8
 8003c36:	b2da      	uxtb	r2, r3
 8003c38:	4b0d      	ldr	r3, [pc, #52]	; (8003c70 <BleGetBdAddress+0x80>)
 8003c3a:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	0c1b      	lsrs	r3, r3, #16
 8003c40:	b2da      	uxtb	r2, r3
 8003c42:	4b0b      	ldr	r3, [pc, #44]	; (8003c70 <BleGetBdAddress+0x80>)
 8003c44:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 8003c46:	4b0a      	ldr	r3, [pc, #40]	; (8003c70 <BleGetBdAddress+0x80>)
 8003c48:	617b      	str	r3, [r7, #20]
 8003c4a:	e00b      	b.n	8003c64 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 8003c4c:	2000      	movs	r0, #0
 8003c4e:	f007 ffab 	bl	800bba8 <OTP_Read>
 8003c52:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d002      	beq.n	8003c60 <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	617b      	str	r3, [r7, #20]
 8003c5e:	e001      	b.n	8003c64 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 8003c60:	4b04      	ldr	r3, [pc, #16]	; (8003c74 <BleGetBdAddress+0x84>)
 8003c62:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 8003c64:	697b      	ldr	r3, [r7, #20]
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	3718      	adds	r7, #24
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}
 8003c6e:	bf00      	nop
 8003c70:	200006b4 	.word	0x200006b4
 8003c74:	08011c1c 	.word	0x08011c1c

08003c78 <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b082      	sub	sp, #8
 8003c7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 8003c7e:	4b10      	ldr	r3, [pc, #64]	; (8003cc0 <Adv_Cancel+0x48>)
 8003c80:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003c84:	2b05      	cmp	r3, #5
 8003c86:	d017      	beq.n	8003cb8 <Adv_Cancel+0x40>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8003c88:	2392      	movs	r3, #146	; 0x92
 8003c8a:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 8003c8c:	f006 fad6 	bl	800a23c <aci_gap_set_non_discoverable>
 8003c90:	4603      	mov	r3, r0
 8003c92:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8003c94:	4b0a      	ldr	r3, [pc, #40]	; (8003cc0 <Adv_Cancel+0x48>)
 8003c96:	2200      	movs	r2, #0
 8003c98:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    if (ret != BLE_STATUS_SUCCESS)
 8003c9c:	79fb      	ldrb	r3, [r7, #7]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d003      	beq.n	8003caa <Adv_Cancel+0x32>
    {
      APP_DBG_MSG("** STOP ADVERTISING **  Failed \r\n\r");
 8003ca2:	4808      	ldr	r0, [pc, #32]	; (8003cc4 <Adv_Cancel+0x4c>)
 8003ca4:	f00a f920 	bl	800dee8 <iprintf>

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 8003ca8:	e006      	b.n	8003cb8 <Adv_Cancel+0x40>
      APP_DBG_MSG("  \r\n\r");
 8003caa:	4807      	ldr	r0, [pc, #28]	; (8003cc8 <Adv_Cancel+0x50>)
 8003cac:	f00a f91c 	bl	800dee8 <iprintf>
      APP_DBG_MSG("** STOP ADVERTISING **  \r\n\r");
 8003cb0:	4806      	ldr	r0, [pc, #24]	; (8003ccc <Adv_Cancel+0x54>)
 8003cb2:	f00a f919 	bl	800dee8 <iprintf>
  return;
 8003cb6:	bf00      	nop
 8003cb8:	bf00      	nop
}
 8003cba:	3708      	adds	r7, #8
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}
 8003cc0:	200006bc 	.word	0x200006bc
 8003cc4:	08011150 	.word	0x08011150
 8003cc8:	08011174 	.word	0x08011174
 8003ccc:	0801117c 	.word	0x0801117c

08003cd0 <BLE_SVC_L2CAP_Conn_Update>:

#if (L2CAP_REQUEST_NEW_CONN_PARAM != 0)
void BLE_SVC_L2CAP_Conn_Update(uint16_t ConnectionHandle)
{
 8003cd0:	b590      	push	{r4, r7, lr}
 8003cd2:	b089      	sub	sp, #36	; 0x24
 8003cd4:	af02      	add	r7, sp, #8
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	80fb      	strh	r3, [r7, #6]
  /* USER CODE BEGIN BLE_SVC_L2CAP_Conn_Update_1 */

  /* USER CODE END BLE_SVC_L2CAP_Conn_Update_1 */

  if (mutex == 1)
 8003cda:	4b29      	ldr	r3, [pc, #164]	; (8003d80 <BLE_SVC_L2CAP_Conn_Update+0xb0>)
 8003cdc:	781b      	ldrb	r3, [r3, #0]
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	d149      	bne.n	8003d76 <BLE_SVC_L2CAP_Conn_Update+0xa6>
  {
    mutex = 0;
 8003ce2:	4b27      	ldr	r3, [pc, #156]	; (8003d80 <BLE_SVC_L2CAP_Conn_Update+0xb0>)
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	701a      	strb	r2, [r3, #0]
    index_con_int = (index_con_int + 1)%SIZE_TAB_CONN_INT;
 8003ce8:	4b26      	ldr	r3, [pc, #152]	; (8003d84 <BLE_SVC_L2CAP_Conn_Update+0xb4>)
 8003cea:	781b      	ldrb	r3, [r3, #0]
 8003cec:	3301      	adds	r3, #1
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	f003 0301 	and.w	r3, r3, #1
 8003cf4:	bfb8      	it	lt
 8003cf6:	425b      	neglt	r3, r3
 8003cf8:	b2da      	uxtb	r2, r3
 8003cfa:	4b22      	ldr	r3, [pc, #136]	; (8003d84 <BLE_SVC_L2CAP_Conn_Update+0xb4>)
 8003cfc:	701a      	strb	r2, [r3, #0]
    uint16_t interval_min = CONN_P(a_ConnInterval[index_con_int]);
 8003cfe:	4b21      	ldr	r3, [pc, #132]	; (8003d84 <BLE_SVC_L2CAP_Conn_Update+0xb4>)
 8003d00:	781b      	ldrb	r3, [r3, #0]
 8003d02:	4a21      	ldr	r2, [pc, #132]	; (8003d88 <BLE_SVC_L2CAP_Conn_Update+0xb8>)
 8003d04:	009b      	lsls	r3, r3, #2
 8003d06:	4413      	add	r3, r2
 8003d08:	ed93 7a00 	vldr	s14, [r3]
 8003d0c:	eef7 6a04 	vmov.f32	s13, #116	; 0x3fa00000  1.250
 8003d10:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003d14:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003d18:	ee17 3a90 	vmov	r3, s15
 8003d1c:	82fb      	strh	r3, [r7, #22]
    uint16_t interval_max = CONN_P(a_ConnInterval[index_con_int]);
 8003d1e:	4b19      	ldr	r3, [pc, #100]	; (8003d84 <BLE_SVC_L2CAP_Conn_Update+0xb4>)
 8003d20:	781b      	ldrb	r3, [r3, #0]
 8003d22:	4a19      	ldr	r2, [pc, #100]	; (8003d88 <BLE_SVC_L2CAP_Conn_Update+0xb8>)
 8003d24:	009b      	lsls	r3, r3, #2
 8003d26:	4413      	add	r3, r2
 8003d28:	ed93 7a00 	vldr	s14, [r3]
 8003d2c:	eef7 6a04 	vmov.f32	s13, #116	; 0x3fa00000  1.250
 8003d30:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003d34:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003d38:	ee17 3a90 	vmov	r3, s15
 8003d3c:	82bb      	strh	r3, [r7, #20]
    uint16_t slave_latency = L2CAP_SLAVE_LATENCY;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	827b      	strh	r3, [r7, #18]
    uint16_t timeout_multiplier = L2CAP_TIMEOUT_MULTIPLIER;
 8003d42:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003d46:	823b      	strh	r3, [r7, #16]
    tBleStatus ret;

    ret = aci_l2cap_connection_parameter_update_req(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,
 8003d48:	4b10      	ldr	r3, [pc, #64]	; (8003d8c <BLE_SVC_L2CAP_Conn_Update+0xbc>)
 8003d4a:	8ad8      	ldrh	r0, [r3, #22]
 8003d4c:	8a7c      	ldrh	r4, [r7, #18]
 8003d4e:	8aba      	ldrh	r2, [r7, #20]
 8003d50:	8af9      	ldrh	r1, [r7, #22]
 8003d52:	8a3b      	ldrh	r3, [r7, #16]
 8003d54:	9300      	str	r3, [sp, #0]
 8003d56:	4623      	mov	r3, r4
 8003d58:	f007 fc15 	bl	800b586 <aci_l2cap_connection_parameter_update_req>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	73fb      	strb	r3, [r7, #15]
                                                    interval_min, interval_max,
                                                    slave_latency, timeout_multiplier);
    if (ret != BLE_STATUS_SUCCESS)
 8003d60:	7bfb      	ldrb	r3, [r7, #15]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d003      	beq.n	8003d6e <BLE_SVC_L2CAP_Conn_Update+0x9e>
    {
      APP_DBG_MSG("BLE_SVC_L2CAP_Conn_Update(), Failed \r\n\r");
 8003d66:	480a      	ldr	r0, [pc, #40]	; (8003d90 <BLE_SVC_L2CAP_Conn_Update+0xc0>)
 8003d68:	f00a f8be 	bl	800dee8 <iprintf>

  /* USER CODE BEGIN BLE_SVC_L2CAP_Conn_Update_2 */

  /* USER CODE END BLE_SVC_L2CAP_Conn_Update_2 */

  return;
 8003d6c:	e003      	b.n	8003d76 <BLE_SVC_L2CAP_Conn_Update+0xa6>
      APP_DBG_MSG("BLE_SVC_L2CAP_Conn_Update(), Successfully \r\n\r");
 8003d6e:	4809      	ldr	r0, [pc, #36]	; (8003d94 <BLE_SVC_L2CAP_Conn_Update+0xc4>)
 8003d70:	f00a f8ba 	bl	800dee8 <iprintf>
  return;
 8003d74:	bf00      	nop
 8003d76:	bf00      	nop
}
 8003d78:	371c      	adds	r7, #28
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd90      	pop	{r4, r7, pc}
 8003d7e:	bf00      	nop
 8003d80:	20000745 	.word	0x20000745
 8003d84:	20000744 	.word	0x20000744
 8003d88:	20000008 	.word	0x20000008
 8003d8c:	200006bc 	.word	0x200006bc
 8003d90:	08011198 	.word	0x08011198
 8003d94:	080111c0 	.word	0x080111c0

08003d98 <Connection_Interval_Update_Req>:
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

#if (L2CAP_REQUEST_NEW_CONN_PARAM != 0)
static void Connection_Interval_Update_Req(void)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	af00      	add	r7, sp, #0
  if (BleApplicationContext.Device_Connection_Status != APP_BLE_FAST_ADV && BleApplicationContext.Device_Connection_Status != APP_BLE_IDLE)
 8003d9c:	4b08      	ldr	r3, [pc, #32]	; (8003dc0 <Connection_Interval_Update_Req+0x28>)
 8003d9e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003da2:	2b01      	cmp	r3, #1
 8003da4:	d00a      	beq.n	8003dbc <Connection_Interval_Update_Req+0x24>
 8003da6:	4b06      	ldr	r3, [pc, #24]	; (8003dc0 <Connection_Interval_Update_Req+0x28>)
 8003da8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d005      	beq.n	8003dbc <Connection_Interval_Update_Req+0x24>
  {
    BLE_SVC_L2CAP_Conn_Update(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 8003db0:	4b03      	ldr	r3, [pc, #12]	; (8003dc0 <Connection_Interval_Update_Req+0x28>)
 8003db2:	8adb      	ldrh	r3, [r3, #22]
 8003db4:	4618      	mov	r0, r3
 8003db6:	f7ff ff8b 	bl	8003cd0 <BLE_SVC_L2CAP_Conn_Update>
  }

  return;
 8003dba:	bf00      	nop
 8003dbc:	bf00      	nop
}
 8003dbe:	bd80      	pop	{r7, pc}
 8003dc0:	200006bc 	.word	0x200006bc

08003dc4 <APP_BLE_Key_Button1_Action>:
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

/* USER CODE BEGIN FD_SPECIFIC_FUNCTIONS */
void APP_BLE_Key_Button1_Action(void)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	af00      	add	r7, sp, #0
  SW1_Button_Action();
 8003dc8:	f000 fa12 	bl	80041f0 <SW1_Button_Action>
}
 8003dcc:	bf00      	nop
 8003dce:	bd80      	pop	{r7, pc}

08003dd0 <APP_BLE_Key_Button2_Action>:

void APP_BLE_Key_Button2_Action(void)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b082      	sub	sp, #8
 8003dd4:	af00      	add	r7, sp, #0
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8003dd6:	2392      	movs	r3, #146	; 0x92
 8003dd8:	71fb      	strb	r3, [r7, #7]

  ret = aci_gap_clear_security_db();
 8003dda:	f006 fe0f 	bl	800a9fc <aci_gap_clear_security_db>
 8003dde:	4603      	mov	r3, r0
 8003de0:	71fb      	strb	r3, [r7, #7]
  if (ret != BLE_STATUS_SUCCESS)
 8003de2:	79fb      	ldrb	r3, [r7, #7]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d005      	beq.n	8003df4 <APP_BLE_Key_Button2_Action+0x24>
  {
    APP_DBG_MSG("==>> aci_gap_clear_security_db - Fail, result: %d \n", ret);
 8003de8:	79fb      	ldrb	r3, [r7, #7]
 8003dea:	4619      	mov	r1, r3
 8003dec:	4806      	ldr	r0, [pc, #24]	; (8003e08 <APP_BLE_Key_Button2_Action+0x38>)
 8003dee:	f00a f87b 	bl	800dee8 <iprintf>
 8003df2:	e002      	b.n	8003dfa <APP_BLE_Key_Button2_Action+0x2a>
  }
  else
  {
    APP_DBG_MSG("==>> aci_gap_clear_security_db - Success\n");
 8003df4:	4805      	ldr	r0, [pc, #20]	; (8003e0c <APP_BLE_Key_Button2_Action+0x3c>)
 8003df6:	f00a f913 	bl	800e020 <puts>
  }
  APP_DBG_MSG("APP_BLE_Key_Button2_Action\n");
 8003dfa:	4805      	ldr	r0, [pc, #20]	; (8003e10 <APP_BLE_Key_Button2_Action+0x40>)
 8003dfc:	f00a f910 	bl	800e020 <puts>
}
 8003e00:	bf00      	nop
 8003e02:	3708      	adds	r7, #8
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}
 8003e08:	080111f0 	.word	0x080111f0
 8003e0c:	08011224 	.word	0x08011224
 8003e10:	08011250 	.word	0x08011250

08003e14 <APP_BLE_Key_Button3_Action>:

void APP_BLE_Key_Button3_Action(void)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	af00      	add	r7, sp, #0
#if (L2CAP_REQUEST_NEW_CONN_PARAM != 0 )    
  UTIL_SEQ_SetTask( 1<<CFG_TASK_CONN_UPDATE_REG_ID, CFG_SCH_PRIO_0);
 8003e18:	2100      	movs	r1, #0
 8003e1a:	2002      	movs	r0, #2
 8003e1c:	f009 fa9a 	bl	800d354 <UTIL_SEQ_SetTask>
#endif
  
  return;
 8003e20:	bf00      	nop
}
 8003e22:	bd80      	pop	{r7, pc}

08003e24 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b082      	sub	sp, #8
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8003e2c:	2100      	movs	r1, #0
 8003e2e:	2004      	movs	r0, #4
 8003e30:	f009 fa90 	bl	800d354 <UTIL_SEQ_SetTask>

  return;
 8003e34:	bf00      	nop
}
 8003e36:	3708      	adds	r7, #8
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}

08003e3c <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b082      	sub	sp, #8
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8003e44:	2001      	movs	r0, #1
 8003e46:	f009 faf1 	bl	800d42c <UTIL_SEQ_SetEvt>

  return;
 8003e4a:	bf00      	nop
}
 8003e4c:	3708      	adds	r7, #8
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}

08003e52 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 8003e52:	b580      	push	{r7, lr}
 8003e54:	b082      	sub	sp, #8
 8003e56:	af00      	add	r7, sp, #0
 8003e58:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8003e5a:	2001      	movs	r0, #1
 8003e5c:	f009 fb06 	bl	800d46c <UTIL_SEQ_WaitEvt>

  return;
 8003e60:	bf00      	nop
}
 8003e62:	3708      	adds	r7, #8
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd80      	pop	{r7, pc}

08003e68 <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b084      	sub	sp, #16
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	3308      	adds	r3, #8
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f008 fe6e 	bl	800cb5c <SVCCTL_UserEvtRx>
 8003e80:	4603      	mov	r3, r0
 8003e82:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 8003e84:	7afb      	ldrb	r3, [r7, #11]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d003      	beq.n	8003e92 <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 8003e90:	e003      	b.n	8003e9a <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2200      	movs	r2, #0
 8003e96:	701a      	strb	r2, [r3, #0]
  return;
 8003e98:	bf00      	nop
}
 8003e9a:	3710      	adds	r7, #16
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}

08003ea0 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b084      	sub	sp, #16
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 8003eaa:	79fb      	ldrb	r3, [r7, #7]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d002      	beq.n	8003eb6 <BLE_StatusNot+0x16>
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d006      	beq.n	8003ec2 <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 8003eb4:	e00b      	b.n	8003ece <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8003eb6:	233f      	movs	r3, #63	; 0x3f
 8003eb8:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 8003eba:	68f8      	ldr	r0, [r7, #12]
 8003ebc:	f009 fa76 	bl	800d3ac <UTIL_SEQ_PauseTask>
      break;
 8003ec0:	e005      	b.n	8003ece <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8003ec2:	233f      	movs	r3, #63	; 0x3f
 8003ec4:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 8003ec6:	68f8      	ldr	r0, [r7, #12]
 8003ec8:	f009 fa90 	bl	800d3ec <UTIL_SEQ_ResumeTask>
      break;
 8003ecc:	bf00      	nop
  }

  return;
 8003ece:	bf00      	nop
}
 8003ed0:	3710      	adds	r7, #16
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}
	...

08003ed8 <Custom_STM_App_Notification>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void Custom_STM_App_Notification(Custom_STM_App_Notification_evt_t *pNotification)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b082      	sub	sp, #8
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_1 */
  static uint16_t hr_value, hr_energy;
    
  /* USER CODE END CUSTOM_STM_App_Notification_1 */
  switch (pNotification->Custom_Evt_Opcode)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	781b      	ldrb	r3, [r3, #0]
 8003ee4:	2b07      	cmp	r3, #7
 8003ee6:	f200 80ae 	bhi.w	8004046 <Custom_STM_App_Notification+0x16e>
 8003eea:	a201      	add	r2, pc, #4	; (adr r2, 8003ef0 <Custom_STM_App_Notification+0x18>)
 8003eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ef0:	08003f11 	.word	0x08003f11
 8003ef4:	08003f19 	.word	0x08003f19
 8003ef8:	08003f65 	.word	0x08003f65
 8003efc:	08003f73 	.word	0x08003f73
 8003f00:	08003f81 	.word	0x08003f81
 8003f04:	0800402b 	.word	0x0800402b
 8003f08:	08004047 	.word	0x08004047
 8003f0c:	08004039 	.word	0x08004039
    /* USER CODE END CUSTOM_STM_App_Notification_Custom_Evt_Opcode */

    /* My_P2P_Server */
    case CUSTOM_STM_LED_C_READ_EVT:
      /* USER CODE BEGIN CUSTOM_STM_LED_C_READ_EVT */
       PRINT_MESG_DBG("ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE My_Led_Char Read\n");
 8003f10:	4850      	ldr	r0, [pc, #320]	; (8004054 <Custom_STM_App_Notification+0x17c>)
 8003f12:	f00a f885 	bl	800e020 <puts>

      /* USER CODE END CUSTOM_STM_LED_C_READ_EVT */
      break;
 8003f16:	e099      	b.n	800404c <Custom_STM_App_Notification+0x174>

    case CUSTOM_STM_LED_C_WRITE_NO_RESP_EVT:
      /* USER CODE BEGIN CUSTOM_STM_LED_C_WRITE_NO_RESP_EVT */
      APP_DBG_MSG("\r\n\r** CUSTOM_STM_LED_C_WRITE_NO_RESP_EVT \n");
 8003f18:	484f      	ldr	r0, [pc, #316]	; (8004058 <Custom_STM_App_Notification+0x180>)
 8003f1a:	f00a f881 	bl	800e020 <puts>
      APP_DBG_MSG("\r\n\r** Write Data: 0x%02X %02X \n", pNotification->DataTransfered.pPayload[0], pNotification->DataTransfered.pPayload[1]);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	781b      	ldrb	r3, [r3, #0]
 8003f24:	4619      	mov	r1, r3
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	3301      	adds	r3, #1
 8003f2c:	781b      	ldrb	r3, [r3, #0]
 8003f2e:	461a      	mov	r2, r3
 8003f30:	484a      	ldr	r0, [pc, #296]	; (800405c <Custom_STM_App_Notification+0x184>)
 8003f32:	f009 ffd9 	bl	800dee8 <iprintf>
      if (pNotification->DataTransfered.pPayload[1] == 0x01)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	3301      	adds	r3, #1
 8003f3c:	781b      	ldrb	r3, [r3, #0]
 8003f3e:	2b01      	cmp	r3, #1
 8003f40:	d104      	bne.n	8003f4c <Custom_STM_App_Notification+0x74>
      {
        HAL_GPIO_WritePin(Blue_Led_GPIO_Port, Blue_Led_Pin, GPIO_PIN_SET); 
 8003f42:	2201      	movs	r2, #1
 8003f44:	2120      	movs	r1, #32
 8003f46:	4846      	ldr	r0, [pc, #280]	; (8004060 <Custom_STM_App_Notification+0x188>)
 8003f48:	f001 ffa0 	bl	8005e8c <HAL_GPIO_WritePin>
      }
      if (pNotification->DataTransfered.pPayload[1] == 0x00)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	3301      	adds	r3, #1
 8003f52:	781b      	ldrb	r3, [r3, #0]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d178      	bne.n	800404a <Custom_STM_App_Notification+0x172>
      {
        HAL_GPIO_WritePin(Blue_Led_GPIO_Port, Blue_Led_Pin, GPIO_PIN_RESET); 
 8003f58:	2200      	movs	r2, #0
 8003f5a:	2120      	movs	r1, #32
 8003f5c:	4840      	ldr	r0, [pc, #256]	; (8004060 <Custom_STM_App_Notification+0x188>)
 8003f5e:	f001 ff95 	bl	8005e8c <HAL_GPIO_WritePin>
      } 
      /* USER CODE END CUSTOM_STM_LED_C_WRITE_NO_RESP_EVT */
      break;
 8003f62:	e072      	b.n	800404a <Custom_STM_App_Notification+0x172>

    case CUSTOM_STM_SWITCH_C_NOTIFY_ENABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_SWITCH_C_NOTIFY_ENABLED_EVT */
      APP_DBG_MSG("\r\n\r** CUSTOM_STM_BUTTON_C_NOTIFY_ENABLED_EVT \n");
 8003f64:	483f      	ldr	r0, [pc, #252]	; (8004064 <Custom_STM_App_Notification+0x18c>)
 8003f66:	f00a f85b 	bl	800e020 <puts>

      Custom_App_Context.Switch_c_Notification_Status = TOGGLE_ON;        /* My_Switch_Char notification status has been enabled */
 8003f6a:	4b3f      	ldr	r3, [pc, #252]	; (8004068 <Custom_STM_App_Notification+0x190>)
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	701a      	strb	r2, [r3, #0]
      /* USER CODE END CUSTOM_STM_SWITCH_C_NOTIFY_ENABLED_EVT */
      break;
 8003f70:	e06c      	b.n	800404c <Custom_STM_App_Notification+0x174>

    case CUSTOM_STM_SWITCH_C_NOTIFY_DISABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_SWITCH_C_NOTIFY_DISABLED_EVT */
      APP_DBG_MSG("\r\n\r** CUSTOM_STM_BUTTON_C_NOTIFY_DISABLED_EVT \n");
 8003f72:	483e      	ldr	r0, [pc, #248]	; (800406c <Custom_STM_App_Notification+0x194>)
 8003f74:	f00a f854 	bl	800e020 <puts>

      Custom_App_Context.Switch_c_Notification_Status = TOGGLE_OFF;        /* My_Switch_Char notification status has been disabled */
 8003f78:	4b3b      	ldr	r3, [pc, #236]	; (8004068 <Custom_STM_App_Notification+0x190>)
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	701a      	strb	r2, [r3, #0]
      /* USER CODE END CUSTOM_STM_SWITCH_C_NOTIFY_DISABLED_EVT */
      break;
 8003f7e:	e065      	b.n	800404c <Custom_STM_App_Notification+0x174>

    /* My_Heart_Rate */
    case CUSTOM_STM_HRS_M_NOTIFY_ENABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_HRS_M_NOTIFY_ENABLED_EVT */
       PRINT_MESG_DBG("ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE My_HRS_Meas NOTIFICATION_ENABLED\n");
 8003f80:	483b      	ldr	r0, [pc, #236]	; (8004070 <Custom_STM_App_Notification+0x198>)
 8003f82:	f00a f84d 	bl	800e020 <puts>

       Custom_App_Context.Hrs_m_Notification_Status = 1;         /* Hrs_m notification status has been enabled */
 8003f86:	4b38      	ldr	r3, [pc, #224]	; (8004068 <Custom_STM_App_Notification+0x190>)
 8003f88:	2201      	movs	r2, #1
 8003f8a:	705a      	strb	r2, [r3, #1]

       /* Set Heart Rate Measurement value */
       if ((hr_value >= CUSTOM_STM_HRS_VALUE_MIN) && (hr_value <= CUSTOM_STM_HRS_VALUE_MAX))
 8003f8c:	4b39      	ldr	r3, [pc, #228]	; (8004074 <Custom_STM_App_Notification+0x19c>)
 8003f8e:	881b      	ldrh	r3, [r3, #0]
 8003f90:	2b43      	cmp	r3, #67	; 0x43
 8003f92:	d91c      	bls.n	8003fce <Custom_STM_App_Notification+0xf6>
 8003f94:	4b37      	ldr	r3, [pc, #220]	; (8004074 <Custom_STM_App_Notification+0x19c>)
 8003f96:	881b      	ldrh	r3, [r3, #0]
 8003f98:	2b49      	cmp	r3, #73	; 0x49
 8003f9a:	d818      	bhi.n	8003fce <Custom_STM_App_Notification+0xf6>
       {
         hr_value += 1;
 8003f9c:	4b35      	ldr	r3, [pc, #212]	; (8004074 <Custom_STM_App_Notification+0x19c>)
 8003f9e:	881b      	ldrh	r3, [r3, #0]
 8003fa0:	3301      	adds	r3, #1
 8003fa2:	b29a      	uxth	r2, r3
 8003fa4:	4b33      	ldr	r3, [pc, #204]	; (8004074 <Custom_STM_App_Notification+0x19c>)
 8003fa6:	801a      	strh	r2, [r3, #0]
         
         /* Check if energy expanded has been reset */
         if (hr_energy_reset == CUSTOM_STM_HRS_ENERGY_RESET)
 8003fa8:	4b33      	ldr	r3, [pc, #204]	; (8004078 <Custom_STM_App_Notification+0x1a0>)
 8003faa:	781b      	ldrb	r3, [r3, #0]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d107      	bne.n	8003fc0 <Custom_STM_App_Notification+0xe8>
         {
           hr_energy = (uint16_t)CUSTOM_STM_HRS_ENERGY_MIN;
 8003fb0:	4b32      	ldr	r3, [pc, #200]	; (800407c <Custom_STM_App_Notification+0x1a4>)
 8003fb2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003fb6:	801a      	strh	r2, [r3, #0]
           hr_energy_reset = (uint8_t)CUSTOM_STM_HRS_ENERGY_NOT_RESET;
 8003fb8:	4b2f      	ldr	r3, [pc, #188]	; (8004078 <Custom_STM_App_Notification+0x1a0>)
 8003fba:	2201      	movs	r2, #1
 8003fbc:	701a      	strb	r2, [r3, #0]
         if (hr_energy_reset == CUSTOM_STM_HRS_ENERGY_RESET)
 8003fbe:	e00d      	b.n	8003fdc <Custom_STM_App_Notification+0x104>
         }
         else
         {
           hr_energy += 1;
 8003fc0:	4b2e      	ldr	r3, [pc, #184]	; (800407c <Custom_STM_App_Notification+0x1a4>)
 8003fc2:	881b      	ldrh	r3, [r3, #0]
 8003fc4:	3301      	adds	r3, #1
 8003fc6:	b29a      	uxth	r2, r3
 8003fc8:	4b2c      	ldr	r3, [pc, #176]	; (800407c <Custom_STM_App_Notification+0x1a4>)
 8003fca:	801a      	strh	r2, [r3, #0]
         if (hr_energy_reset == CUSTOM_STM_HRS_ENERGY_RESET)
 8003fcc:	e006      	b.n	8003fdc <Custom_STM_App_Notification+0x104>
         }
       }
       else
       {
         hr_value = (uint16_t)CUSTOM_STM_HRS_VALUE_MIN;
 8003fce:	4b29      	ldr	r3, [pc, #164]	; (8004074 <Custom_STM_App_Notification+0x19c>)
 8003fd0:	2244      	movs	r2, #68	; 0x44
 8003fd2:	801a      	strh	r2, [r3, #0]
         hr_energy = (uint16_t)CUSTOM_STM_HRS_ENERGY_MIN;
 8003fd4:	4b29      	ldr	r3, [pc, #164]	; (800407c <Custom_STM_App_Notification+0x1a4>)
 8003fd6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003fda:	801a      	strh	r2, [r3, #0]
       }
       PRINT_MESG_DBG("hr_value : %d, hr_energy : %d\n", hr_value, hr_energy);
 8003fdc:	4b25      	ldr	r3, [pc, #148]	; (8004074 <Custom_STM_App_Notification+0x19c>)
 8003fde:	881b      	ldrh	r3, [r3, #0]
 8003fe0:	4619      	mov	r1, r3
 8003fe2:	4b26      	ldr	r3, [pc, #152]	; (800407c <Custom_STM_App_Notification+0x1a4>)
 8003fe4:	881b      	ldrh	r3, [r3, #0]
 8003fe6:	461a      	mov	r2, r3
 8003fe8:	4825      	ldr	r0, [pc, #148]	; (8004080 <Custom_STM_App_Notification+0x1a8>)
 8003fea:	f009 ff7d 	bl	800dee8 <iprintf>
       
       /* NotifyCharData array size depends on SizeHrs_M defined in custom_stm.c file */
       NotifyCharData[0] = HRS_HRM_ENERGY_EXPENDED_PRESENT | HRS_HRM_VALUE_FORMAT_UINT16;     /* Heart Rate Value Format is set to UINT16. Units: beats per minute (bpm). Energy Expended field is present. Units: kilo Joules  */
 8003fee:	4b25      	ldr	r3, [pc, #148]	; (8004084 <Custom_STM_App_Notification+0x1ac>)
 8003ff0:	2209      	movs	r2, #9
 8003ff2:	701a      	strb	r2, [r3, #0]
       NotifyCharData[1] = (uint8_t)hr_value;           /* Heart Rate Measurement Value LSB*/
 8003ff4:	4b1f      	ldr	r3, [pc, #124]	; (8004074 <Custom_STM_App_Notification+0x19c>)
 8003ff6:	881b      	ldrh	r3, [r3, #0]
 8003ff8:	b2da      	uxtb	r2, r3
 8003ffa:	4b22      	ldr	r3, [pc, #136]	; (8004084 <Custom_STM_App_Notification+0x1ac>)
 8003ffc:	705a      	strb	r2, [r3, #1]
       NotifyCharData[2] = (uint8_t)(hr_value >> 8);    /* Heart Rate Measurement Value MSB*/
 8003ffe:	4b1d      	ldr	r3, [pc, #116]	; (8004074 <Custom_STM_App_Notification+0x19c>)
 8004000:	881b      	ldrh	r3, [r3, #0]
 8004002:	0a1b      	lsrs	r3, r3, #8
 8004004:	b29b      	uxth	r3, r3
 8004006:	b2da      	uxtb	r2, r3
 8004008:	4b1e      	ldr	r3, [pc, #120]	; (8004084 <Custom_STM_App_Notification+0x1ac>)
 800400a:	709a      	strb	r2, [r3, #2]
       NotifyCharData[3] = (uint8_t)hr_energy;          /* Energy Expended LSB*/
 800400c:	4b1b      	ldr	r3, [pc, #108]	; (800407c <Custom_STM_App_Notification+0x1a4>)
 800400e:	881b      	ldrh	r3, [r3, #0]
 8004010:	b2da      	uxtb	r2, r3
 8004012:	4b1c      	ldr	r3, [pc, #112]	; (8004084 <Custom_STM_App_Notification+0x1ac>)
 8004014:	70da      	strb	r2, [r3, #3]
       NotifyCharData[4] = (uint8_t)(hr_energy >> 8);   /* Energy Expended MSB*/
 8004016:	4b19      	ldr	r3, [pc, #100]	; (800407c <Custom_STM_App_Notification+0x1a4>)
 8004018:	881b      	ldrh	r3, [r3, #0]
 800401a:	0a1b      	lsrs	r3, r3, #8
 800401c:	b29b      	uxth	r3, r3
 800401e:	b2da      	uxtb	r2, r3
 8004020:	4b18      	ldr	r3, [pc, #96]	; (8004084 <Custom_STM_App_Notification+0x1ac>)
 8004022:	711a      	strb	r2, [r3, #4]
       
       Custom_Hrs_m_Send_Notification();                       
 8004024:	f000 f8d0 	bl	80041c8 <Custom_Hrs_m_Send_Notification>
      /* USER CODE END CUSTOM_STM_HRS_M_NOTIFY_ENABLED_EVT */
      break;
 8004028:	e010      	b.n	800404c <Custom_STM_App_Notification+0x174>

    case CUSTOM_STM_HRS_M_NOTIFY_DISABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_HRS_M_NOTIFY_DISABLED_EVT */
      PRINT_MESG_DBG("ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE My_HRS_Meas NOTIFICATION_DISABLED\n");
 800402a:	4817      	ldr	r0, [pc, #92]	; (8004088 <Custom_STM_App_Notification+0x1b0>)
 800402c:	f009 fff8 	bl	800e020 <puts>
      
      Custom_App_Context.Hrs_m_Notification_Status = 0;         /* Hrs_m notification status has been disabled */
 8004030:	4b0d      	ldr	r3, [pc, #52]	; (8004068 <Custom_STM_App_Notification+0x190>)
 8004032:	2200      	movs	r2, #0
 8004034:	705a      	strb	r2, [r3, #1]
      /* USER CODE END CUSTOM_STM_HRS_M_NOTIFY_DISABLED_EVT */
      break;
 8004036:	e009      	b.n	800404c <Custom_STM_App_Notification+0x174>
      /* USER CODE END CUSTOM_STM_HRS_SL_READ_EVT */
      break;

    case CUSTOM_STM_HRS_CTRLP_WRITE_EVT:
      /* USER CODE BEGIN CUSTOM_STM_HRS_CTRLP_WRITE_EVT */
      PRINT_MESG_DBG("ACI_GATT_WRITE_PERMIT_REQ_VSEVT_CODE My_HRS_CTRL_Point Write\n");
 8004038:	4814      	ldr	r0, [pc, #80]	; (800408c <Custom_STM_App_Notification+0x1b4>)
 800403a:	f009 fff1 	bl	800e020 <puts>
      
      /* reset energy expended */
      hr_energy_reset = CUSTOM_STM_HRS_ENERGY_RESET;
 800403e:	4b0e      	ldr	r3, [pc, #56]	; (8004078 <Custom_STM_App_Notification+0x1a0>)
 8004040:	2200      	movs	r2, #0
 8004042:	701a      	strb	r2, [r3, #0]
      /* USER CODE END CUSTOM_STM_HRS_CTRLP_WRITE_EVT */
      break;
 8004044:	e002      	b.n	800404c <Custom_STM_App_Notification+0x174>

    default:
      /* USER CODE BEGIN CUSTOM_STM_App_Notification_default */

      /* USER CODE END CUSTOM_STM_App_Notification_default */
      break;
 8004046:	bf00      	nop
 8004048:	e000      	b.n	800404c <Custom_STM_App_Notification+0x174>
      break;
 800404a:	bf00      	nop
  }
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_2 */

  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
 800404c:	bf00      	nop
}
 800404e:	3708      	adds	r7, #8
 8004050:	46bd      	mov	sp, r7
 8004052:	bd80      	pop	{r7, pc}
 8004054:	0801126c 	.word	0x0801126c
 8004058:	080112a4 	.word	0x080112a4
 800405c:	080112d0 	.word	0x080112d0
 8004060:	48000400 	.word	0x48000400
 8004064:	080112f0 	.word	0x080112f0
 8004068:	20000748 	.word	0x20000748
 800406c:	08011320 	.word	0x08011320
 8004070:	08011350 	.word	0x08011350
 8004074:	20000940 	.word	0x20000940
 8004078:	20000023 	.word	0x20000023
 800407c:	20000942 	.word	0x20000942
 8004080:	08011398 	.word	0x08011398
 8004084:	20000848 	.word	0x20000848
 8004088:	080113b8 	.word	0x080113b8
 800408c:	08011404 	.word	0x08011404

08004090 <Custom_APP_Notification>:

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 8004090:	b480      	push	{r7}
 8004092:	b083      	sub	sp, #12
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch (pNotification->Custom_Evt_Opcode)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	781b      	ldrb	r3, [r3, #0]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d002      	beq.n	80040a6 <Custom_APP_Notification+0x16>
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d002      	beq.n	80040aa <Custom_APP_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 80040a4:	e002      	b.n	80040ac <Custom_APP_Notification+0x1c>
      break;
 80040a6:	bf00      	nop
 80040a8:	e000      	b.n	80040ac <Custom_APP_Notification+0x1c>
      break;
 80040aa:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 80040ac:	bf00      	nop
}
 80040ae:	370c      	adds	r7, #12
 80040b0:	46bd      	mov	sp, r7
 80040b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b6:	4770      	bx	lr

080040b8 <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b082      	sub	sp, #8
 80040bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */
  uint8_t sensor_loc;

  sensor_loc = CUSTOM_STM_HRS_BODY_SENSOR_LOCATION_WRIST;
 80040be:	2302      	movs	r3, #2
 80040c0:	71fb      	strb	r3, [r7, #7]
  Custom_STM_App_Update_Char(CUSTOM_STM_HRS_SL, (uint8_t *) &sensor_loc);       /*initialise My_Sensor_Loc char to wrist */
 80040c2:	1dfb      	adds	r3, r7, #7
 80040c4:	4619      	mov	r1, r3
 80040c6:	2003      	movs	r0, #3
 80040c8:	f000 fb04 	bl	80046d4 <Custom_STM_App_Update_Char>
  
  Custom_Switch_c_Update_Char();
 80040cc:	f000 f816 	bl	80040fc <Custom_Switch_c_Update_Char>
  Custom_Hrs_m_Update_Char();
 80040d0:	f000 f866 	bl	80041a0 <Custom_Hrs_m_Update_Char>

  UTIL_SEQ_RegTask(1<< CFG_TASK_SW1_BUTTON_PUSHED_ID, UTIL_SEQ_RFU, Custom_Switch_c_Send_Notification);
 80040d4:	4a07      	ldr	r2, [pc, #28]	; (80040f4 <Custom_APP_Init+0x3c>)
 80040d6:	2100      	movs	r1, #0
 80040d8:	2008      	movs	r0, #8
 80040da:	f009 f919 	bl	800d310 <UTIL_SEQ_RegTask>

  Custom_App_Context.Switch_c_Notification_Status = TOGGLE_OFF;   
 80040de:	4b06      	ldr	r3, [pc, #24]	; (80040f8 <Custom_APP_Init+0x40>)
 80040e0:	2200      	movs	r2, #0
 80040e2:	701a      	strb	r2, [r3, #0]
  Custom_App_Context.SW1_Status = 0;                 
 80040e4:	4b04      	ldr	r3, [pc, #16]	; (80040f8 <Custom_APP_Init+0x40>)
 80040e6:	2200      	movs	r2, #0
 80040e8:	709a      	strb	r2, [r3, #2]
  /* USER CODE END CUSTOM_APP_Init */
  return;
 80040ea:	bf00      	nop
}
 80040ec:	3708      	adds	r7, #8
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}
 80040f2:	bf00      	nop
 80040f4:	08004125 	.word	0x08004125
 80040f8:	20000748 	.word	0x20000748

080040fc <Custom_Switch_c_Update_Char>:
 *
 *************************************************************/

/* My_P2P_Server */
void Custom_Switch_c_Update_Char(void) /* Property Read */
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b082      	sub	sp, #8
 8004100:	af00      	add	r7, sp, #0
  uint8_t updateflag = 0;
 8004102:	2300      	movs	r3, #0
 8004104:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN Switch_c_UC_1*/

  /* USER CODE END Switch_c_UC_1*/

  if (updateflag != 0)
 8004106:	79fb      	ldrb	r3, [r7, #7]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d004      	beq.n	8004116 <Custom_Switch_c_Update_Char+0x1a>
  {
    Custom_STM_App_Update_Char(CUSTOM_STM_SWITCH_C, (uint8_t *)UpdateCharData);
 800410c:	4904      	ldr	r1, [pc, #16]	; (8004120 <Custom_Switch_c_Update_Char+0x24>)
 800410e:	2001      	movs	r0, #1
 8004110:	f000 fae0 	bl	80046d4 <Custom_STM_App_Update_Char>
  }

  /* USER CODE BEGIN Switch_c_UC_Last*/

  /* USER CODE END Switch_c_UC_Last*/
  return;
 8004114:	bf00      	nop
 8004116:	bf00      	nop
}
 8004118:	3708      	adds	r7, #8
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}
 800411e:	bf00      	nop
 8004120:	20000750 	.word	0x20000750

08004124 <Custom_Switch_c_Send_Notification>:

void Custom_Switch_c_Send_Notification(void) /* Property Notification */
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b082      	sub	sp, #8
 8004128:	af00      	add	r7, sp, #0
  uint8_t updateflag = 0;
 800412a:	2300      	movs	r3, #0
 800412c:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN Switch_c_NS_1*/
  if (Custom_App_Context.Switch_c_Notification_Status == TOGGLE_ON)
 800412e:	4b18      	ldr	r3, [pc, #96]	; (8004190 <Custom_Switch_c_Send_Notification+0x6c>)
 8004130:	781b      	ldrb	r3, [r3, #0]
 8004132:	2b01      	cmp	r3, #1
 8004134:	d11c      	bne.n	8004170 <Custom_Switch_c_Send_Notification+0x4c>
  {
    updateflag = 1;
 8004136:	2301      	movs	r3, #1
 8004138:	71fb      	strb	r3, [r7, #7]
    
    if (Custom_App_Context.SW1_Status == 0)
 800413a:	4b15      	ldr	r3, [pc, #84]	; (8004190 <Custom_Switch_c_Send_Notification+0x6c>)
 800413c:	789b      	ldrb	r3, [r3, #2]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d109      	bne.n	8004156 <Custom_Switch_c_Send_Notification+0x32>
    {
      Custom_App_Context.SW1_Status = 1;
 8004142:	4b13      	ldr	r3, [pc, #76]	; (8004190 <Custom_Switch_c_Send_Notification+0x6c>)
 8004144:	2201      	movs	r2, #1
 8004146:	709a      	strb	r2, [r3, #2]
      NotifyCharData[0] = 0x00;
 8004148:	4b12      	ldr	r3, [pc, #72]	; (8004194 <Custom_Switch_c_Send_Notification+0x70>)
 800414a:	2200      	movs	r2, #0
 800414c:	701a      	strb	r2, [r3, #0]
      NotifyCharData[1] = 0x01;
 800414e:	4b11      	ldr	r3, [pc, #68]	; (8004194 <Custom_Switch_c_Send_Notification+0x70>)
 8004150:	2201      	movs	r2, #1
 8004152:	705a      	strb	r2, [r3, #1]
 8004154:	e008      	b.n	8004168 <Custom_Switch_c_Send_Notification+0x44>
    }
    else
    {
      Custom_App_Context.SW1_Status = 0;
 8004156:	4b0e      	ldr	r3, [pc, #56]	; (8004190 <Custom_Switch_c_Send_Notification+0x6c>)
 8004158:	2200      	movs	r2, #0
 800415a:	709a      	strb	r2, [r3, #2]
      NotifyCharData[0] = 0x00;
 800415c:	4b0d      	ldr	r3, [pc, #52]	; (8004194 <Custom_Switch_c_Send_Notification+0x70>)
 800415e:	2200      	movs	r2, #0
 8004160:	701a      	strb	r2, [r3, #0]
      NotifyCharData[1] = 0x00;
 8004162:	4b0c      	ldr	r3, [pc, #48]	; (8004194 <Custom_Switch_c_Send_Notification+0x70>)
 8004164:	2200      	movs	r2, #0
 8004166:	705a      	strb	r2, [r3, #1]
    }

    APP_DBG_MSG("-- CUSTOM APPLICATION SERVER  : INFORM CLIENT BUTTON 1 PUSHED \n");
 8004168:	480b      	ldr	r0, [pc, #44]	; (8004198 <Custom_Switch_c_Send_Notification+0x74>)
 800416a:	f009 ff59 	bl	800e020 <puts>
 800416e:	e002      	b.n	8004176 <Custom_Switch_c_Send_Notification+0x52>
  }
  else
  {
    APP_DBG_MSG("-- CUSTOM APPLICATION : CAN'T INFORM CLIENT -  NOTIFICATION DISABLED\n");
 8004170:	480a      	ldr	r0, [pc, #40]	; (800419c <Custom_Switch_c_Send_Notification+0x78>)
 8004172:	f009 ff55 	bl	800e020 <puts>
  }     
  /* USER CODE END Switch_c_NS_1*/

  if (updateflag != 0)
 8004176:	79fb      	ldrb	r3, [r7, #7]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d004      	beq.n	8004186 <Custom_Switch_c_Send_Notification+0x62>
  {
    Custom_STM_App_Update_Char(CUSTOM_STM_SWITCH_C, (uint8_t *)NotifyCharData);
 800417c:	4905      	ldr	r1, [pc, #20]	; (8004194 <Custom_Switch_c_Send_Notification+0x70>)
 800417e:	2001      	movs	r0, #1
 8004180:	f000 faa8 	bl	80046d4 <Custom_STM_App_Update_Char>

  /* USER CODE BEGIN Switch_c_NS_Last*/

  /* USER CODE END Switch_c_NS_Last*/

  return;
 8004184:	bf00      	nop
 8004186:	bf00      	nop
}
 8004188:	3708      	adds	r7, #8
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}
 800418e:	bf00      	nop
 8004190:	20000748 	.word	0x20000748
 8004194:	20000848 	.word	0x20000848
 8004198:	08011444 	.word	0x08011444
 800419c:	08011484 	.word	0x08011484

080041a0 <Custom_Hrs_m_Update_Char>:

/* My_Heart_Rate */
void Custom_Hrs_m_Update_Char(void) /* Property Read */
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b082      	sub	sp, #8
 80041a4:	af00      	add	r7, sp, #0
  uint8_t updateflag = 0;
 80041a6:	2300      	movs	r3, #0
 80041a8:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN Hrs_m_UC_1*/

  /* USER CODE END Hrs_m_UC_1*/

  if (updateflag != 0)
 80041aa:	79fb      	ldrb	r3, [r7, #7]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d004      	beq.n	80041ba <Custom_Hrs_m_Update_Char+0x1a>
  {
    Custom_STM_App_Update_Char(CUSTOM_STM_HRS_M, (uint8_t *)UpdateCharData);
 80041b0:	4904      	ldr	r1, [pc, #16]	; (80041c4 <Custom_Hrs_m_Update_Char+0x24>)
 80041b2:	2002      	movs	r0, #2
 80041b4:	f000 fa8e 	bl	80046d4 <Custom_STM_App_Update_Char>
  }

  /* USER CODE BEGIN Hrs_m_UC_Last*/

  /* USER CODE END Hrs_m_UC_Last*/
  return;
 80041b8:	bf00      	nop
 80041ba:	bf00      	nop
}
 80041bc:	3708      	adds	r7, #8
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}
 80041c2:	bf00      	nop
 80041c4:	20000750 	.word	0x20000750

080041c8 <Custom_Hrs_m_Send_Notification>:

void Custom_Hrs_m_Send_Notification(void) /* Property Notification */
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b082      	sub	sp, #8
 80041cc:	af00      	add	r7, sp, #0
  uint8_t updateflag = 0;
 80041ce:	2300      	movs	r3, #0
 80041d0:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN Hrs_m_NS_1*/

  /* USER CODE END Hrs_m_NS_1*/

  if (updateflag != 0)
 80041d2:	79fb      	ldrb	r3, [r7, #7]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d004      	beq.n	80041e2 <Custom_Hrs_m_Send_Notification+0x1a>
  {
    Custom_STM_App_Update_Char(CUSTOM_STM_HRS_M, (uint8_t *)NotifyCharData);
 80041d8:	4904      	ldr	r1, [pc, #16]	; (80041ec <Custom_Hrs_m_Send_Notification+0x24>)
 80041da:	2002      	movs	r0, #2
 80041dc:	f000 fa7a 	bl	80046d4 <Custom_STM_App_Update_Char>

  /* USER CODE BEGIN Hrs_m_NS_Last*/

  /* USER CODE END Hrs_m_NS_Last*/

  return;
 80041e0:	bf00      	nop
 80041e2:	bf00      	nop
}
 80041e4:	3708      	adds	r7, #8
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}
 80041ea:	bf00      	nop
 80041ec:	20000848 	.word	0x20000848

080041f0 <SW1_Button_Action>:

/* USER CODE BEGIN FD_LOCAL_FUNCTIONS*/
void SW1_Button_Action(void)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	af00      	add	r7, sp, #0
  UTIL_SEQ_SetTask( 1<<CFG_TASK_SW1_BUTTON_PUSHED_ID, CFG_SCH_PRIO_0);
 80041f4:	2100      	movs	r1, #0
 80041f6:	2008      	movs	r0, #8
 80041f8:	f009 f8ac 	bl	800d354 <UTIL_SEQ_SetTask>

  return;
 80041fc:	bf00      	nop
}
 80041fe:	bd80      	pop	{r7, pc}

08004200 <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b08e      	sub	sp, #56	; 0x38
 8004204:	af02      	add	r7, sp, #8
 8004206:	6078      	str	r0, [r7, #4]
                           Gatt Event Mask = GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP are defined, so:
                           BLE core event ACI_GATT_READ_PERMIT_REQ_VSEVT_CODE must be considered*/
  /* aci_gatt_read_permit_req_event_rp0    *read_req; */ 
  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 8004208:	2300      	movs	r3, #0
 800420a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	3301      	adds	r3, #1
 8004212:	62bb      	str	r3, [r7, #40]	; 0x28

  switch (event_pckt->evt)
 8004214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004216:	781b      	ldrb	r3, [r3, #0]
 8004218:	2bff      	cmp	r3, #255	; 0xff
 800421a:	f040 80c3 	bne.w	80043a4 <Custom_STM_Event_Handler+0x1a4>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 800421e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004220:	3302      	adds	r3, #2
 8004222:	627b      	str	r3, [r7, #36]	; 0x24
      switch (blecore_evt->ecode)
 8004224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004226:	881b      	ldrh	r3, [r3, #0]
 8004228:	b29b      	uxth	r3, r3
 800422a:	f640 4214 	movw	r2, #3092	; 0xc14
 800422e:	4293      	cmp	r3, r2
 8004230:	f000 80b0 	beq.w	8004394 <Custom_STM_Event_Handler+0x194>
 8004234:	f640 4214 	movw	r2, #3092	; 0xc14
 8004238:	4293      	cmp	r3, r2
 800423a:	f300 80ad 	bgt.w	8004398 <Custom_STM_Event_Handler+0x198>
 800423e:	f640 4201 	movw	r2, #3073	; 0xc01
 8004242:	4293      	cmp	r3, r2
 8004244:	d004      	beq.n	8004250 <Custom_STM_Event_Handler+0x50>
 8004246:	f640 4213 	movw	r2, #3091	; 0xc13
 800424a:	4293      	cmp	r3, r2
 800424c:	d066      	beq.n	800431c <Custom_STM_Event_Handler+0x11c>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 800424e:	e0a3      	b.n	8004398 <Custom_STM_Event_Handler+0x198>
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 8004250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004252:	3302      	adds	r3, #2
 8004254:	61fb      	str	r3, [r7, #28]
          if (attribute_modified->Attr_Handle == (CustomContext.CustomSwitch_CHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 8004256:	69fb      	ldr	r3, [r7, #28]
 8004258:	885b      	ldrh	r3, [r3, #2]
 800425a:	b29b      	uxth	r3, r3
 800425c:	461a      	mov	r2, r3
 800425e:	4b55      	ldr	r3, [pc, #340]	; (80043b4 <Custom_STM_Event_Handler+0x1b4>)
 8004260:	889b      	ldrh	r3, [r3, #4]
 8004262:	3302      	adds	r3, #2
 8004264:	429a      	cmp	r2, r3
 8004266:	d119      	bne.n	800429c <Custom_STM_Event_Handler+0x9c>
            return_value = SVCCTL_EvtAckFlowEnable;
 8004268:	2301      	movs	r3, #1
 800426a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            switch (attribute_modified->Attr_Data[0])
 800426e:	69fb      	ldr	r3, [r7, #28]
 8004270:	7a1b      	ldrb	r3, [r3, #8]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d002      	beq.n	800427c <Custom_STM_Event_Handler+0x7c>
 8004276:	2b01      	cmp	r3, #1
 8004278:	d008      	beq.n	800428c <Custom_STM_Event_Handler+0x8c>
              break;
 800427a:	e04e      	b.n	800431a <Custom_STM_Event_Handler+0x11a>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_SWITCH_C_NOTIFY_DISABLED_EVT;
 800427c:	2303      	movs	r3, #3
 800427e:	733b      	strb	r3, [r7, #12]
                Custom_STM_App_Notification(&Notification);
 8004280:	f107 030c 	add.w	r3, r7, #12
 8004284:	4618      	mov	r0, r3
 8004286:	f7ff fe27 	bl	8003ed8 <Custom_STM_App_Notification>
                break;
 800428a:	e046      	b.n	800431a <Custom_STM_Event_Handler+0x11a>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_SWITCH_C_NOTIFY_ENABLED_EVT;
 800428c:	2302      	movs	r3, #2
 800428e:	733b      	strb	r3, [r7, #12]
                Custom_STM_App_Notification(&Notification);
 8004290:	f107 030c 	add.w	r3, r7, #12
 8004294:	4618      	mov	r0, r3
 8004296:	f7ff fe1f 	bl	8003ed8 <Custom_STM_App_Notification>
                break;
 800429a:	e03e      	b.n	800431a <Custom_STM_Event_Handler+0x11a>
          else if (attribute_modified->Attr_Handle == (CustomContext.CustomHrs_MHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 800429c:	69fb      	ldr	r3, [r7, #28]
 800429e:	885b      	ldrh	r3, [r3, #2]
 80042a0:	b29b      	uxth	r3, r3
 80042a2:	461a      	mov	r2, r3
 80042a4:	4b43      	ldr	r3, [pc, #268]	; (80043b4 <Custom_STM_Event_Handler+0x1b4>)
 80042a6:	891b      	ldrh	r3, [r3, #8]
 80042a8:	3302      	adds	r3, #2
 80042aa:	429a      	cmp	r2, r3
 80042ac:	d119      	bne.n	80042e2 <Custom_STM_Event_Handler+0xe2>
            return_value = SVCCTL_EvtAckFlowEnable;
 80042ae:	2301      	movs	r3, #1
 80042b0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            switch (attribute_modified->Attr_Data[0])
 80042b4:	69fb      	ldr	r3, [r7, #28]
 80042b6:	7a1b      	ldrb	r3, [r3, #8]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d002      	beq.n	80042c2 <Custom_STM_Event_Handler+0xc2>
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d008      	beq.n	80042d2 <Custom_STM_Event_Handler+0xd2>
              break;
 80042c0:	e02b      	b.n	800431a <Custom_STM_Event_Handler+0x11a>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_HRS_M_NOTIFY_DISABLED_EVT;
 80042c2:	2305      	movs	r3, #5
 80042c4:	733b      	strb	r3, [r7, #12]
                Custom_STM_App_Notification(&Notification);
 80042c6:	f107 030c 	add.w	r3, r7, #12
 80042ca:	4618      	mov	r0, r3
 80042cc:	f7ff fe04 	bl	8003ed8 <Custom_STM_App_Notification>
                break;
 80042d0:	e023      	b.n	800431a <Custom_STM_Event_Handler+0x11a>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_HRS_M_NOTIFY_ENABLED_EVT;
 80042d2:	2304      	movs	r3, #4
 80042d4:	733b      	strb	r3, [r7, #12]
                Custom_STM_App_Notification(&Notification);
 80042d6:	f107 030c 	add.w	r3, r7, #12
 80042da:	4618      	mov	r0, r3
 80042dc:	f7ff fdfc 	bl	8003ed8 <Custom_STM_App_Notification>
                break;
 80042e0:	e01b      	b.n	800431a <Custom_STM_Event_Handler+0x11a>
          else if (attribute_modified->Attr_Handle == (CustomContext.CustomLed_CHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 80042e2:	69fb      	ldr	r3, [r7, #28]
 80042e4:	885b      	ldrh	r3, [r3, #2]
 80042e6:	b29b      	uxth	r3, r3
 80042e8:	461a      	mov	r2, r3
 80042ea:	4b32      	ldr	r3, [pc, #200]	; (80043b4 <Custom_STM_Event_Handler+0x1b4>)
 80042ec:	885b      	ldrh	r3, [r3, #2]
 80042ee:	3301      	adds	r3, #1
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d153      	bne.n	800439c <Custom_STM_Event_Handler+0x19c>
            return_value = SVCCTL_EvtAckFlowEnable;
 80042f4:	2301      	movs	r3, #1
 80042f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            Notification.Custom_Evt_Opcode = CUSTOM_STM_LED_C_WRITE_NO_RESP_EVT;
 80042fa:	2301      	movs	r3, #1
 80042fc:	733b      	strb	r3, [r7, #12]
            Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 80042fe:	69fb      	ldr	r3, [r7, #28]
 8004300:	88db      	ldrh	r3, [r3, #6]
 8004302:	b29b      	uxth	r3, r3
 8004304:	b2db      	uxtb	r3, r3
 8004306:	753b      	strb	r3, [r7, #20]
            Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 8004308:	69fb      	ldr	r3, [r7, #28]
 800430a:	3308      	adds	r3, #8
 800430c:	613b      	str	r3, [r7, #16]
            Custom_STM_App_Notification(&Notification);
 800430e:	f107 030c 	add.w	r3, r7, #12
 8004312:	4618      	mov	r0, r3
 8004314:	f7ff fde0 	bl	8003ed8 <Custom_STM_App_Notification>
          break;
 8004318:	e040      	b.n	800439c <Custom_STM_Event_Handler+0x19c>
 800431a:	e03f      	b.n	800439c <Custom_STM_Event_Handler+0x19c>
          write_perm_req = (aci_gatt_write_permit_req_event_rp0*)blecore_evt->data;
 800431c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800431e:	3302      	adds	r3, #2
 8004320:	623b      	str	r3, [r7, #32]
          if (write_perm_req->Attribute_Handle == (CustomContext.CustomHrs_CtrlpHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 8004322:	6a3b      	ldr	r3, [r7, #32]
 8004324:	885b      	ldrh	r3, [r3, #2]
 8004326:	b29b      	uxth	r3, r3
 8004328:	461a      	mov	r2, r3
 800432a:	4b22      	ldr	r3, [pc, #136]	; (80043b4 <Custom_STM_Event_Handler+0x1b4>)
 800432c:	899b      	ldrh	r3, [r3, #12]
 800432e:	3301      	adds	r3, #1
 8004330:	429a      	cmp	r2, r3
 8004332:	d135      	bne.n	80043a0 <Custom_STM_Event_Handler+0x1a0>
            return_value = SVCCTL_EvtAckFlowEnable;
 8004334:	2301      	movs	r3, #1
 8004336:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            if (write_perm_req->Data[0] == CUSTOM_STM_HRS_CNTL_POINT_RESET_ENERGY_EXPENDED)
 800433a:	6a3b      	ldr	r3, [r7, #32]
 800433c:	795b      	ldrb	r3, [r3, #5]
 800433e:	2b01      	cmp	r3, #1
 8004340:	d117      	bne.n	8004372 <Custom_STM_Event_Handler+0x172>
              aci_gatt_write_resp(write_perm_req->Connection_Handle,
 8004342:	6a3b      	ldr	r3, [r7, #32]
 8004344:	881b      	ldrh	r3, [r3, #0]
 8004346:	b298      	uxth	r0, r3
 8004348:	6a3b      	ldr	r3, [r7, #32]
 800434a:	885b      	ldrh	r3, [r3, #2]
 800434c:	b299      	uxth	r1, r3
 800434e:	6a3b      	ldr	r3, [r7, #32]
 8004350:	791b      	ldrb	r3, [r3, #4]
                                  (uint8_t *)&write_perm_req->Data[0]);
 8004352:	6a3a      	ldr	r2, [r7, #32]
 8004354:	3205      	adds	r2, #5
              aci_gatt_write_resp(write_perm_req->Connection_Handle,
 8004356:	9201      	str	r2, [sp, #4]
 8004358:	9300      	str	r3, [sp, #0]
 800435a:	2300      	movs	r3, #0
 800435c:	2200      	movs	r2, #0
 800435e:	f006 fe84 	bl	800b06a <aci_gatt_write_resp>
              Notification.Custom_Evt_Opcode = CUSTOM_STM_HRS_CTRLP_WRITE_EVT;
 8004362:	2307      	movs	r3, #7
 8004364:	733b      	strb	r3, [r7, #12]
              Custom_STM_App_Notification(&Notification);
 8004366:	f107 030c 	add.w	r3, r7, #12
 800436a:	4618      	mov	r0, r3
 800436c:	f7ff fdb4 	bl	8003ed8 <Custom_STM_App_Notification>
          break;
 8004370:	e016      	b.n	80043a0 <Custom_STM_Event_Handler+0x1a0>
              aci_gatt_write_resp(write_perm_req->Connection_Handle,
 8004372:	6a3b      	ldr	r3, [r7, #32]
 8004374:	881b      	ldrh	r3, [r3, #0]
 8004376:	b298      	uxth	r0, r3
 8004378:	6a3b      	ldr	r3, [r7, #32]
 800437a:	885b      	ldrh	r3, [r3, #2]
 800437c:	b299      	uxth	r1, r3
 800437e:	6a3b      	ldr	r3, [r7, #32]
 8004380:	791b      	ldrb	r3, [r3, #4]
                                  (uint8_t *)&write_perm_req->Data[0]);
 8004382:	6a3a      	ldr	r2, [r7, #32]
 8004384:	3205      	adds	r2, #5
              aci_gatt_write_resp(write_perm_req->Connection_Handle,
 8004386:	9201      	str	r2, [sp, #4]
 8004388:	9300      	str	r3, [sp, #0]
 800438a:	2380      	movs	r3, #128	; 0x80
 800438c:	2201      	movs	r2, #1
 800438e:	f006 fe6c 	bl	800b06a <aci_gatt_write_resp>
          break;
 8004392:	e005      	b.n	80043a0 <Custom_STM_Event_Handler+0x1a0>
          break;
 8004394:	bf00      	nop
 8004396:	e006      	b.n	80043a6 <Custom_STM_Event_Handler+0x1a6>
          break;
 8004398:	bf00      	nop
 800439a:	e004      	b.n	80043a6 <Custom_STM_Event_Handler+0x1a6>
          break;
 800439c:	bf00      	nop
 800439e:	e002      	b.n	80043a6 <Custom_STM_Event_Handler+0x1a6>
          break;
 80043a0:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 80043a2:	e000      	b.n	80043a6 <Custom_STM_Event_Handler+0x1a6>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 80043a4:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 80043a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}/* end Custom_STM_Event_Handler */
 80043aa:	4618      	mov	r0, r3
 80043ac:	3730      	adds	r7, #48	; 0x30
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}
 80043b2:	bf00      	nop
 80043b4:	20000944 	.word	0x20000944

080043b8 <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b08c      	sub	sp, #48	; 0x30
 80043bc:	af06      	add	r7, sp, #24

  Char_UUID_t  uuid;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80043be:	2392      	movs	r3, #146	; 0x92
 80043c0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 80043c2:	48a9      	ldr	r0, [pc, #676]	; (8004668 <SVCCTL_InitCustomSvc+0x2b0>)
 80043c4:	f008 fbb0 	bl	800cb28 <SVCCTL_RegisterSvcHandler>
   *                              = 6
   *
   * This value doesn't take into account number of descriptors manually added
   * In case of descriptors addded, please update the max_attr_record value accordingly in the next SVCCTL_InitService User Section
   */
  max_attr_record = 6;
 80043c8:	2306      	movs	r3, #6
 80043ca:	75bb      	strb	r3, [r7, #22]
  /* USER CODE BEGIN SVCCTL_InitService */
  /* max_attr_record to be updated if descriptors have been added */

  /* USER CODE END SVCCTL_InitService */

  COPY_MY_P2P_SERVER_UUID(uuid.Char_UUID_128);
 80043cc:	238f      	movs	r3, #143	; 0x8f
 80043ce:	713b      	strb	r3, [r7, #4]
 80043d0:	23e5      	movs	r3, #229	; 0xe5
 80043d2:	717b      	strb	r3, [r7, #5]
 80043d4:	23b3      	movs	r3, #179	; 0xb3
 80043d6:	71bb      	strb	r3, [r7, #6]
 80043d8:	23d5      	movs	r3, #213	; 0xd5
 80043da:	71fb      	strb	r3, [r7, #7]
 80043dc:	232e      	movs	r3, #46	; 0x2e
 80043de:	723b      	strb	r3, [r7, #8]
 80043e0:	237f      	movs	r3, #127	; 0x7f
 80043e2:	727b      	strb	r3, [r7, #9]
 80043e4:	234a      	movs	r3, #74	; 0x4a
 80043e6:	72bb      	strb	r3, [r7, #10]
 80043e8:	2398      	movs	r3, #152	; 0x98
 80043ea:	72fb      	strb	r3, [r7, #11]
 80043ec:	232a      	movs	r3, #42	; 0x2a
 80043ee:	733b      	strb	r3, [r7, #12]
 80043f0:	2348      	movs	r3, #72	; 0x48
 80043f2:	737b      	strb	r3, [r7, #13]
 80043f4:	237a      	movs	r3, #122	; 0x7a
 80043f6:	73bb      	strb	r3, [r7, #14]
 80043f8:	23cc      	movs	r3, #204	; 0xcc
 80043fa:	73fb      	strb	r3, [r7, #15]
 80043fc:	2340      	movs	r3, #64	; 0x40
 80043fe:	743b      	strb	r3, [r7, #16]
 8004400:	23fe      	movs	r3, #254	; 0xfe
 8004402:	747b      	strb	r3, [r7, #17]
 8004404:	2300      	movs	r3, #0
 8004406:	74bb      	strb	r3, [r7, #18]
 8004408:	2300      	movs	r3, #0
 800440a:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 800440c:	7dbb      	ldrb	r3, [r7, #22]
 800440e:	1d39      	adds	r1, r7, #4
 8004410:	4a96      	ldr	r2, [pc, #600]	; (800466c <SVCCTL_InitCustomSvc+0x2b4>)
 8004412:	9200      	str	r2, [sp, #0]
 8004414:	2201      	movs	r2, #1
 8004416:	2002      	movs	r0, #2
 8004418:	f006 fba0 	bl	800ab5c <aci_gatt_add_service>
 800441c:	4603      	mov	r3, r0
 800441e:	75fb      	strb	r3, [r7, #23]
                             (Service_UUID_t *) &uuid,
                             PRIMARY_SERVICE,
                             max_attr_record,
                             &(CustomContext.CustomMy_P2PsHdle));
  if (ret != BLE_STATUS_SUCCESS)
 8004420:	7dfb      	ldrb	r3, [r7, #23]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d005      	beq.n	8004432 <SVCCTL_InitCustomSvc+0x7a>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_service command: My_P2PS, error code: 0x%x \n\r", ret);
 8004426:	7dfb      	ldrb	r3, [r7, #23]
 8004428:	4619      	mov	r1, r3
 800442a:	4891      	ldr	r0, [pc, #580]	; (8004670 <SVCCTL_InitCustomSvc+0x2b8>)
 800442c:	f009 fd5c 	bl	800dee8 <iprintf>
 8004430:	e002      	b.n	8004438 <SVCCTL_InitCustomSvc+0x80>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_service command: My_P2PS \n\r");
 8004432:	4890      	ldr	r0, [pc, #576]	; (8004674 <SVCCTL_InitCustomSvc+0x2bc>)
 8004434:	f009 fd58 	bl	800dee8 <iprintf>
  }

  /**
   *  My_LED_Char
   */
  COPY_MY_LED_CHAR_UUID(uuid.Char_UUID_128);
 8004438:	2319      	movs	r3, #25
 800443a:	713b      	strb	r3, [r7, #4]
 800443c:	23ed      	movs	r3, #237	; 0xed
 800443e:	717b      	strb	r3, [r7, #5]
 8004440:	2382      	movs	r3, #130	; 0x82
 8004442:	71bb      	strb	r3, [r7, #6]
 8004444:	23ae      	movs	r3, #174	; 0xae
 8004446:	71fb      	strb	r3, [r7, #7]
 8004448:	23ed      	movs	r3, #237	; 0xed
 800444a:	723b      	strb	r3, [r7, #8]
 800444c:	2321      	movs	r3, #33	; 0x21
 800444e:	727b      	strb	r3, [r7, #9]
 8004450:	234c      	movs	r3, #76	; 0x4c
 8004452:	72bb      	strb	r3, [r7, #10]
 8004454:	239d      	movs	r3, #157	; 0x9d
 8004456:	72fb      	strb	r3, [r7, #11]
 8004458:	2341      	movs	r3, #65	; 0x41
 800445a:	733b      	strb	r3, [r7, #12]
 800445c:	2345      	movs	r3, #69	; 0x45
 800445e:	737b      	strb	r3, [r7, #13]
 8004460:	2322      	movs	r3, #34	; 0x22
 8004462:	73bb      	strb	r3, [r7, #14]
 8004464:	238e      	movs	r3, #142	; 0x8e
 8004466:	73fb      	strb	r3, [r7, #15]
 8004468:	2341      	movs	r3, #65	; 0x41
 800446a:	743b      	strb	r3, [r7, #16]
 800446c:	23fe      	movs	r3, #254	; 0xfe
 800446e:	747b      	strb	r3, [r7, #17]
 8004470:	2300      	movs	r3, #0
 8004472:	74bb      	strb	r3, [r7, #18]
 8004474:	2300      	movs	r3, #0
 8004476:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomMy_P2PsHdle,
 8004478:	4b7c      	ldr	r3, [pc, #496]	; (800466c <SVCCTL_InitCustomSvc+0x2b4>)
 800447a:	8818      	ldrh	r0, [r3, #0]
 800447c:	4b7e      	ldr	r3, [pc, #504]	; (8004678 <SVCCTL_InitCustomSvc+0x2c0>)
 800447e:	781b      	ldrb	r3, [r3, #0]
 8004480:	b29b      	uxth	r3, r3
 8004482:	1d3a      	adds	r2, r7, #4
 8004484:	497d      	ldr	r1, [pc, #500]	; (800467c <SVCCTL_InitCustomSvc+0x2c4>)
 8004486:	9105      	str	r1, [sp, #20]
 8004488:	2101      	movs	r1, #1
 800448a:	9104      	str	r1, [sp, #16]
 800448c:	2110      	movs	r1, #16
 800448e:	9103      	str	r1, [sp, #12]
 8004490:	2101      	movs	r1, #1
 8004492:	9102      	str	r1, [sp, #8]
 8004494:	2100      	movs	r1, #0
 8004496:	9101      	str	r1, [sp, #4]
 8004498:	2106      	movs	r1, #6
 800449a:	9100      	str	r1, [sp, #0]
 800449c:	2102      	movs	r1, #2
 800449e:	f006 fc33 	bl	800ad08 <aci_gatt_add_char>
 80044a2:	4603      	mov	r3, r0
 80044a4:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_NONE,
                          GATT_NOTIFY_ATTRIBUTE_WRITE,
                          0x10,
                          CHAR_VALUE_LEN_VARIABLE,
                          &(CustomContext.CustomLed_CHdle));
  if (ret != BLE_STATUS_SUCCESS)
 80044a6:	7dfb      	ldrb	r3, [r7, #23]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d005      	beq.n	80044b8 <SVCCTL_InitCustomSvc+0x100>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : LED_C, error code: 0x%x \n\r", ret);
 80044ac:	7dfb      	ldrb	r3, [r7, #23]
 80044ae:	4619      	mov	r1, r3
 80044b0:	4873      	ldr	r0, [pc, #460]	; (8004680 <SVCCTL_InitCustomSvc+0x2c8>)
 80044b2:	f009 fd19 	bl	800dee8 <iprintf>
 80044b6:	e002      	b.n	80044be <SVCCTL_InitCustomSvc+0x106>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : LED_C \n\r");
 80044b8:	4872      	ldr	r0, [pc, #456]	; (8004684 <SVCCTL_InitCustomSvc+0x2cc>)
 80044ba:	f009 fd15 	bl	800dee8 <iprintf>

  /* USER CODE END SVCCTL_Init_Service1_Char1 */
  /**
   *  My_Switch_Char
   */
  COPY_MY_SWITCH_CHAR_UUID(uuid.Char_UUID_128);
 80044be:	2319      	movs	r3, #25
 80044c0:	713b      	strb	r3, [r7, #4]
 80044c2:	23ed      	movs	r3, #237	; 0xed
 80044c4:	717b      	strb	r3, [r7, #5]
 80044c6:	2382      	movs	r3, #130	; 0x82
 80044c8:	71bb      	strb	r3, [r7, #6]
 80044ca:	23ae      	movs	r3, #174	; 0xae
 80044cc:	71fb      	strb	r3, [r7, #7]
 80044ce:	23ed      	movs	r3, #237	; 0xed
 80044d0:	723b      	strb	r3, [r7, #8]
 80044d2:	2321      	movs	r3, #33	; 0x21
 80044d4:	727b      	strb	r3, [r7, #9]
 80044d6:	234c      	movs	r3, #76	; 0x4c
 80044d8:	72bb      	strb	r3, [r7, #10]
 80044da:	239d      	movs	r3, #157	; 0x9d
 80044dc:	72fb      	strb	r3, [r7, #11]
 80044de:	2341      	movs	r3, #65	; 0x41
 80044e0:	733b      	strb	r3, [r7, #12]
 80044e2:	2345      	movs	r3, #69	; 0x45
 80044e4:	737b      	strb	r3, [r7, #13]
 80044e6:	2322      	movs	r3, #34	; 0x22
 80044e8:	73bb      	strb	r3, [r7, #14]
 80044ea:	238e      	movs	r3, #142	; 0x8e
 80044ec:	73fb      	strb	r3, [r7, #15]
 80044ee:	2342      	movs	r3, #66	; 0x42
 80044f0:	743b      	strb	r3, [r7, #16]
 80044f2:	23fe      	movs	r3, #254	; 0xfe
 80044f4:	747b      	strb	r3, [r7, #17]
 80044f6:	2300      	movs	r3, #0
 80044f8:	74bb      	strb	r3, [r7, #18]
 80044fa:	2300      	movs	r3, #0
 80044fc:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomMy_P2PsHdle,
 80044fe:	4b5b      	ldr	r3, [pc, #364]	; (800466c <SVCCTL_InitCustomSvc+0x2b4>)
 8004500:	8818      	ldrh	r0, [r3, #0]
 8004502:	4b61      	ldr	r3, [pc, #388]	; (8004688 <SVCCTL_InitCustomSvc+0x2d0>)
 8004504:	781b      	ldrb	r3, [r3, #0]
 8004506:	b29b      	uxth	r3, r3
 8004508:	1d3a      	adds	r2, r7, #4
 800450a:	4960      	ldr	r1, [pc, #384]	; (800468c <SVCCTL_InitCustomSvc+0x2d4>)
 800450c:	9105      	str	r1, [sp, #20]
 800450e:	2101      	movs	r1, #1
 8004510:	9104      	str	r1, [sp, #16]
 8004512:	2110      	movs	r1, #16
 8004514:	9103      	str	r1, [sp, #12]
 8004516:	2101      	movs	r1, #1
 8004518:	9102      	str	r1, [sp, #8]
 800451a:	2100      	movs	r1, #0
 800451c:	9101      	str	r1, [sp, #4]
 800451e:	2110      	movs	r1, #16
 8004520:	9100      	str	r1, [sp, #0]
 8004522:	2102      	movs	r1, #2
 8004524:	f006 fbf0 	bl	800ad08 <aci_gatt_add_char>
 8004528:	4603      	mov	r3, r0
 800452a:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_NONE,
                          GATT_NOTIFY_ATTRIBUTE_WRITE,
                          0x10,
                          CHAR_VALUE_LEN_VARIABLE,
                          &(CustomContext.CustomSwitch_CHdle));
  if (ret != BLE_STATUS_SUCCESS)
 800452c:	7dfb      	ldrb	r3, [r7, #23]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d005      	beq.n	800453e <SVCCTL_InitCustomSvc+0x186>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : SWITCH_C, error code: 0x%x \n\r", ret);
 8004532:	7dfb      	ldrb	r3, [r7, #23]
 8004534:	4619      	mov	r1, r3
 8004536:	4856      	ldr	r0, [pc, #344]	; (8004690 <SVCCTL_InitCustomSvc+0x2d8>)
 8004538:	f009 fcd6 	bl	800dee8 <iprintf>
 800453c:	e002      	b.n	8004544 <SVCCTL_InitCustomSvc+0x18c>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : SWITCH_C \n\r");
 800453e:	4855      	ldr	r0, [pc, #340]	; (8004694 <SVCCTL_InitCustomSvc+0x2dc>)
 8004540:	f009 fcd2 	bl	800dee8 <iprintf>
   *                              = 8
   *
   * This value doesn't take into account number of descriptors manually added
   * In case of descriptors addded, please update the max_attr_record value accordingly in the next SVCCTL_InitService User Section
   */
  max_attr_record = 8;
 8004544:	2308      	movs	r3, #8
 8004546:	75bb      	strb	r3, [r7, #22]
  /* USER CODE BEGIN SVCCTL_InitService */
  /* max_attr_record to be updated if descriptors have been added */

  /* USER CODE END SVCCTL_InitService */

  uuid.Char_UUID_16 = 0x180d;
 8004548:	f641 030d 	movw	r3, #6157	; 0x180d
 800454c:	80bb      	strh	r3, [r7, #4]
  ret = aci_gatt_add_service(UUID_TYPE_16,
 800454e:	7dbb      	ldrb	r3, [r7, #22]
 8004550:	1d39      	adds	r1, r7, #4
 8004552:	4a51      	ldr	r2, [pc, #324]	; (8004698 <SVCCTL_InitCustomSvc+0x2e0>)
 8004554:	9200      	str	r2, [sp, #0]
 8004556:	2201      	movs	r2, #1
 8004558:	2001      	movs	r0, #1
 800455a:	f006 faff 	bl	800ab5c <aci_gatt_add_service>
 800455e:	4603      	mov	r3, r0
 8004560:	75fb      	strb	r3, [r7, #23]
                             (Service_UUID_t *) &uuid,
                             PRIMARY_SERVICE,
                             max_attr_record,
                             &(CustomContext.CustomMy_HrsHdle));
  if (ret != BLE_STATUS_SUCCESS)
 8004562:	7dfb      	ldrb	r3, [r7, #23]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d005      	beq.n	8004574 <SVCCTL_InitCustomSvc+0x1bc>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_service command: My_HRS, error code: 0x%x \n\r", ret);
 8004568:	7dfb      	ldrb	r3, [r7, #23]
 800456a:	4619      	mov	r1, r3
 800456c:	484b      	ldr	r0, [pc, #300]	; (800469c <SVCCTL_InitCustomSvc+0x2e4>)
 800456e:	f009 fcbb 	bl	800dee8 <iprintf>
 8004572:	e002      	b.n	800457a <SVCCTL_InitCustomSvc+0x1c2>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_service command: My_HRS \n\r");
 8004574:	484a      	ldr	r0, [pc, #296]	; (80046a0 <SVCCTL_InitCustomSvc+0x2e8>)
 8004576:	f009 fcb7 	bl	800dee8 <iprintf>
  }

  /**
   *  My_HRS_Meas
   */
  uuid.Char_UUID_16 = 0x2a37;
 800457a:	f642 2337 	movw	r3, #10807	; 0x2a37
 800457e:	80bb      	strh	r3, [r7, #4]
  ret = aci_gatt_add_char(CustomContext.CustomMy_HrsHdle,
 8004580:	4b3a      	ldr	r3, [pc, #232]	; (800466c <SVCCTL_InitCustomSvc+0x2b4>)
 8004582:	88d8      	ldrh	r0, [r3, #6]
 8004584:	4b47      	ldr	r3, [pc, #284]	; (80046a4 <SVCCTL_InitCustomSvc+0x2ec>)
 8004586:	781b      	ldrb	r3, [r3, #0]
 8004588:	b29b      	uxth	r3, r3
 800458a:	1d3a      	adds	r2, r7, #4
 800458c:	4946      	ldr	r1, [pc, #280]	; (80046a8 <SVCCTL_InitCustomSvc+0x2f0>)
 800458e:	9105      	str	r1, [sp, #20]
 8004590:	2101      	movs	r1, #1
 8004592:	9104      	str	r1, [sp, #16]
 8004594:	2110      	movs	r1, #16
 8004596:	9103      	str	r1, [sp, #12]
 8004598:	2100      	movs	r1, #0
 800459a:	9102      	str	r1, [sp, #8]
 800459c:	2100      	movs	r1, #0
 800459e:	9101      	str	r1, [sp, #4]
 80045a0:	2110      	movs	r1, #16
 80045a2:	9100      	str	r1, [sp, #0]
 80045a4:	2101      	movs	r1, #1
 80045a6:	f006 fbaf 	bl	800ad08 <aci_gatt_add_char>
 80045aa:	4603      	mov	r3, r0
 80045ac:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_NONE,
                          GATT_DONT_NOTIFY_EVENTS,
                          0x10,
                          CHAR_VALUE_LEN_VARIABLE,
                          &(CustomContext.CustomHrs_MHdle));
  if (ret != BLE_STATUS_SUCCESS)
 80045ae:	7dfb      	ldrb	r3, [r7, #23]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d005      	beq.n	80045c0 <SVCCTL_InitCustomSvc+0x208>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : HRS_M, error code: 0x%x \n\r", ret);
 80045b4:	7dfb      	ldrb	r3, [r7, #23]
 80045b6:	4619      	mov	r1, r3
 80045b8:	483c      	ldr	r0, [pc, #240]	; (80046ac <SVCCTL_InitCustomSvc+0x2f4>)
 80045ba:	f009 fc95 	bl	800dee8 <iprintf>
 80045be:	e002      	b.n	80045c6 <SVCCTL_InitCustomSvc+0x20e>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : HRS_M \n\r");
 80045c0:	483b      	ldr	r0, [pc, #236]	; (80046b0 <SVCCTL_InitCustomSvc+0x2f8>)
 80045c2:	f009 fc91 	bl	800dee8 <iprintf>

  /* USER CODE END SVCCTL_Init_Service2_Char1 */
  /**
   *  My_Sensor_Loc
   */
  uuid.Char_UUID_16 = 0x2a38;
 80045c6:	f642 2338 	movw	r3, #10808	; 0x2a38
 80045ca:	80bb      	strh	r3, [r7, #4]
  ret = aci_gatt_add_char(CustomContext.CustomMy_HrsHdle,
 80045cc:	4b27      	ldr	r3, [pc, #156]	; (800466c <SVCCTL_InitCustomSvc+0x2b4>)
 80045ce:	88d8      	ldrh	r0, [r3, #6]
 80045d0:	4b38      	ldr	r3, [pc, #224]	; (80046b4 <SVCCTL_InitCustomSvc+0x2fc>)
 80045d2:	781b      	ldrb	r3, [r3, #0]
 80045d4:	b29b      	uxth	r3, r3
 80045d6:	1d3a      	adds	r2, r7, #4
 80045d8:	4937      	ldr	r1, [pc, #220]	; (80046b8 <SVCCTL_InitCustomSvc+0x300>)
 80045da:	9105      	str	r1, [sp, #20]
 80045dc:	2100      	movs	r1, #0
 80045de:	9104      	str	r1, [sp, #16]
 80045e0:	2110      	movs	r1, #16
 80045e2:	9103      	str	r1, [sp, #12]
 80045e4:	2100      	movs	r1, #0
 80045e6:	9102      	str	r1, [sp, #8]
 80045e8:	2100      	movs	r1, #0
 80045ea:	9101      	str	r1, [sp, #4]
 80045ec:	2102      	movs	r1, #2
 80045ee:	9100      	str	r1, [sp, #0]
 80045f0:	2101      	movs	r1, #1
 80045f2:	f006 fb89 	bl	800ad08 <aci_gatt_add_char>
 80045f6:	4603      	mov	r3, r0
 80045f8:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_NONE,
                          GATT_DONT_NOTIFY_EVENTS,
                          0x10,
                          CHAR_VALUE_LEN_CONSTANT,
                          &(CustomContext.CustomHrs_SlHdle));
  if (ret != BLE_STATUS_SUCCESS)
 80045fa:	7dfb      	ldrb	r3, [r7, #23]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d005      	beq.n	800460c <SVCCTL_InitCustomSvc+0x254>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : HRS_SL, error code: 0x%x \n\r", ret);
 8004600:	7dfb      	ldrb	r3, [r7, #23]
 8004602:	4619      	mov	r1, r3
 8004604:	482d      	ldr	r0, [pc, #180]	; (80046bc <SVCCTL_InitCustomSvc+0x304>)
 8004606:	f009 fc6f 	bl	800dee8 <iprintf>
 800460a:	e002      	b.n	8004612 <SVCCTL_InitCustomSvc+0x25a>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : HRS_SL \n\r");
 800460c:	482c      	ldr	r0, [pc, #176]	; (80046c0 <SVCCTL_InitCustomSvc+0x308>)
 800460e:	f009 fc6b 	bl	800dee8 <iprintf>

  /* USER CODE END SVCCTL_Init_Service2_Char2 */
  /**
   *  My_HRS_CTRL_Point
   */
  uuid.Char_UUID_16 = 0x2a39;
 8004612:	f642 2339 	movw	r3, #10809	; 0x2a39
 8004616:	80bb      	strh	r3, [r7, #4]
  ret = aci_gatt_add_char(CustomContext.CustomMy_HrsHdle,
 8004618:	4b14      	ldr	r3, [pc, #80]	; (800466c <SVCCTL_InitCustomSvc+0x2b4>)
 800461a:	88d8      	ldrh	r0, [r3, #6]
 800461c:	4b29      	ldr	r3, [pc, #164]	; (80046c4 <SVCCTL_InitCustomSvc+0x30c>)
 800461e:	781b      	ldrb	r3, [r3, #0]
 8004620:	b29b      	uxth	r3, r3
 8004622:	1d3a      	adds	r2, r7, #4
 8004624:	4928      	ldr	r1, [pc, #160]	; (80046c8 <SVCCTL_InitCustomSvc+0x310>)
 8004626:	9105      	str	r1, [sp, #20]
 8004628:	2100      	movs	r1, #0
 800462a:	9104      	str	r1, [sp, #16]
 800462c:	2110      	movs	r1, #16
 800462e:	9103      	str	r1, [sp, #12]
 8004630:	2102      	movs	r1, #2
 8004632:	9102      	str	r1, [sp, #8]
 8004634:	2100      	movs	r1, #0
 8004636:	9101      	str	r1, [sp, #4]
 8004638:	2108      	movs	r1, #8
 800463a:	9100      	str	r1, [sp, #0]
 800463c:	2101      	movs	r1, #1
 800463e:	f006 fb63 	bl	800ad08 <aci_gatt_add_char>
 8004642:	4603      	mov	r3, r0
 8004644:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_NONE,
                          GATT_NOTIFY_WRITE_REQ_AND_WAIT_FOR_APPL_RESP,
                          0x10,
                          CHAR_VALUE_LEN_CONSTANT,
                          &(CustomContext.CustomHrs_CtrlpHdle));
  if (ret != BLE_STATUS_SUCCESS)
 8004646:	7dfb      	ldrb	r3, [r7, #23]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d005      	beq.n	8004658 <SVCCTL_InitCustomSvc+0x2a0>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : HRS_CTRLP, error code: 0x%x \n\r", ret);
 800464c:	7dfb      	ldrb	r3, [r7, #23]
 800464e:	4619      	mov	r1, r3
 8004650:	481e      	ldr	r0, [pc, #120]	; (80046cc <SVCCTL_InitCustomSvc+0x314>)
 8004652:	f009 fc49 	bl	800dee8 <iprintf>

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 8004656:	e003      	b.n	8004660 <SVCCTL_InitCustomSvc+0x2a8>
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : HRS_CTRLP \n\r");
 8004658:	481d      	ldr	r0, [pc, #116]	; (80046d0 <SVCCTL_InitCustomSvc+0x318>)
 800465a:	f009 fc45 	bl	800dee8 <iprintf>
  return;
 800465e:	bf00      	nop
}
 8004660:	3718      	adds	r7, #24
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}
 8004666:	bf00      	nop
 8004668:	08004201 	.word	0x08004201
 800466c:	20000944 	.word	0x20000944
 8004670:	080114cc 	.word	0x080114cc
 8004674:	08011514 	.word	0x08011514
 8004678:	20000024 	.word	0x20000024
 800467c:	20000946 	.word	0x20000946
 8004680:	08011548 	.word	0x08011548
 8004684:	0801158c 	.word	0x0801158c
 8004688:	20000025 	.word	0x20000025
 800468c:	20000948 	.word	0x20000948
 8004690:	080115c0 	.word	0x080115c0
 8004694:	08011608 	.word	0x08011608
 8004698:	2000094a 	.word	0x2000094a
 800469c:	08011640 	.word	0x08011640
 80046a0:	08011688 	.word	0x08011688
 80046a4:	20000026 	.word	0x20000026
 80046a8:	2000094c 	.word	0x2000094c
 80046ac:	080116bc 	.word	0x080116bc
 80046b0:	08011700 	.word	0x08011700
 80046b4:	20000027 	.word	0x20000027
 80046b8:	2000094e 	.word	0x2000094e
 80046bc:	08011734 	.word	0x08011734
 80046c0:	0801177c 	.word	0x0801177c
 80046c4:	20000028 	.word	0x20000028
 80046c8:	20000950 	.word	0x20000950
 80046cc:	080117b0 	.word	0x080117b0
 80046d0:	080117f8 	.word	0x080117f8

080046d4 <Custom_STM_App_Update_Char>:
 * @param  CharOpcode: Characteristic identifier
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 *
 */
tBleStatus Custom_STM_App_Update_Char(Custom_STM_Char_Opcode_t CharOpcode, uint8_t *pPayload)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b086      	sub	sp, #24
 80046d8:	af02      	add	r7, sp, #8
 80046da:	4603      	mov	r3, r0
 80046dc:	6039      	str	r1, [r7, #0]
 80046de:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80046e0:	2392      	movs	r3, #146	; 0x92
 80046e2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN Custom_STM_App_Update_Char_1 */

  /* USER CODE END Custom_STM_App_Update_Char_1 */

  switch (CharOpcode)
 80046e4:	79fb      	ldrb	r3, [r7, #7]
 80046e6:	2b04      	cmp	r3, #4
 80046e8:	f200 8095 	bhi.w	8004816 <Custom_STM_App_Update_Char+0x142>
 80046ec:	a201      	add	r2, pc, #4	; (adr r2, 80046f4 <Custom_STM_App_Update_Char+0x20>)
 80046ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046f2:	bf00      	nop
 80046f4:	08004709 	.word	0x08004709
 80046f8:	0800473f 	.word	0x0800473f
 80046fc:	08004775 	.word	0x08004775
 8004700:	080047ab 	.word	0x080047ab
 8004704:	080047e1 	.word	0x080047e1
  {

    case CUSTOM_STM_LED_C:
      ret = aci_gatt_update_char_value(CustomContext.CustomMy_P2PsHdle,
 8004708:	4b46      	ldr	r3, [pc, #280]	; (8004824 <Custom_STM_App_Update_Char+0x150>)
 800470a:	8818      	ldrh	r0, [r3, #0]
 800470c:	4b45      	ldr	r3, [pc, #276]	; (8004824 <Custom_STM_App_Update_Char+0x150>)
 800470e:	8859      	ldrh	r1, [r3, #2]
 8004710:	4b45      	ldr	r3, [pc, #276]	; (8004828 <Custom_STM_App_Update_Char+0x154>)
 8004712:	781a      	ldrb	r2, [r3, #0]
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	9300      	str	r3, [sp, #0]
 8004718:	4613      	mov	r3, r2
 800471a:	2200      	movs	r2, #0
 800471c:	f006 fbfc 	bl	800af18 <aci_gatt_update_char_value>
 8004720:	4603      	mov	r3, r0
 8004722:	73fb      	strb	r3, [r7, #15]
                                       CustomContext.CustomLed_CHdle,
                                       0, /* charValOffset */
                                       SizeLed_C, /* charValueLen */
                                       (uint8_t *)  pPayload);
      if (ret != BLE_STATUS_SUCCESS)
 8004724:	7bfb      	ldrb	r3, [r7, #15]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d005      	beq.n	8004736 <Custom_STM_App_Update_Char+0x62>
      {
        APP_DBG_MSG("  Fail   : aci_gatt_update_char_value LED_C command, result : 0x%x \n\r", ret);
 800472a:	7bfb      	ldrb	r3, [r7, #15]
 800472c:	4619      	mov	r1, r3
 800472e:	483f      	ldr	r0, [pc, #252]	; (800482c <Custom_STM_App_Update_Char+0x158>)
 8004730:	f009 fbda 	bl	800dee8 <iprintf>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value LED_C command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_1_Char_1*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_1_Char_1*/
      break;
 8004734:	e070      	b.n	8004818 <Custom_STM_App_Update_Char+0x144>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value LED_C command\n\r");
 8004736:	483e      	ldr	r0, [pc, #248]	; (8004830 <Custom_STM_App_Update_Char+0x15c>)
 8004738:	f009 fbd6 	bl	800dee8 <iprintf>
      break;
 800473c:	e06c      	b.n	8004818 <Custom_STM_App_Update_Char+0x144>

    case CUSTOM_STM_SWITCH_C:
      ret = aci_gatt_update_char_value(CustomContext.CustomMy_P2PsHdle,
 800473e:	4b39      	ldr	r3, [pc, #228]	; (8004824 <Custom_STM_App_Update_Char+0x150>)
 8004740:	8818      	ldrh	r0, [r3, #0]
 8004742:	4b38      	ldr	r3, [pc, #224]	; (8004824 <Custom_STM_App_Update_Char+0x150>)
 8004744:	8899      	ldrh	r1, [r3, #4]
 8004746:	4b3b      	ldr	r3, [pc, #236]	; (8004834 <Custom_STM_App_Update_Char+0x160>)
 8004748:	781a      	ldrb	r2, [r3, #0]
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	9300      	str	r3, [sp, #0]
 800474e:	4613      	mov	r3, r2
 8004750:	2200      	movs	r2, #0
 8004752:	f006 fbe1 	bl	800af18 <aci_gatt_update_char_value>
 8004756:	4603      	mov	r3, r0
 8004758:	73fb      	strb	r3, [r7, #15]
                                       CustomContext.CustomSwitch_CHdle,
                                       0, /* charValOffset */
                                       SizeSwitch_C, /* charValueLen */
                                       (uint8_t *)  pPayload);
      if (ret != BLE_STATUS_SUCCESS)
 800475a:	7bfb      	ldrb	r3, [r7, #15]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d005      	beq.n	800476c <Custom_STM_App_Update_Char+0x98>
      {
        APP_DBG_MSG("  Fail   : aci_gatt_update_char_value SWITCH_C command, result : 0x%x \n\r", ret);
 8004760:	7bfb      	ldrb	r3, [r7, #15]
 8004762:	4619      	mov	r1, r3
 8004764:	4834      	ldr	r0, [pc, #208]	; (8004838 <Custom_STM_App_Update_Char+0x164>)
 8004766:	f009 fbbf 	bl	800dee8 <iprintf>
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_1_Char_2*/
      /**
       *  Manage My_Switch_Char Characteristic, Notify descriptor
       */
      /* USER CODE END CUSTOM_STM_App_Update_Service_1_Char_2*/
      break;
 800476a:	e055      	b.n	8004818 <Custom_STM_App_Update_Char+0x144>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value SWITCH_C command\n\r");
 800476c:	4833      	ldr	r0, [pc, #204]	; (800483c <Custom_STM_App_Update_Char+0x168>)
 800476e:	f009 fbbb 	bl	800dee8 <iprintf>
      break;
 8004772:	e051      	b.n	8004818 <Custom_STM_App_Update_Char+0x144>

    case CUSTOM_STM_HRS_M:
      ret = aci_gatt_update_char_value(CustomContext.CustomMy_HrsHdle,
 8004774:	4b2b      	ldr	r3, [pc, #172]	; (8004824 <Custom_STM_App_Update_Char+0x150>)
 8004776:	88d8      	ldrh	r0, [r3, #6]
 8004778:	4b2a      	ldr	r3, [pc, #168]	; (8004824 <Custom_STM_App_Update_Char+0x150>)
 800477a:	8919      	ldrh	r1, [r3, #8]
 800477c:	4b30      	ldr	r3, [pc, #192]	; (8004840 <Custom_STM_App_Update_Char+0x16c>)
 800477e:	781a      	ldrb	r2, [r3, #0]
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	9300      	str	r3, [sp, #0]
 8004784:	4613      	mov	r3, r2
 8004786:	2200      	movs	r2, #0
 8004788:	f006 fbc6 	bl	800af18 <aci_gatt_update_char_value>
 800478c:	4603      	mov	r3, r0
 800478e:	73fb      	strb	r3, [r7, #15]
                                       CustomContext.CustomHrs_MHdle,
                                       0, /* charValOffset */
                                       SizeHrs_M, /* charValueLen */
                                       (uint8_t *)  pPayload);
      if (ret != BLE_STATUS_SUCCESS)
 8004790:	7bfb      	ldrb	r3, [r7, #15]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d005      	beq.n	80047a2 <Custom_STM_App_Update_Char+0xce>
      {
        APP_DBG_MSG("  Fail   : aci_gatt_update_char_value HRS_M command, result : 0x%x \n\r", ret);
 8004796:	7bfb      	ldrb	r3, [r7, #15]
 8004798:	4619      	mov	r1, r3
 800479a:	482a      	ldr	r0, [pc, #168]	; (8004844 <Custom_STM_App_Update_Char+0x170>)
 800479c:	f009 fba4 	bl	800dee8 <iprintf>
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_2_Char_1*/
      /**
       *  Manage My_HRS_Meas Characteristic, Notify descriptor
       */
      /* USER CODE END CUSTOM_STM_App_Update_Service_2_Char_1*/
      break;
 80047a0:	e03a      	b.n	8004818 <Custom_STM_App_Update_Char+0x144>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value HRS_M command\n\r");
 80047a2:	4829      	ldr	r0, [pc, #164]	; (8004848 <Custom_STM_App_Update_Char+0x174>)
 80047a4:	f009 fba0 	bl	800dee8 <iprintf>
      break;
 80047a8:	e036      	b.n	8004818 <Custom_STM_App_Update_Char+0x144>

    case CUSTOM_STM_HRS_SL:
      ret = aci_gatt_update_char_value(CustomContext.CustomMy_HrsHdle,
 80047aa:	4b1e      	ldr	r3, [pc, #120]	; (8004824 <Custom_STM_App_Update_Char+0x150>)
 80047ac:	88d8      	ldrh	r0, [r3, #6]
 80047ae:	4b1d      	ldr	r3, [pc, #116]	; (8004824 <Custom_STM_App_Update_Char+0x150>)
 80047b0:	8959      	ldrh	r1, [r3, #10]
 80047b2:	4b26      	ldr	r3, [pc, #152]	; (800484c <Custom_STM_App_Update_Char+0x178>)
 80047b4:	781a      	ldrb	r2, [r3, #0]
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	9300      	str	r3, [sp, #0]
 80047ba:	4613      	mov	r3, r2
 80047bc:	2200      	movs	r2, #0
 80047be:	f006 fbab 	bl	800af18 <aci_gatt_update_char_value>
 80047c2:	4603      	mov	r3, r0
 80047c4:	73fb      	strb	r3, [r7, #15]
                                       CustomContext.CustomHrs_SlHdle,
                                       0, /* charValOffset */
                                       SizeHrs_Sl, /* charValueLen */
                                       (uint8_t *)  pPayload);
      if (ret != BLE_STATUS_SUCCESS)
 80047c6:	7bfb      	ldrb	r3, [r7, #15]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d005      	beq.n	80047d8 <Custom_STM_App_Update_Char+0x104>
      {
        APP_DBG_MSG("  Fail   : aci_gatt_update_char_value HRS_SL command, result : 0x%x \n\r", ret);
 80047cc:	7bfb      	ldrb	r3, [r7, #15]
 80047ce:	4619      	mov	r1, r3
 80047d0:	481f      	ldr	r0, [pc, #124]	; (8004850 <Custom_STM_App_Update_Char+0x17c>)
 80047d2:	f009 fb89 	bl	800dee8 <iprintf>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value HRS_SL command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_2_Char_2*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_2_Char_2*/
      break;
 80047d6:	e01f      	b.n	8004818 <Custom_STM_App_Update_Char+0x144>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value HRS_SL command\n\r");
 80047d8:	481e      	ldr	r0, [pc, #120]	; (8004854 <Custom_STM_App_Update_Char+0x180>)
 80047da:	f009 fb85 	bl	800dee8 <iprintf>
      break;
 80047de:	e01b      	b.n	8004818 <Custom_STM_App_Update_Char+0x144>

    case CUSTOM_STM_HRS_CTRLP:
      ret = aci_gatt_update_char_value(CustomContext.CustomMy_HrsHdle,
 80047e0:	4b10      	ldr	r3, [pc, #64]	; (8004824 <Custom_STM_App_Update_Char+0x150>)
 80047e2:	88d8      	ldrh	r0, [r3, #6]
 80047e4:	4b0f      	ldr	r3, [pc, #60]	; (8004824 <Custom_STM_App_Update_Char+0x150>)
 80047e6:	8999      	ldrh	r1, [r3, #12]
 80047e8:	4b1b      	ldr	r3, [pc, #108]	; (8004858 <Custom_STM_App_Update_Char+0x184>)
 80047ea:	781a      	ldrb	r2, [r3, #0]
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	9300      	str	r3, [sp, #0]
 80047f0:	4613      	mov	r3, r2
 80047f2:	2200      	movs	r2, #0
 80047f4:	f006 fb90 	bl	800af18 <aci_gatt_update_char_value>
 80047f8:	4603      	mov	r3, r0
 80047fa:	73fb      	strb	r3, [r7, #15]
                                       CustomContext.CustomHrs_CtrlpHdle,
                                       0, /* charValOffset */
                                       SizeHrs_Ctrlp, /* charValueLen */
                                       (uint8_t *)  pPayload);
      if (ret != BLE_STATUS_SUCCESS)
 80047fc:	7bfb      	ldrb	r3, [r7, #15]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d005      	beq.n	800480e <Custom_STM_App_Update_Char+0x13a>
      {
        APP_DBG_MSG("  Fail   : aci_gatt_update_char_value HRS_CTRLP command, result : 0x%x \n\r", ret);
 8004802:	7bfb      	ldrb	r3, [r7, #15]
 8004804:	4619      	mov	r1, r3
 8004806:	4815      	ldr	r0, [pc, #84]	; (800485c <Custom_STM_App_Update_Char+0x188>)
 8004808:	f009 fb6e 	bl	800dee8 <iprintf>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value HRS_CTRLP command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_2_Char_3*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_2_Char_3*/
      break;
 800480c:	e004      	b.n	8004818 <Custom_STM_App_Update_Char+0x144>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value HRS_CTRLP command\n\r");
 800480e:	4814      	ldr	r0, [pc, #80]	; (8004860 <Custom_STM_App_Update_Char+0x18c>)
 8004810:	f009 fb6a 	bl	800dee8 <iprintf>
      break;
 8004814:	e000      	b.n	8004818 <Custom_STM_App_Update_Char+0x144>

    default:
      break;
 8004816:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_App_Update_Char_2 */

  /* USER CODE END Custom_STM_App_Update_Char_2 */

  return ret;
 8004818:	7bfb      	ldrb	r3, [r7, #15]
}
 800481a:	4618      	mov	r0, r3
 800481c:	3710      	adds	r7, #16
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}
 8004822:	bf00      	nop
 8004824:	20000944 	.word	0x20000944
 8004828:	20000024 	.word	0x20000024
 800482c:	08011830 	.word	0x08011830
 8004830:	08011878 	.word	0x08011878
 8004834:	20000025 	.word	0x20000025
 8004838:	080118b0 	.word	0x080118b0
 800483c:	080118fc 	.word	0x080118fc
 8004840:	20000026 	.word	0x20000026
 8004844:	08011938 	.word	0x08011938
 8004848:	08011980 	.word	0x08011980
 800484c:	20000027 	.word	0x20000027
 8004850:	080119b8 	.word	0x080119b8
 8004854:	08011a00 	.word	0x08011a00
 8004858:	20000028 	.word	0x20000028
 800485c:	08011a38 	.word	0x08011a38
 8004860:	08011a84 	.word	0x08011a84

08004864 <LL_PWR_EnableBootC2>:
{
 8004864:	b480      	push	{r7}
 8004866:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8004868:	4b05      	ldr	r3, [pc, #20]	; (8004880 <LL_PWR_EnableBootC2+0x1c>)
 800486a:	68db      	ldr	r3, [r3, #12]
 800486c:	4a04      	ldr	r2, [pc, #16]	; (8004880 <LL_PWR_EnableBootC2+0x1c>)
 800486e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004872:	60d3      	str	r3, [r2, #12]
}
 8004874:	bf00      	nop
 8004876:	46bd      	mov	sp, r7
 8004878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487c:	4770      	bx	lr
 800487e:	bf00      	nop
 8004880:	58000400 	.word	0x58000400

08004884 <LL_C2_EXTI_EnableEvent_32_63>:
{
 8004884:	b480      	push	{r7}
 8004886:	b083      	sub	sp, #12
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 800488c:	4b06      	ldr	r3, [pc, #24]	; (80048a8 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800488e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8004892:	4905      	ldr	r1, [pc, #20]	; (80048a8 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	4313      	orrs	r3, r2
 8004898:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 800489c:	bf00      	nop
 800489e:	370c      	adds	r7, #12
 80048a0:	46bd      	mov	sp, r7
 80048a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a6:	4770      	bx	lr
 80048a8:	58000800 	.word	0x58000800

080048ac <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b083      	sub	sp, #12
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 80048b4:	4b05      	ldr	r3, [pc, #20]	; (80048cc <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80048b6:	6a1a      	ldr	r2, [r3, #32]
 80048b8:	4904      	ldr	r1, [pc, #16]	; (80048cc <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	4313      	orrs	r3, r2
 80048be:	620b      	str	r3, [r1, #32]
}
 80048c0:	bf00      	nop
 80048c2:	370c      	adds	r7, #12
 80048c4:	46bd      	mov	sp, r7
 80048c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ca:	4770      	bx	lr
 80048cc:	58000800 	.word	0x58000800

080048d0 <LL_AHB3_GRP1_EnableClock>:
{
 80048d0:	b480      	push	{r7}
 80048d2:	b085      	sub	sp, #20
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80048d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048dc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80048de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	4313      	orrs	r3, r2
 80048e6:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80048e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	4013      	ands	r3, r2
 80048f2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80048f4:	68fb      	ldr	r3, [r7, #12]
}
 80048f6:	bf00      	nop
 80048f8:	3714      	adds	r7, #20
 80048fa:	46bd      	mov	sp, r7
 80048fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004900:	4770      	bx	lr

08004902 <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8004902:	b480      	push	{r7}
 8004904:	b085      	sub	sp, #20
 8004906:	af00      	add	r7, sp, #0
 8004908:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 800490a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800490e:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8004912:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	4313      	orrs	r3, r2
 800491a:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 800491e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004922:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	4013      	ands	r3, r2
 800492a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800492c:	68fb      	ldr	r3, [r7, #12]
}
 800492e:	bf00      	nop
 8004930:	3714      	adds	r7, #20
 8004932:	46bd      	mov	sp, r7
 8004934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004938:	4770      	bx	lr

0800493a <LL_C1_IPCC_EnableIT_TXF>:
{
 800493a:	b480      	push	{r7}
 800493c:	b083      	sub	sp, #12
 800493e:	af00      	add	r7, sp, #0
 8004940:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	601a      	str	r2, [r3, #0]
}
 800494e:	bf00      	nop
 8004950:	370c      	adds	r7, #12
 8004952:	46bd      	mov	sp, r7
 8004954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004958:	4770      	bx	lr

0800495a <LL_C1_IPCC_EnableIT_RXO>:
{
 800495a:	b480      	push	{r7}
 800495c:	b083      	sub	sp, #12
 800495e:	af00      	add	r7, sp, #0
 8004960:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f043 0201 	orr.w	r2, r3, #1
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	601a      	str	r2, [r3, #0]
}
 800496e:	bf00      	nop
 8004970:	370c      	adds	r7, #12
 8004972:	46bd      	mov	sp, r7
 8004974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004978:	4770      	bx	lr

0800497a <LL_C1_IPCC_EnableTransmitChannel>:
{
 800497a:	b480      	push	{r7}
 800497c:	b083      	sub	sp, #12
 800497e:	af00      	add	r7, sp, #0
 8004980:	6078      	str	r0, [r7, #4]
 8004982:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	685a      	ldr	r2, [r3, #4]
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	041b      	lsls	r3, r3, #16
 800498c:	43db      	mvns	r3, r3
 800498e:	401a      	ands	r2, r3
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	605a      	str	r2, [r3, #4]
}
 8004994:	bf00      	nop
 8004996:	370c      	adds	r7, #12
 8004998:	46bd      	mov	sp, r7
 800499a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499e:	4770      	bx	lr

080049a0 <LL_C1_IPCC_DisableTransmitChannel>:
{
 80049a0:	b480      	push	{r7}
 80049a2:	b083      	sub	sp, #12
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
 80049a8:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	685a      	ldr	r2, [r3, #4]
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	041b      	lsls	r3, r3, #16
 80049b2:	431a      	orrs	r2, r3
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	605a      	str	r2, [r3, #4]
}
 80049b8:	bf00      	nop
 80049ba:	370c      	adds	r7, #12
 80049bc:	46bd      	mov	sp, r7
 80049be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c2:	4770      	bx	lr

080049c4 <LL_C1_IPCC_EnableReceiveChannel>:
{
 80049c4:	b480      	push	{r7}
 80049c6:	b083      	sub	sp, #12
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
 80049cc:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	685a      	ldr	r2, [r3, #4]
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	43db      	mvns	r3, r3
 80049d6:	401a      	ands	r2, r3
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	605a      	str	r2, [r3, #4]
}
 80049dc:	bf00      	nop
 80049de:	370c      	adds	r7, #12
 80049e0:	46bd      	mov	sp, r7
 80049e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e6:	4770      	bx	lr

080049e8 <LL_C1_IPCC_ClearFlag_CHx>:
{
 80049e8:	b480      	push	{r7}
 80049ea:	b083      	sub	sp, #12
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
 80049f0:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	683a      	ldr	r2, [r7, #0]
 80049f6:	609a      	str	r2, [r3, #8]
}
 80049f8:	bf00      	nop
 80049fa:	370c      	adds	r7, #12
 80049fc:	46bd      	mov	sp, r7
 80049fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a02:	4770      	bx	lr

08004a04 <LL_C1_IPCC_SetFlag_CHx>:
{
 8004a04:	b480      	push	{r7}
 8004a06:	b083      	sub	sp, #12
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
 8004a0c:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	041a      	lsls	r2, r3, #16
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	609a      	str	r2, [r3, #8]
}
 8004a16:	bf00      	nop
 8004a18:	370c      	adds	r7, #12
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a20:	4770      	bx	lr

08004a22 <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 8004a22:	b480      	push	{r7}
 8004a24:	b083      	sub	sp, #12
 8004a26:	af00      	add	r7, sp, #0
 8004a28:	6078      	str	r0, [r7, #4]
 8004a2a:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	68da      	ldr	r2, [r3, #12]
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	4013      	ands	r3, r2
 8004a34:	683a      	ldr	r2, [r7, #0]
 8004a36:	429a      	cmp	r2, r3
 8004a38:	d101      	bne.n	8004a3e <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	e000      	b.n	8004a40 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8004a3e:	2300      	movs	r3, #0
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	370c      	adds	r7, #12
 8004a44:	46bd      	mov	sp, r7
 8004a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4a:	4770      	bx	lr

08004a4c <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b083      	sub	sp, #12
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
 8004a54:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	69da      	ldr	r2, [r3, #28]
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	4013      	ands	r3, r2
 8004a5e:	683a      	ldr	r2, [r7, #0]
 8004a60:	429a      	cmp	r2, r3
 8004a62:	d101      	bne.n	8004a68 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8004a64:	2301      	movs	r3, #1
 8004a66:	e000      	b.n	8004a6a <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8004a68:	2300      	movs	r3, #0
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	370c      	adds	r7, #12
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a74:	4770      	bx	lr
	...

08004a78 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8004a7c:	2102      	movs	r1, #2
 8004a7e:	4819      	ldr	r0, [pc, #100]	; (8004ae4 <HW_IPCC_Rx_Handler+0x6c>)
 8004a80:	f7ff ffe4 	bl	8004a4c <LL_C2_IPCC_IsActiveFlag_CHx>
 8004a84:	4603      	mov	r3, r0
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d009      	beq.n	8004a9e <HW_IPCC_Rx_Handler+0x26>
 8004a8a:	4b16      	ldr	r3, [pc, #88]	; (8004ae4 <HW_IPCC_Rx_Handler+0x6c>)
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	43db      	mvns	r3, r3
 8004a90:	f003 0302 	and.w	r3, r3, #2
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d002      	beq.n	8004a9e <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 8004a98:	f000 f8da 	bl	8004c50 <HW_IPCC_SYS_EvtHandler>
 8004a9c:	e01f      	b.n	8004ade <HW_IPCC_Rx_Handler+0x66>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8004a9e:	2101      	movs	r1, #1
 8004aa0:	4810      	ldr	r0, [pc, #64]	; (8004ae4 <HW_IPCC_Rx_Handler+0x6c>)
 8004aa2:	f7ff ffd3 	bl	8004a4c <LL_C2_IPCC_IsActiveFlag_CHx>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d008      	beq.n	8004abe <HW_IPCC_Rx_Handler+0x46>
 8004aac:	4b0d      	ldr	r3, [pc, #52]	; (8004ae4 <HW_IPCC_Rx_Handler+0x6c>)
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	f003 0301 	and.w	r3, r3, #1
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d102      	bne.n	8004abe <HW_IPCC_Rx_Handler+0x46>
  {
    HW_IPCC_BLE_EvtHandler();
 8004ab8:	f000 f88e 	bl	8004bd8 <HW_IPCC_BLE_EvtHandler>
 8004abc:	e00f      	b.n	8004ade <HW_IPCC_Rx_Handler+0x66>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8004abe:	2108      	movs	r1, #8
 8004ac0:	4808      	ldr	r0, [pc, #32]	; (8004ae4 <HW_IPCC_Rx_Handler+0x6c>)
 8004ac2:	f7ff ffc3 	bl	8004a4c <LL_C2_IPCC_IsActiveFlag_CHx>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d009      	beq.n	8004ae0 <HW_IPCC_Rx_Handler+0x68>
 8004acc:	4b05      	ldr	r3, [pc, #20]	; (8004ae4 <HW_IPCC_Rx_Handler+0x6c>)
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	43db      	mvns	r3, r3
 8004ad2:	f003 0308 	and.w	r3, r3, #8
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d002      	beq.n	8004ae0 <HW_IPCC_Rx_Handler+0x68>
  {
    HW_IPCC_TRACES_EvtHandler();
 8004ada:	f000 f905 	bl	8004ce8 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 8004ade:	bf00      	nop
 8004ae0:	bf00      	nop
}
 8004ae2:	bd80      	pop	{r7, pc}
 8004ae4:	58000c00 	.word	0x58000c00

08004ae8 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8004aec:	2102      	movs	r1, #2
 8004aee:	481a      	ldr	r0, [pc, #104]	; (8004b58 <HW_IPCC_Tx_Handler+0x70>)
 8004af0:	f7ff ff97 	bl	8004a22 <LL_C1_IPCC_IsActiveFlag_CHx>
 8004af4:	4603      	mov	r3, r0
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d109      	bne.n	8004b0e <HW_IPCC_Tx_Handler+0x26>
 8004afa:	4b17      	ldr	r3, [pc, #92]	; (8004b58 <HW_IPCC_Tx_Handler+0x70>)
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	43db      	mvns	r3, r3
 8004b00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d002      	beq.n	8004b0e <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8004b08:	f000 f896 	bl	8004c38 <HW_IPCC_SYS_CmdEvtHandler>
 8004b0c:	e020      	b.n	8004b50 <HW_IPCC_Tx_Handler+0x68>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8004b0e:	2108      	movs	r1, #8
 8004b10:	4811      	ldr	r0, [pc, #68]	; (8004b58 <HW_IPCC_Tx_Handler+0x70>)
 8004b12:	f7ff ff86 	bl	8004a22 <LL_C1_IPCC_IsActiveFlag_CHx>
 8004b16:	4603      	mov	r3, r0
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d109      	bne.n	8004b30 <HW_IPCC_Tx_Handler+0x48>
 8004b1c:	4b0e      	ldr	r3, [pc, #56]	; (8004b58 <HW_IPCC_Tx_Handler+0x70>)
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	43db      	mvns	r3, r3
 8004b22:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d002      	beq.n	8004b30 <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_MM_FreeBufHandler();
 8004b2a:	f000 f8bf 	bl	8004cac <HW_IPCC_MM_FreeBufHandler>
 8004b2e:	e00f      	b.n	8004b50 <HW_IPCC_Tx_Handler+0x68>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8004b30:	2120      	movs	r1, #32
 8004b32:	4809      	ldr	r0, [pc, #36]	; (8004b58 <HW_IPCC_Tx_Handler+0x70>)
 8004b34:	f7ff ff75 	bl	8004a22 <LL_C1_IPCC_IsActiveFlag_CHx>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d109      	bne.n	8004b52 <HW_IPCC_Tx_Handler+0x6a>
 8004b3e:	4b06      	ldr	r3, [pc, #24]	; (8004b58 <HW_IPCC_Tx_Handler+0x70>)
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	43db      	mvns	r3, r3
 8004b44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d002      	beq.n	8004b52 <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8004b4c:	f000 f850 	bl	8004bf0 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 8004b50:	bf00      	nop
 8004b52:	bf00      	nop
}
 8004b54:	bd80      	pop	{r7, pc}
 8004b56:	bf00      	nop
 8004b58:	58000c00 	.word	0x58000c00

08004b5c <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8004b60:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8004b64:	f7ff fecd 	bl	8004902 <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8004b68:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004b6c:	f7ff fe9e 	bl	80048ac <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8004b70:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004b74:	f7ff fe86 	bl	8004884 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8004b78:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8004b7a:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8004b7c:	f7ff fe72 	bl	8004864 <LL_PWR_EnableBootC2>

  return;
 8004b80:	bf00      	nop
}
 8004b82:	bd80      	pop	{r7, pc}

08004b84 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8004b88:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8004b8c:	f7ff fea0 	bl	80048d0 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8004b90:	4806      	ldr	r0, [pc, #24]	; (8004bac <HW_IPCC_Init+0x28>)
 8004b92:	f7ff fee2 	bl	800495a <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 8004b96:	4805      	ldr	r0, [pc, #20]	; (8004bac <HW_IPCC_Init+0x28>)
 8004b98:	f7ff fecf 	bl	800493a <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8004b9c:	202c      	movs	r0, #44	; 0x2c
 8004b9e:	f000 fc2c 	bl	80053fa <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8004ba2:	202d      	movs	r0, #45	; 0x2d
 8004ba4:	f000 fc29 	bl	80053fa <HAL_NVIC_EnableIRQ>

  return;
 8004ba8:	bf00      	nop
}
 8004baa:	bd80      	pop	{r7, pc}
 8004bac:	58000c00 	.word	0x58000c00

08004bb0 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8004bb4:	2101      	movs	r1, #1
 8004bb6:	4802      	ldr	r0, [pc, #8]	; (8004bc0 <HW_IPCC_BLE_Init+0x10>)
 8004bb8:	f7ff ff04 	bl	80049c4 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8004bbc:	bf00      	nop
}
 8004bbe:	bd80      	pop	{r7, pc}
 8004bc0:	58000c00 	.word	0x58000c00

08004bc4 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 8004bc8:	2101      	movs	r1, #1
 8004bca:	4802      	ldr	r0, [pc, #8]	; (8004bd4 <HW_IPCC_BLE_SendCmd+0x10>)
 8004bcc:	f7ff ff1a 	bl	8004a04 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8004bd0:	bf00      	nop
}
 8004bd2:	bd80      	pop	{r7, pc}
 8004bd4:	58000c00 	.word	0x58000c00

08004bd8 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8004bdc:	f008 f8a2 	bl	800cd24 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8004be0:	2101      	movs	r1, #1
 8004be2:	4802      	ldr	r0, [pc, #8]	; (8004bec <HW_IPCC_BLE_EvtHandler+0x14>)
 8004be4:	f7ff ff00 	bl	80049e8 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8004be8:	bf00      	nop
}
 8004bea:	bd80      	pop	{r7, pc}
 8004bec:	58000c00 	.word	0x58000c00

08004bf0 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8004bf4:	2120      	movs	r1, #32
 8004bf6:	4803      	ldr	r0, [pc, #12]	; (8004c04 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8004bf8:	f7ff fed2 	bl	80049a0 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8004bfc:	f008 f8c2 	bl	800cd84 <HW_IPCC_BLE_AclDataAckNot>

  return;
 8004c00:	bf00      	nop
}
 8004c02:	bd80      	pop	{r7, pc}
 8004c04:	58000c00 	.word	0x58000c00

08004c08 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8004c0c:	2102      	movs	r1, #2
 8004c0e:	4802      	ldr	r0, [pc, #8]	; (8004c18 <HW_IPCC_SYS_Init+0x10>)
 8004c10:	f7ff fed8 	bl	80049c4 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8004c14:	bf00      	nop
}
 8004c16:	bd80      	pop	{r7, pc}
 8004c18:	58000c00 	.word	0x58000c00

08004c1c <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8004c20:	2102      	movs	r1, #2
 8004c22:	4804      	ldr	r0, [pc, #16]	; (8004c34 <HW_IPCC_SYS_SendCmd+0x18>)
 8004c24:	f7ff feee 	bl	8004a04 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8004c28:	2102      	movs	r1, #2
 8004c2a:	4802      	ldr	r0, [pc, #8]	; (8004c34 <HW_IPCC_SYS_SendCmd+0x18>)
 8004c2c:	f7ff fea5 	bl	800497a <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8004c30:	bf00      	nop
}
 8004c32:	bd80      	pop	{r7, pc}
 8004c34:	58000c00 	.word	0x58000c00

08004c38 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8004c3c:	2102      	movs	r1, #2
 8004c3e:	4803      	ldr	r0, [pc, #12]	; (8004c4c <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8004c40:	f7ff feae 	bl	80049a0 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8004c44:	f008 f8ee 	bl	800ce24 <HW_IPCC_SYS_CmdEvtNot>

  return;
 8004c48:	bf00      	nop
}
 8004c4a:	bd80      	pop	{r7, pc}
 8004c4c:	58000c00 	.word	0x58000c00

08004c50 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8004c54:	f008 f8fc 	bl	800ce50 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8004c58:	2102      	movs	r1, #2
 8004c5a:	4802      	ldr	r0, [pc, #8]	; (8004c64 <HW_IPCC_SYS_EvtHandler+0x14>)
 8004c5c:	f7ff fec4 	bl	80049e8 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8004c60:	bf00      	nop
}
 8004c62:	bd80      	pop	{r7, pc}
 8004c64:	58000c00 	.word	0x58000c00

08004c68 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b082      	sub	sp, #8
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8004c70:	2108      	movs	r1, #8
 8004c72:	480c      	ldr	r0, [pc, #48]	; (8004ca4 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8004c74:	f7ff fed5 	bl	8004a22 <LL_C1_IPCC_IsActiveFlag_CHx>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d007      	beq.n	8004c8e <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 8004c7e:	4a0a      	ldr	r2, [pc, #40]	; (8004ca8 <HW_IPCC_MM_SendFreeBuf+0x40>)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8004c84:	2108      	movs	r1, #8
 8004c86:	4807      	ldr	r0, [pc, #28]	; (8004ca4 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8004c88:	f7ff fe77 	bl	800497a <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8004c8c:	e006      	b.n	8004c9c <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8004c92:	2108      	movs	r1, #8
 8004c94:	4803      	ldr	r0, [pc, #12]	; (8004ca4 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8004c96:	f7ff feb5 	bl	8004a04 <LL_C1_IPCC_SetFlag_CHx>
  return;
 8004c9a:	bf00      	nop
}
 8004c9c:	3708      	adds	r7, #8
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}
 8004ca2:	bf00      	nop
 8004ca4:	58000c00 	.word	0x58000c00
 8004ca8:	20000954 	.word	0x20000954

08004cac <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8004cb0:	2108      	movs	r1, #8
 8004cb2:	4806      	ldr	r0, [pc, #24]	; (8004ccc <HW_IPCC_MM_FreeBufHandler+0x20>)
 8004cb4:	f7ff fe74 	bl	80049a0 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8004cb8:	4b05      	ldr	r3, [pc, #20]	; (8004cd0 <HW_IPCC_MM_FreeBufHandler+0x24>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8004cbe:	2108      	movs	r1, #8
 8004cc0:	4802      	ldr	r0, [pc, #8]	; (8004ccc <HW_IPCC_MM_FreeBufHandler+0x20>)
 8004cc2:	f7ff fe9f 	bl	8004a04 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8004cc6:	bf00      	nop
}
 8004cc8:	bd80      	pop	{r7, pc}
 8004cca:	bf00      	nop
 8004ccc:	58000c00 	.word	0x58000c00
 8004cd0:	20000954 	.word	0x20000954

08004cd4 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8004cd8:	2108      	movs	r1, #8
 8004cda:	4802      	ldr	r0, [pc, #8]	; (8004ce4 <HW_IPCC_TRACES_Init+0x10>)
 8004cdc:	f7ff fe72 	bl	80049c4 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8004ce0:	bf00      	nop
}
 8004ce2:	bd80      	pop	{r7, pc}
 8004ce4:	58000c00 	.word	0x58000c00

08004ce8 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8004cec:	f008 f958 	bl	800cfa0 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8004cf0:	2108      	movs	r1, #8
 8004cf2:	4802      	ldr	r0, [pc, #8]	; (8004cfc <HW_IPCC_TRACES_EvtHandler+0x14>)
 8004cf4:	f7ff fe78 	bl	80049e8 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8004cf8:	bf00      	nop
}
 8004cfa:	bd80      	pop	{r7, pc}
 8004cfc:	58000c00 	.word	0x58000c00

08004d00 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8004d00:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004d02:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004d04:	3304      	adds	r3, #4

08004d06 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004d06:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004d08:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8004d0a:	d3f9      	bcc.n	8004d00 <CopyDataInit>
  bx lr
 8004d0c:	4770      	bx	lr

08004d0e <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8004d0e:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8004d10:	3004      	adds	r0, #4

08004d12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8004d12:	4288      	cmp	r0, r1
  bcc FillZerobss
 8004d14:	d3fb      	bcc.n	8004d0e <FillZerobss>
  bx lr
 8004d16:	4770      	bx	lr

08004d18 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004d18:	480c      	ldr	r0, [pc, #48]	; (8004d4c <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8004d1a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8004d1c:	f000 f904 	bl	8004f28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8004d20:	480b      	ldr	r0, [pc, #44]	; (8004d50 <LoopForever+0x8>)
 8004d22:	490c      	ldr	r1, [pc, #48]	; (8004d54 <LoopForever+0xc>)
 8004d24:	4a0c      	ldr	r2, [pc, #48]	; (8004d58 <LoopForever+0x10>)
 8004d26:	2300      	movs	r3, #0
 8004d28:	f7ff ffed 	bl	8004d06 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8004d2c:	480b      	ldr	r0, [pc, #44]	; (8004d5c <LoopForever+0x14>)
 8004d2e:	490c      	ldr	r1, [pc, #48]	; (8004d60 <LoopForever+0x18>)
 8004d30:	2300      	movs	r3, #0
 8004d32:	f7ff ffee 	bl	8004d12 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8004d36:	480b      	ldr	r0, [pc, #44]	; (8004d64 <LoopForever+0x1c>)
 8004d38:	490b      	ldr	r1, [pc, #44]	; (8004d68 <LoopForever+0x20>)
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	f7ff ffe9 	bl	8004d12 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8004d40:	f008 fc2e 	bl	800d5a0 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8004d44:	f7fd fdd4 	bl	80028f0 <main>

08004d48 <LoopForever>:

LoopForever:
  b LoopForever
 8004d48:	e7fe      	b.n	8004d48 <LoopForever>
 8004d4a:	0000      	.short	0x0000
  ldr   r0, =_estack
 8004d4c:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8004d50:	20000008 	.word	0x20000008
 8004d54:	20000228 	.word	0x20000228
 8004d58:	0801211c 	.word	0x0801211c
  INIT_BSS _sbss, _ebss
 8004d5c:	20000274 	.word	0x20000274
 8004d60:	20001aa8 	.word	0x20001aa8
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8004d64:	200301e4 	.word	0x200301e4
 8004d68:	20030a67 	.word	0x20030a67

08004d6c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004d6c:	e7fe      	b.n	8004d6c <ADC1_IRQHandler>

08004d6e <LL_AHB2_GRP1_EnableClock>:
{
 8004d6e:	b480      	push	{r7}
 8004d70:	b085      	sub	sp, #20
 8004d72:	af00      	add	r7, sp, #0
 8004d74:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8004d76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d7a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004d7c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	4313      	orrs	r3, r2
 8004d84:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8004d86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d8a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	4013      	ands	r3, r2
 8004d90:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004d92:	68fb      	ldr	r3, [r7, #12]
}
 8004d94:	bf00      	nop
 8004d96:	3714      	adds	r7, #20
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9e:	4770      	bx	lr

08004da0 <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b088      	sub	sp, #32
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	4603      	mov	r3, r0
 8004da8:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpioinitstruct = {0};
 8004daa:	f107 030c 	add.w	r3, r7, #12
 8004dae:	2200      	movs	r2, #0
 8004db0:	601a      	str	r2, [r3, #0]
 8004db2:	605a      	str	r2, [r3, #4]
 8004db4:	609a      	str	r2, [r3, #8]
 8004db6:	60da      	str	r2, [r3, #12]
 8004db8:	611a      	str	r2, [r3, #16]
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8004dba:	2002      	movs	r0, #2
 8004dbc:	f7ff ffd7 	bl	8004d6e <LL_AHB2_GRP1_EnableClock>

  /* Configure the GPIO_LED pin */
  gpioinitstruct.Pin = GPIO_PIN[Led];
 8004dc0:	79fb      	ldrb	r3, [r7, #7]
 8004dc2:	4a12      	ldr	r2, [pc, #72]	; (8004e0c <BSP_LED_Init+0x6c>)
 8004dc4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004dc8:	60fb      	str	r3, [r7, #12]
  gpioinitstruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	613b      	str	r3, [r7, #16]
  gpioinitstruct.Pull = GPIO_NOPULL;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	617b      	str	r3, [r7, #20]
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004dd2:	2302      	movs	r3, #2
 8004dd4:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpioinitstruct);
 8004dd6:	79fb      	ldrb	r3, [r7, #7]
 8004dd8:	4a0d      	ldr	r2, [pc, #52]	; (8004e10 <BSP_LED_Init+0x70>)
 8004dda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004dde:	f107 020c 	add.w	r2, r7, #12
 8004de2:	4611      	mov	r1, r2
 8004de4:	4618      	mov	r0, r3
 8004de6:	f000 fee1 	bl	8005bac <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 8004dea:	79fb      	ldrb	r3, [r7, #7]
 8004dec:	4a08      	ldr	r2, [pc, #32]	; (8004e10 <BSP_LED_Init+0x70>)
 8004dee:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004df2:	79fb      	ldrb	r3, [r7, #7]
 8004df4:	4a05      	ldr	r2, [pc, #20]	; (8004e0c <BSP_LED_Init+0x6c>)
 8004df6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	4619      	mov	r1, r3
 8004dfe:	f001 f845 	bl	8005e8c <HAL_GPIO_WritePin>
}
 8004e02:	bf00      	nop
 8004e04:	3720      	adds	r7, #32
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}
 8004e0a:	bf00      	nop
 8004e0c:	08011c44 	.word	0x08011c44
 8004e10:	2000002c 	.word	0x2000002c

08004e14 <BSP_LED_On>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b082      	sub	sp, #8
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 8004e1e:	79fb      	ldrb	r3, [r7, #7]
 8004e20:	4a07      	ldr	r2, [pc, #28]	; (8004e40 <BSP_LED_On+0x2c>)
 8004e22:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004e26:	79fb      	ldrb	r3, [r7, #7]
 8004e28:	4a06      	ldr	r2, [pc, #24]	; (8004e44 <BSP_LED_On+0x30>)
 8004e2a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e2e:	2201      	movs	r2, #1
 8004e30:	4619      	mov	r1, r3
 8004e32:	f001 f82b 	bl	8005e8c <HAL_GPIO_WritePin>
}
 8004e36:	bf00      	nop
 8004e38:	3708      	adds	r7, #8
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}
 8004e3e:	bf00      	nop
 8004e40:	2000002c 	.word	0x2000002c
 8004e44:	08011c44 	.word	0x08011c44

08004e48 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b088      	sub	sp, #32
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	4603      	mov	r3, r0
 8004e50:	460a      	mov	r2, r1
 8004e52:	71fb      	strb	r3, [r7, #7]
 8004e54:	4613      	mov	r3, r2
 8004e56:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpioinitstruct = {0};
 8004e58:	f107 030c 	add.w	r3, r7, #12
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	601a      	str	r2, [r3, #0]
 8004e60:	605a      	str	r2, [r3, #4]
 8004e62:	609a      	str	r2, [r3, #8]
 8004e64:	60da      	str	r2, [r3, #12]
 8004e66:	611a      	str	r2, [r3, #16]
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8004e68:	79fb      	ldrb	r3, [r7, #7]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d103      	bne.n	8004e76 <BSP_PB_Init+0x2e>
 8004e6e:	2004      	movs	r0, #4
 8004e70:	f7ff ff7d 	bl	8004d6e <LL_AHB2_GRP1_EnableClock>
 8004e74:	e00c      	b.n	8004e90 <BSP_PB_Init+0x48>
 8004e76:	79fb      	ldrb	r3, [r7, #7]
 8004e78:	2b01      	cmp	r3, #1
 8004e7a:	d103      	bne.n	8004e84 <BSP_PB_Init+0x3c>
 8004e7c:	2008      	movs	r0, #8
 8004e7e:	f7ff ff76 	bl	8004d6e <LL_AHB2_GRP1_EnableClock>
 8004e82:	e005      	b.n	8004e90 <BSP_PB_Init+0x48>
 8004e84:	79fb      	ldrb	r3, [r7, #7]
 8004e86:	2b02      	cmp	r3, #2
 8004e88:	d102      	bne.n	8004e90 <BSP_PB_Init+0x48>
 8004e8a:	2008      	movs	r0, #8
 8004e8c:	f7ff ff6f 	bl	8004d6e <LL_AHB2_GRP1_EnableClock>
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8004e90:	79bb      	ldrb	r3, [r7, #6]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d117      	bne.n	8004ec6 <BSP_PB_Init+0x7e>
  {
    /* Configure Button pin as input */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 8004e96:	79fb      	ldrb	r3, [r7, #7]
 8004e98:	4a20      	ldr	r2, [pc, #128]	; (8004f1c <BSP_PB_Init+0xd4>)
 8004e9a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e9e:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Mode = GPIO_MODE_INPUT;
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	613b      	str	r3, [r7, #16]
    gpioinitstruct.Pull = GPIO_PULLUP;
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004ea8:	2302      	movs	r3, #2
 8004eaa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 8004eac:	79fb      	ldrb	r3, [r7, #7]
 8004eae:	4a1c      	ldr	r2, [pc, #112]	; (8004f20 <BSP_PB_Init+0xd8>)
 8004eb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004eb4:	f107 020c 	add.w	r2, r7, #12
 8004eb8:	4611      	mov	r1, r2
 8004eba:	4618      	mov	r0, r3
 8004ebc:	f000 fe76 	bl	8005bac <HAL_GPIO_Init>
    
    /* Wait Button pin startup stability */
    HAL_Delay(1);
 8004ec0:	2001      	movs	r0, #1
 8004ec2:	f7fc fcbb 	bl	800183c <HAL_Delay>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 8004ec6:	79bb      	ldrb	r3, [r7, #6]
 8004ec8:	2b01      	cmp	r3, #1
 8004eca:	d123      	bne.n	8004f14 <BSP_PB_Init+0xcc>
  {
    /* Configure Button pin as input with External interrupt */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 8004ecc:	79fb      	ldrb	r3, [r7, #7]
 8004ece:	4a13      	ldr	r2, [pc, #76]	; (8004f1c <BSP_PB_Init+0xd4>)
 8004ed0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004ed4:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Pull = GPIO_PULLUP;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Mode = GPIO_MODE_IT_FALLING; 
 8004eda:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8004ede:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 8004ee0:	79fb      	ldrb	r3, [r7, #7]
 8004ee2:	4a0f      	ldr	r2, [pc, #60]	; (8004f20 <BSP_PB_Init+0xd8>)
 8004ee4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ee8:	f107 020c 	add.w	r2, r7, #12
 8004eec:	4611      	mov	r1, r2
 8004eee:	4618      	mov	r0, r3
 8004ef0:	f000 fe5c 	bl	8005bac <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8004ef4:	79fb      	ldrb	r3, [r7, #7]
 8004ef6:	4a0b      	ldr	r2, [pc, #44]	; (8004f24 <BSP_PB_Init+0xdc>)
 8004ef8:	5cd3      	ldrb	r3, [r2, r3]
 8004efa:	b25b      	sxtb	r3, r3
 8004efc:	2200      	movs	r2, #0
 8004efe:	210f      	movs	r1, #15
 8004f00:	4618      	mov	r0, r3
 8004f02:	f000 fa60 	bl	80053c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8004f06:	79fb      	ldrb	r3, [r7, #7]
 8004f08:	4a06      	ldr	r2, [pc, #24]	; (8004f24 <BSP_PB_Init+0xdc>)
 8004f0a:	5cd3      	ldrb	r3, [r2, r3]
 8004f0c:	b25b      	sxtb	r3, r3
 8004f0e:	4618      	mov	r0, r3
 8004f10:	f000 fa73 	bl	80053fa <HAL_NVIC_EnableIRQ>
  }
}
 8004f14:	bf00      	nop
 8004f16:	3720      	adds	r7, #32
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bd80      	pop	{r7, pc}
 8004f1c:	08011c4c 	.word	0x08011c4c
 8004f20:	20000038 	.word	0x20000038
 8004f24:	08011c54 	.word	0x08011c54

08004f28 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 8004f2c:	4b26      	ldr	r3, [pc, #152]	; (8004fc8 <SystemInit+0xa0>)
 8004f2e:	2200      	movs	r2, #0
 8004f30:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8004f32:	4b25      	ldr	r3, [pc, #148]	; (8004fc8 <SystemInit+0xa0>)
 8004f34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f38:	4a23      	ldr	r2, [pc, #140]	; (8004fc8 <SystemInit+0xa0>)
 8004f3a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004f3e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8004f42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f4c:	f043 0301 	orr.w	r3, r3, #1
 8004f50:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8004f52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f56:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8004f5a:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8004f5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f66:	4b19      	ldr	r3, [pc, #100]	; (8004fcc <SystemInit+0xa4>)
 8004f68:	4013      	ands	r3, r2
 8004f6a:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8004f6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f74:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f78:	f023 0305 	bic.w	r3, r3, #5
 8004f7c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8004f80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f84:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004f88:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f8c:	f023 0301 	bic.w	r3, r3, #1
 8004f90:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8004f94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f98:	4a0d      	ldr	r2, [pc, #52]	; (8004fd0 <SystemInit+0xa8>)
 8004f9a:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8004f9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fa0:	4a0b      	ldr	r2, [pc, #44]	; (8004fd0 <SystemInit+0xa8>)
 8004fa2:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004fa4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004fae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004fb2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004fb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fb8:	2200      	movs	r2, #0
 8004fba:	619a      	str	r2, [r3, #24]
}
 8004fbc:	bf00      	nop
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc4:	4770      	bx	lr
 8004fc6:	bf00      	nop
 8004fc8:	e000ed00 	.word	0xe000ed00
 8004fcc:	faf6fefb 	.word	0xfaf6fefb
 8004fd0:	22041000 	.word	0x22041000

08004fd4 <LL_DBGMCU_EnableDBGSleepMode>:
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8004fd8:	4b05      	ldr	r3, [pc, #20]	; (8004ff0 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	4a04      	ldr	r2, [pc, #16]	; (8004ff0 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8004fde:	f043 0301 	orr.w	r3, r3, #1
 8004fe2:	6053      	str	r3, [r2, #4]
}
 8004fe4:	bf00      	nop
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fec:	4770      	bx	lr
 8004fee:	bf00      	nop
 8004ff0:	e0042000 	.word	0xe0042000

08004ff4 <LL_DBGMCU_EnableDBGStopMode>:
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8004ff8:	4b05      	ldr	r3, [pc, #20]	; (8005010 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	4a04      	ldr	r2, [pc, #16]	; (8005010 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 8004ffe:	f043 0302 	orr.w	r3, r3, #2
 8005002:	6053      	str	r3, [r2, #4]
}
 8005004:	bf00      	nop
 8005006:	46bd      	mov	sp, r7
 8005008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500c:	4770      	bx	lr
 800500e:	bf00      	nop
 8005010:	e0042000 	.word	0xe0042000

08005014 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b082      	sub	sp, #8
 8005018:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800501a:	2300      	movs	r3, #0
 800501c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800501e:	4b0c      	ldr	r3, [pc, #48]	; (8005050 <HAL_Init+0x3c>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a0b      	ldr	r2, [pc, #44]	; (8005050 <HAL_Init+0x3c>)
 8005024:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005028:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800502a:	2003      	movs	r0, #3
 800502c:	f000 f9c0 	bl	80053b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005030:	2000      	movs	r0, #0
 8005032:	f000 f80f 	bl	8005054 <HAL_InitTick>
 8005036:	4603      	mov	r3, r0
 8005038:	2b00      	cmp	r3, #0
 800503a:	d002      	beq.n	8005042 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800503c:	2301      	movs	r3, #1
 800503e:	71fb      	strb	r3, [r7, #7]
 8005040:	e001      	b.n	8005046 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005042:	f7fd feb8 	bl	8002db6 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005046:	79fb      	ldrb	r3, [r7, #7]
}
 8005048:	4618      	mov	r0, r3
 800504a:	3708      	adds	r7, #8
 800504c:	46bd      	mov	sp, r7
 800504e:	bd80      	pop	{r7, pc}
 8005050:	58004000 	.word	0x58004000

08005054 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b084      	sub	sp, #16
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800505c:	2300      	movs	r3, #0
 800505e:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8005060:	4b17      	ldr	r3, [pc, #92]	; (80050c0 <HAL_InitTick+0x6c>)
 8005062:	781b      	ldrb	r3, [r3, #0]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d024      	beq.n	80050b2 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8005068:	f002 f89e 	bl	80071a8 <HAL_RCC_GetHCLKFreq>
 800506c:	4602      	mov	r2, r0
 800506e:	4b14      	ldr	r3, [pc, #80]	; (80050c0 <HAL_InitTick+0x6c>)
 8005070:	781b      	ldrb	r3, [r3, #0]
 8005072:	4619      	mov	r1, r3
 8005074:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005078:	fbb3 f3f1 	udiv	r3, r3, r1
 800507c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005080:	4618      	mov	r0, r3
 8005082:	f000 f9d6 	bl	8005432 <HAL_SYSTICK_Config>
 8005086:	4603      	mov	r3, r0
 8005088:	2b00      	cmp	r3, #0
 800508a:	d10f      	bne.n	80050ac <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2b0f      	cmp	r3, #15
 8005090:	d809      	bhi.n	80050a6 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005092:	2200      	movs	r2, #0
 8005094:	6879      	ldr	r1, [r7, #4]
 8005096:	f04f 30ff 	mov.w	r0, #4294967295
 800509a:	f000 f994 	bl	80053c6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800509e:	4a09      	ldr	r2, [pc, #36]	; (80050c4 <HAL_InitTick+0x70>)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6013      	str	r3, [r2, #0]
 80050a4:	e007      	b.n	80050b6 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80050a6:	2301      	movs	r3, #1
 80050a8:	73fb      	strb	r3, [r7, #15]
 80050aa:	e004      	b.n	80050b6 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 80050ac:	2301      	movs	r3, #1
 80050ae:	73fb      	strb	r3, [r7, #15]
 80050b0:	e001      	b.n	80050b6 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80050b2:	2301      	movs	r3, #1
 80050b4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80050b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	3710      	adds	r7, #16
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd80      	pop	{r7, pc}
 80050c0:	2000004c 	.word	0x2000004c
 80050c4:	20000048 	.word	0x20000048

080050c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80050c8:	b480      	push	{r7}
 80050ca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80050cc:	4b06      	ldr	r3, [pc, #24]	; (80050e8 <HAL_IncTick+0x20>)
 80050ce:	781b      	ldrb	r3, [r3, #0]
 80050d0:	461a      	mov	r2, r3
 80050d2:	4b06      	ldr	r3, [pc, #24]	; (80050ec <HAL_IncTick+0x24>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4413      	add	r3, r2
 80050d8:	4a04      	ldr	r2, [pc, #16]	; (80050ec <HAL_IncTick+0x24>)
 80050da:	6013      	str	r3, [r2, #0]
}
 80050dc:	bf00      	nop
 80050de:	46bd      	mov	sp, r7
 80050e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e4:	4770      	bx	lr
 80050e6:	bf00      	nop
 80050e8:	2000004c 	.word	0x2000004c
 80050ec:	20000958 	.word	0x20000958

080050f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80050f0:	b480      	push	{r7}
 80050f2:	af00      	add	r7, sp, #0
  return uwTick;
 80050f4:	4b03      	ldr	r3, [pc, #12]	; (8005104 <HAL_GetTick+0x14>)
 80050f6:	681b      	ldr	r3, [r3, #0]
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	46bd      	mov	sp, r7
 80050fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005100:	4770      	bx	lr
 8005102:	bf00      	nop
 8005104:	20000958 	.word	0x20000958

08005108 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8005108:	b480      	push	{r7}
 800510a:	af00      	add	r7, sp, #0
  return uwTickPrio;
 800510c:	4b03      	ldr	r3, [pc, #12]	; (800511c <HAL_GetTickPrio+0x14>)
 800510e:	681b      	ldr	r3, [r3, #0]
}
 8005110:	4618      	mov	r0, r3
 8005112:	46bd      	mov	sp, r7
 8005114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005118:	4770      	bx	lr
 800511a:	bf00      	nop
 800511c:	20000048 	.word	0x20000048

08005120 <HAL_GetTickFreq>:
  * @brief Return tick frequency.
  * @retval Tick frequency.
  *         Value of @ref HAL_TickFreqTypeDef.
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 8005120:	b480      	push	{r7}
 8005122:	af00      	add	r7, sp, #0
  return uwTickFreq;
 8005124:	4b03      	ldr	r3, [pc, #12]	; (8005134 <HAL_GetTickFreq+0x14>)
 8005126:	781b      	ldrb	r3, [r3, #0]
}
 8005128:	4618      	mov	r0, r3
 800512a:	46bd      	mov	sp, r7
 800512c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005130:	4770      	bx	lr
 8005132:	bf00      	nop
 8005134:	2000004c 	.word	0x2000004c

08005138 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 800513c:	f7ff ff4a 	bl	8004fd4 <LL_DBGMCU_EnableDBGSleepMode>
}
 8005140:	bf00      	nop
 8005142:	bd80      	pop	{r7, pc}

08005144 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 8005148:	f7ff ff54 	bl	8004ff4 <LL_DBGMCU_EnableDBGStopMode>
}
 800514c:	bf00      	nop
 800514e:	bd80      	pop	{r7, pc}

08005150 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005150:	b480      	push	{r7}
 8005152:	b085      	sub	sp, #20
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	f003 0307 	and.w	r3, r3, #7
 800515e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005160:	4b0c      	ldr	r3, [pc, #48]	; (8005194 <__NVIC_SetPriorityGrouping+0x44>)
 8005162:	68db      	ldr	r3, [r3, #12]
 8005164:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005166:	68ba      	ldr	r2, [r7, #8]
 8005168:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800516c:	4013      	ands	r3, r2
 800516e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005178:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800517c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005180:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005182:	4a04      	ldr	r2, [pc, #16]	; (8005194 <__NVIC_SetPriorityGrouping+0x44>)
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	60d3      	str	r3, [r2, #12]
}
 8005188:	bf00      	nop
 800518a:	3714      	adds	r7, #20
 800518c:	46bd      	mov	sp, r7
 800518e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005192:	4770      	bx	lr
 8005194:	e000ed00 	.word	0xe000ed00

08005198 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005198:	b480      	push	{r7}
 800519a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800519c:	4b04      	ldr	r3, [pc, #16]	; (80051b0 <__NVIC_GetPriorityGrouping+0x18>)
 800519e:	68db      	ldr	r3, [r3, #12]
 80051a0:	0a1b      	lsrs	r3, r3, #8
 80051a2:	f003 0307 	and.w	r3, r3, #7
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	46bd      	mov	sp, r7
 80051aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ae:	4770      	bx	lr
 80051b0:	e000ed00 	.word	0xe000ed00

080051b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b083      	sub	sp, #12
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	4603      	mov	r3, r0
 80051bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80051be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	db0b      	blt.n	80051de <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80051c6:	79fb      	ldrb	r3, [r7, #7]
 80051c8:	f003 021f 	and.w	r2, r3, #31
 80051cc:	4907      	ldr	r1, [pc, #28]	; (80051ec <__NVIC_EnableIRQ+0x38>)
 80051ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051d2:	095b      	lsrs	r3, r3, #5
 80051d4:	2001      	movs	r0, #1
 80051d6:	fa00 f202 	lsl.w	r2, r0, r2
 80051da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80051de:	bf00      	nop
 80051e0:	370c      	adds	r7, #12
 80051e2:	46bd      	mov	sp, r7
 80051e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e8:	4770      	bx	lr
 80051ea:	bf00      	nop
 80051ec:	e000e100 	.word	0xe000e100

080051f0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b083      	sub	sp, #12
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	4603      	mov	r3, r0
 80051f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80051fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	db12      	blt.n	8005228 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005202:	79fb      	ldrb	r3, [r7, #7]
 8005204:	f003 021f 	and.w	r2, r3, #31
 8005208:	490a      	ldr	r1, [pc, #40]	; (8005234 <__NVIC_DisableIRQ+0x44>)
 800520a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800520e:	095b      	lsrs	r3, r3, #5
 8005210:	2001      	movs	r0, #1
 8005212:	fa00 f202 	lsl.w	r2, r0, r2
 8005216:	3320      	adds	r3, #32
 8005218:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800521c:	f3bf 8f4f 	dsb	sy
}
 8005220:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005222:	f3bf 8f6f 	isb	sy
}
 8005226:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8005228:	bf00      	nop
 800522a:	370c      	adds	r7, #12
 800522c:	46bd      	mov	sp, r7
 800522e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005232:	4770      	bx	lr
 8005234:	e000e100 	.word	0xe000e100

08005238 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8005238:	b480      	push	{r7}
 800523a:	b083      	sub	sp, #12
 800523c:	af00      	add	r7, sp, #0
 800523e:	4603      	mov	r3, r0
 8005240:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005246:	2b00      	cmp	r3, #0
 8005248:	db0c      	blt.n	8005264 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800524a:	79fb      	ldrb	r3, [r7, #7]
 800524c:	f003 021f 	and.w	r2, r3, #31
 8005250:	4907      	ldr	r1, [pc, #28]	; (8005270 <__NVIC_SetPendingIRQ+0x38>)
 8005252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005256:	095b      	lsrs	r3, r3, #5
 8005258:	2001      	movs	r0, #1
 800525a:	fa00 f202 	lsl.w	r2, r0, r2
 800525e:	3340      	adds	r3, #64	; 0x40
 8005260:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005264:	bf00      	nop
 8005266:	370c      	adds	r7, #12
 8005268:	46bd      	mov	sp, r7
 800526a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526e:	4770      	bx	lr
 8005270:	e000e100 	.word	0xe000e100

08005274 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8005274:	b480      	push	{r7}
 8005276:	b083      	sub	sp, #12
 8005278:	af00      	add	r7, sp, #0
 800527a:	4603      	mov	r3, r0
 800527c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800527e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005282:	2b00      	cmp	r3, #0
 8005284:	db0c      	blt.n	80052a0 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005286:	79fb      	ldrb	r3, [r7, #7]
 8005288:	f003 021f 	and.w	r2, r3, #31
 800528c:	4907      	ldr	r1, [pc, #28]	; (80052ac <__NVIC_ClearPendingIRQ+0x38>)
 800528e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005292:	095b      	lsrs	r3, r3, #5
 8005294:	2001      	movs	r0, #1
 8005296:	fa00 f202 	lsl.w	r2, r0, r2
 800529a:	3360      	adds	r3, #96	; 0x60
 800529c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80052a0:	bf00      	nop
 80052a2:	370c      	adds	r7, #12
 80052a4:	46bd      	mov	sp, r7
 80052a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052aa:	4770      	bx	lr
 80052ac:	e000e100 	.word	0xe000e100

080052b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b083      	sub	sp, #12
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	4603      	mov	r3, r0
 80052b8:	6039      	str	r1, [r7, #0]
 80052ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80052bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	db0a      	blt.n	80052da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	b2da      	uxtb	r2, r3
 80052c8:	490c      	ldr	r1, [pc, #48]	; (80052fc <__NVIC_SetPriority+0x4c>)
 80052ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052ce:	0112      	lsls	r2, r2, #4
 80052d0:	b2d2      	uxtb	r2, r2
 80052d2:	440b      	add	r3, r1
 80052d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80052d8:	e00a      	b.n	80052f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	b2da      	uxtb	r2, r3
 80052de:	4908      	ldr	r1, [pc, #32]	; (8005300 <__NVIC_SetPriority+0x50>)
 80052e0:	79fb      	ldrb	r3, [r7, #7]
 80052e2:	f003 030f 	and.w	r3, r3, #15
 80052e6:	3b04      	subs	r3, #4
 80052e8:	0112      	lsls	r2, r2, #4
 80052ea:	b2d2      	uxtb	r2, r2
 80052ec:	440b      	add	r3, r1
 80052ee:	761a      	strb	r2, [r3, #24]
}
 80052f0:	bf00      	nop
 80052f2:	370c      	adds	r7, #12
 80052f4:	46bd      	mov	sp, r7
 80052f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fa:	4770      	bx	lr
 80052fc:	e000e100 	.word	0xe000e100
 8005300:	e000ed00 	.word	0xe000ed00

08005304 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005304:	b480      	push	{r7}
 8005306:	b089      	sub	sp, #36	; 0x24
 8005308:	af00      	add	r7, sp, #0
 800530a:	60f8      	str	r0, [r7, #12]
 800530c:	60b9      	str	r1, [r7, #8]
 800530e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	f003 0307 	and.w	r3, r3, #7
 8005316:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005318:	69fb      	ldr	r3, [r7, #28]
 800531a:	f1c3 0307 	rsb	r3, r3, #7
 800531e:	2b04      	cmp	r3, #4
 8005320:	bf28      	it	cs
 8005322:	2304      	movcs	r3, #4
 8005324:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005326:	69fb      	ldr	r3, [r7, #28]
 8005328:	3304      	adds	r3, #4
 800532a:	2b06      	cmp	r3, #6
 800532c:	d902      	bls.n	8005334 <NVIC_EncodePriority+0x30>
 800532e:	69fb      	ldr	r3, [r7, #28]
 8005330:	3b03      	subs	r3, #3
 8005332:	e000      	b.n	8005336 <NVIC_EncodePriority+0x32>
 8005334:	2300      	movs	r3, #0
 8005336:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005338:	f04f 32ff 	mov.w	r2, #4294967295
 800533c:	69bb      	ldr	r3, [r7, #24]
 800533e:	fa02 f303 	lsl.w	r3, r2, r3
 8005342:	43da      	mvns	r2, r3
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	401a      	ands	r2, r3
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800534c:	f04f 31ff 	mov.w	r1, #4294967295
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	fa01 f303 	lsl.w	r3, r1, r3
 8005356:	43d9      	mvns	r1, r3
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800535c:	4313      	orrs	r3, r2
         );
}
 800535e:	4618      	mov	r0, r3
 8005360:	3724      	adds	r7, #36	; 0x24
 8005362:	46bd      	mov	sp, r7
 8005364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005368:	4770      	bx	lr
	...

0800536c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b082      	sub	sp, #8
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	3b01      	subs	r3, #1
 8005378:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800537c:	d301      	bcc.n	8005382 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800537e:	2301      	movs	r3, #1
 8005380:	e00f      	b.n	80053a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005382:	4a0a      	ldr	r2, [pc, #40]	; (80053ac <SysTick_Config+0x40>)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	3b01      	subs	r3, #1
 8005388:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800538a:	210f      	movs	r1, #15
 800538c:	f04f 30ff 	mov.w	r0, #4294967295
 8005390:	f7ff ff8e 	bl	80052b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005394:	4b05      	ldr	r3, [pc, #20]	; (80053ac <SysTick_Config+0x40>)
 8005396:	2200      	movs	r2, #0
 8005398:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800539a:	4b04      	ldr	r3, [pc, #16]	; (80053ac <SysTick_Config+0x40>)
 800539c:	2207      	movs	r2, #7
 800539e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80053a0:	2300      	movs	r3, #0
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	3708      	adds	r7, #8
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}
 80053aa:	bf00      	nop
 80053ac:	e000e010 	.word	0xe000e010

080053b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b082      	sub	sp, #8
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80053b8:	6878      	ldr	r0, [r7, #4]
 80053ba:	f7ff fec9 	bl	8005150 <__NVIC_SetPriorityGrouping>
}
 80053be:	bf00      	nop
 80053c0:	3708      	adds	r7, #8
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}

080053c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80053c6:	b580      	push	{r7, lr}
 80053c8:	b086      	sub	sp, #24
 80053ca:	af00      	add	r7, sp, #0
 80053cc:	4603      	mov	r3, r0
 80053ce:	60b9      	str	r1, [r7, #8]
 80053d0:	607a      	str	r2, [r7, #4]
 80053d2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80053d4:	f7ff fee0 	bl	8005198 <__NVIC_GetPriorityGrouping>
 80053d8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80053da:	687a      	ldr	r2, [r7, #4]
 80053dc:	68b9      	ldr	r1, [r7, #8]
 80053de:	6978      	ldr	r0, [r7, #20]
 80053e0:	f7ff ff90 	bl	8005304 <NVIC_EncodePriority>
 80053e4:	4602      	mov	r2, r0
 80053e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80053ea:	4611      	mov	r1, r2
 80053ec:	4618      	mov	r0, r3
 80053ee:	f7ff ff5f 	bl	80052b0 <__NVIC_SetPriority>
}
 80053f2:	bf00      	nop
 80053f4:	3718      	adds	r7, #24
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bd80      	pop	{r7, pc}

080053fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80053fa:	b580      	push	{r7, lr}
 80053fc:	b082      	sub	sp, #8
 80053fe:	af00      	add	r7, sp, #0
 8005400:	4603      	mov	r3, r0
 8005402:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005404:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005408:	4618      	mov	r0, r3
 800540a:	f7ff fed3 	bl	80051b4 <__NVIC_EnableIRQ>
}
 800540e:	bf00      	nop
 8005410:	3708      	adds	r7, #8
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}

08005416 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005416:	b580      	push	{r7, lr}
 8005418:	b082      	sub	sp, #8
 800541a:	af00      	add	r7, sp, #0
 800541c:	4603      	mov	r3, r0
 800541e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8005420:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005424:	4618      	mov	r0, r3
 8005426:	f7ff fee3 	bl	80051f0 <__NVIC_DisableIRQ>
}
 800542a:	bf00      	nop
 800542c:	3708      	adds	r7, #8
 800542e:	46bd      	mov	sp, r7
 8005430:	bd80      	pop	{r7, pc}

08005432 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005432:	b580      	push	{r7, lr}
 8005434:	b082      	sub	sp, #8
 8005436:	af00      	add	r7, sp, #0
 8005438:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f7ff ff96 	bl	800536c <SysTick_Config>
 8005440:	4603      	mov	r3, r0
}
 8005442:	4618      	mov	r0, r3
 8005444:	3708      	adds	r7, #8
 8005446:	46bd      	mov	sp, r7
 8005448:	bd80      	pop	{r7, pc}

0800544a <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 800544a:	b580      	push	{r7, lr}
 800544c:	b082      	sub	sp, #8
 800544e:	af00      	add	r7, sp, #0
 8005450:	4603      	mov	r3, r0
 8005452:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8005454:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005458:	4618      	mov	r0, r3
 800545a:	f7ff feed 	bl	8005238 <__NVIC_SetPendingIRQ>
}
 800545e:	bf00      	nop
 8005460:	3708      	adds	r7, #8
 8005462:	46bd      	mov	sp, r7
 8005464:	bd80      	pop	{r7, pc}

08005466 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8005466:	b580      	push	{r7, lr}
 8005468:	b082      	sub	sp, #8
 800546a:	af00      	add	r7, sp, #0
 800546c:	4603      	mov	r3, r0
 800546e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8005470:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005474:	4618      	mov	r0, r3
 8005476:	f7ff fefd 	bl	8005274 <__NVIC_ClearPendingIRQ>
}
 800547a:	bf00      	nop
 800547c:	3708      	adds	r7, #8
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}
	...

08005484 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b084      	sub	sp, #16
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d101      	bne.n	8005496 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005492:	2301      	movs	r3, #1
 8005494:	e08e      	b.n	80055b4 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	461a      	mov	r2, r3
 800549c:	4b47      	ldr	r3, [pc, #284]	; (80055bc <HAL_DMA_Init+0x138>)
 800549e:	429a      	cmp	r2, r3
 80054a0:	d80f      	bhi.n	80054c2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	461a      	mov	r2, r3
 80054a8:	4b45      	ldr	r3, [pc, #276]	; (80055c0 <HAL_DMA_Init+0x13c>)
 80054aa:	4413      	add	r3, r2
 80054ac:	4a45      	ldr	r2, [pc, #276]	; (80055c4 <HAL_DMA_Init+0x140>)
 80054ae:	fba2 2303 	umull	r2, r3, r2, r3
 80054b2:	091b      	lsrs	r3, r3, #4
 80054b4:	009a      	lsls	r2, r3, #2
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	4a42      	ldr	r2, [pc, #264]	; (80055c8 <HAL_DMA_Init+0x144>)
 80054be:	641a      	str	r2, [r3, #64]	; 0x40
 80054c0:	e00e      	b.n	80054e0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	461a      	mov	r2, r3
 80054c8:	4b40      	ldr	r3, [pc, #256]	; (80055cc <HAL_DMA_Init+0x148>)
 80054ca:	4413      	add	r3, r2
 80054cc:	4a3d      	ldr	r2, [pc, #244]	; (80055c4 <HAL_DMA_Init+0x140>)
 80054ce:	fba2 2303 	umull	r2, r3, r2, r3
 80054d2:	091b      	lsrs	r3, r3, #4
 80054d4:	009a      	lsls	r2, r3, #2
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	4a3c      	ldr	r2, [pc, #240]	; (80055d0 <HAL_DMA_Init+0x14c>)
 80054de:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2202      	movs	r2, #2
 80054e4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80054f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054fa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005504:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	691b      	ldr	r3, [r3, #16]
 800550a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005510:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	699b      	ldr	r3, [r3, #24]
 8005516:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800551c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6a1b      	ldr	r3, [r3, #32]
 8005522:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005524:	68fa      	ldr	r2, [r7, #12]
 8005526:	4313      	orrs	r3, r2
 8005528:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	68fa      	ldr	r2, [r7, #12]
 8005530:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	f000 fa74 	bl	8005a20 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	689b      	ldr	r3, [r3, #8]
 800553c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005540:	d102      	bne.n	8005548 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2200      	movs	r2, #0
 8005546:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	685a      	ldr	r2, [r3, #4]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005550:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8005554:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800555a:	687a      	ldr	r2, [r7, #4]
 800555c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800555e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d010      	beq.n	800558a <HAL_DMA_Init+0x106>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	2b04      	cmp	r3, #4
 800556e:	d80c      	bhi.n	800558a <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	f000 fa93 	bl	8005a9c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800557a:	2200      	movs	r2, #0
 800557c:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005582:	687a      	ldr	r2, [r7, #4]
 8005584:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005586:	605a      	str	r2, [r3, #4]
 8005588:	e008      	b.n	800559c <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2200      	movs	r2, #0
 800558e:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2200      	movs	r2, #0
 8005594:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2200      	movs	r2, #0
 800559a:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2200      	movs	r2, #0
 80055a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2201      	movs	r2, #1
 80055a6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2200      	movs	r2, #0
 80055ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80055b2:	2300      	movs	r3, #0
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	3710      	adds	r7, #16
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bd80      	pop	{r7, pc}
 80055bc:	40020407 	.word	0x40020407
 80055c0:	bffdfff8 	.word	0xbffdfff8
 80055c4:	cccccccd 	.word	0xcccccccd
 80055c8:	40020000 	.word	0x40020000
 80055cc:	bffdfbf8 	.word	0xbffdfbf8
 80055d0:	40020400 	.word	0x40020400

080055d4 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b086      	sub	sp, #24
 80055d8:	af00      	add	r7, sp, #0
 80055da:	60f8      	str	r0, [r7, #12]
 80055dc:	60b9      	str	r1, [r7, #8]
 80055de:	607a      	str	r2, [r7, #4]
 80055e0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80055e2:	2300      	movs	r3, #0
 80055e4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80055ec:	2b01      	cmp	r3, #1
 80055ee:	d101      	bne.n	80055f4 <HAL_DMA_Start_IT+0x20>
 80055f0:	2302      	movs	r3, #2
 80055f2:	e066      	b.n	80056c2 <HAL_DMA_Start_IT+0xee>
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	2201      	movs	r2, #1
 80055f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005602:	b2db      	uxtb	r3, r3
 8005604:	2b01      	cmp	r3, #1
 8005606:	d155      	bne.n	80056b4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2202      	movs	r2, #2
 800560c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2200      	movs	r2, #0
 8005614:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	681a      	ldr	r2, [r3, #0]
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f022 0201 	bic.w	r2, r2, #1
 8005624:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	687a      	ldr	r2, [r7, #4]
 800562a:	68b9      	ldr	r1, [r7, #8]
 800562c:	68f8      	ldr	r0, [r7, #12]
 800562e:	f000 f9b9 	bl	80059a4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005636:	2b00      	cmp	r3, #0
 8005638:	d008      	beq.n	800564c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	681a      	ldr	r2, [r3, #0]
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f042 020e 	orr.w	r2, r2, #14
 8005648:	601a      	str	r2, [r3, #0]
 800564a:	e00f      	b.n	800566c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	681a      	ldr	r2, [r3, #0]
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f022 0204 	bic.w	r2, r2, #4
 800565a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	681a      	ldr	r2, [r3, #0]
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f042 020a 	orr.w	r2, r2, #10
 800566a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005676:	2b00      	cmp	r3, #0
 8005678:	d007      	beq.n	800568a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800567e:	681a      	ldr	r2, [r3, #0]
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005684:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005688:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800568e:	2b00      	cmp	r3, #0
 8005690:	d007      	beq.n	80056a2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005696:	681a      	ldr	r2, [r3, #0]
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800569c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80056a0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	681a      	ldr	r2, [r3, #0]
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f042 0201 	orr.w	r2, r2, #1
 80056b0:	601a      	str	r2, [r3, #0]
 80056b2:	e005      	b.n	80056c0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	2200      	movs	r2, #0
 80056b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80056bc:	2302      	movs	r3, #2
 80056be:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80056c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80056c2:	4618      	mov	r0, r3
 80056c4:	3718      	adds	r7, #24
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}

080056ca <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80056ca:	b480      	push	{r7}
 80056cc:	b083      	sub	sp, #12
 80056ce:	af00      	add	r7, sp, #0
 80056d0:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d101      	bne.n	80056dc <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80056d8:	2301      	movs	r3, #1
 80056da:	e04f      	b.n	800577c <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80056e2:	b2db      	uxtb	r3, r3
 80056e4:	2b02      	cmp	r3, #2
 80056e6:	d008      	beq.n	80056fa <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2204      	movs	r2, #4
 80056ec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2200      	movs	r2, #0
 80056f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80056f6:	2301      	movs	r3, #1
 80056f8:	e040      	b.n	800577c <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	681a      	ldr	r2, [r3, #0]
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f022 020e 	bic.w	r2, r2, #14
 8005708:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800570e:	681a      	ldr	r2, [r3, #0]
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005714:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005718:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	681a      	ldr	r2, [r3, #0]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f022 0201 	bic.w	r2, r2, #1
 8005728:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800572e:	f003 021c 	and.w	r2, r3, #28
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005736:	2101      	movs	r1, #1
 8005738:	fa01 f202 	lsl.w	r2, r1, r2
 800573c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005742:	687a      	ldr	r2, [r7, #4]
 8005744:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005746:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800574c:	2b00      	cmp	r3, #0
 800574e:	d00c      	beq.n	800576a <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005754:	681a      	ldr	r2, [r3, #0]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800575a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800575e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005764:	687a      	ldr	r2, [r7, #4]
 8005766:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005768:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2201      	movs	r2, #1
 800576e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2200      	movs	r2, #0
 8005776:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 800577a:	2300      	movs	r3, #0
}
 800577c:	4618      	mov	r0, r3
 800577e:	370c      	adds	r7, #12
 8005780:	46bd      	mov	sp, r7
 8005782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005786:	4770      	bx	lr

08005788 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b084      	sub	sp, #16
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005790:	2300      	movs	r3, #0
 8005792:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800579a:	b2db      	uxtb	r3, r3
 800579c:	2b02      	cmp	r3, #2
 800579e:	d005      	beq.n	80057ac <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2204      	movs	r2, #4
 80057a4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80057a6:	2301      	movs	r3, #1
 80057a8:	73fb      	strb	r3, [r7, #15]
 80057aa:	e047      	b.n	800583c <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	681a      	ldr	r2, [r3, #0]
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f022 020e 	bic.w	r2, r2, #14
 80057ba:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	681a      	ldr	r2, [r3, #0]
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f022 0201 	bic.w	r2, r2, #1
 80057ca:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057d0:	681a      	ldr	r2, [r3, #0]
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057d6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80057da:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057e0:	f003 021c 	and.w	r2, r3, #28
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057e8:	2101      	movs	r1, #1
 80057ea:	fa01 f202 	lsl.w	r2, r1, r2
 80057ee:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057f4:	687a      	ldr	r2, [r7, #4]
 80057f6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80057f8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d00c      	beq.n	800581c <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005806:	681a      	ldr	r2, [r3, #0]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800580c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005810:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005816:	687a      	ldr	r2, [r7, #4]
 8005818:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800581a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2201      	movs	r2, #1
 8005820:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2200      	movs	r2, #0
 8005828:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005830:	2b00      	cmp	r3, #0
 8005832:	d003      	beq.n	800583c <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005838:	6878      	ldr	r0, [r7, #4]
 800583a:	4798      	blx	r3
    }
  }
  return status;
 800583c:	7bfb      	ldrb	r3, [r7, #15]
}
 800583e:	4618      	mov	r0, r3
 8005840:	3710      	adds	r7, #16
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}

08005846 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005846:	b580      	push	{r7, lr}
 8005848:	b084      	sub	sp, #16
 800584a:	af00      	add	r7, sp, #0
 800584c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005862:	f003 031c 	and.w	r3, r3, #28
 8005866:	2204      	movs	r2, #4
 8005868:	409a      	lsls	r2, r3
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	4013      	ands	r3, r2
 800586e:	2b00      	cmp	r3, #0
 8005870:	d026      	beq.n	80058c0 <HAL_DMA_IRQHandler+0x7a>
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	f003 0304 	and.w	r3, r3, #4
 8005878:	2b00      	cmp	r3, #0
 800587a:	d021      	beq.n	80058c0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f003 0320 	and.w	r3, r3, #32
 8005886:	2b00      	cmp	r3, #0
 8005888:	d107      	bne.n	800589a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	681a      	ldr	r2, [r3, #0]
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f022 0204 	bic.w	r2, r2, #4
 8005898:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800589e:	f003 021c 	and.w	r2, r3, #28
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058a6:	2104      	movs	r1, #4
 80058a8:	fa01 f202 	lsl.w	r2, r1, r2
 80058ac:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d071      	beq.n	800599a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80058be:	e06c      	b.n	800599a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058c4:	f003 031c 	and.w	r3, r3, #28
 80058c8:	2202      	movs	r2, #2
 80058ca:	409a      	lsls	r2, r3
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	4013      	ands	r3, r2
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d02e      	beq.n	8005932 <HAL_DMA_IRQHandler+0xec>
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	f003 0302 	and.w	r3, r3, #2
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d029      	beq.n	8005932 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f003 0320 	and.w	r3, r3, #32
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d10b      	bne.n	8005904 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	681a      	ldr	r2, [r3, #0]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f022 020a 	bic.w	r2, r2, #10
 80058fa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2201      	movs	r2, #1
 8005900:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005908:	f003 021c 	and.w	r2, r3, #28
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005910:	2102      	movs	r1, #2
 8005912:	fa01 f202 	lsl.w	r2, r1, r2
 8005916:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2200      	movs	r2, #0
 800591c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005924:	2b00      	cmp	r3, #0
 8005926:	d038      	beq.n	800599a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800592c:	6878      	ldr	r0, [r7, #4]
 800592e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005930:	e033      	b.n	800599a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005936:	f003 031c 	and.w	r3, r3, #28
 800593a:	2208      	movs	r2, #8
 800593c:	409a      	lsls	r2, r3
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	4013      	ands	r3, r2
 8005942:	2b00      	cmp	r3, #0
 8005944:	d02a      	beq.n	800599c <HAL_DMA_IRQHandler+0x156>
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	f003 0308 	and.w	r3, r3, #8
 800594c:	2b00      	cmp	r3, #0
 800594e:	d025      	beq.n	800599c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	681a      	ldr	r2, [r3, #0]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f022 020e 	bic.w	r2, r2, #14
 800595e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005964:	f003 021c 	and.w	r2, r3, #28
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800596c:	2101      	movs	r1, #1
 800596e:	fa01 f202 	lsl.w	r2, r1, r2
 8005972:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2201      	movs	r2, #1
 8005978:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2201      	movs	r2, #1
 800597e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2200      	movs	r2, #0
 8005986:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800598e:	2b00      	cmp	r3, #0
 8005990:	d004      	beq.n	800599c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800599a:	bf00      	nop
 800599c:	bf00      	nop
}
 800599e:	3710      	adds	r7, #16
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd80      	pop	{r7, pc}

080059a4 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b085      	sub	sp, #20
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	60f8      	str	r0, [r7, #12]
 80059ac:	60b9      	str	r1, [r7, #8]
 80059ae:	607a      	str	r2, [r7, #4]
 80059b0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059b6:	68fa      	ldr	r2, [r7, #12]
 80059b8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80059ba:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d004      	beq.n	80059ce <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059c8:	68fa      	ldr	r2, [r7, #12]
 80059ca:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80059cc:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059d2:	f003 021c 	and.w	r2, r3, #28
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059da:	2101      	movs	r1, #1
 80059dc:	fa01 f202 	lsl.w	r2, r1, r2
 80059e0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	683a      	ldr	r2, [r7, #0]
 80059e8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	689b      	ldr	r3, [r3, #8]
 80059ee:	2b10      	cmp	r3, #16
 80059f0:	d108      	bne.n	8005a04 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	687a      	ldr	r2, [r7, #4]
 80059f8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	68ba      	ldr	r2, [r7, #8]
 8005a00:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005a02:	e007      	b.n	8005a14 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	68ba      	ldr	r2, [r7, #8]
 8005a0a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	687a      	ldr	r2, [r7, #4]
 8005a12:	60da      	str	r2, [r3, #12]
}
 8005a14:	bf00      	nop
 8005a16:	3714      	adds	r7, #20
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1e:	4770      	bx	lr

08005a20 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b085      	sub	sp, #20
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	461a      	mov	r2, r3
 8005a2e:	4b17      	ldr	r3, [pc, #92]	; (8005a8c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8005a30:	429a      	cmp	r2, r3
 8005a32:	d80a      	bhi.n	8005a4a <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a38:	089b      	lsrs	r3, r3, #2
 8005a3a:	009b      	lsls	r3, r3, #2
 8005a3c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005a40:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8005a44:	687a      	ldr	r2, [r7, #4]
 8005a46:	6493      	str	r3, [r2, #72]	; 0x48
 8005a48:	e007      	b.n	8005a5a <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a4e:	089b      	lsrs	r3, r3, #2
 8005a50:	009a      	lsls	r2, r3, #2
 8005a52:	4b0f      	ldr	r3, [pc, #60]	; (8005a90 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8005a54:	4413      	add	r3, r2
 8005a56:	687a      	ldr	r2, [r7, #4]
 8005a58:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	b2db      	uxtb	r3, r3
 8005a60:	3b08      	subs	r3, #8
 8005a62:	4a0c      	ldr	r2, [pc, #48]	; (8005a94 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8005a64:	fba2 2303 	umull	r2, r3, r2, r3
 8005a68:	091b      	lsrs	r3, r3, #4
 8005a6a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	4a0a      	ldr	r2, [pc, #40]	; (8005a98 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8005a70:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	f003 031f 	and.w	r3, r3, #31
 8005a78:	2201      	movs	r2, #1
 8005a7a:	409a      	lsls	r2, r3
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005a80:	bf00      	nop
 8005a82:	3714      	adds	r7, #20
 8005a84:	46bd      	mov	sp, r7
 8005a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8a:	4770      	bx	lr
 8005a8c:	40020407 	.word	0x40020407
 8005a90:	4002081c 	.word	0x4002081c
 8005a94:	cccccccd 	.word	0xcccccccd
 8005a98:	40020880 	.word	0x40020880

08005a9c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b085      	sub	sp, #20
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005aac:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005aae:	68fa      	ldr	r2, [r7, #12]
 8005ab0:	4b0b      	ldr	r3, [pc, #44]	; (8005ae0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005ab2:	4413      	add	r3, r2
 8005ab4:	009b      	lsls	r3, r3, #2
 8005ab6:	461a      	mov	r2, r3
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	4a09      	ldr	r2, [pc, #36]	; (8005ae4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8005ac0:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	3b01      	subs	r3, #1
 8005ac6:	f003 0303 	and.w	r3, r3, #3
 8005aca:	2201      	movs	r2, #1
 8005acc:	409a      	lsls	r2, r3
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8005ad2:	bf00      	nop
 8005ad4:	3714      	adds	r7, #20
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005adc:	4770      	bx	lr
 8005ade:	bf00      	nop
 8005ae0:	1000823f 	.word	0x1000823f
 8005ae4:	40020940 	.word	0x40020940

08005ae8 <HAL_DMAEx_ConfigMuxSync>:
  *                     the configuration information for the specified DMA channel.
  * @param  pSyncConfig Pointer to HAL_DMA_MuxSyncConfigTypeDef : contains the DMAMUX synchronization parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxSync(DMA_HandleTypeDef *hdma, HAL_DMA_MuxSyncConfigTypeDef *pSyncConfig)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b083      	sub	sp, #12
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
 8005af0:	6039      	str	r1, [r7, #0]
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  /*Check if the DMA state is ready */
  if (hdma->State == HAL_DMA_STATE_READY)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005af8:	b2db      	uxtb	r3, r3
 8005afa:	2b01      	cmp	r3, #1
 8005afc:	d12b      	bne.n	8005b56 <HAL_DMAEx_ConfigMuxSync+0x6e>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005b04:	2b01      	cmp	r3, #1
 8005b06:	d101      	bne.n	8005b0c <HAL_DMAEx_ConfigMuxSync+0x24>
 8005b08:	2302      	movs	r3, #2
 8005b0a:	e025      	b.n	8005b58 <HAL_DMAEx_ConfigMuxSync+0x70>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2201      	movs	r2, #1
 8005b10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Set the new synchronization parameters (and keep the request ID filled during the Init)*/
    MODIFY_REG(hdma->DMAmuxChannel->CCR, \
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b18:	681a      	ldr	r2, [r3, #0]
 8005b1a:	4b12      	ldr	r3, [pc, #72]	; (8005b64 <HAL_DMAEx_ConfigMuxSync+0x7c>)
 8005b1c:	4013      	ands	r3, r2
 8005b1e:	683a      	ldr	r2, [r7, #0]
 8005b20:	6811      	ldr	r1, [r2, #0]
 8005b22:	683a      	ldr	r2, [r7, #0]
 8005b24:	68d2      	ldr	r2, [r2, #12]
 8005b26:	3a01      	subs	r2, #1
 8005b28:	04d2      	lsls	r2, r2, #19
 8005b2a:	4311      	orrs	r1, r2
 8005b2c:	683a      	ldr	r2, [r7, #0]
 8005b2e:	6852      	ldr	r2, [r2, #4]
 8005b30:	4311      	orrs	r1, r2
 8005b32:	683a      	ldr	r2, [r7, #0]
 8005b34:	7a12      	ldrb	r2, [r2, #8]
 8005b36:	0412      	lsls	r2, r2, #16
 8005b38:	4311      	orrs	r1, r2
 8005b3a:	683a      	ldr	r2, [r7, #0]
 8005b3c:	7a52      	ldrb	r2, [r2, #9]
 8005b3e:	0252      	lsls	r2, r2, #9
 8005b40:	4311      	orrs	r1, r2
 8005b42:	687a      	ldr	r2, [r7, #4]
 8005b44:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005b46:	430b      	orrs	r3, r1
 8005b48:	6013      	str	r3, [r2, #0]
                pSyncConfig->SyncPolarity                                       | \
                ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos)                 | \
                ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos)));

    /* Process UnLocked */
    __HAL_UNLOCK(hdma);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_OK;
 8005b52:	2300      	movs	r3, #0
 8005b54:	e000      	b.n	8005b58 <HAL_DMAEx_ConfigMuxSync+0x70>
  }
  else
  {
    /*DMA State not Ready*/
    return HAL_ERROR;
 8005b56:	2301      	movs	r3, #1
  }
}
 8005b58:	4618      	mov	r0, r3
 8005b5a:	370c      	adds	r7, #12
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b62:	4770      	bx	lr
 8005b64:	e000fdff 	.word	0xe000fdff

08005b68 <HAL_EXTI_GenerateSWI>:
  * @brief  Generate a software interrupt for a dedicated line.
  * @param  hexti Exti handle.
  * @retval None.
  */
void HAL_EXTI_GenerateSWI(EXTI_HandleTypeDef *hexti)
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b087      	sub	sp, #28
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
  /* Check parameters */
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));

  /* compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	0c1b      	lsrs	r3, r3, #16
 8005b76:	f003 0301 	and.w	r3, r3, #1
 8005b7a:	617b      	str	r3, [r7, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f003 031f 	and.w	r3, r3, #31
 8005b84:	2201      	movs	r2, #1
 8005b86:	fa02 f303 	lsl.w	r3, r2, r3
 8005b8a:	613b      	str	r3, [r7, #16]

  regaddr = (&EXTI->SWIER1 + (EXTI_CONFIG_OFFSET * offset));
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	015b      	lsls	r3, r3, #5
 8005b90:	f103 43b0 	add.w	r3, r3, #1476395008	; 0x58000000
 8005b94:	f603 0308 	addw	r3, r3, #2056	; 0x808
 8005b98:	60fb      	str	r3, [r7, #12]
  *regaddr = maskline;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	693a      	ldr	r2, [r7, #16]
 8005b9e:	601a      	str	r2, [r3, #0]
}
 8005ba0:	bf00      	nop
 8005ba2:	371c      	adds	r7, #28
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005baa:	4770      	bx	lr

08005bac <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005bac:	b480      	push	{r7}
 8005bae:	b087      	sub	sp, #28
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
 8005bb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005bba:	e14c      	b.n	8005e56 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	681a      	ldr	r2, [r3, #0]
 8005bc0:	2101      	movs	r1, #1
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	fa01 f303 	lsl.w	r3, r1, r3
 8005bc8:	4013      	ands	r3, r2
 8005bca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	f000 813e 	beq.w	8005e50 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	f003 0303 	and.w	r3, r3, #3
 8005bdc:	2b01      	cmp	r3, #1
 8005bde:	d005      	beq.n	8005bec <HAL_GPIO_Init+0x40>
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	685b      	ldr	r3, [r3, #4]
 8005be4:	f003 0303 	and.w	r3, r3, #3
 8005be8:	2b02      	cmp	r3, #2
 8005bea:	d130      	bne.n	8005c4e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	689b      	ldr	r3, [r3, #8]
 8005bf0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	005b      	lsls	r3, r3, #1
 8005bf6:	2203      	movs	r2, #3
 8005bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8005bfc:	43db      	mvns	r3, r3
 8005bfe:	693a      	ldr	r2, [r7, #16]
 8005c00:	4013      	ands	r3, r2
 8005c02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	68da      	ldr	r2, [r3, #12]
 8005c08:	697b      	ldr	r3, [r7, #20]
 8005c0a:	005b      	lsls	r3, r3, #1
 8005c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c10:	693a      	ldr	r2, [r7, #16]
 8005c12:	4313      	orrs	r3, r2
 8005c14:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	693a      	ldr	r2, [r7, #16]
 8005c1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	685b      	ldr	r3, [r3, #4]
 8005c20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005c22:	2201      	movs	r2, #1
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	fa02 f303 	lsl.w	r3, r2, r3
 8005c2a:	43db      	mvns	r3, r3
 8005c2c:	693a      	ldr	r2, [r7, #16]
 8005c2e:	4013      	ands	r3, r2
 8005c30:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	091b      	lsrs	r3, r3, #4
 8005c38:	f003 0201 	and.w	r2, r3, #1
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c42:	693a      	ldr	r2, [r7, #16]
 8005c44:	4313      	orrs	r3, r2
 8005c46:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	693a      	ldr	r2, [r7, #16]
 8005c4c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	f003 0303 	and.w	r3, r3, #3
 8005c56:	2b03      	cmp	r3, #3
 8005c58:	d017      	beq.n	8005c8a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	68db      	ldr	r3, [r3, #12]
 8005c5e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005c60:	697b      	ldr	r3, [r7, #20]
 8005c62:	005b      	lsls	r3, r3, #1
 8005c64:	2203      	movs	r2, #3
 8005c66:	fa02 f303 	lsl.w	r3, r2, r3
 8005c6a:	43db      	mvns	r3, r3
 8005c6c:	693a      	ldr	r2, [r7, #16]
 8005c6e:	4013      	ands	r3, r2
 8005c70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	689a      	ldr	r2, [r3, #8]
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	005b      	lsls	r3, r3, #1
 8005c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c7e:	693a      	ldr	r2, [r7, #16]
 8005c80:	4313      	orrs	r3, r2
 8005c82:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	693a      	ldr	r2, [r7, #16]
 8005c88:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	685b      	ldr	r3, [r3, #4]
 8005c8e:	f003 0303 	and.w	r3, r3, #3
 8005c92:	2b02      	cmp	r3, #2
 8005c94:	d123      	bne.n	8005cde <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	08da      	lsrs	r2, r3, #3
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	3208      	adds	r2, #8
 8005c9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ca2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	f003 0307 	and.w	r3, r3, #7
 8005caa:	009b      	lsls	r3, r3, #2
 8005cac:	220f      	movs	r2, #15
 8005cae:	fa02 f303 	lsl.w	r3, r2, r3
 8005cb2:	43db      	mvns	r3, r3
 8005cb4:	693a      	ldr	r2, [r7, #16]
 8005cb6:	4013      	ands	r3, r2
 8005cb8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	691a      	ldr	r2, [r3, #16]
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	f003 0307 	and.w	r3, r3, #7
 8005cc4:	009b      	lsls	r3, r3, #2
 8005cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8005cca:	693a      	ldr	r2, [r7, #16]
 8005ccc:	4313      	orrs	r3, r2
 8005cce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	08da      	lsrs	r2, r3, #3
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	3208      	adds	r2, #8
 8005cd8:	6939      	ldr	r1, [r7, #16]
 8005cda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	005b      	lsls	r3, r3, #1
 8005ce8:	2203      	movs	r2, #3
 8005cea:	fa02 f303 	lsl.w	r3, r2, r3
 8005cee:	43db      	mvns	r3, r3
 8005cf0:	693a      	ldr	r2, [r7, #16]
 8005cf2:	4013      	ands	r3, r2
 8005cf4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	685b      	ldr	r3, [r3, #4]
 8005cfa:	f003 0203 	and.w	r2, r3, #3
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	005b      	lsls	r3, r3, #1
 8005d02:	fa02 f303 	lsl.w	r3, r2, r3
 8005d06:	693a      	ldr	r2, [r7, #16]
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	693a      	ldr	r2, [r7, #16]
 8005d10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	685b      	ldr	r3, [r3, #4]
 8005d16:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	f000 8098 	beq.w	8005e50 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8005d20:	4a54      	ldr	r2, [pc, #336]	; (8005e74 <HAL_GPIO_Init+0x2c8>)
 8005d22:	697b      	ldr	r3, [r7, #20]
 8005d24:	089b      	lsrs	r3, r3, #2
 8005d26:	3302      	adds	r3, #2
 8005d28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d2c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005d2e:	697b      	ldr	r3, [r7, #20]
 8005d30:	f003 0303 	and.w	r3, r3, #3
 8005d34:	009b      	lsls	r3, r3, #2
 8005d36:	220f      	movs	r2, #15
 8005d38:	fa02 f303 	lsl.w	r3, r2, r3
 8005d3c:	43db      	mvns	r3, r3
 8005d3e:	693a      	ldr	r2, [r7, #16]
 8005d40:	4013      	ands	r3, r2
 8005d42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005d4a:	d019      	beq.n	8005d80 <HAL_GPIO_Init+0x1d4>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	4a4a      	ldr	r2, [pc, #296]	; (8005e78 <HAL_GPIO_Init+0x2cc>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d013      	beq.n	8005d7c <HAL_GPIO_Init+0x1d0>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	4a49      	ldr	r2, [pc, #292]	; (8005e7c <HAL_GPIO_Init+0x2d0>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d00d      	beq.n	8005d78 <HAL_GPIO_Init+0x1cc>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	4a48      	ldr	r2, [pc, #288]	; (8005e80 <HAL_GPIO_Init+0x2d4>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d007      	beq.n	8005d74 <HAL_GPIO_Init+0x1c8>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	4a47      	ldr	r2, [pc, #284]	; (8005e84 <HAL_GPIO_Init+0x2d8>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d101      	bne.n	8005d70 <HAL_GPIO_Init+0x1c4>
 8005d6c:	2304      	movs	r3, #4
 8005d6e:	e008      	b.n	8005d82 <HAL_GPIO_Init+0x1d6>
 8005d70:	2307      	movs	r3, #7
 8005d72:	e006      	b.n	8005d82 <HAL_GPIO_Init+0x1d6>
 8005d74:	2303      	movs	r3, #3
 8005d76:	e004      	b.n	8005d82 <HAL_GPIO_Init+0x1d6>
 8005d78:	2302      	movs	r3, #2
 8005d7a:	e002      	b.n	8005d82 <HAL_GPIO_Init+0x1d6>
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	e000      	b.n	8005d82 <HAL_GPIO_Init+0x1d6>
 8005d80:	2300      	movs	r3, #0
 8005d82:	697a      	ldr	r2, [r7, #20]
 8005d84:	f002 0203 	and.w	r2, r2, #3
 8005d88:	0092      	lsls	r2, r2, #2
 8005d8a:	4093      	lsls	r3, r2
 8005d8c:	693a      	ldr	r2, [r7, #16]
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005d92:	4938      	ldr	r1, [pc, #224]	; (8005e74 <HAL_GPIO_Init+0x2c8>)
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	089b      	lsrs	r3, r3, #2
 8005d98:	3302      	adds	r3, #2
 8005d9a:	693a      	ldr	r2, [r7, #16]
 8005d9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005da0:	4b39      	ldr	r3, [pc, #228]	; (8005e88 <HAL_GPIO_Init+0x2dc>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	43db      	mvns	r3, r3
 8005daa:	693a      	ldr	r2, [r7, #16]
 8005dac:	4013      	ands	r3, r2
 8005dae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	685b      	ldr	r3, [r3, #4]
 8005db4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d003      	beq.n	8005dc4 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8005dbc:	693a      	ldr	r2, [r7, #16]
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005dc4:	4a30      	ldr	r2, [pc, #192]	; (8005e88 <HAL_GPIO_Init+0x2dc>)
 8005dc6:	693b      	ldr	r3, [r7, #16]
 8005dc8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005dca:	4b2f      	ldr	r3, [pc, #188]	; (8005e88 <HAL_GPIO_Init+0x2dc>)
 8005dcc:	685b      	ldr	r3, [r3, #4]
 8005dce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	43db      	mvns	r3, r3
 8005dd4:	693a      	ldr	r2, [r7, #16]
 8005dd6:	4013      	ands	r3, r2
 8005dd8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d003      	beq.n	8005dee <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8005de6:	693a      	ldr	r2, [r7, #16]
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	4313      	orrs	r3, r2
 8005dec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005dee:	4a26      	ldr	r2, [pc, #152]	; (8005e88 <HAL_GPIO_Init+0x2dc>)
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005df4:	4b24      	ldr	r3, [pc, #144]	; (8005e88 <HAL_GPIO_Init+0x2dc>)
 8005df6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005dfa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	43db      	mvns	r3, r3
 8005e00:	693a      	ldr	r2, [r7, #16]
 8005e02:	4013      	ands	r3, r2
 8005e04:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d003      	beq.n	8005e1a <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8005e12:	693a      	ldr	r2, [r7, #16]
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	4313      	orrs	r3, r2
 8005e18:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005e1a:	4a1b      	ldr	r2, [pc, #108]	; (8005e88 <HAL_GPIO_Init+0x2dc>)
 8005e1c:	693b      	ldr	r3, [r7, #16]
 8005e1e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8005e22:	4b19      	ldr	r3, [pc, #100]	; (8005e88 <HAL_GPIO_Init+0x2dc>)
 8005e24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	43db      	mvns	r3, r3
 8005e2e:	693a      	ldr	r2, [r7, #16]
 8005e30:	4013      	ands	r3, r2
 8005e32:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	685b      	ldr	r3, [r3, #4]
 8005e38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d003      	beq.n	8005e48 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8005e40:	693a      	ldr	r2, [r7, #16]
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	4313      	orrs	r3, r2
 8005e46:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005e48:	4a0f      	ldr	r2, [pc, #60]	; (8005e88 <HAL_GPIO_Init+0x2dc>)
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	3301      	adds	r3, #1
 8005e54:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	681a      	ldr	r2, [r3, #0]
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	fa22 f303 	lsr.w	r3, r2, r3
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	f47f aeab 	bne.w	8005bbc <HAL_GPIO_Init+0x10>
  }
}
 8005e66:	bf00      	nop
 8005e68:	bf00      	nop
 8005e6a:	371c      	adds	r7, #28
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e72:	4770      	bx	lr
 8005e74:	40010000 	.word	0x40010000
 8005e78:	48000400 	.word	0x48000400
 8005e7c:	48000800 	.word	0x48000800
 8005e80:	48000c00 	.word	0x48000c00
 8005e84:	48001000 	.word	0x48001000
 8005e88:	58000800 	.word	0x58000800

08005e8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b083      	sub	sp, #12
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
 8005e94:	460b      	mov	r3, r1
 8005e96:	807b      	strh	r3, [r7, #2]
 8005e98:	4613      	mov	r3, r2
 8005e9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005e9c:	787b      	ldrb	r3, [r7, #1]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d003      	beq.n	8005eaa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005ea2:	887a      	ldrh	r2, [r7, #2]
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005ea8:	e002      	b.n	8005eb0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005eaa:	887a      	ldrh	r2, [r7, #2]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005eb0:	bf00      	nop
 8005eb2:	370c      	adds	r7, #12
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eba:	4770      	bx	lr

08005ebc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b082      	sub	sp, #8
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005ec6:	4b08      	ldr	r3, [pc, #32]	; (8005ee8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005ec8:	68da      	ldr	r2, [r3, #12]
 8005eca:	88fb      	ldrh	r3, [r7, #6]
 8005ecc:	4013      	ands	r3, r2
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d006      	beq.n	8005ee0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005ed2:	4a05      	ldr	r2, [pc, #20]	; (8005ee8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005ed4:	88fb      	ldrh	r3, [r7, #6]
 8005ed6:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005ed8:	88fb      	ldrh	r3, [r7, #6]
 8005eda:	4618      	mov	r0, r3
 8005edc:	f7fb fd11 	bl	8001902 <HAL_GPIO_EXTI_Callback>
  }
}
 8005ee0:	bf00      	nop
 8005ee2:	3708      	adds	r7, #8
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	bd80      	pop	{r7, pc}
 8005ee8:	58000800 	.word	0x58000800

08005eec <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b082      	sub	sp, #8
 8005ef0:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8005ef2:	4b0a      	ldr	r3, [pc, #40]	; (8005f1c <HAL_HSEM_IRQHandler+0x30>)
 8005ef4:	68db      	ldr	r3, [r3, #12]
 8005ef6:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8005ef8:	4b08      	ldr	r3, [pc, #32]	; (8005f1c <HAL_HSEM_IRQHandler+0x30>)
 8005efa:	681a      	ldr	r2, [r3, #0]
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	43db      	mvns	r3, r3
 8005f00:	4906      	ldr	r1, [pc, #24]	; (8005f1c <HAL_HSEM_IRQHandler+0x30>)
 8005f02:	4013      	ands	r3, r2
 8005f04:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8005f06:	4a05      	ldr	r2, [pc, #20]	; (8005f1c <HAL_HSEM_IRQHandler+0x30>)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8005f0c:	6878      	ldr	r0, [r7, #4]
 8005f0e:	f000 f807 	bl	8005f20 <HAL_HSEM_FreeCallback>
}
 8005f12:	bf00      	nop
 8005f14:	3708      	adds	r7, #8
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd80      	pop	{r7, pc}
 8005f1a:	bf00      	nop
 8005f1c:	58001500 	.word	0x58001500

08005f20 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8005f20:	b480      	push	{r7}
 8005f22:	b083      	sub	sp, #12
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8005f28:	bf00      	nop
 8005f2a:	370c      	adds	r7, #12
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f32:	4770      	bx	lr

08005f34 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b084      	sub	sp, #16
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d01e      	beq.n	8005f84 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8005f46:	4b13      	ldr	r3, [pc, #76]	; (8005f94 <HAL_IPCC_Init+0x60>)
 8005f48:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005f50:	b2db      	uxtb	r3, r3
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d102      	bne.n	8005f5c <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f7fc ff3e 	bl	8002dd8 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8005f5c:	68b8      	ldr	r0, [r7, #8]
 8005f5e:	f000 f85b 	bl	8006018 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f000 f82c 	bl	8005fcc <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2200      	movs	r2, #0
 8005f78:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2201      	movs	r2, #1
 8005f7e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8005f82:	e001      	b.n	8005f88 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8005f84:	2301      	movs	r3, #1
 8005f86:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8005f88:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	3710      	adds	r7, #16
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bd80      	pop	{r7, pc}
 8005f92:	bf00      	nop
 8005f94:	58000c00 	.word	0x58000c00

08005f98 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8005f98:	b480      	push	{r7}
 8005f9a:	b085      	sub	sp, #20
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	60f8      	str	r0, [r7, #12]
 8005fa0:	60b9      	str	r1, [r7, #8]
 8005fa2:	4613      	mov	r3, r2
 8005fa4:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8005fa6:	bf00      	nop
 8005fa8:	3714      	adds	r7, #20
 8005faa:	46bd      	mov	sp, r7
 8005fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb0:	4770      	bx	lr

08005fb2 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8005fb2:	b480      	push	{r7}
 8005fb4:	b085      	sub	sp, #20
 8005fb6:	af00      	add	r7, sp, #0
 8005fb8:	60f8      	str	r0, [r7, #12]
 8005fba:	60b9      	str	r1, [r7, #8]
 8005fbc:	4613      	mov	r3, r2
 8005fbe:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8005fc0:	bf00      	nop
 8005fc2:	3714      	adds	r7, #20
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fca:	4770      	bx	lr

08005fcc <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8005fcc:	b480      	push	{r7}
 8005fce:	b085      	sub	sp, #20
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	60fb      	str	r3, [r7, #12]
 8005fd8:	e00f      	b.n	8005ffa <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8005fda:	687a      	ldr	r2, [r7, #4]
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	009b      	lsls	r3, r3, #2
 8005fe0:	4413      	add	r3, r2
 8005fe2:	4a0b      	ldr	r2, [pc, #44]	; (8006010 <IPCC_SetDefaultCallbacks+0x44>)
 8005fe4:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8005fe6:	687a      	ldr	r2, [r7, #4]
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	3306      	adds	r3, #6
 8005fec:	009b      	lsls	r3, r3, #2
 8005fee:	4413      	add	r3, r2
 8005ff0:	4a08      	ldr	r2, [pc, #32]	; (8006014 <IPCC_SetDefaultCallbacks+0x48>)
 8005ff2:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	3301      	adds	r3, #1
 8005ff8:	60fb      	str	r3, [r7, #12]
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	2b05      	cmp	r3, #5
 8005ffe:	d9ec      	bls.n	8005fda <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8006000:	bf00      	nop
 8006002:	bf00      	nop
 8006004:	3714      	adds	r7, #20
 8006006:	46bd      	mov	sp, r7
 8006008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600c:	4770      	bx	lr
 800600e:	bf00      	nop
 8006010:	08005f99 	.word	0x08005f99
 8006014:	08005fb3 	.word	0x08005fb3

08006018 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8006018:	b480      	push	{r7}
 800601a:	b083      	sub	sp, #12
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2200      	movs	r2, #0
 8006024:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 800602c:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	223f      	movs	r2, #63	; 0x3f
 8006032:	609a      	str	r2, [r3, #8]
}
 8006034:	bf00      	nop
 8006036:	370c      	adds	r7, #12
 8006038:	46bd      	mov	sp, r7
 800603a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603e:	4770      	bx	lr

08006040 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006040:	b480      	push	{r7}
 8006042:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006044:	4b05      	ldr	r3, [pc, #20]	; (800605c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a04      	ldr	r2, [pc, #16]	; (800605c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800604a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800604e:	6013      	str	r3, [r2, #0]
}
 8006050:	bf00      	nop
 8006052:	46bd      	mov	sp, r7
 8006054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006058:	4770      	bx	lr
 800605a:	bf00      	nop
 800605c:	58000400 	.word	0x58000400

08006060 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006060:	b480      	push	{r7}
 8006062:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8006064:	4b04      	ldr	r3, [pc, #16]	; (8006078 <HAL_PWREx_GetVoltageRange+0x18>)
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 800606c:	4618      	mov	r0, r3
 800606e:	46bd      	mov	sp, r7
 8006070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006074:	4770      	bx	lr
 8006076:	bf00      	nop
 8006078:	58000400 	.word	0x58000400

0800607c <LL_RCC_HSE_IsEnabledDiv2>:
{
 800607c:	b480      	push	{r7}
 800607e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8006080:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800608a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800608e:	d101      	bne.n	8006094 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8006090:	2301      	movs	r3, #1
 8006092:	e000      	b.n	8006096 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8006094:	2300      	movs	r3, #0
}
 8006096:	4618      	mov	r0, r3
 8006098:	46bd      	mov	sp, r7
 800609a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609e:	4770      	bx	lr

080060a0 <LL_RCC_HSE_Enable>:
{
 80060a0:	b480      	push	{r7}
 80060a2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80060a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80060ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80060b2:	6013      	str	r3, [r2, #0]
}
 80060b4:	bf00      	nop
 80060b6:	46bd      	mov	sp, r7
 80060b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060bc:	4770      	bx	lr

080060be <LL_RCC_HSE_Disable>:
{
 80060be:	b480      	push	{r7}
 80060c0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80060c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80060cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80060d0:	6013      	str	r3, [r2, #0]
}
 80060d2:	bf00      	nop
 80060d4:	46bd      	mov	sp, r7
 80060d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060da:	4770      	bx	lr

080060dc <LL_RCC_HSE_IsReady>:
{
 80060dc:	b480      	push	{r7}
 80060de:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80060e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80060ee:	d101      	bne.n	80060f4 <LL_RCC_HSE_IsReady+0x18>
 80060f0:	2301      	movs	r3, #1
 80060f2:	e000      	b.n	80060f6 <LL_RCC_HSE_IsReady+0x1a>
 80060f4:	2300      	movs	r3, #0
}
 80060f6:	4618      	mov	r0, r3
 80060f8:	46bd      	mov	sp, r7
 80060fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fe:	4770      	bx	lr

08006100 <LL_RCC_HSI_Enable>:
{
 8006100:	b480      	push	{r7}
 8006102:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8006104:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800610e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006112:	6013      	str	r3, [r2, #0]
}
 8006114:	bf00      	nop
 8006116:	46bd      	mov	sp, r7
 8006118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611c:	4770      	bx	lr

0800611e <LL_RCC_HSI_Disable>:
{
 800611e:	b480      	push	{r7}
 8006120:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8006122:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800612c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006130:	6013      	str	r3, [r2, #0]
}
 8006132:	bf00      	nop
 8006134:	46bd      	mov	sp, r7
 8006136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613a:	4770      	bx	lr

0800613c <LL_RCC_HSI_IsReady>:
{
 800613c:	b480      	push	{r7}
 800613e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8006140:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800614a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800614e:	d101      	bne.n	8006154 <LL_RCC_HSI_IsReady+0x18>
 8006150:	2301      	movs	r3, #1
 8006152:	e000      	b.n	8006156 <LL_RCC_HSI_IsReady+0x1a>
 8006154:	2300      	movs	r3, #0
}
 8006156:	4618      	mov	r0, r3
 8006158:	46bd      	mov	sp, r7
 800615a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615e:	4770      	bx	lr

08006160 <LL_RCC_HSI_SetCalibTrimming>:
{
 8006160:	b480      	push	{r7}
 8006162:	b083      	sub	sp, #12
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8006168:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800616c:	685b      	ldr	r3, [r3, #4]
 800616e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	061b      	lsls	r3, r3, #24
 8006176:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800617a:	4313      	orrs	r3, r2
 800617c:	604b      	str	r3, [r1, #4]
}
 800617e:	bf00      	nop
 8006180:	370c      	adds	r7, #12
 8006182:	46bd      	mov	sp, r7
 8006184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006188:	4770      	bx	lr

0800618a <LL_RCC_HSI48_Enable>:
{
 800618a:	b480      	push	{r7}
 800618c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800618e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006192:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006196:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800619a:	f043 0301 	orr.w	r3, r3, #1
 800619e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80061a2:	bf00      	nop
 80061a4:	46bd      	mov	sp, r7
 80061a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061aa:	4770      	bx	lr

080061ac <LL_RCC_HSI48_Disable>:
{
 80061ac:	b480      	push	{r7}
 80061ae:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80061b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80061b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80061bc:	f023 0301 	bic.w	r3, r3, #1
 80061c0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80061c4:	bf00      	nop
 80061c6:	46bd      	mov	sp, r7
 80061c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061cc:	4770      	bx	lr

080061ce <LL_RCC_HSI48_IsReady>:
{
 80061ce:	b480      	push	{r7}
 80061d0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80061d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80061da:	f003 0302 	and.w	r3, r3, #2
 80061de:	2b02      	cmp	r3, #2
 80061e0:	d101      	bne.n	80061e6 <LL_RCC_HSI48_IsReady+0x18>
 80061e2:	2301      	movs	r3, #1
 80061e4:	e000      	b.n	80061e8 <LL_RCC_HSI48_IsReady+0x1a>
 80061e6:	2300      	movs	r3, #0
}
 80061e8:	4618      	mov	r0, r3
 80061ea:	46bd      	mov	sp, r7
 80061ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f0:	4770      	bx	lr

080061f2 <LL_RCC_LSE_Enable>:
{
 80061f2:	b480      	push	{r7}
 80061f4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80061f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006202:	f043 0301 	orr.w	r3, r3, #1
 8006206:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800620a:	bf00      	nop
 800620c:	46bd      	mov	sp, r7
 800620e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006212:	4770      	bx	lr

08006214 <LL_RCC_LSE_Disable>:
{
 8006214:	b480      	push	{r7}
 8006216:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006218:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800621c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006220:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006224:	f023 0301 	bic.w	r3, r3, #1
 8006228:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800622c:	bf00      	nop
 800622e:	46bd      	mov	sp, r7
 8006230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006234:	4770      	bx	lr

08006236 <LL_RCC_LSE_EnableBypass>:
{
 8006236:	b480      	push	{r7}
 8006238:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800623a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800623e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006242:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006246:	f043 0304 	orr.w	r3, r3, #4
 800624a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800624e:	bf00      	nop
 8006250:	46bd      	mov	sp, r7
 8006252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006256:	4770      	bx	lr

08006258 <LL_RCC_LSE_DisableBypass>:
{
 8006258:	b480      	push	{r7}
 800625a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800625c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006260:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006264:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006268:	f023 0304 	bic.w	r3, r3, #4
 800626c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006270:	bf00      	nop
 8006272:	46bd      	mov	sp, r7
 8006274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006278:	4770      	bx	lr

0800627a <LL_RCC_LSE_IsReady>:
{
 800627a:	b480      	push	{r7}
 800627c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800627e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006282:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006286:	f003 0302 	and.w	r3, r3, #2
 800628a:	2b02      	cmp	r3, #2
 800628c:	d101      	bne.n	8006292 <LL_RCC_LSE_IsReady+0x18>
 800628e:	2301      	movs	r3, #1
 8006290:	e000      	b.n	8006294 <LL_RCC_LSE_IsReady+0x1a>
 8006292:	2300      	movs	r3, #0
}
 8006294:	4618      	mov	r0, r3
 8006296:	46bd      	mov	sp, r7
 8006298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629c:	4770      	bx	lr

0800629e <LL_RCC_LSI1_Enable>:
{
 800629e:	b480      	push	{r7}
 80062a0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80062a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80062aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80062ae:	f043 0301 	orr.w	r3, r3, #1
 80062b2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80062b6:	bf00      	nop
 80062b8:	46bd      	mov	sp, r7
 80062ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062be:	4770      	bx	lr

080062c0 <LL_RCC_LSI1_Disable>:
{
 80062c0:	b480      	push	{r7}
 80062c2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80062c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80062cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80062d0:	f023 0301 	bic.w	r3, r3, #1
 80062d4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80062d8:	bf00      	nop
 80062da:	46bd      	mov	sp, r7
 80062dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e0:	4770      	bx	lr

080062e2 <LL_RCC_LSI1_IsReady>:
{
 80062e2:	b480      	push	{r7}
 80062e4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80062e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80062ee:	f003 0302 	and.w	r3, r3, #2
 80062f2:	2b02      	cmp	r3, #2
 80062f4:	d101      	bne.n	80062fa <LL_RCC_LSI1_IsReady+0x18>
 80062f6:	2301      	movs	r3, #1
 80062f8:	e000      	b.n	80062fc <LL_RCC_LSI1_IsReady+0x1a>
 80062fa:	2300      	movs	r3, #0
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	46bd      	mov	sp, r7
 8006300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006304:	4770      	bx	lr

08006306 <LL_RCC_LSI2_Enable>:
{
 8006306:	b480      	push	{r7}
 8006308:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800630a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800630e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006312:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006316:	f043 0304 	orr.w	r3, r3, #4
 800631a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800631e:	bf00      	nop
 8006320:	46bd      	mov	sp, r7
 8006322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006326:	4770      	bx	lr

08006328 <LL_RCC_LSI2_Disable>:
{
 8006328:	b480      	push	{r7}
 800632a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800632c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006330:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006334:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006338:	f023 0304 	bic.w	r3, r3, #4
 800633c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8006340:	bf00      	nop
 8006342:	46bd      	mov	sp, r7
 8006344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006348:	4770      	bx	lr

0800634a <LL_RCC_LSI2_IsReady>:
{
 800634a:	b480      	push	{r7}
 800634c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800634e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006352:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006356:	f003 0308 	and.w	r3, r3, #8
 800635a:	2b08      	cmp	r3, #8
 800635c:	d101      	bne.n	8006362 <LL_RCC_LSI2_IsReady+0x18>
 800635e:	2301      	movs	r3, #1
 8006360:	e000      	b.n	8006364 <LL_RCC_LSI2_IsReady+0x1a>
 8006362:	2300      	movs	r3, #0
}
 8006364:	4618      	mov	r0, r3
 8006366:	46bd      	mov	sp, r7
 8006368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636c:	4770      	bx	lr

0800636e <LL_RCC_LSI2_SetTrimming>:
{
 800636e:	b480      	push	{r7}
 8006370:	b083      	sub	sp, #12
 8006372:	af00      	add	r7, sp, #0
 8006374:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8006376:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800637a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800637e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	021b      	lsls	r3, r3, #8
 8006386:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800638a:	4313      	orrs	r3, r2
 800638c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8006390:	bf00      	nop
 8006392:	370c      	adds	r7, #12
 8006394:	46bd      	mov	sp, r7
 8006396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639a:	4770      	bx	lr

0800639c <LL_RCC_MSI_Enable>:
{
 800639c:	b480      	push	{r7}
 800639e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80063a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80063aa:	f043 0301 	orr.w	r3, r3, #1
 80063ae:	6013      	str	r3, [r2, #0]
}
 80063b0:	bf00      	nop
 80063b2:	46bd      	mov	sp, r7
 80063b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b8:	4770      	bx	lr

080063ba <LL_RCC_MSI_Disable>:
{
 80063ba:	b480      	push	{r7}
 80063bc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80063be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80063c8:	f023 0301 	bic.w	r3, r3, #1
 80063cc:	6013      	str	r3, [r2, #0]
}
 80063ce:	bf00      	nop
 80063d0:	46bd      	mov	sp, r7
 80063d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d6:	4770      	bx	lr

080063d8 <LL_RCC_MSI_IsReady>:
{
 80063d8:	b480      	push	{r7}
 80063da:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80063dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f003 0302 	and.w	r3, r3, #2
 80063e6:	2b02      	cmp	r3, #2
 80063e8:	d101      	bne.n	80063ee <LL_RCC_MSI_IsReady+0x16>
 80063ea:	2301      	movs	r3, #1
 80063ec:	e000      	b.n	80063f0 <LL_RCC_MSI_IsReady+0x18>
 80063ee:	2300      	movs	r3, #0
}
 80063f0:	4618      	mov	r0, r3
 80063f2:	46bd      	mov	sp, r7
 80063f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f8:	4770      	bx	lr

080063fa <LL_RCC_MSI_SetRange>:
{
 80063fa:	b480      	push	{r7}
 80063fc:	b083      	sub	sp, #12
 80063fe:	af00      	add	r7, sp, #0
 8006400:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8006402:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800640c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	4313      	orrs	r3, r2
 8006414:	600b      	str	r3, [r1, #0]
}
 8006416:	bf00      	nop
 8006418:	370c      	adds	r7, #12
 800641a:	46bd      	mov	sp, r7
 800641c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006420:	4770      	bx	lr

08006422 <LL_RCC_MSI_GetRange>:
{
 8006422:	b480      	push	{r7}
 8006424:	b083      	sub	sp, #12
 8006426:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8006428:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006432:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2bb0      	cmp	r3, #176	; 0xb0
 8006438:	d901      	bls.n	800643e <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 800643a:	23b0      	movs	r3, #176	; 0xb0
 800643c:	607b      	str	r3, [r7, #4]
  return msiRange;
 800643e:	687b      	ldr	r3, [r7, #4]
}
 8006440:	4618      	mov	r0, r3
 8006442:	370c      	adds	r7, #12
 8006444:	46bd      	mov	sp, r7
 8006446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644a:	4770      	bx	lr

0800644c <LL_RCC_MSI_SetCalibTrimming>:
{
 800644c:	b480      	push	{r7}
 800644e:	b083      	sub	sp, #12
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8006454:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006458:	685b      	ldr	r3, [r3, #4]
 800645a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	021b      	lsls	r3, r3, #8
 8006462:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006466:	4313      	orrs	r3, r2
 8006468:	604b      	str	r3, [r1, #4]
}
 800646a:	bf00      	nop
 800646c:	370c      	adds	r7, #12
 800646e:	46bd      	mov	sp, r7
 8006470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006474:	4770      	bx	lr

08006476 <LL_RCC_SetSysClkSource>:
{
 8006476:	b480      	push	{r7}
 8006478:	b083      	sub	sp, #12
 800647a:	af00      	add	r7, sp, #0
 800647c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800647e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006482:	689b      	ldr	r3, [r3, #8]
 8006484:	f023 0203 	bic.w	r2, r3, #3
 8006488:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	4313      	orrs	r3, r2
 8006490:	608b      	str	r3, [r1, #8]
}
 8006492:	bf00      	nop
 8006494:	370c      	adds	r7, #12
 8006496:	46bd      	mov	sp, r7
 8006498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649c:	4770      	bx	lr

0800649e <LL_RCC_GetSysClkSource>:
{
 800649e:	b480      	push	{r7}
 80064a0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80064a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064a6:	689b      	ldr	r3, [r3, #8]
 80064a8:	f003 030c 	and.w	r3, r3, #12
}
 80064ac:	4618      	mov	r0, r3
 80064ae:	46bd      	mov	sp, r7
 80064b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b4:	4770      	bx	lr

080064b6 <LL_RCC_SetAHBPrescaler>:
{
 80064b6:	b480      	push	{r7}
 80064b8:	b083      	sub	sp, #12
 80064ba:	af00      	add	r7, sp, #0
 80064bc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80064be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064c2:	689b      	ldr	r3, [r3, #8]
 80064c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80064c8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	4313      	orrs	r3, r2
 80064d0:	608b      	str	r3, [r1, #8]
}
 80064d2:	bf00      	nop
 80064d4:	370c      	adds	r7, #12
 80064d6:	46bd      	mov	sp, r7
 80064d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064dc:	4770      	bx	lr

080064de <LL_C2_RCC_SetAHBPrescaler>:
{
 80064de:	b480      	push	{r7}
 80064e0:	b083      	sub	sp, #12
 80064e2:	af00      	add	r7, sp, #0
 80064e4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80064e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064ea:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80064ee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80064f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	4313      	orrs	r3, r2
 80064fa:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80064fe:	bf00      	nop
 8006500:	370c      	adds	r7, #12
 8006502:	46bd      	mov	sp, r7
 8006504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006508:	4770      	bx	lr

0800650a <LL_RCC_SetAHB4Prescaler>:
{
 800650a:	b480      	push	{r7}
 800650c:	b083      	sub	sp, #12
 800650e:	af00      	add	r7, sp, #0
 8006510:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8006512:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006516:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800651a:	f023 020f 	bic.w	r2, r3, #15
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	091b      	lsrs	r3, r3, #4
 8006522:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006526:	4313      	orrs	r3, r2
 8006528:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800652c:	bf00      	nop
 800652e:	370c      	adds	r7, #12
 8006530:	46bd      	mov	sp, r7
 8006532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006536:	4770      	bx	lr

08006538 <LL_RCC_SetAPB1Prescaler>:
{
 8006538:	b480      	push	{r7}
 800653a:	b083      	sub	sp, #12
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8006540:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006544:	689b      	ldr	r3, [r3, #8]
 8006546:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800654a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	4313      	orrs	r3, r2
 8006552:	608b      	str	r3, [r1, #8]
}
 8006554:	bf00      	nop
 8006556:	370c      	adds	r7, #12
 8006558:	46bd      	mov	sp, r7
 800655a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655e:	4770      	bx	lr

08006560 <LL_RCC_SetAPB2Prescaler>:
{
 8006560:	b480      	push	{r7}
 8006562:	b083      	sub	sp, #12
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8006568:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800656c:	689b      	ldr	r3, [r3, #8]
 800656e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006572:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	4313      	orrs	r3, r2
 800657a:	608b      	str	r3, [r1, #8]
}
 800657c:	bf00      	nop
 800657e:	370c      	adds	r7, #12
 8006580:	46bd      	mov	sp, r7
 8006582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006586:	4770      	bx	lr

08006588 <LL_RCC_GetAHBPrescaler>:
{
 8006588:	b480      	push	{r7}
 800658a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800658c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006590:	689b      	ldr	r3, [r3, #8]
 8006592:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8006596:	4618      	mov	r0, r3
 8006598:	46bd      	mov	sp, r7
 800659a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659e:	4770      	bx	lr

080065a0 <LL_RCC_GetAHB4Prescaler>:
{
 80065a0:	b480      	push	{r7}
 80065a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80065a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80065a8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80065ac:	011b      	lsls	r3, r3, #4
 80065ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80065b2:	4618      	mov	r0, r3
 80065b4:	46bd      	mov	sp, r7
 80065b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ba:	4770      	bx	lr

080065bc <LL_RCC_GetAPB1Prescaler>:
{
 80065bc:	b480      	push	{r7}
 80065be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80065c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80065c4:	689b      	ldr	r3, [r3, #8]
 80065c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80065ca:	4618      	mov	r0, r3
 80065cc:	46bd      	mov	sp, r7
 80065ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d2:	4770      	bx	lr

080065d4 <LL_RCC_GetAPB2Prescaler>:
{
 80065d4:	b480      	push	{r7}
 80065d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80065d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80065dc:	689b      	ldr	r3, [r3, #8]
 80065de:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80065e2:	4618      	mov	r0, r3
 80065e4:	46bd      	mov	sp, r7
 80065e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ea:	4770      	bx	lr

080065ec <LL_RCC_PLL_Enable>:
{
 80065ec:	b480      	push	{r7}
 80065ee:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80065f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80065fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80065fe:	6013      	str	r3, [r2, #0]
}
 8006600:	bf00      	nop
 8006602:	46bd      	mov	sp, r7
 8006604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006608:	4770      	bx	lr

0800660a <LL_RCC_PLL_Disable>:
{
 800660a:	b480      	push	{r7}
 800660c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800660e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006618:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800661c:	6013      	str	r3, [r2, #0]
}
 800661e:	bf00      	nop
 8006620:	46bd      	mov	sp, r7
 8006622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006626:	4770      	bx	lr

08006628 <LL_RCC_PLL_IsReady>:
{
 8006628:	b480      	push	{r7}
 800662a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800662c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006636:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800663a:	d101      	bne.n	8006640 <LL_RCC_PLL_IsReady+0x18>
 800663c:	2301      	movs	r3, #1
 800663e:	e000      	b.n	8006642 <LL_RCC_PLL_IsReady+0x1a>
 8006640:	2300      	movs	r3, #0
}
 8006642:	4618      	mov	r0, r3
 8006644:	46bd      	mov	sp, r7
 8006646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664a:	4770      	bx	lr

0800664c <LL_RCC_PLL_GetN>:
{
 800664c:	b480      	push	{r7}
 800664e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8006650:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006654:	68db      	ldr	r3, [r3, #12]
 8006656:	0a1b      	lsrs	r3, r3, #8
 8006658:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 800665c:	4618      	mov	r0, r3
 800665e:	46bd      	mov	sp, r7
 8006660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006664:	4770      	bx	lr

08006666 <LL_RCC_PLL_GetR>:
{
 8006666:	b480      	push	{r7}
 8006668:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800666a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800666e:	68db      	ldr	r3, [r3, #12]
 8006670:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8006674:	4618      	mov	r0, r3
 8006676:	46bd      	mov	sp, r7
 8006678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667c:	4770      	bx	lr

0800667e <LL_RCC_PLL_GetDivider>:
{
 800667e:	b480      	push	{r7}
 8006680:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8006682:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006686:	68db      	ldr	r3, [r3, #12]
 8006688:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 800668c:	4618      	mov	r0, r3
 800668e:	46bd      	mov	sp, r7
 8006690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006694:	4770      	bx	lr

08006696 <LL_RCC_PLL_GetMainSource>:
{
 8006696:	b480      	push	{r7}
 8006698:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800669a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800669e:	68db      	ldr	r3, [r3, #12]
 80066a0:	f003 0303 	and.w	r3, r3, #3
}
 80066a4:	4618      	mov	r0, r3
 80066a6:	46bd      	mov	sp, r7
 80066a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ac:	4770      	bx	lr

080066ae <LL_RCC_IsActiveFlag_HPRE>:
{
 80066ae:	b480      	push	{r7}
 80066b0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80066b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066b6:	689b      	ldr	r3, [r3, #8]
 80066b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80066bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066c0:	d101      	bne.n	80066c6 <LL_RCC_IsActiveFlag_HPRE+0x18>
 80066c2:	2301      	movs	r3, #1
 80066c4:	e000      	b.n	80066c8 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80066c6:	2300      	movs	r3, #0
}
 80066c8:	4618      	mov	r0, r3
 80066ca:	46bd      	mov	sp, r7
 80066cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d0:	4770      	bx	lr

080066d2 <LL_RCC_IsActiveFlag_C2HPRE>:
{
 80066d2:	b480      	push	{r7}
 80066d4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80066d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066da:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80066de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80066e6:	d101      	bne.n	80066ec <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80066e8:	2301      	movs	r3, #1
 80066ea:	e000      	b.n	80066ee <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80066ec:	2300      	movs	r3, #0
}
 80066ee:	4618      	mov	r0, r3
 80066f0:	46bd      	mov	sp, r7
 80066f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f6:	4770      	bx	lr

080066f8 <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 80066f8:	b480      	push	{r7}
 80066fa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80066fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006700:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006704:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006708:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800670c:	d101      	bne.n	8006712 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800670e:	2301      	movs	r3, #1
 8006710:	e000      	b.n	8006714 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8006712:	2300      	movs	r3, #0
}
 8006714:	4618      	mov	r0, r3
 8006716:	46bd      	mov	sp, r7
 8006718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671c:	4770      	bx	lr

0800671e <LL_RCC_IsActiveFlag_PPRE1>:
{
 800671e:	b480      	push	{r7}
 8006720:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8006722:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006726:	689b      	ldr	r3, [r3, #8]
 8006728:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800672c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006730:	d101      	bne.n	8006736 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8006732:	2301      	movs	r3, #1
 8006734:	e000      	b.n	8006738 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8006736:	2300      	movs	r3, #0
}
 8006738:	4618      	mov	r0, r3
 800673a:	46bd      	mov	sp, r7
 800673c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006740:	4770      	bx	lr

08006742 <LL_RCC_IsActiveFlag_PPRE2>:
{
 8006742:	b480      	push	{r7}
 8006744:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8006746:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800674a:	689b      	ldr	r3, [r3, #8]
 800674c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006750:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006754:	d101      	bne.n	800675a <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8006756:	2301      	movs	r3, #1
 8006758:	e000      	b.n	800675c <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800675a:	2300      	movs	r3, #0
}
 800675c:	4618      	mov	r0, r3
 800675e:	46bd      	mov	sp, r7
 8006760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006764:	4770      	bx	lr
	...

08006768 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006768:	b590      	push	{r4, r7, lr}
 800676a:	b08d      	sub	sp, #52	; 0x34
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d101      	bne.n	800677a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006776:	2301      	movs	r3, #1
 8006778:	e363      	b.n	8006e42 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f003 0320 	and.w	r3, r3, #32
 8006782:	2b00      	cmp	r3, #0
 8006784:	f000 808d 	beq.w	80068a2 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006788:	f7ff fe89 	bl	800649e <LL_RCC_GetSysClkSource>
 800678c:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800678e:	f7ff ff82 	bl	8006696 <LL_RCC_PLL_GetMainSource>
 8006792:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8006794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006796:	2b00      	cmp	r3, #0
 8006798:	d005      	beq.n	80067a6 <HAL_RCC_OscConfig+0x3e>
 800679a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800679c:	2b0c      	cmp	r3, #12
 800679e:	d147      	bne.n	8006830 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80067a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067a2:	2b01      	cmp	r3, #1
 80067a4:	d144      	bne.n	8006830 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	69db      	ldr	r3, [r3, #28]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d101      	bne.n	80067b2 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80067ae:	2301      	movs	r3, #1
 80067b0:	e347      	b.n	8006e42 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80067b6:	f7ff fe34 	bl	8006422 <LL_RCC_MSI_GetRange>
 80067ba:	4603      	mov	r3, r0
 80067bc:	429c      	cmp	r4, r3
 80067be:	d914      	bls.n	80067ea <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067c4:	4618      	mov	r0, r3
 80067c6:	f000 fd2f 	bl	8007228 <RCC_SetFlashLatencyFromMSIRange>
 80067ca:	4603      	mov	r3, r0
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d001      	beq.n	80067d4 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 80067d0:	2301      	movs	r3, #1
 80067d2:	e336      	b.n	8006e42 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067d8:	4618      	mov	r0, r3
 80067da:	f7ff fe0e 	bl	80063fa <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6a1b      	ldr	r3, [r3, #32]
 80067e2:	4618      	mov	r0, r3
 80067e4:	f7ff fe32 	bl	800644c <LL_RCC_MSI_SetCalibTrimming>
 80067e8:	e013      	b.n	8006812 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ee:	4618      	mov	r0, r3
 80067f0:	f7ff fe03 	bl	80063fa <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6a1b      	ldr	r3, [r3, #32]
 80067f8:	4618      	mov	r0, r3
 80067fa:	f7ff fe27 	bl	800644c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006802:	4618      	mov	r0, r3
 8006804:	f000 fd10 	bl	8007228 <RCC_SetFlashLatencyFromMSIRange>
 8006808:	4603      	mov	r3, r0
 800680a:	2b00      	cmp	r3, #0
 800680c:	d001      	beq.n	8006812 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800680e:	2301      	movs	r3, #1
 8006810:	e317      	b.n	8006e42 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8006812:	f000 fcc9 	bl	80071a8 <HAL_RCC_GetHCLKFreq>
 8006816:	4603      	mov	r3, r0
 8006818:	4aa4      	ldr	r2, [pc, #656]	; (8006aac <HAL_RCC_OscConfig+0x344>)
 800681a:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800681c:	4ba4      	ldr	r3, [pc, #656]	; (8006ab0 <HAL_RCC_OscConfig+0x348>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4618      	mov	r0, r3
 8006822:	f7fe fc17 	bl	8005054 <HAL_InitTick>
 8006826:	4603      	mov	r3, r0
 8006828:	2b00      	cmp	r3, #0
 800682a:	d039      	beq.n	80068a0 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 800682c:	2301      	movs	r3, #1
 800682e:	e308      	b.n	8006e42 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	69db      	ldr	r3, [r3, #28]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d01e      	beq.n	8006876 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006838:	f7ff fdb0 	bl	800639c <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800683c:	f7fe fc58 	bl	80050f0 <HAL_GetTick>
 8006840:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8006842:	e008      	b.n	8006856 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006844:	f7fe fc54 	bl	80050f0 <HAL_GetTick>
 8006848:	4602      	mov	r2, r0
 800684a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800684c:	1ad3      	subs	r3, r2, r3
 800684e:	2b02      	cmp	r3, #2
 8006850:	d901      	bls.n	8006856 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8006852:	2303      	movs	r3, #3
 8006854:	e2f5      	b.n	8006e42 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8006856:	f7ff fdbf 	bl	80063d8 <LL_RCC_MSI_IsReady>
 800685a:	4603      	mov	r3, r0
 800685c:	2b00      	cmp	r3, #0
 800685e:	d0f1      	beq.n	8006844 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006864:	4618      	mov	r0, r3
 8006866:	f7ff fdc8 	bl	80063fa <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6a1b      	ldr	r3, [r3, #32]
 800686e:	4618      	mov	r0, r3
 8006870:	f7ff fdec 	bl	800644c <LL_RCC_MSI_SetCalibTrimming>
 8006874:	e015      	b.n	80068a2 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006876:	f7ff fda0 	bl	80063ba <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800687a:	f7fe fc39 	bl	80050f0 <HAL_GetTick>
 800687e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8006880:	e008      	b.n	8006894 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006882:	f7fe fc35 	bl	80050f0 <HAL_GetTick>
 8006886:	4602      	mov	r2, r0
 8006888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800688a:	1ad3      	subs	r3, r2, r3
 800688c:	2b02      	cmp	r3, #2
 800688e:	d901      	bls.n	8006894 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8006890:	2303      	movs	r3, #3
 8006892:	e2d6      	b.n	8006e42 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8006894:	f7ff fda0 	bl	80063d8 <LL_RCC_MSI_IsReady>
 8006898:	4603      	mov	r3, r0
 800689a:	2b00      	cmp	r3, #0
 800689c:	d1f1      	bne.n	8006882 <HAL_RCC_OscConfig+0x11a>
 800689e:	e000      	b.n	80068a2 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80068a0:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f003 0301 	and.w	r3, r3, #1
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d047      	beq.n	800693e <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80068ae:	f7ff fdf6 	bl	800649e <LL_RCC_GetSysClkSource>
 80068b2:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80068b4:	f7ff feef 	bl	8006696 <LL_RCC_PLL_GetMainSource>
 80068b8:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80068ba:	6a3b      	ldr	r3, [r7, #32]
 80068bc:	2b08      	cmp	r3, #8
 80068be:	d005      	beq.n	80068cc <HAL_RCC_OscConfig+0x164>
 80068c0:	6a3b      	ldr	r3, [r7, #32]
 80068c2:	2b0c      	cmp	r3, #12
 80068c4:	d108      	bne.n	80068d8 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80068c6:	69fb      	ldr	r3, [r7, #28]
 80068c8:	2b03      	cmp	r3, #3
 80068ca:	d105      	bne.n	80068d8 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	685b      	ldr	r3, [r3, #4]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d134      	bne.n	800693e <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 80068d4:	2301      	movs	r3, #1
 80068d6:	e2b4      	b.n	8006e42 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	685b      	ldr	r3, [r3, #4]
 80068dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068e0:	d102      	bne.n	80068e8 <HAL_RCC_OscConfig+0x180>
 80068e2:	f7ff fbdd 	bl	80060a0 <LL_RCC_HSE_Enable>
 80068e6:	e001      	b.n	80068ec <HAL_RCC_OscConfig+0x184>
 80068e8:	f7ff fbe9 	bl	80060be <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	685b      	ldr	r3, [r3, #4]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d012      	beq.n	800691a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068f4:	f7fe fbfc 	bl	80050f0 <HAL_GetTick>
 80068f8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80068fa:	e008      	b.n	800690e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80068fc:	f7fe fbf8 	bl	80050f0 <HAL_GetTick>
 8006900:	4602      	mov	r2, r0
 8006902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006904:	1ad3      	subs	r3, r2, r3
 8006906:	2b64      	cmp	r3, #100	; 0x64
 8006908:	d901      	bls.n	800690e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800690a:	2303      	movs	r3, #3
 800690c:	e299      	b.n	8006e42 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800690e:	f7ff fbe5 	bl	80060dc <LL_RCC_HSE_IsReady>
 8006912:	4603      	mov	r3, r0
 8006914:	2b00      	cmp	r3, #0
 8006916:	d0f1      	beq.n	80068fc <HAL_RCC_OscConfig+0x194>
 8006918:	e011      	b.n	800693e <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800691a:	f7fe fbe9 	bl	80050f0 <HAL_GetTick>
 800691e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8006920:	e008      	b.n	8006934 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006922:	f7fe fbe5 	bl	80050f0 <HAL_GetTick>
 8006926:	4602      	mov	r2, r0
 8006928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800692a:	1ad3      	subs	r3, r2, r3
 800692c:	2b64      	cmp	r3, #100	; 0x64
 800692e:	d901      	bls.n	8006934 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8006930:	2303      	movs	r3, #3
 8006932:	e286      	b.n	8006e42 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8006934:	f7ff fbd2 	bl	80060dc <LL_RCC_HSE_IsReady>
 8006938:	4603      	mov	r3, r0
 800693a:	2b00      	cmp	r3, #0
 800693c:	d1f1      	bne.n	8006922 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f003 0302 	and.w	r3, r3, #2
 8006946:	2b00      	cmp	r3, #0
 8006948:	d04c      	beq.n	80069e4 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800694a:	f7ff fda8 	bl	800649e <LL_RCC_GetSysClkSource>
 800694e:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006950:	f7ff fea1 	bl	8006696 <LL_RCC_PLL_GetMainSource>
 8006954:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8006956:	69bb      	ldr	r3, [r7, #24]
 8006958:	2b04      	cmp	r3, #4
 800695a:	d005      	beq.n	8006968 <HAL_RCC_OscConfig+0x200>
 800695c:	69bb      	ldr	r3, [r7, #24]
 800695e:	2b0c      	cmp	r3, #12
 8006960:	d10e      	bne.n	8006980 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	2b02      	cmp	r3, #2
 8006966:	d10b      	bne.n	8006980 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	68db      	ldr	r3, [r3, #12]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d101      	bne.n	8006974 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8006970:	2301      	movs	r3, #1
 8006972:	e266      	b.n	8006e42 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	691b      	ldr	r3, [r3, #16]
 8006978:	4618      	mov	r0, r3
 800697a:	f7ff fbf1 	bl	8006160 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800697e:	e031      	b.n	80069e4 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	68db      	ldr	r3, [r3, #12]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d019      	beq.n	80069bc <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006988:	f7ff fbba 	bl	8006100 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800698c:	f7fe fbb0 	bl	80050f0 <HAL_GetTick>
 8006990:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8006992:	e008      	b.n	80069a6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006994:	f7fe fbac 	bl	80050f0 <HAL_GetTick>
 8006998:	4602      	mov	r2, r0
 800699a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800699c:	1ad3      	subs	r3, r2, r3
 800699e:	2b02      	cmp	r3, #2
 80069a0:	d901      	bls.n	80069a6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80069a2:	2303      	movs	r3, #3
 80069a4:	e24d      	b.n	8006e42 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 80069a6:	f7ff fbc9 	bl	800613c <LL_RCC_HSI_IsReady>
 80069aa:	4603      	mov	r3, r0
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d0f1      	beq.n	8006994 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	691b      	ldr	r3, [r3, #16]
 80069b4:	4618      	mov	r0, r3
 80069b6:	f7ff fbd3 	bl	8006160 <LL_RCC_HSI_SetCalibTrimming>
 80069ba:	e013      	b.n	80069e4 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80069bc:	f7ff fbaf 	bl	800611e <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069c0:	f7fe fb96 	bl	80050f0 <HAL_GetTick>
 80069c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80069c6:	e008      	b.n	80069da <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80069c8:	f7fe fb92 	bl	80050f0 <HAL_GetTick>
 80069cc:	4602      	mov	r2, r0
 80069ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069d0:	1ad3      	subs	r3, r2, r3
 80069d2:	2b02      	cmp	r3, #2
 80069d4:	d901      	bls.n	80069da <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80069d6:	2303      	movs	r3, #3
 80069d8:	e233      	b.n	8006e42 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 80069da:	f7ff fbaf 	bl	800613c <LL_RCC_HSI_IsReady>
 80069de:	4603      	mov	r3, r0
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d1f1      	bne.n	80069c8 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f003 0308 	and.w	r3, r3, #8
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d106      	bne.n	80069fe <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	f000 80a3 	beq.w	8006b44 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	695b      	ldr	r3, [r3, #20]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d076      	beq.n	8006af4 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f003 0310 	and.w	r3, r3, #16
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d046      	beq.n	8006aa0 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8006a12:	f7ff fc66 	bl	80062e2 <LL_RCC_LSI1_IsReady>
 8006a16:	4603      	mov	r3, r0
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d113      	bne.n	8006a44 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8006a1c:	f7ff fc3f 	bl	800629e <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006a20:	f7fe fb66 	bl	80050f0 <HAL_GetTick>
 8006a24:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8006a26:	e008      	b.n	8006a3a <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8006a28:	f7fe fb62 	bl	80050f0 <HAL_GetTick>
 8006a2c:	4602      	mov	r2, r0
 8006a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a30:	1ad3      	subs	r3, r2, r3
 8006a32:	2b02      	cmp	r3, #2
 8006a34:	d901      	bls.n	8006a3a <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8006a36:	2303      	movs	r3, #3
 8006a38:	e203      	b.n	8006e42 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8006a3a:	f7ff fc52 	bl	80062e2 <LL_RCC_LSI1_IsReady>
 8006a3e:	4603      	mov	r3, r0
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d0f1      	beq.n	8006a28 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8006a44:	f7ff fc5f 	bl	8006306 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a48:	f7fe fb52 	bl	80050f0 <HAL_GetTick>
 8006a4c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8006a4e:	e008      	b.n	8006a62 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8006a50:	f7fe fb4e 	bl	80050f0 <HAL_GetTick>
 8006a54:	4602      	mov	r2, r0
 8006a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a58:	1ad3      	subs	r3, r2, r3
 8006a5a:	2b03      	cmp	r3, #3
 8006a5c:	d901      	bls.n	8006a62 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8006a5e:	2303      	movs	r3, #3
 8006a60:	e1ef      	b.n	8006e42 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8006a62:	f7ff fc72 	bl	800634a <LL_RCC_LSI2_IsReady>
 8006a66:	4603      	mov	r3, r0
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d0f1      	beq.n	8006a50 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	699b      	ldr	r3, [r3, #24]
 8006a70:	4618      	mov	r0, r3
 8006a72:	f7ff fc7c 	bl	800636e <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8006a76:	f7ff fc23 	bl	80062c0 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a7a:	f7fe fb39 	bl	80050f0 <HAL_GetTick>
 8006a7e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8006a80:	e008      	b.n	8006a94 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8006a82:	f7fe fb35 	bl	80050f0 <HAL_GetTick>
 8006a86:	4602      	mov	r2, r0
 8006a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a8a:	1ad3      	subs	r3, r2, r3
 8006a8c:	2b02      	cmp	r3, #2
 8006a8e:	d901      	bls.n	8006a94 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8006a90:	2303      	movs	r3, #3
 8006a92:	e1d6      	b.n	8006e42 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8006a94:	f7ff fc25 	bl	80062e2 <LL_RCC_LSI1_IsReady>
 8006a98:	4603      	mov	r3, r0
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d1f1      	bne.n	8006a82 <HAL_RCC_OscConfig+0x31a>
 8006a9e:	e051      	b.n	8006b44 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8006aa0:	f7ff fbfd 	bl	800629e <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006aa4:	f7fe fb24 	bl	80050f0 <HAL_GetTick>
 8006aa8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8006aaa:	e00c      	b.n	8006ac6 <HAL_RCC_OscConfig+0x35e>
 8006aac:	20000044 	.word	0x20000044
 8006ab0:	20000048 	.word	0x20000048
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8006ab4:	f7fe fb1c 	bl	80050f0 <HAL_GetTick>
 8006ab8:	4602      	mov	r2, r0
 8006aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006abc:	1ad3      	subs	r3, r2, r3
 8006abe:	2b02      	cmp	r3, #2
 8006ac0:	d901      	bls.n	8006ac6 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8006ac2:	2303      	movs	r3, #3
 8006ac4:	e1bd      	b.n	8006e42 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8006ac6:	f7ff fc0c 	bl	80062e2 <LL_RCC_LSI1_IsReady>
 8006aca:	4603      	mov	r3, r0
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d0f1      	beq.n	8006ab4 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8006ad0:	f7ff fc2a 	bl	8006328 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8006ad4:	e008      	b.n	8006ae8 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8006ad6:	f7fe fb0b 	bl	80050f0 <HAL_GetTick>
 8006ada:	4602      	mov	r2, r0
 8006adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ade:	1ad3      	subs	r3, r2, r3
 8006ae0:	2b03      	cmp	r3, #3
 8006ae2:	d901      	bls.n	8006ae8 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8006ae4:	2303      	movs	r3, #3
 8006ae6:	e1ac      	b.n	8006e42 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8006ae8:	f7ff fc2f 	bl	800634a <LL_RCC_LSI2_IsReady>
 8006aec:	4603      	mov	r3, r0
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d1f1      	bne.n	8006ad6 <HAL_RCC_OscConfig+0x36e>
 8006af2:	e027      	b.n	8006b44 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8006af4:	f7ff fc18 	bl	8006328 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006af8:	f7fe fafa 	bl	80050f0 <HAL_GetTick>
 8006afc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8006afe:	e008      	b.n	8006b12 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8006b00:	f7fe faf6 	bl	80050f0 <HAL_GetTick>
 8006b04:	4602      	mov	r2, r0
 8006b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b08:	1ad3      	subs	r3, r2, r3
 8006b0a:	2b03      	cmp	r3, #3
 8006b0c:	d901      	bls.n	8006b12 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8006b0e:	2303      	movs	r3, #3
 8006b10:	e197      	b.n	8006e42 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8006b12:	f7ff fc1a 	bl	800634a <LL_RCC_LSI2_IsReady>
 8006b16:	4603      	mov	r3, r0
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d1f1      	bne.n	8006b00 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8006b1c:	f7ff fbd0 	bl	80062c0 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b20:	f7fe fae6 	bl	80050f0 <HAL_GetTick>
 8006b24:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8006b26:	e008      	b.n	8006b3a <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8006b28:	f7fe fae2 	bl	80050f0 <HAL_GetTick>
 8006b2c:	4602      	mov	r2, r0
 8006b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b30:	1ad3      	subs	r3, r2, r3
 8006b32:	2b02      	cmp	r3, #2
 8006b34:	d901      	bls.n	8006b3a <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8006b36:	2303      	movs	r3, #3
 8006b38:	e183      	b.n	8006e42 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8006b3a:	f7ff fbd2 	bl	80062e2 <LL_RCC_LSI1_IsReady>
 8006b3e:	4603      	mov	r3, r0
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d1f1      	bne.n	8006b28 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f003 0304 	and.w	r3, r3, #4
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d05b      	beq.n	8006c08 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006b50:	4ba7      	ldr	r3, [pc, #668]	; (8006df0 <HAL_RCC_OscConfig+0x688>)
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d114      	bne.n	8006b86 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8006b5c:	f7ff fa70 	bl	8006040 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006b60:	f7fe fac6 	bl	80050f0 <HAL_GetTick>
 8006b64:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006b66:	e008      	b.n	8006b7a <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b68:	f7fe fac2 	bl	80050f0 <HAL_GetTick>
 8006b6c:	4602      	mov	r2, r0
 8006b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b70:	1ad3      	subs	r3, r2, r3
 8006b72:	2b02      	cmp	r3, #2
 8006b74:	d901      	bls.n	8006b7a <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8006b76:	2303      	movs	r3, #3
 8006b78:	e163      	b.n	8006e42 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006b7a:	4b9d      	ldr	r3, [pc, #628]	; (8006df0 <HAL_RCC_OscConfig+0x688>)
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d0f0      	beq.n	8006b68 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	689b      	ldr	r3, [r3, #8]
 8006b8a:	2b01      	cmp	r3, #1
 8006b8c:	d102      	bne.n	8006b94 <HAL_RCC_OscConfig+0x42c>
 8006b8e:	f7ff fb30 	bl	80061f2 <LL_RCC_LSE_Enable>
 8006b92:	e00c      	b.n	8006bae <HAL_RCC_OscConfig+0x446>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	689b      	ldr	r3, [r3, #8]
 8006b98:	2b05      	cmp	r3, #5
 8006b9a:	d104      	bne.n	8006ba6 <HAL_RCC_OscConfig+0x43e>
 8006b9c:	f7ff fb4b 	bl	8006236 <LL_RCC_LSE_EnableBypass>
 8006ba0:	f7ff fb27 	bl	80061f2 <LL_RCC_LSE_Enable>
 8006ba4:	e003      	b.n	8006bae <HAL_RCC_OscConfig+0x446>
 8006ba6:	f7ff fb35 	bl	8006214 <LL_RCC_LSE_Disable>
 8006baa:	f7ff fb55 	bl	8006258 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	689b      	ldr	r3, [r3, #8]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d014      	beq.n	8006be0 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bb6:	f7fe fa9b 	bl	80050f0 <HAL_GetTick>
 8006bba:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8006bbc:	e00a      	b.n	8006bd4 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006bbe:	f7fe fa97 	bl	80050f0 <HAL_GetTick>
 8006bc2:	4602      	mov	r2, r0
 8006bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc6:	1ad3      	subs	r3, r2, r3
 8006bc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d901      	bls.n	8006bd4 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8006bd0:	2303      	movs	r3, #3
 8006bd2:	e136      	b.n	8006e42 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8006bd4:	f7ff fb51 	bl	800627a <LL_RCC_LSE_IsReady>
 8006bd8:	4603      	mov	r3, r0
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d0ef      	beq.n	8006bbe <HAL_RCC_OscConfig+0x456>
 8006bde:	e013      	b.n	8006c08 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006be0:	f7fe fa86 	bl	80050f0 <HAL_GetTick>
 8006be4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8006be6:	e00a      	b.n	8006bfe <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006be8:	f7fe fa82 	bl	80050f0 <HAL_GetTick>
 8006bec:	4602      	mov	r2, r0
 8006bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf0:	1ad3      	subs	r3, r2, r3
 8006bf2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d901      	bls.n	8006bfe <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8006bfa:	2303      	movs	r3, #3
 8006bfc:	e121      	b.n	8006e42 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8006bfe:	f7ff fb3c 	bl	800627a <LL_RCC_LSE_IsReady>
 8006c02:	4603      	mov	r3, r0
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d1ef      	bne.n	8006be8 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d02c      	beq.n	8006c6e <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d014      	beq.n	8006c46 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006c1c:	f7ff fab5 	bl	800618a <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c20:	f7fe fa66 	bl	80050f0 <HAL_GetTick>
 8006c24:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8006c26:	e008      	b.n	8006c3a <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006c28:	f7fe fa62 	bl	80050f0 <HAL_GetTick>
 8006c2c:	4602      	mov	r2, r0
 8006c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c30:	1ad3      	subs	r3, r2, r3
 8006c32:	2b02      	cmp	r3, #2
 8006c34:	d901      	bls.n	8006c3a <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8006c36:	2303      	movs	r3, #3
 8006c38:	e103      	b.n	8006e42 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8006c3a:	f7ff fac8 	bl	80061ce <LL_RCC_HSI48_IsReady>
 8006c3e:	4603      	mov	r3, r0
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d0f1      	beq.n	8006c28 <HAL_RCC_OscConfig+0x4c0>
 8006c44:	e013      	b.n	8006c6e <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006c46:	f7ff fab1 	bl	80061ac <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c4a:	f7fe fa51 	bl	80050f0 <HAL_GetTick>
 8006c4e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8006c50:	e008      	b.n	8006c64 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006c52:	f7fe fa4d 	bl	80050f0 <HAL_GetTick>
 8006c56:	4602      	mov	r2, r0
 8006c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c5a:	1ad3      	subs	r3, r2, r3
 8006c5c:	2b02      	cmp	r3, #2
 8006c5e:	d901      	bls.n	8006c64 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8006c60:	2303      	movs	r3, #3
 8006c62:	e0ee      	b.n	8006e42 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8006c64:	f7ff fab3 	bl	80061ce <LL_RCC_HSI48_IsReady>
 8006c68:	4603      	mov	r3, r0
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d1f1      	bne.n	8006c52 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	f000 80e4 	beq.w	8006e40 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006c78:	f7ff fc11 	bl	800649e <LL_RCC_GetSysClkSource>
 8006c7c:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8006c7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c82:	68db      	ldr	r3, [r3, #12]
 8006c84:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c8a:	2b02      	cmp	r3, #2
 8006c8c:	f040 80b4 	bne.w	8006df8 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	f003 0203 	and.w	r2, r3, #3
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c9a:	429a      	cmp	r2, r3
 8006c9c:	d123      	bne.n	8006ce6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ca8:	429a      	cmp	r2, r3
 8006caa:	d11c      	bne.n	8006ce6 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	0a1b      	lsrs	r3, r3, #8
 8006cb0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006cb8:	429a      	cmp	r2, r3
 8006cba:	d114      	bne.n	8006ce6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8006cc6:	429a      	cmp	r2, r3
 8006cc8:	d10d      	bne.n	8006ce6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006cd4:	429a      	cmp	r2, r3
 8006cd6:	d106      	bne.n	8006ce6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8006ce2:	429a      	cmp	r2, r3
 8006ce4:	d05d      	beq.n	8006da2 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006ce6:	693b      	ldr	r3, [r7, #16]
 8006ce8:	2b0c      	cmp	r3, #12
 8006cea:	d058      	beq.n	8006d9e <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006cec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d001      	beq.n	8006cfe <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8006cfa:	2301      	movs	r3, #1
 8006cfc:	e0a1      	b.n	8006e42 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006cfe:	f7ff fc84 	bl	800660a <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006d02:	f7fe f9f5 	bl	80050f0 <HAL_GetTick>
 8006d06:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006d08:	e008      	b.n	8006d1c <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d0a:	f7fe f9f1 	bl	80050f0 <HAL_GetTick>
 8006d0e:	4602      	mov	r2, r0
 8006d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d12:	1ad3      	subs	r3, r2, r3
 8006d14:	2b02      	cmp	r3, #2
 8006d16:	d901      	bls.n	8006d1c <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8006d18:	2303      	movs	r3, #3
 8006d1a:	e092      	b.n	8006e42 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006d1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d1ef      	bne.n	8006d0a <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006d2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d2e:	68da      	ldr	r2, [r3, #12]
 8006d30:	4b30      	ldr	r3, [pc, #192]	; (8006df4 <HAL_RCC_OscConfig+0x68c>)
 8006d32:	4013      	ands	r3, r2
 8006d34:	687a      	ldr	r2, [r7, #4]
 8006d36:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8006d38:	687a      	ldr	r2, [r7, #4]
 8006d3a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006d3c:	4311      	orrs	r1, r2
 8006d3e:	687a      	ldr	r2, [r7, #4]
 8006d40:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006d42:	0212      	lsls	r2, r2, #8
 8006d44:	4311      	orrs	r1, r2
 8006d46:	687a      	ldr	r2, [r7, #4]
 8006d48:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006d4a:	4311      	orrs	r1, r2
 8006d4c:	687a      	ldr	r2, [r7, #4]
 8006d4e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006d50:	4311      	orrs	r1, r2
 8006d52:	687a      	ldr	r2, [r7, #4]
 8006d54:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006d56:	430a      	orrs	r2, r1
 8006d58:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006d5c:	4313      	orrs	r3, r2
 8006d5e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006d60:	f7ff fc44 	bl	80065ec <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006d64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d68:	68db      	ldr	r3, [r3, #12]
 8006d6a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006d6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d72:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006d74:	f7fe f9bc 	bl	80050f0 <HAL_GetTick>
 8006d78:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006d7a:	e008      	b.n	8006d8e <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d7c:	f7fe f9b8 	bl	80050f0 <HAL_GetTick>
 8006d80:	4602      	mov	r2, r0
 8006d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d84:	1ad3      	subs	r3, r2, r3
 8006d86:	2b02      	cmp	r3, #2
 8006d88:	d901      	bls.n	8006d8e <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8006d8a:	2303      	movs	r3, #3
 8006d8c:	e059      	b.n	8006e42 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006d8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d0ef      	beq.n	8006d7c <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006d9c:	e050      	b.n	8006e40 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006d9e:	2301      	movs	r3, #1
 8006da0:	e04f      	b.n	8006e42 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006da2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d147      	bne.n	8006e40 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006db0:	f7ff fc1c 	bl	80065ec <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006db4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006db8:	68db      	ldr	r3, [r3, #12]
 8006dba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006dbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006dc2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006dc4:	f7fe f994 	bl	80050f0 <HAL_GetTick>
 8006dc8:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006dca:	e008      	b.n	8006dde <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006dcc:	f7fe f990 	bl	80050f0 <HAL_GetTick>
 8006dd0:	4602      	mov	r2, r0
 8006dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd4:	1ad3      	subs	r3, r2, r3
 8006dd6:	2b02      	cmp	r3, #2
 8006dd8:	d901      	bls.n	8006dde <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8006dda:	2303      	movs	r3, #3
 8006ddc:	e031      	b.n	8006e42 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006dde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d0ef      	beq.n	8006dcc <HAL_RCC_OscConfig+0x664>
 8006dec:	e028      	b.n	8006e40 <HAL_RCC_OscConfig+0x6d8>
 8006dee:	bf00      	nop
 8006df0:	58000400 	.word	0x58000400
 8006df4:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006df8:	693b      	ldr	r3, [r7, #16]
 8006dfa:	2b0c      	cmp	r3, #12
 8006dfc:	d01e      	beq.n	8006e3c <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006dfe:	f7ff fc04 	bl	800660a <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e02:	f7fe f975 	bl	80050f0 <HAL_GetTick>
 8006e06:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006e08:	e008      	b.n	8006e1c <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e0a:	f7fe f971 	bl	80050f0 <HAL_GetTick>
 8006e0e:	4602      	mov	r2, r0
 8006e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e12:	1ad3      	subs	r3, r2, r3
 8006e14:	2b02      	cmp	r3, #2
 8006e16:	d901      	bls.n	8006e1c <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8006e18:	2303      	movs	r3, #3
 8006e1a:	e012      	b.n	8006e42 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006e1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d1ef      	bne.n	8006e0a <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8006e2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e2e:	68da      	ldr	r2, [r3, #12]
 8006e30:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006e34:	4b05      	ldr	r3, [pc, #20]	; (8006e4c <HAL_RCC_OscConfig+0x6e4>)
 8006e36:	4013      	ands	r3, r2
 8006e38:	60cb      	str	r3, [r1, #12]
 8006e3a:	e001      	b.n	8006e40 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	e000      	b.n	8006e42 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8006e40:	2300      	movs	r3, #0
}
 8006e42:	4618      	mov	r0, r3
 8006e44:	3734      	adds	r7, #52	; 0x34
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bd90      	pop	{r4, r7, pc}
 8006e4a:	bf00      	nop
 8006e4c:	eefefffc 	.word	0xeefefffc

08006e50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b084      	sub	sp, #16
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
 8006e58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d101      	bne.n	8006e64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006e60:	2301      	movs	r3, #1
 8006e62:	e12d      	b.n	80070c0 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006e64:	4b98      	ldr	r3, [pc, #608]	; (80070c8 <HAL_RCC_ClockConfig+0x278>)
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f003 0307 	and.w	r3, r3, #7
 8006e6c:	683a      	ldr	r2, [r7, #0]
 8006e6e:	429a      	cmp	r2, r3
 8006e70:	d91b      	bls.n	8006eaa <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e72:	4b95      	ldr	r3, [pc, #596]	; (80070c8 <HAL_RCC_ClockConfig+0x278>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f023 0207 	bic.w	r2, r3, #7
 8006e7a:	4993      	ldr	r1, [pc, #588]	; (80070c8 <HAL_RCC_ClockConfig+0x278>)
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	4313      	orrs	r3, r2
 8006e80:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e82:	f7fe f935 	bl	80050f0 <HAL_GetTick>
 8006e86:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e88:	e008      	b.n	8006e9c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006e8a:	f7fe f931 	bl	80050f0 <HAL_GetTick>
 8006e8e:	4602      	mov	r2, r0
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	1ad3      	subs	r3, r2, r3
 8006e94:	2b02      	cmp	r3, #2
 8006e96:	d901      	bls.n	8006e9c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8006e98:	2303      	movs	r3, #3
 8006e9a:	e111      	b.n	80070c0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e9c:	4b8a      	ldr	r3, [pc, #552]	; (80070c8 <HAL_RCC_ClockConfig+0x278>)
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f003 0307 	and.w	r3, r3, #7
 8006ea4:	683a      	ldr	r2, [r7, #0]
 8006ea6:	429a      	cmp	r2, r3
 8006ea8:	d1ef      	bne.n	8006e8a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f003 0302 	and.w	r3, r3, #2
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d016      	beq.n	8006ee4 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	689b      	ldr	r3, [r3, #8]
 8006eba:	4618      	mov	r0, r3
 8006ebc:	f7ff fafb 	bl	80064b6 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006ec0:	f7fe f916 	bl	80050f0 <HAL_GetTick>
 8006ec4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8006ec6:	e008      	b.n	8006eda <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006ec8:	f7fe f912 	bl	80050f0 <HAL_GetTick>
 8006ecc:	4602      	mov	r2, r0
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	1ad3      	subs	r3, r2, r3
 8006ed2:	2b02      	cmp	r3, #2
 8006ed4:	d901      	bls.n	8006eda <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8006ed6:	2303      	movs	r3, #3
 8006ed8:	e0f2      	b.n	80070c0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8006eda:	f7ff fbe8 	bl	80066ae <LL_RCC_IsActiveFlag_HPRE>
 8006ede:	4603      	mov	r3, r0
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d0f1      	beq.n	8006ec8 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f003 0320 	and.w	r3, r3, #32
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d016      	beq.n	8006f1e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	695b      	ldr	r3, [r3, #20]
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	f7ff faf2 	bl	80064de <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006efa:	f7fe f8f9 	bl	80050f0 <HAL_GetTick>
 8006efe:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8006f00:	e008      	b.n	8006f14 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006f02:	f7fe f8f5 	bl	80050f0 <HAL_GetTick>
 8006f06:	4602      	mov	r2, r0
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	1ad3      	subs	r3, r2, r3
 8006f0c:	2b02      	cmp	r3, #2
 8006f0e:	d901      	bls.n	8006f14 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8006f10:	2303      	movs	r3, #3
 8006f12:	e0d5      	b.n	80070c0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8006f14:	f7ff fbdd 	bl	80066d2 <LL_RCC_IsActiveFlag_C2HPRE>
 8006f18:	4603      	mov	r3, r0
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d0f1      	beq.n	8006f02 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d016      	beq.n	8006f58 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	699b      	ldr	r3, [r3, #24]
 8006f2e:	4618      	mov	r0, r3
 8006f30:	f7ff faeb 	bl	800650a <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006f34:	f7fe f8dc 	bl	80050f0 <HAL_GetTick>
 8006f38:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8006f3a:	e008      	b.n	8006f4e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006f3c:	f7fe f8d8 	bl	80050f0 <HAL_GetTick>
 8006f40:	4602      	mov	r2, r0
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	1ad3      	subs	r3, r2, r3
 8006f46:	2b02      	cmp	r3, #2
 8006f48:	d901      	bls.n	8006f4e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8006f4a:	2303      	movs	r3, #3
 8006f4c:	e0b8      	b.n	80070c0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8006f4e:	f7ff fbd3 	bl	80066f8 <LL_RCC_IsActiveFlag_SHDHPRE>
 8006f52:	4603      	mov	r3, r0
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d0f1      	beq.n	8006f3c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f003 0304 	and.w	r3, r3, #4
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d016      	beq.n	8006f92 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	68db      	ldr	r3, [r3, #12]
 8006f68:	4618      	mov	r0, r3
 8006f6a:	f7ff fae5 	bl	8006538 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006f6e:	f7fe f8bf 	bl	80050f0 <HAL_GetTick>
 8006f72:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8006f74:	e008      	b.n	8006f88 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006f76:	f7fe f8bb 	bl	80050f0 <HAL_GetTick>
 8006f7a:	4602      	mov	r2, r0
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	1ad3      	subs	r3, r2, r3
 8006f80:	2b02      	cmp	r3, #2
 8006f82:	d901      	bls.n	8006f88 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8006f84:	2303      	movs	r3, #3
 8006f86:	e09b      	b.n	80070c0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8006f88:	f7ff fbc9 	bl	800671e <LL_RCC_IsActiveFlag_PPRE1>
 8006f8c:	4603      	mov	r3, r0
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d0f1      	beq.n	8006f76 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f003 0308 	and.w	r3, r3, #8
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d017      	beq.n	8006fce <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	691b      	ldr	r3, [r3, #16]
 8006fa2:	00db      	lsls	r3, r3, #3
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	f7ff fadb 	bl	8006560 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006faa:	f7fe f8a1 	bl	80050f0 <HAL_GetTick>
 8006fae:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8006fb0:	e008      	b.n	8006fc4 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006fb2:	f7fe f89d 	bl	80050f0 <HAL_GetTick>
 8006fb6:	4602      	mov	r2, r0
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	1ad3      	subs	r3, r2, r3
 8006fbc:	2b02      	cmp	r3, #2
 8006fbe:	d901      	bls.n	8006fc4 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8006fc0:	2303      	movs	r3, #3
 8006fc2:	e07d      	b.n	80070c0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8006fc4:	f7ff fbbd 	bl	8006742 <LL_RCC_IsActiveFlag_PPRE2>
 8006fc8:	4603      	mov	r3, r0
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d0f1      	beq.n	8006fb2 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f003 0301 	and.w	r3, r3, #1
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d043      	beq.n	8007062 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	685b      	ldr	r3, [r3, #4]
 8006fde:	2b02      	cmp	r3, #2
 8006fe0:	d106      	bne.n	8006ff0 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8006fe2:	f7ff f87b 	bl	80060dc <LL_RCC_HSE_IsReady>
 8006fe6:	4603      	mov	r3, r0
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d11e      	bne.n	800702a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006fec:	2301      	movs	r3, #1
 8006fee:	e067      	b.n	80070c0 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	685b      	ldr	r3, [r3, #4]
 8006ff4:	2b03      	cmp	r3, #3
 8006ff6:	d106      	bne.n	8007006 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8006ff8:	f7ff fb16 	bl	8006628 <LL_RCC_PLL_IsReady>
 8006ffc:	4603      	mov	r3, r0
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d113      	bne.n	800702a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8007002:	2301      	movs	r3, #1
 8007004:	e05c      	b.n	80070c0 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	685b      	ldr	r3, [r3, #4]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d106      	bne.n	800701c <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800700e:	f7ff f9e3 	bl	80063d8 <LL_RCC_MSI_IsReady>
 8007012:	4603      	mov	r3, r0
 8007014:	2b00      	cmp	r3, #0
 8007016:	d108      	bne.n	800702a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8007018:	2301      	movs	r3, #1
 800701a:	e051      	b.n	80070c0 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800701c:	f7ff f88e 	bl	800613c <LL_RCC_HSI_IsReady>
 8007020:	4603      	mov	r3, r0
 8007022:	2b00      	cmp	r3, #0
 8007024:	d101      	bne.n	800702a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8007026:	2301      	movs	r3, #1
 8007028:	e04a      	b.n	80070c0 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	685b      	ldr	r3, [r3, #4]
 800702e:	4618      	mov	r0, r3
 8007030:	f7ff fa21 	bl	8006476 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007034:	f7fe f85c 	bl	80050f0 <HAL_GetTick>
 8007038:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800703a:	e00a      	b.n	8007052 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800703c:	f7fe f858 	bl	80050f0 <HAL_GetTick>
 8007040:	4602      	mov	r2, r0
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	1ad3      	subs	r3, r2, r3
 8007046:	f241 3288 	movw	r2, #5000	; 0x1388
 800704a:	4293      	cmp	r3, r2
 800704c:	d901      	bls.n	8007052 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800704e:	2303      	movs	r3, #3
 8007050:	e036      	b.n	80070c0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007052:	f7ff fa24 	bl	800649e <LL_RCC_GetSysClkSource>
 8007056:	4602      	mov	r2, r0
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	685b      	ldr	r3, [r3, #4]
 800705c:	009b      	lsls	r3, r3, #2
 800705e:	429a      	cmp	r2, r3
 8007060:	d1ec      	bne.n	800703c <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007062:	4b19      	ldr	r3, [pc, #100]	; (80070c8 <HAL_RCC_ClockConfig+0x278>)
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f003 0307 	and.w	r3, r3, #7
 800706a:	683a      	ldr	r2, [r7, #0]
 800706c:	429a      	cmp	r2, r3
 800706e:	d21b      	bcs.n	80070a8 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007070:	4b15      	ldr	r3, [pc, #84]	; (80070c8 <HAL_RCC_ClockConfig+0x278>)
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f023 0207 	bic.w	r2, r3, #7
 8007078:	4913      	ldr	r1, [pc, #76]	; (80070c8 <HAL_RCC_ClockConfig+0x278>)
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	4313      	orrs	r3, r2
 800707e:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007080:	f7fe f836 	bl	80050f0 <HAL_GetTick>
 8007084:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007086:	e008      	b.n	800709a <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8007088:	f7fe f832 	bl	80050f0 <HAL_GetTick>
 800708c:	4602      	mov	r2, r0
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	1ad3      	subs	r3, r2, r3
 8007092:	2b02      	cmp	r3, #2
 8007094:	d901      	bls.n	800709a <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8007096:	2303      	movs	r3, #3
 8007098:	e012      	b.n	80070c0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800709a:	4b0b      	ldr	r3, [pc, #44]	; (80070c8 <HAL_RCC_ClockConfig+0x278>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f003 0307 	and.w	r3, r3, #7
 80070a2:	683a      	ldr	r2, [r7, #0]
 80070a4:	429a      	cmp	r2, r3
 80070a6:	d1ef      	bne.n	8007088 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80070a8:	f000 f87e 	bl	80071a8 <HAL_RCC_GetHCLKFreq>
 80070ac:	4603      	mov	r3, r0
 80070ae:	4a07      	ldr	r2, [pc, #28]	; (80070cc <HAL_RCC_ClockConfig+0x27c>)
 80070b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80070b2:	f7fe f829 	bl	8005108 <HAL_GetTickPrio>
 80070b6:	4603      	mov	r3, r0
 80070b8:	4618      	mov	r0, r3
 80070ba:	f7fd ffcb 	bl	8005054 <HAL_InitTick>
 80070be:	4603      	mov	r3, r0
}
 80070c0:	4618      	mov	r0, r3
 80070c2:	3710      	adds	r7, #16
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bd80      	pop	{r7, pc}
 80070c8:	58004000 	.word	0x58004000
 80070cc:	20000044 	.word	0x20000044

080070d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80070d0:	b590      	push	{r4, r7, lr}
 80070d2:	b085      	sub	sp, #20
 80070d4:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80070d6:	f7ff f9e2 	bl	800649e <LL_RCC_GetSysClkSource>
 80070da:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d10a      	bne.n	80070f8 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80070e2:	f7ff f99e 	bl	8006422 <LL_RCC_MSI_GetRange>
 80070e6:	4603      	mov	r3, r0
 80070e8:	091b      	lsrs	r3, r3, #4
 80070ea:	f003 030f 	and.w	r3, r3, #15
 80070ee:	4a2b      	ldr	r2, [pc, #172]	; (800719c <HAL_RCC_GetSysClockFreq+0xcc>)
 80070f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80070f4:	60fb      	str	r3, [r7, #12]
 80070f6:	e04b      	b.n	8007190 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2b04      	cmp	r3, #4
 80070fc:	d102      	bne.n	8007104 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80070fe:	4b28      	ldr	r3, [pc, #160]	; (80071a0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8007100:	60fb      	str	r3, [r7, #12]
 8007102:	e045      	b.n	8007190 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2b08      	cmp	r3, #8
 8007108:	d10a      	bne.n	8007120 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800710a:	f7fe ffb7 	bl	800607c <LL_RCC_HSE_IsEnabledDiv2>
 800710e:	4603      	mov	r3, r0
 8007110:	2b01      	cmp	r3, #1
 8007112:	d102      	bne.n	800711a <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8007114:	4b22      	ldr	r3, [pc, #136]	; (80071a0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8007116:	60fb      	str	r3, [r7, #12]
 8007118:	e03a      	b.n	8007190 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800711a:	4b22      	ldr	r3, [pc, #136]	; (80071a4 <HAL_RCC_GetSysClockFreq+0xd4>)
 800711c:	60fb      	str	r3, [r7, #12]
 800711e:	e037      	b.n	8007190 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8007120:	f7ff fab9 	bl	8006696 <LL_RCC_PLL_GetMainSource>
 8007124:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	2b02      	cmp	r3, #2
 800712a:	d003      	beq.n	8007134 <HAL_RCC_GetSysClockFreq+0x64>
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	2b03      	cmp	r3, #3
 8007130:	d003      	beq.n	800713a <HAL_RCC_GetSysClockFreq+0x6a>
 8007132:	e00d      	b.n	8007150 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8007134:	4b1a      	ldr	r3, [pc, #104]	; (80071a0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8007136:	60bb      	str	r3, [r7, #8]
        break;
 8007138:	e015      	b.n	8007166 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800713a:	f7fe ff9f 	bl	800607c <LL_RCC_HSE_IsEnabledDiv2>
 800713e:	4603      	mov	r3, r0
 8007140:	2b01      	cmp	r3, #1
 8007142:	d102      	bne.n	800714a <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8007144:	4b16      	ldr	r3, [pc, #88]	; (80071a0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8007146:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8007148:	e00d      	b.n	8007166 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800714a:	4b16      	ldr	r3, [pc, #88]	; (80071a4 <HAL_RCC_GetSysClockFreq+0xd4>)
 800714c:	60bb      	str	r3, [r7, #8]
        break;
 800714e:	e00a      	b.n	8007166 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8007150:	f7ff f967 	bl	8006422 <LL_RCC_MSI_GetRange>
 8007154:	4603      	mov	r3, r0
 8007156:	091b      	lsrs	r3, r3, #4
 8007158:	f003 030f 	and.w	r3, r3, #15
 800715c:	4a0f      	ldr	r2, [pc, #60]	; (800719c <HAL_RCC_GetSysClockFreq+0xcc>)
 800715e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007162:	60bb      	str	r3, [r7, #8]
        break;
 8007164:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8007166:	f7ff fa71 	bl	800664c <LL_RCC_PLL_GetN>
 800716a:	4602      	mov	r2, r0
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	fb03 f402 	mul.w	r4, r3, r2
 8007172:	f7ff fa84 	bl	800667e <LL_RCC_PLL_GetDivider>
 8007176:	4603      	mov	r3, r0
 8007178:	091b      	lsrs	r3, r3, #4
 800717a:	3301      	adds	r3, #1
 800717c:	fbb4 f4f3 	udiv	r4, r4, r3
 8007180:	f7ff fa71 	bl	8006666 <LL_RCC_PLL_GetR>
 8007184:	4603      	mov	r3, r0
 8007186:	0f5b      	lsrs	r3, r3, #29
 8007188:	3301      	adds	r3, #1
 800718a:	fbb4 f3f3 	udiv	r3, r4, r3
 800718e:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8007190:	68fb      	ldr	r3, [r7, #12]
}
 8007192:	4618      	mov	r0, r3
 8007194:	3714      	adds	r7, #20
 8007196:	46bd      	mov	sp, r7
 8007198:	bd90      	pop	{r4, r7, pc}
 800719a:	bf00      	nop
 800719c:	08011cb8 	.word	0x08011cb8
 80071a0:	00f42400 	.word	0x00f42400
 80071a4:	01e84800 	.word	0x01e84800

080071a8 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80071a8:	b598      	push	{r3, r4, r7, lr}
 80071aa:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80071ac:	f7ff ff90 	bl	80070d0 <HAL_RCC_GetSysClockFreq>
 80071b0:	4604      	mov	r4, r0
 80071b2:	f7ff f9e9 	bl	8006588 <LL_RCC_GetAHBPrescaler>
 80071b6:	4603      	mov	r3, r0
 80071b8:	091b      	lsrs	r3, r3, #4
 80071ba:	f003 030f 	and.w	r3, r3, #15
 80071be:	4a03      	ldr	r2, [pc, #12]	; (80071cc <HAL_RCC_GetHCLKFreq+0x24>)
 80071c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071c4:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80071c8:	4618      	mov	r0, r3
 80071ca:	bd98      	pop	{r3, r4, r7, pc}
 80071cc:	08011c58 	.word	0x08011c58

080071d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80071d0:	b598      	push	{r3, r4, r7, lr}
 80071d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80071d4:	f7ff ffe8 	bl	80071a8 <HAL_RCC_GetHCLKFreq>
 80071d8:	4604      	mov	r4, r0
 80071da:	f7ff f9ef 	bl	80065bc <LL_RCC_GetAPB1Prescaler>
 80071de:	4603      	mov	r3, r0
 80071e0:	0a1b      	lsrs	r3, r3, #8
 80071e2:	f003 0307 	and.w	r3, r3, #7
 80071e6:	4a04      	ldr	r2, [pc, #16]	; (80071f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80071e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071ec:	f003 031f 	and.w	r3, r3, #31
 80071f0:	fa24 f303 	lsr.w	r3, r4, r3
}
 80071f4:	4618      	mov	r0, r3
 80071f6:	bd98      	pop	{r3, r4, r7, pc}
 80071f8:	08011c98 	.word	0x08011c98

080071fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80071fc:	b598      	push	{r3, r4, r7, lr}
 80071fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8007200:	f7ff ffd2 	bl	80071a8 <HAL_RCC_GetHCLKFreq>
 8007204:	4604      	mov	r4, r0
 8007206:	f7ff f9e5 	bl	80065d4 <LL_RCC_GetAPB2Prescaler>
 800720a:	4603      	mov	r3, r0
 800720c:	0adb      	lsrs	r3, r3, #11
 800720e:	f003 0307 	and.w	r3, r3, #7
 8007212:	4a04      	ldr	r2, [pc, #16]	; (8007224 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007214:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007218:	f003 031f 	and.w	r3, r3, #31
 800721c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8007220:	4618      	mov	r0, r3
 8007222:	bd98      	pop	{r3, r4, r7, pc}
 8007224:	08011c98 	.word	0x08011c98

08007228 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8007228:	b590      	push	{r4, r7, lr}
 800722a:	b085      	sub	sp, #20
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2bb0      	cmp	r3, #176	; 0xb0
 8007234:	d903      	bls.n	800723e <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8007236:	4b15      	ldr	r3, [pc, #84]	; (800728c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8007238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800723a:	60fb      	str	r3, [r7, #12]
 800723c:	e007      	b.n	800724e <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	091b      	lsrs	r3, r3, #4
 8007242:	f003 030f 	and.w	r3, r3, #15
 8007246:	4a11      	ldr	r2, [pc, #68]	; (800728c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8007248:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800724c:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800724e:	f7ff f9a7 	bl	80065a0 <LL_RCC_GetAHB4Prescaler>
 8007252:	4603      	mov	r3, r0
 8007254:	091b      	lsrs	r3, r3, #4
 8007256:	f003 030f 	and.w	r3, r3, #15
 800725a:	4a0d      	ldr	r2, [pc, #52]	; (8007290 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 800725c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007260:	68fa      	ldr	r2, [r7, #12]
 8007262:	fbb2 f3f3 	udiv	r3, r2, r3
 8007266:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	4a0a      	ldr	r2, [pc, #40]	; (8007294 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 800726c:	fba2 2303 	umull	r2, r3, r2, r3
 8007270:	0c9c      	lsrs	r4, r3, #18
 8007272:	f7fe fef5 	bl	8006060 <HAL_PWREx_GetVoltageRange>
 8007276:	4603      	mov	r3, r0
 8007278:	4619      	mov	r1, r3
 800727a:	4620      	mov	r0, r4
 800727c:	f000 f80c 	bl	8007298 <RCC_SetFlashLatency>
 8007280:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8007282:	4618      	mov	r0, r3
 8007284:	3714      	adds	r7, #20
 8007286:	46bd      	mov	sp, r7
 8007288:	bd90      	pop	{r4, r7, pc}
 800728a:	bf00      	nop
 800728c:	08011cb8 	.word	0x08011cb8
 8007290:	08011c58 	.word	0x08011c58
 8007294:	431bde83 	.word	0x431bde83

08007298 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8007298:	b590      	push	{r4, r7, lr}
 800729a:	b093      	sub	sp, #76	; 0x4c
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
 80072a0:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80072a2:	4b37      	ldr	r3, [pc, #220]	; (8007380 <RCC_SetFlashLatency+0xe8>)
 80072a4:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80072a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80072aa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 80072ae:	4a35      	ldr	r2, [pc, #212]	; (8007384 <RCC_SetFlashLatency+0xec>)
 80072b0:	f107 031c 	add.w	r3, r7, #28
 80072b4:	ca07      	ldmia	r2, {r0, r1, r2}
 80072b6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80072ba:	4b33      	ldr	r3, [pc, #204]	; (8007388 <RCC_SetFlashLatency+0xf0>)
 80072bc:	f107 040c 	add.w	r4, r7, #12
 80072c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80072c2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80072c6:	2300      	movs	r3, #0
 80072c8:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80072d0:	d11a      	bne.n	8007308 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80072d2:	2300      	movs	r3, #0
 80072d4:	643b      	str	r3, [r7, #64]	; 0x40
 80072d6:	e013      	b.n	8007300 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80072d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072da:	009b      	lsls	r3, r3, #2
 80072dc:	3348      	adds	r3, #72	; 0x48
 80072de:	443b      	add	r3, r7
 80072e0:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80072e4:	687a      	ldr	r2, [r7, #4]
 80072e6:	429a      	cmp	r2, r3
 80072e8:	d807      	bhi.n	80072fa <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80072ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072ec:	009b      	lsls	r3, r3, #2
 80072ee:	3348      	adds	r3, #72	; 0x48
 80072f0:	443b      	add	r3, r7
 80072f2:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80072f6:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80072f8:	e020      	b.n	800733c <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80072fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072fc:	3301      	adds	r3, #1
 80072fe:	643b      	str	r3, [r7, #64]	; 0x40
 8007300:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007302:	2b03      	cmp	r3, #3
 8007304:	d9e8      	bls.n	80072d8 <RCC_SetFlashLatency+0x40>
 8007306:	e019      	b.n	800733c <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8007308:	2300      	movs	r3, #0
 800730a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800730c:	e013      	b.n	8007336 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800730e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007310:	009b      	lsls	r3, r3, #2
 8007312:	3348      	adds	r3, #72	; 0x48
 8007314:	443b      	add	r3, r7
 8007316:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800731a:	687a      	ldr	r2, [r7, #4]
 800731c:	429a      	cmp	r2, r3
 800731e:	d807      	bhi.n	8007330 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8007320:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007322:	009b      	lsls	r3, r3, #2
 8007324:	3348      	adds	r3, #72	; 0x48
 8007326:	443b      	add	r3, r7
 8007328:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800732c:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800732e:	e005      	b.n	800733c <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8007330:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007332:	3301      	adds	r3, #1
 8007334:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007336:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007338:	2b02      	cmp	r3, #2
 800733a:	d9e8      	bls.n	800730e <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 800733c:	4b13      	ldr	r3, [pc, #76]	; (800738c <RCC_SetFlashLatency+0xf4>)
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f023 0207 	bic.w	r2, r3, #7
 8007344:	4911      	ldr	r1, [pc, #68]	; (800738c <RCC_SetFlashLatency+0xf4>)
 8007346:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007348:	4313      	orrs	r3, r2
 800734a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800734c:	f7fd fed0 	bl	80050f0 <HAL_GetTick>
 8007350:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8007352:	e008      	b.n	8007366 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8007354:	f7fd fecc 	bl	80050f0 <HAL_GetTick>
 8007358:	4602      	mov	r2, r0
 800735a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800735c:	1ad3      	subs	r3, r2, r3
 800735e:	2b02      	cmp	r3, #2
 8007360:	d901      	bls.n	8007366 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8007362:	2303      	movs	r3, #3
 8007364:	e007      	b.n	8007376 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8007366:	4b09      	ldr	r3, [pc, #36]	; (800738c <RCC_SetFlashLatency+0xf4>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f003 0307 	and.w	r3, r3, #7
 800736e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007370:	429a      	cmp	r2, r3
 8007372:	d1ef      	bne.n	8007354 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8007374:	2300      	movs	r3, #0
}
 8007376:	4618      	mov	r0, r3
 8007378:	374c      	adds	r7, #76	; 0x4c
 800737a:	46bd      	mov	sp, r7
 800737c:	bd90      	pop	{r4, r7, pc}
 800737e:	bf00      	nop
 8007380:	08011ac0 	.word	0x08011ac0
 8007384:	08011ad0 	.word	0x08011ad0
 8007388:	08011adc 	.word	0x08011adc
 800738c:	58004000 	.word	0x58004000

08007390 <LL_RCC_LSE_IsEnabled>:
{
 8007390:	b480      	push	{r7}
 8007392:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8007394:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007398:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800739c:	f003 0301 	and.w	r3, r3, #1
 80073a0:	2b01      	cmp	r3, #1
 80073a2:	d101      	bne.n	80073a8 <LL_RCC_LSE_IsEnabled+0x18>
 80073a4:	2301      	movs	r3, #1
 80073a6:	e000      	b.n	80073aa <LL_RCC_LSE_IsEnabled+0x1a>
 80073a8:	2300      	movs	r3, #0
}
 80073aa:	4618      	mov	r0, r3
 80073ac:	46bd      	mov	sp, r7
 80073ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b2:	4770      	bx	lr

080073b4 <LL_RCC_LSE_IsReady>:
{
 80073b4:	b480      	push	{r7}
 80073b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80073b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80073bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073c0:	f003 0302 	and.w	r3, r3, #2
 80073c4:	2b02      	cmp	r3, #2
 80073c6:	d101      	bne.n	80073cc <LL_RCC_LSE_IsReady+0x18>
 80073c8:	2301      	movs	r3, #1
 80073ca:	e000      	b.n	80073ce <LL_RCC_LSE_IsReady+0x1a>
 80073cc:	2300      	movs	r3, #0
}
 80073ce:	4618      	mov	r0, r3
 80073d0:	46bd      	mov	sp, r7
 80073d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d6:	4770      	bx	lr

080073d8 <LL_RCC_SetRFWKPClockSource>:
{
 80073d8:	b480      	push	{r7}
 80073da:	b083      	sub	sp, #12
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80073e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80073e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80073e8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80073ec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	4313      	orrs	r3, r2
 80073f4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80073f8:	bf00      	nop
 80073fa:	370c      	adds	r7, #12
 80073fc:	46bd      	mov	sp, r7
 80073fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007402:	4770      	bx	lr

08007404 <LL_RCC_SetSMPSClockSource>:
{
 8007404:	b480      	push	{r7}
 8007406:	b083      	sub	sp, #12
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800740c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007412:	f023 0203 	bic.w	r2, r3, #3
 8007416:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	4313      	orrs	r3, r2
 800741e:	624b      	str	r3, [r1, #36]	; 0x24
}
 8007420:	bf00      	nop
 8007422:	370c      	adds	r7, #12
 8007424:	46bd      	mov	sp, r7
 8007426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742a:	4770      	bx	lr

0800742c <LL_RCC_SetSMPSPrescaler>:
{
 800742c:	b480      	push	{r7}
 800742e:	b083      	sub	sp, #12
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8007434:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800743a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800743e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	4313      	orrs	r3, r2
 8007446:	624b      	str	r3, [r1, #36]	; 0x24
}
 8007448:	bf00      	nop
 800744a:	370c      	adds	r7, #12
 800744c:	46bd      	mov	sp, r7
 800744e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007452:	4770      	bx	lr

08007454 <LL_RCC_SetUSARTClockSource>:
{
 8007454:	b480      	push	{r7}
 8007456:	b083      	sub	sp, #12
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800745c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007460:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007464:	f023 0203 	bic.w	r2, r3, #3
 8007468:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	4313      	orrs	r3, r2
 8007470:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007474:	bf00      	nop
 8007476:	370c      	adds	r7, #12
 8007478:	46bd      	mov	sp, r7
 800747a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747e:	4770      	bx	lr

08007480 <LL_RCC_SetLPUARTClockSource>:
{
 8007480:	b480      	push	{r7}
 8007482:	b083      	sub	sp, #12
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8007488:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800748c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007490:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007494:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	4313      	orrs	r3, r2
 800749c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80074a0:	bf00      	nop
 80074a2:	370c      	adds	r7, #12
 80074a4:	46bd      	mov	sp, r7
 80074a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074aa:	4770      	bx	lr

080074ac <LL_RCC_SetI2CClockSource>:
{
 80074ac:	b480      	push	{r7}
 80074ae:	b083      	sub	sp, #12
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80074b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80074b8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	091b      	lsrs	r3, r3, #4
 80074c0:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80074c4:	43db      	mvns	r3, r3
 80074c6:	401a      	ands	r2, r3
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	011b      	lsls	r3, r3, #4
 80074cc:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80074d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80074d4:	4313      	orrs	r3, r2
 80074d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80074da:	bf00      	nop
 80074dc:	370c      	adds	r7, #12
 80074de:	46bd      	mov	sp, r7
 80074e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e4:	4770      	bx	lr

080074e6 <LL_RCC_SetLPTIMClockSource>:
{
 80074e6:	b480      	push	{r7}
 80074e8:	b083      	sub	sp, #12
 80074ea:	af00      	add	r7, sp, #0
 80074ec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80074ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80074f2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	0c1b      	lsrs	r3, r3, #16
 80074fa:	041b      	lsls	r3, r3, #16
 80074fc:	43db      	mvns	r3, r3
 80074fe:	401a      	ands	r2, r3
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	041b      	lsls	r3, r3, #16
 8007504:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007508:	4313      	orrs	r3, r2
 800750a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800750e:	bf00      	nop
 8007510:	370c      	adds	r7, #12
 8007512:	46bd      	mov	sp, r7
 8007514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007518:	4770      	bx	lr

0800751a <LL_RCC_SetSAIClockSource>:
{
 800751a:	b480      	push	{r7}
 800751c:	b083      	sub	sp, #12
 800751e:	af00      	add	r7, sp, #0
 8007520:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8007522:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007526:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800752a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800752e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	4313      	orrs	r3, r2
 8007536:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800753a:	bf00      	nop
 800753c:	370c      	adds	r7, #12
 800753e:	46bd      	mov	sp, r7
 8007540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007544:	4770      	bx	lr

08007546 <LL_RCC_SetRNGClockSource>:
{
 8007546:	b480      	push	{r7}
 8007548:	b083      	sub	sp, #12
 800754a:	af00      	add	r7, sp, #0
 800754c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800754e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007552:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007556:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800755a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	4313      	orrs	r3, r2
 8007562:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007566:	bf00      	nop
 8007568:	370c      	adds	r7, #12
 800756a:	46bd      	mov	sp, r7
 800756c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007570:	4770      	bx	lr

08007572 <LL_RCC_SetCLK48ClockSource>:
{
 8007572:	b480      	push	{r7}
 8007574:	b083      	sub	sp, #12
 8007576:	af00      	add	r7, sp, #0
 8007578:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800757a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800757e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007582:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007586:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	4313      	orrs	r3, r2
 800758e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007592:	bf00      	nop
 8007594:	370c      	adds	r7, #12
 8007596:	46bd      	mov	sp, r7
 8007598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759c:	4770      	bx	lr

0800759e <LL_RCC_SetUSBClockSource>:
{
 800759e:	b580      	push	{r7, lr}
 80075a0:	b082      	sub	sp, #8
 80075a2:	af00      	add	r7, sp, #0
 80075a4:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f7ff ffe3 	bl	8007572 <LL_RCC_SetCLK48ClockSource>
}
 80075ac:	bf00      	nop
 80075ae:	3708      	adds	r7, #8
 80075b0:	46bd      	mov	sp, r7
 80075b2:	bd80      	pop	{r7, pc}

080075b4 <LL_RCC_SetADCClockSource>:
{
 80075b4:	b480      	push	{r7}
 80075b6:	b083      	sub	sp, #12
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80075bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80075c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075c4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80075c8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	4313      	orrs	r3, r2
 80075d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80075d4:	bf00      	nop
 80075d6:	370c      	adds	r7, #12
 80075d8:	46bd      	mov	sp, r7
 80075da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075de:	4770      	bx	lr

080075e0 <LL_RCC_SetRTCClockSource>:
{
 80075e0:	b480      	push	{r7}
 80075e2:	b083      	sub	sp, #12
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80075e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80075ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80075f4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	4313      	orrs	r3, r2
 80075fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8007600:	bf00      	nop
 8007602:	370c      	adds	r7, #12
 8007604:	46bd      	mov	sp, r7
 8007606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760a:	4770      	bx	lr

0800760c <LL_RCC_GetRTCClockSource>:
{
 800760c:	b480      	push	{r7}
 800760e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8007610:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007614:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007618:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 800761c:	4618      	mov	r0, r3
 800761e:	46bd      	mov	sp, r7
 8007620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007624:	4770      	bx	lr

08007626 <LL_RCC_ForceBackupDomainReset>:
{
 8007626:	b480      	push	{r7}
 8007628:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800762a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800762e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007632:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007636:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800763a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800763e:	bf00      	nop
 8007640:	46bd      	mov	sp, r7
 8007642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007646:	4770      	bx	lr

08007648 <LL_RCC_ReleaseBackupDomainReset>:
{
 8007648:	b480      	push	{r7}
 800764a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800764c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007650:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007654:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007658:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800765c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8007660:	bf00      	nop
 8007662:	46bd      	mov	sp, r7
 8007664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007668:	4770      	bx	lr

0800766a <LL_RCC_PLLSAI1_Enable>:
{
 800766a:	b480      	push	{r7}
 800766c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800766e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007678:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800767c:	6013      	str	r3, [r2, #0]
}
 800767e:	bf00      	nop
 8007680:	46bd      	mov	sp, r7
 8007682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007686:	4770      	bx	lr

08007688 <LL_RCC_PLLSAI1_Disable>:
{
 8007688:	b480      	push	{r7}
 800768a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800768c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007696:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800769a:	6013      	str	r3, [r2, #0]
}
 800769c:	bf00      	nop
 800769e:	46bd      	mov	sp, r7
 80076a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a4:	4770      	bx	lr

080076a6 <LL_RCC_PLLSAI1_IsReady>:
{
 80076a6:	b480      	push	{r7}
 80076a8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80076aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80076b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80076b8:	d101      	bne.n	80076be <LL_RCC_PLLSAI1_IsReady+0x18>
 80076ba:	2301      	movs	r3, #1
 80076bc:	e000      	b.n	80076c0 <LL_RCC_PLLSAI1_IsReady+0x1a>
 80076be:	2300      	movs	r3, #0
}
 80076c0:	4618      	mov	r0, r3
 80076c2:	46bd      	mov	sp, r7
 80076c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c8:	4770      	bx	lr

080076ca <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80076ca:	b580      	push	{r7, lr}
 80076cc:	b088      	sub	sp, #32
 80076ce:	af00      	add	r7, sp, #0
 80076d0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80076d2:	2300      	movs	r3, #0
 80076d4:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80076d6:	2300      	movs	r3, #0
 80076d8:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d034      	beq.n	8007750 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076ea:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80076ee:	d021      	beq.n	8007734 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80076f0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80076f4:	d81b      	bhi.n	800772e <HAL_RCCEx_PeriphCLKConfig+0x64>
 80076f6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80076fa:	d01d      	beq.n	8007738 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80076fc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007700:	d815      	bhi.n	800772e <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007702:	2b00      	cmp	r3, #0
 8007704:	d00b      	beq.n	800771e <HAL_RCCEx_PeriphCLKConfig+0x54>
 8007706:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800770a:	d110      	bne.n	800772e <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800770c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007710:	68db      	ldr	r3, [r3, #12]
 8007712:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007716:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800771a:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 800771c:	e00d      	b.n	800773a <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	3304      	adds	r3, #4
 8007722:	4618      	mov	r0, r3
 8007724:	f000 f947 	bl	80079b6 <RCCEx_PLLSAI1_ConfigNP>
 8007728:	4603      	mov	r3, r0
 800772a:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800772c:	e005      	b.n	800773a <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800772e:	2301      	movs	r3, #1
 8007730:	77fb      	strb	r3, [r7, #31]
        break;
 8007732:	e002      	b.n	800773a <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8007734:	bf00      	nop
 8007736:	e000      	b.n	800773a <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8007738:	bf00      	nop
    }

    if (ret == HAL_OK)
 800773a:	7ffb      	ldrb	r3, [r7, #31]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d105      	bne.n	800774c <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007744:	4618      	mov	r0, r3
 8007746:	f7ff fee8 	bl	800751a <LL_RCC_SetSAIClockSource>
 800774a:	e001      	b.n	8007750 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800774c:	7ffb      	ldrb	r3, [r7, #31]
 800774e:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007758:	2b00      	cmp	r3, #0
 800775a:	d046      	beq.n	80077ea <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800775c:	f7ff ff56 	bl	800760c <LL_RCC_GetRTCClockSource>
 8007760:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007766:	69ba      	ldr	r2, [r7, #24]
 8007768:	429a      	cmp	r2, r3
 800776a:	d03c      	beq.n	80077e6 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800776c:	f7fe fc68 	bl	8006040 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8007770:	69bb      	ldr	r3, [r7, #24]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d105      	bne.n	8007782 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800777a:	4618      	mov	r0, r3
 800777c:	f7ff ff30 	bl	80075e0 <LL_RCC_SetRTCClockSource>
 8007780:	e02e      	b.n	80077e0 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8007782:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007786:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800778a:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800778c:	f7ff ff4b 	bl	8007626 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8007790:	f7ff ff5a 	bl	8007648 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8007794:	697b      	ldr	r3, [r7, #20]
 8007796:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800779e:	4313      	orrs	r3, r2
 80077a0:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 80077a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80077a6:	697b      	ldr	r3, [r7, #20]
 80077a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80077ac:	f7ff fdf0 	bl	8007390 <LL_RCC_LSE_IsEnabled>
 80077b0:	4603      	mov	r3, r0
 80077b2:	2b01      	cmp	r3, #1
 80077b4:	d114      	bne.n	80077e0 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80077b6:	f7fd fc9b 	bl	80050f0 <HAL_GetTick>
 80077ba:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80077bc:	e00b      	b.n	80077d6 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80077be:	f7fd fc97 	bl	80050f0 <HAL_GetTick>
 80077c2:	4602      	mov	r2, r0
 80077c4:	693b      	ldr	r3, [r7, #16]
 80077c6:	1ad3      	subs	r3, r2, r3
 80077c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80077cc:	4293      	cmp	r3, r2
 80077ce:	d902      	bls.n	80077d6 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 80077d0:	2303      	movs	r3, #3
 80077d2:	77fb      	strb	r3, [r7, #31]
              break;
 80077d4:	e004      	b.n	80077e0 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 80077d6:	f7ff fded 	bl	80073b4 <LL_RCC_LSE_IsReady>
 80077da:	4603      	mov	r3, r0
 80077dc:	2b01      	cmp	r3, #1
 80077de:	d1ee      	bne.n	80077be <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80077e0:	7ffb      	ldrb	r3, [r7, #31]
 80077e2:	77bb      	strb	r3, [r7, #30]
 80077e4:	e001      	b.n	80077ea <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077e6:	7ffb      	ldrb	r3, [r7, #31]
 80077e8:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f003 0301 	and.w	r3, r3, #1
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d004      	beq.n	8007800 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	699b      	ldr	r3, [r3, #24]
 80077fa:	4618      	mov	r0, r3
 80077fc:	f7ff fe2a 	bl	8007454 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f003 0302 	and.w	r3, r3, #2
 8007808:	2b00      	cmp	r3, #0
 800780a:	d004      	beq.n	8007816 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	69db      	ldr	r3, [r3, #28]
 8007810:	4618      	mov	r0, r3
 8007812:	f7ff fe35 	bl	8007480 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f003 0310 	and.w	r3, r3, #16
 800781e:	2b00      	cmp	r3, #0
 8007820:	d004      	beq.n	800782c <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007826:	4618      	mov	r0, r3
 8007828:	f7ff fe5d 	bl	80074e6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f003 0320 	and.w	r3, r3, #32
 8007834:	2b00      	cmp	r3, #0
 8007836:	d004      	beq.n	8007842 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800783c:	4618      	mov	r0, r3
 800783e:	f7ff fe52 	bl	80074e6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f003 0304 	and.w	r3, r3, #4
 800784a:	2b00      	cmp	r3, #0
 800784c:	d004      	beq.n	8007858 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6a1b      	ldr	r3, [r3, #32]
 8007852:	4618      	mov	r0, r3
 8007854:	f7ff fe2a 	bl	80074ac <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f003 0308 	and.w	r3, r3, #8
 8007860:	2b00      	cmp	r3, #0
 8007862:	d004      	beq.n	800786e <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007868:	4618      	mov	r0, r3
 800786a:	f7ff fe1f 	bl	80074ac <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007876:	2b00      	cmp	r3, #0
 8007878:	d022      	beq.n	80078c0 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800787e:	4618      	mov	r0, r3
 8007880:	f7ff fe8d 	bl	800759e <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007888:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800788c:	d107      	bne.n	800789e <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800788e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007892:	68db      	ldr	r3, [r3, #12]
 8007894:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007898:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800789c:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078a2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80078a6:	d10b      	bne.n	80078c0 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	3304      	adds	r3, #4
 80078ac:	4618      	mov	r0, r3
 80078ae:	f000 f8dd 	bl	8007a6c <RCCEx_PLLSAI1_ConfigNQ>
 80078b2:	4603      	mov	r3, r0
 80078b4:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80078b6:	7ffb      	ldrb	r3, [r7, #31]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d001      	beq.n	80078c0 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 80078bc:	7ffb      	ldrb	r3, [r7, #31]
 80078be:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d02b      	beq.n	8007924 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078d4:	d008      	beq.n	80078e8 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80078de:	d003      	beq.n	80078e8 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d105      	bne.n	80078f4 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078ec:	4618      	mov	r0, r3
 80078ee:	f7ff fe2a 	bl	8007546 <LL_RCC_SetRNGClockSource>
 80078f2:	e00a      	b.n	800790a <HAL_RCCEx_PeriphCLKConfig+0x240>
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80078fc:	60fb      	str	r3, [r7, #12]
 80078fe:	2000      	movs	r0, #0
 8007900:	f7ff fe21 	bl	8007546 <LL_RCC_SetRNGClockSource>
 8007904:	68f8      	ldr	r0, [r7, #12]
 8007906:	f7ff fe34 	bl	8007572 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800790e:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8007912:	d107      	bne.n	8007924 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8007914:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007918:	68db      	ldr	r3, [r3, #12]
 800791a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800791e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007922:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800792c:	2b00      	cmp	r3, #0
 800792e:	d022      	beq.n	8007976 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007934:	4618      	mov	r0, r3
 8007936:	f7ff fe3d 	bl	80075b4 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800793e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007942:	d107      	bne.n	8007954 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007944:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007948:	68db      	ldr	r3, [r3, #12]
 800794a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800794e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007952:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007958:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800795c:	d10b      	bne.n	8007976 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	3304      	adds	r3, #4
 8007962:	4618      	mov	r0, r3
 8007964:	f000 f8dd 	bl	8007b22 <RCCEx_PLLSAI1_ConfigNR>
 8007968:	4603      	mov	r3, r0
 800796a:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800796c:	7ffb      	ldrb	r3, [r7, #31]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d001      	beq.n	8007976 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8007972:	7ffb      	ldrb	r3, [r7, #31]
 8007974:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800797e:	2b00      	cmp	r3, #0
 8007980:	d004      	beq.n	800798c <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007986:	4618      	mov	r0, r3
 8007988:	f7ff fd26 	bl	80073d8 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007994:	2b00      	cmp	r3, #0
 8007996:	d009      	beq.n	80079ac <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800799c:	4618      	mov	r0, r3
 800799e:	f7ff fd45 	bl	800742c <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80079a6:	4618      	mov	r0, r3
 80079a8:	f7ff fd2c 	bl	8007404 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 80079ac:	7fbb      	ldrb	r3, [r7, #30]
}
 80079ae:	4618      	mov	r0, r3
 80079b0:	3720      	adds	r7, #32
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bd80      	pop	{r7, pc}

080079b6 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80079b6:	b580      	push	{r7, lr}
 80079b8:	b084      	sub	sp, #16
 80079ba:	af00      	add	r7, sp, #0
 80079bc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80079be:	2300      	movs	r3, #0
 80079c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80079c2:	f7ff fe61 	bl	8007688 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80079c6:	f7fd fb93 	bl	80050f0 <HAL_GetTick>
 80079ca:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80079cc:	e009      	b.n	80079e2 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80079ce:	f7fd fb8f 	bl	80050f0 <HAL_GetTick>
 80079d2:	4602      	mov	r2, r0
 80079d4:	68bb      	ldr	r3, [r7, #8]
 80079d6:	1ad3      	subs	r3, r2, r3
 80079d8:	2b02      	cmp	r3, #2
 80079da:	d902      	bls.n	80079e2 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80079dc:	2303      	movs	r3, #3
 80079de:	73fb      	strb	r3, [r7, #15]
      break;
 80079e0:	e004      	b.n	80079ec <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80079e2:	f7ff fe60 	bl	80076a6 <LL_RCC_PLLSAI1_IsReady>
 80079e6:	4603      	mov	r3, r0
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d1f0      	bne.n	80079ce <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80079ec:	7bfb      	ldrb	r3, [r7, #15]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d137      	bne.n	8007a62 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80079f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80079f6:	691b      	ldr	r3, [r3, #16]
 80079f8:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	021b      	lsls	r3, r3, #8
 8007a02:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007a06:	4313      	orrs	r3, r2
 8007a08:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8007a0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a0e:	691b      	ldr	r3, [r3, #16]
 8007a10:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	685b      	ldr	r3, [r3, #4]
 8007a18:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007a1c:	4313      	orrs	r3, r2
 8007a1e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8007a20:	f7ff fe23 	bl	800766a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a24:	f7fd fb64 	bl	80050f0 <HAL_GetTick>
 8007a28:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007a2a:	e009      	b.n	8007a40 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007a2c:	f7fd fb60 	bl	80050f0 <HAL_GetTick>
 8007a30:	4602      	mov	r2, r0
 8007a32:	68bb      	ldr	r3, [r7, #8]
 8007a34:	1ad3      	subs	r3, r2, r3
 8007a36:	2b02      	cmp	r3, #2
 8007a38:	d902      	bls.n	8007a40 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8007a3a:	2303      	movs	r3, #3
 8007a3c:	73fb      	strb	r3, [r7, #15]
        break;
 8007a3e:	e004      	b.n	8007a4a <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007a40:	f7ff fe31 	bl	80076a6 <LL_RCC_PLLSAI1_IsReady>
 8007a44:	4603      	mov	r3, r0
 8007a46:	2b01      	cmp	r3, #1
 8007a48:	d1f0      	bne.n	8007a2c <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8007a4a:	7bfb      	ldrb	r3, [r7, #15]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d108      	bne.n	8007a62 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8007a50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a54:	691a      	ldr	r2, [r3, #16]
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	691b      	ldr	r3, [r3, #16]
 8007a5a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007a5e:	4313      	orrs	r3, r2
 8007a60:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8007a62:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a64:	4618      	mov	r0, r3
 8007a66:	3710      	adds	r7, #16
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	bd80      	pop	{r7, pc}

08007a6c <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b084      	sub	sp, #16
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007a74:	2300      	movs	r3, #0
 8007a76:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8007a78:	f7ff fe06 	bl	8007688 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007a7c:	f7fd fb38 	bl	80050f0 <HAL_GetTick>
 8007a80:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007a82:	e009      	b.n	8007a98 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007a84:	f7fd fb34 	bl	80050f0 <HAL_GetTick>
 8007a88:	4602      	mov	r2, r0
 8007a8a:	68bb      	ldr	r3, [r7, #8]
 8007a8c:	1ad3      	subs	r3, r2, r3
 8007a8e:	2b02      	cmp	r3, #2
 8007a90:	d902      	bls.n	8007a98 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8007a92:	2303      	movs	r3, #3
 8007a94:	73fb      	strb	r3, [r7, #15]
      break;
 8007a96:	e004      	b.n	8007aa2 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007a98:	f7ff fe05 	bl	80076a6 <LL_RCC_PLLSAI1_IsReady>
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d1f0      	bne.n	8007a84 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8007aa2:	7bfb      	ldrb	r3, [r7, #15]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d137      	bne.n	8007b18 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8007aa8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007aac:	691b      	ldr	r3, [r3, #16]
 8007aae:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	021b      	lsls	r3, r3, #8
 8007ab8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007abc:	4313      	orrs	r3, r2
 8007abe:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8007ac0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ac4:	691b      	ldr	r3, [r3, #16]
 8007ac6:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	689b      	ldr	r3, [r3, #8]
 8007ace:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007ad2:	4313      	orrs	r3, r2
 8007ad4:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8007ad6:	f7ff fdc8 	bl	800766a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ada:	f7fd fb09 	bl	80050f0 <HAL_GetTick>
 8007ade:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007ae0:	e009      	b.n	8007af6 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007ae2:	f7fd fb05 	bl	80050f0 <HAL_GetTick>
 8007ae6:	4602      	mov	r2, r0
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	1ad3      	subs	r3, r2, r3
 8007aec:	2b02      	cmp	r3, #2
 8007aee:	d902      	bls.n	8007af6 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8007af0:	2303      	movs	r3, #3
 8007af2:	73fb      	strb	r3, [r7, #15]
        break;
 8007af4:	e004      	b.n	8007b00 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007af6:	f7ff fdd6 	bl	80076a6 <LL_RCC_PLLSAI1_IsReady>
 8007afa:	4603      	mov	r3, r0
 8007afc:	2b01      	cmp	r3, #1
 8007afe:	d1f0      	bne.n	8007ae2 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8007b00:	7bfb      	ldrb	r3, [r7, #15]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d108      	bne.n	8007b18 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8007b06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b0a:	691a      	ldr	r2, [r3, #16]
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	691b      	ldr	r3, [r3, #16]
 8007b10:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007b14:	4313      	orrs	r3, r2
 8007b16:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8007b18:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	3710      	adds	r7, #16
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bd80      	pop	{r7, pc}

08007b22 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8007b22:	b580      	push	{r7, lr}
 8007b24:	b084      	sub	sp, #16
 8007b26:	af00      	add	r7, sp, #0
 8007b28:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8007b2e:	f7ff fdab 	bl	8007688 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007b32:	f7fd fadd 	bl	80050f0 <HAL_GetTick>
 8007b36:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007b38:	e009      	b.n	8007b4e <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007b3a:	f7fd fad9 	bl	80050f0 <HAL_GetTick>
 8007b3e:	4602      	mov	r2, r0
 8007b40:	68bb      	ldr	r3, [r7, #8]
 8007b42:	1ad3      	subs	r3, r2, r3
 8007b44:	2b02      	cmp	r3, #2
 8007b46:	d902      	bls.n	8007b4e <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8007b48:	2303      	movs	r3, #3
 8007b4a:	73fb      	strb	r3, [r7, #15]
      break;
 8007b4c:	e004      	b.n	8007b58 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007b4e:	f7ff fdaa 	bl	80076a6 <LL_RCC_PLLSAI1_IsReady>
 8007b52:	4603      	mov	r3, r0
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d1f0      	bne.n	8007b3a <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8007b58:	7bfb      	ldrb	r3, [r7, #15]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d137      	bne.n	8007bce <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8007b5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b62:	691b      	ldr	r3, [r3, #16]
 8007b64:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	021b      	lsls	r3, r3, #8
 8007b6e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007b72:	4313      	orrs	r3, r2
 8007b74:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8007b76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b7a:	691b      	ldr	r3, [r3, #16]
 8007b7c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	68db      	ldr	r3, [r3, #12]
 8007b84:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007b88:	4313      	orrs	r3, r2
 8007b8a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8007b8c:	f7ff fd6d 	bl	800766a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b90:	f7fd faae 	bl	80050f0 <HAL_GetTick>
 8007b94:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007b96:	e009      	b.n	8007bac <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007b98:	f7fd faaa 	bl	80050f0 <HAL_GetTick>
 8007b9c:	4602      	mov	r2, r0
 8007b9e:	68bb      	ldr	r3, [r7, #8]
 8007ba0:	1ad3      	subs	r3, r2, r3
 8007ba2:	2b02      	cmp	r3, #2
 8007ba4:	d902      	bls.n	8007bac <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8007ba6:	2303      	movs	r3, #3
 8007ba8:	73fb      	strb	r3, [r7, #15]
        break;
 8007baa:	e004      	b.n	8007bb6 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007bac:	f7ff fd7b 	bl	80076a6 <LL_RCC_PLLSAI1_IsReady>
 8007bb0:	4603      	mov	r3, r0
 8007bb2:	2b01      	cmp	r3, #1
 8007bb4:	d1f0      	bne.n	8007b98 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8007bb6:	7bfb      	ldrb	r3, [r7, #15]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d108      	bne.n	8007bce <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8007bbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007bc0:	691a      	ldr	r2, [r3, #16]
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	691b      	ldr	r3, [r3, #16]
 8007bc6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007bca:	4313      	orrs	r3, r2
 8007bcc:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8007bce:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	3710      	adds	r7, #16
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	bd80      	pop	{r7, pc}

08007bd8 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b082      	sub	sp, #8
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d101      	bne.n	8007bea <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8007be6:	2301      	movs	r3, #1
 8007be8:	e027      	b.n	8007c3a <HAL_RNG_Init+0x62>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	7a5b      	ldrb	r3, [r3, #9]
 8007bee:	b2db      	uxtb	r3, r3
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d105      	bne.n	8007c00 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8007bfa:	6878      	ldr	r0, [r7, #4]
 8007bfc:	f7fb fa04 	bl	8003008 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2202      	movs	r2, #2
 8007c04:	725a      	strb	r2, [r3, #9]

  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f023 0120 	bic.w	r1, r3, #32
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	685a      	ldr	r2, [r3, #4]
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	430a      	orrs	r2, r1
 8007c1a:	601a      	str	r2, [r3, #0]

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	681a      	ldr	r2, [r3, #0]
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	f042 0204 	orr.w	r2, r2, #4
 8007c2a:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2201      	movs	r2, #1
 8007c30:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2200      	movs	r2, #0
 8007c36:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 8007c38:	2300      	movs	r3, #0
}
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	3708      	adds	r7, #8
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	bd80      	pop	{r7, pc}
	...

08007c44 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b084      	sub	sp, #16
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d101      	bne.n	8007c56 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8007c52:	2301      	movs	r3, #1
 8007c54:	e09f      	b.n	8007d96 <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8007c5c:	b2db      	uxtb	r3, r3
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d106      	bne.n	8007c70 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2200      	movs	r2, #0
 8007c66:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8007c6a:	6878      	ldr	r0, [r7, #4]
 8007c6c:	f7fb f9f6 	bl	800305c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2202      	movs	r2, #2
 8007c74:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8007c78:	4b49      	ldr	r3, [pc, #292]	; (8007da0 <HAL_RTC_Init+0x15c>)
 8007c7a:	68db      	ldr	r3, [r3, #12]
 8007c7c:	f003 0310 	and.w	r3, r3, #16
 8007c80:	2b10      	cmp	r3, #16
 8007c82:	d07e      	beq.n	8007d82 <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	22ca      	movs	r2, #202	; 0xca
 8007c8a:	625a      	str	r2, [r3, #36]	; 0x24
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	2253      	movs	r2, #83	; 0x53
 8007c92:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8007c94:	6878      	ldr	r0, [r7, #4]
 8007c96:	f000 f8ab 	bl	8007df0 <RTC_EnterInitMode>
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d00a      	beq.n	8007cb6 <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	22ff      	movs	r2, #255	; 0xff
 8007ca6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2204      	movs	r2, #4
 8007cac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 8007cb0:	2301      	movs	r3, #1
 8007cb2:	73fb      	strb	r3, [r7, #15]
 8007cb4:	e067      	b.n	8007d86 <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	689b      	ldr	r3, [r3, #8]
 8007cbc:	687a      	ldr	r2, [r7, #4]
 8007cbe:	6812      	ldr	r2, [r2, #0]
 8007cc0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007cc4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007cc8:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	6899      	ldr	r1, [r3, #8]
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	685a      	ldr	r2, [r3, #4]
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	691b      	ldr	r3, [r3, #16]
 8007cd8:	431a      	orrs	r2, r3
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	699b      	ldr	r3, [r3, #24]
 8007cde:	431a      	orrs	r2, r3
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	430a      	orrs	r2, r1
 8007ce6:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	687a      	ldr	r2, [r7, #4]
 8007cee:	68d2      	ldr	r2, [r2, #12]
 8007cf0:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	6919      	ldr	r1, [r3, #16]
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	689b      	ldr	r3, [r3, #8]
 8007cfc:	041a      	lsls	r2, r3, #16
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	430a      	orrs	r2, r1
 8007d04:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	68da      	ldr	r2, [r3, #12]
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007d14:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f022 0203 	bic.w	r2, r2, #3
 8007d24:	64da      	str	r2, [r3, #76]	; 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	69da      	ldr	r2, [r3, #28]
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	695b      	ldr	r3, [r3, #20]
 8007d34:	431a      	orrs	r2, r3
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	430a      	orrs	r2, r1
 8007d3c:	64da      	str	r2, [r3, #76]	; 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	689b      	ldr	r3, [r3, #8]
 8007d44:	f003 0320 	and.w	r3, r3, #32
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d113      	bne.n	8007d74 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	f000 f829 	bl	8007da4 <HAL_RTC_WaitForSynchro>
 8007d52:	4603      	mov	r3, r0
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d00d      	beq.n	8007d74 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	22ff      	movs	r2, #255	; 0xff
 8007d5e:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2204      	movs	r2, #4
 8007d64:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 8007d70:	2301      	movs	r3, #1
 8007d72:	e010      	b.n	8007d96 <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	22ff      	movs	r2, #255	; 0xff
 8007d7a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      status = HAL_OK;
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	73fb      	strb	r3, [r7, #15]
 8007d80:	e001      	b.n	8007d86 <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 8007d82:	2300      	movs	r3, #0
 8007d84:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8007d86:	7bfb      	ldrb	r3, [r7, #15]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d103      	bne.n	8007d94 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2201      	movs	r2, #1
 8007d90:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  return status;
 8007d94:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d96:	4618      	mov	r0, r3
 8007d98:	3710      	adds	r7, #16
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	bd80      	pop	{r7, pc}
 8007d9e:	bf00      	nop
 8007da0:	40002800 	.word	0x40002800

08007da4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b084      	sub	sp, #16
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	68da      	ldr	r2, [r3, #12]
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007dba:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8007dbc:	f7fd f998 	bl	80050f0 <HAL_GetTick>
 8007dc0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007dc2:	e009      	b.n	8007dd8 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007dc4:	f7fd f994 	bl	80050f0 <HAL_GetTick>
 8007dc8:	4602      	mov	r2, r0
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	1ad3      	subs	r3, r2, r3
 8007dce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007dd2:	d901      	bls.n	8007dd8 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8007dd4:	2303      	movs	r3, #3
 8007dd6:	e007      	b.n	8007de8 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	68db      	ldr	r3, [r3, #12]
 8007dde:	f003 0320 	and.w	r3, r3, #32
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d0ee      	beq.n	8007dc4 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8007de6:	2300      	movs	r3, #0
}
 8007de8:	4618      	mov	r0, r3
 8007dea:	3710      	adds	r7, #16
 8007dec:	46bd      	mov	sp, r7
 8007dee:	bd80      	pop	{r7, pc}

08007df0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b084      	sub	sp, #16
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	68db      	ldr	r3, [r3, #12]
 8007dfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d119      	bne.n	8007e3a <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f04f 32ff 	mov.w	r2, #4294967295
 8007e0e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007e10:	f7fd f96e 	bl	80050f0 <HAL_GetTick>
 8007e14:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007e16:	e009      	b.n	8007e2c <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8007e18:	f7fd f96a 	bl	80050f0 <HAL_GetTick>
 8007e1c:	4602      	mov	r2, r0
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	1ad3      	subs	r3, r2, r3
 8007e22:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007e26:	d901      	bls.n	8007e2c <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8007e28:	2303      	movs	r3, #3
 8007e2a:	e007      	b.n	8007e3c <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	68db      	ldr	r3, [r3, #12]
 8007e32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d0ee      	beq.n	8007e18 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8007e3a:	2300      	movs	r3, #0
}
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	3710      	adds	r7, #16
 8007e40:	46bd      	mov	sp, r7
 8007e42:	bd80      	pop	{r7, pc}

08007e44 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b086      	sub	sp, #24
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	60f8      	str	r0, [r7, #12]
 8007e4c:	60b9      	str	r1, [r7, #8]
 8007e4e:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007e56:	2b01      	cmp	r3, #1
 8007e58:	d101      	bne.n	8007e5e <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8007e5a:	2302      	movs	r3, #2
 8007e5c:	e0a8      	b.n	8007fb0 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	2201      	movs	r2, #1
 8007e62:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	2202      	movs	r2, #2
 8007e6a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	22ca      	movs	r2, #202	; 0xca
 8007e74:	625a      	str	r2, [r3, #36]	; 0x24
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	2253      	movs	r2, #83	; 0x53
 8007e7c:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	689b      	ldr	r3, [r3, #8]
 8007e84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d020      	beq.n	8007ece <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 8007e8c:	f7fd f930 	bl	80050f0 <HAL_GetTick>
 8007e90:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8007e92:	e015      	b.n	8007ec0 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007e94:	f7fd f92c 	bl	80050f0 <HAL_GetTick>
 8007e98:	4602      	mov	r2, r0
 8007e9a:	697b      	ldr	r3, [r7, #20]
 8007e9c:	1ad3      	subs	r3, r2, r3
 8007e9e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007ea2:	d90d      	bls.n	8007ec0 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	22ff      	movs	r2, #255	; 0xff
 8007eaa:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	2203      	movs	r2, #3
 8007eb0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8007ebc:	2303      	movs	r3, #3
 8007ebe:	e077      	b.n	8007fb0 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	68db      	ldr	r3, [r3, #12]
 8007ec6:	f003 0304 	and.w	r3, r3, #4
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d1e2      	bne.n	8007e94 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	689a      	ldr	r2, [r3, #8]
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007edc:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	68db      	ldr	r3, [r3, #12]
 8007ee4:	b2da      	uxtb	r2, r3
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8007eee:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8007ef0:	f7fd f8fe 	bl	80050f0 <HAL_GetTick>
 8007ef4:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8007ef6:	e015      	b.n	8007f24 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007ef8:	f7fd f8fa 	bl	80050f0 <HAL_GetTick>
 8007efc:	4602      	mov	r2, r0
 8007efe:	697b      	ldr	r3, [r7, #20]
 8007f00:	1ad3      	subs	r3, r2, r3
 8007f02:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007f06:	d90d      	bls.n	8007f24 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	22ff      	movs	r2, #255	; 0xff
 8007f0e:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	2203      	movs	r2, #3
 8007f14:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8007f20:	2303      	movs	r3, #3
 8007f22:	e045      	b.n	8007fb0 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	68db      	ldr	r3, [r3, #12]
 8007f2a:	f003 0304 	and.w	r3, r3, #4
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d0e2      	beq.n	8007ef8 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	68ba      	ldr	r2, [r7, #8]
 8007f38:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	689a      	ldr	r2, [r3, #8]
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	f022 0207 	bic.w	r2, r2, #7
 8007f48:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	6899      	ldr	r1, [r3, #8]
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	687a      	ldr	r2, [r7, #4]
 8007f56:	430a      	orrs	r2, r1
 8007f58:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8007f5a:	4b17      	ldr	r3, [pc, #92]	; (8007fb8 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8007f5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f60:	4a15      	ldr	r2, [pc, #84]	; (8007fb8 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8007f62:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007f66:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8007f6a:	4b13      	ldr	r3, [pc, #76]	; (8007fb8 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	4a12      	ldr	r2, [pc, #72]	; (8007fb8 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8007f70:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007f74:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	689a      	ldr	r2, [r3, #8]
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007f84:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	689a      	ldr	r2, [r3, #8]
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007f94:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	22ff      	movs	r2, #255	; 0xff
 8007f9c:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	2201      	movs	r2, #1
 8007fa2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	2200      	movs	r2, #0
 8007faa:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8007fae:	2300      	movs	r3, #0
}
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	3718      	adds	r7, #24
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	bd80      	pop	{r7, pc}
 8007fb8:	58000800 	.word	0x58000800

08007fbc <LL_RCC_GetUSARTClockSource>:
{
 8007fbc:	b480      	push	{r7}
 8007fbe:	b083      	sub	sp, #12
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8007fc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007fc8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	4013      	ands	r3, r2
}
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	370c      	adds	r7, #12
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fda:	4770      	bx	lr

08007fdc <LL_RCC_GetLPUARTClockSource>:
{
 8007fdc:	b480      	push	{r7}
 8007fde:	b083      	sub	sp, #12
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8007fe4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007fe8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	4013      	ands	r3, r2
}
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	370c      	adds	r7, #12
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffa:	4770      	bx	lr

08007ffc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b082      	sub	sp, #8
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d101      	bne.n	800800e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800800a:	2301      	movs	r3, #1
 800800c:	e042      	b.n	8008094 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008014:	2b00      	cmp	r3, #0
 8008016:	d106      	bne.n	8008026 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2200      	movs	r2, #0
 800801c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008020:	6878      	ldr	r0, [r7, #4]
 8008022:	f7fa fefd 	bl	8002e20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2224      	movs	r2, #36	; 0x24
 800802a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	681a      	ldr	r2, [r3, #0]
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	f022 0201 	bic.w	r2, r2, #1
 800803c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008042:	2b00      	cmp	r3, #0
 8008044:	d002      	beq.n	800804c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008046:	6878      	ldr	r0, [r7, #4]
 8008048:	f000 fe60 	bl	8008d0c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800804c:	6878      	ldr	r0, [r7, #4]
 800804e:	f000 fc35 	bl	80088bc <UART_SetConfig>
 8008052:	4603      	mov	r3, r0
 8008054:	2b01      	cmp	r3, #1
 8008056:	d101      	bne.n	800805c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008058:	2301      	movs	r3, #1
 800805a:	e01b      	b.n	8008094 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	685a      	ldr	r2, [r3, #4]
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800806a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	689a      	ldr	r2, [r3, #8]
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800807a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	681a      	ldr	r2, [r3, #0]
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	f042 0201 	orr.w	r2, r2, #1
 800808a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800808c:	6878      	ldr	r0, [r7, #4]
 800808e:	f000 fedf 	bl	8008e50 <UART_CheckIdleState>
 8008092:	4603      	mov	r3, r0
}
 8008094:	4618      	mov	r0, r3
 8008096:	3708      	adds	r7, #8
 8008098:	46bd      	mov	sp, r7
 800809a:	bd80      	pop	{r7, pc}

0800809c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b08a      	sub	sp, #40	; 0x28
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	60f8      	str	r0, [r7, #12]
 80080a4:	60b9      	str	r1, [r7, #8]
 80080a6:	4613      	mov	r3, r2
 80080a8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80080b0:	2b20      	cmp	r3, #32
 80080b2:	d137      	bne.n	8008124 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80080b4:	68bb      	ldr	r3, [r7, #8]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d002      	beq.n	80080c0 <HAL_UART_Receive_IT+0x24>
 80080ba:	88fb      	ldrh	r3, [r7, #6]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d101      	bne.n	80080c4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80080c0:	2301      	movs	r3, #1
 80080c2:	e030      	b.n	8008126 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	2200      	movs	r2, #0
 80080c8:	66da      	str	r2, [r3, #108]	; 0x6c

#if defined(LPUART1)
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	4a18      	ldr	r2, [pc, #96]	; (8008130 <HAL_UART_Receive_IT+0x94>)
 80080d0:	4293      	cmp	r3, r2
 80080d2:	d01f      	beq.n	8008114 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	685b      	ldr	r3, [r3, #4]
 80080da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d018      	beq.n	8008114 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080e8:	697b      	ldr	r3, [r7, #20]
 80080ea:	e853 3f00 	ldrex	r3, [r3]
 80080ee:	613b      	str	r3, [r7, #16]
   return(result);
 80080f0:	693b      	ldr	r3, [r7, #16]
 80080f2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80080f6:	627b      	str	r3, [r7, #36]	; 0x24
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	461a      	mov	r2, r3
 80080fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008100:	623b      	str	r3, [r7, #32]
 8008102:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008104:	69f9      	ldr	r1, [r7, #28]
 8008106:	6a3a      	ldr	r2, [r7, #32]
 8008108:	e841 2300 	strex	r3, r2, [r1]
 800810c:	61bb      	str	r3, [r7, #24]
   return(result);
 800810e:	69bb      	ldr	r3, [r7, #24]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d1e6      	bne.n	80080e2 <HAL_UART_Receive_IT+0x46>
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
    }
#endif /* LPUART1 */

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008114:	88fb      	ldrh	r3, [r7, #6]
 8008116:	461a      	mov	r2, r3
 8008118:	68b9      	ldr	r1, [r7, #8]
 800811a:	68f8      	ldr	r0, [r7, #12]
 800811c:	f000 ffaa 	bl	8009074 <UART_Start_Receive_IT>
 8008120:	4603      	mov	r3, r0
 8008122:	e000      	b.n	8008126 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008124:	2302      	movs	r3, #2
  }
}
 8008126:	4618      	mov	r0, r3
 8008128:	3728      	adds	r7, #40	; 0x28
 800812a:	46bd      	mov	sp, r7
 800812c:	bd80      	pop	{r7, pc}
 800812e:	bf00      	nop
 8008130:	40008000 	.word	0x40008000

08008134 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b08a      	sub	sp, #40	; 0x28
 8008138:	af00      	add	r7, sp, #0
 800813a:	60f8      	str	r0, [r7, #12]
 800813c:	60b9      	str	r1, [r7, #8]
 800813e:	4613      	mov	r3, r2
 8008140:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008148:	2b20      	cmp	r3, #32
 800814a:	d167      	bne.n	800821c <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800814c:	68bb      	ldr	r3, [r7, #8]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d002      	beq.n	8008158 <HAL_UART_Transmit_DMA+0x24>
 8008152:	88fb      	ldrh	r3, [r7, #6]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d101      	bne.n	800815c <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8008158:	2301      	movs	r3, #1
 800815a:	e060      	b.n	800821e <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	68ba      	ldr	r2, [r7, #8]
 8008160:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	88fa      	ldrh	r2, [r7, #6]
 8008166:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	88fa      	ldrh	r2, [r7, #6]
 800816e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	2200      	movs	r2, #0
 8008176:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	2221      	movs	r2, #33	; 0x21
 800817e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008186:	2b00      	cmp	r3, #0
 8008188:	d028      	beq.n	80081dc <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800818e:	4a26      	ldr	r2, [pc, #152]	; (8008228 <HAL_UART_Transmit_DMA+0xf4>)
 8008190:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008196:	4a25      	ldr	r2, [pc, #148]	; (800822c <HAL_UART_Transmit_DMA+0xf8>)
 8008198:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800819e:	4a24      	ldr	r2, [pc, #144]	; (8008230 <HAL_UART_Transmit_DMA+0xfc>)
 80081a0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80081a6:	2200      	movs	r2, #0
 80081a8:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081b2:	4619      	mov	r1, r3
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	3328      	adds	r3, #40	; 0x28
 80081ba:	461a      	mov	r2, r3
 80081bc:	88fb      	ldrh	r3, [r7, #6]
 80081be:	f7fd fa09 	bl	80055d4 <HAL_DMA_Start_IT>
 80081c2:	4603      	mov	r3, r0
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d009      	beq.n	80081dc <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	2210      	movs	r2, #16
 80081cc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	2220      	movs	r2, #32
 80081d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 80081d8:	2301      	movs	r3, #1
 80081da:	e020      	b.n	800821e <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	2240      	movs	r2, #64	; 0x40
 80081e2:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	3308      	adds	r3, #8
 80081ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081ec:	697b      	ldr	r3, [r7, #20]
 80081ee:	e853 3f00 	ldrex	r3, [r3]
 80081f2:	613b      	str	r3, [r7, #16]
   return(result);
 80081f4:	693b      	ldr	r3, [r7, #16]
 80081f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081fa:	627b      	str	r3, [r7, #36]	; 0x24
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	3308      	adds	r3, #8
 8008202:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008204:	623a      	str	r2, [r7, #32]
 8008206:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008208:	69f9      	ldr	r1, [r7, #28]
 800820a:	6a3a      	ldr	r2, [r7, #32]
 800820c:	e841 2300 	strex	r3, r2, [r1]
 8008210:	61bb      	str	r3, [r7, #24]
   return(result);
 8008212:	69bb      	ldr	r3, [r7, #24]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d1e5      	bne.n	80081e4 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8008218:	2300      	movs	r3, #0
 800821a:	e000      	b.n	800821e <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800821c:	2302      	movs	r3, #2
  }
}
 800821e:	4618      	mov	r0, r3
 8008220:	3728      	adds	r7, #40	; 0x28
 8008222:	46bd      	mov	sp, r7
 8008224:	bd80      	pop	{r7, pc}
 8008226:	bf00      	nop
 8008228:	08009407 	.word	0x08009407
 800822c:	080094a1 	.word	0x080094a1
 8008230:	080094bd 	.word	0x080094bd

08008234 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008234:	b580      	push	{r7, lr}
 8008236:	b0ba      	sub	sp, #232	; 0xe8
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	69db      	ldr	r3, [r3, #28]
 8008242:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	689b      	ldr	r3, [r3, #8]
 8008256:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800825a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800825e:	f640 030f 	movw	r3, #2063	; 0x80f
 8008262:	4013      	ands	r3, r2
 8008264:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8008268:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800826c:	2b00      	cmp	r3, #0
 800826e:	d11b      	bne.n	80082a8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008270:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008274:	f003 0320 	and.w	r3, r3, #32
 8008278:	2b00      	cmp	r3, #0
 800827a:	d015      	beq.n	80082a8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800827c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008280:	f003 0320 	and.w	r3, r3, #32
 8008284:	2b00      	cmp	r3, #0
 8008286:	d105      	bne.n	8008294 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008288:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800828c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008290:	2b00      	cmp	r3, #0
 8008292:	d009      	beq.n	80082a8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008298:	2b00      	cmp	r3, #0
 800829a:	f000 82e3 	beq.w	8008864 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80082a2:	6878      	ldr	r0, [r7, #4]
 80082a4:	4798      	blx	r3
      }
      return;
 80082a6:	e2dd      	b.n	8008864 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80082a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	f000 8123 	beq.w	80084f8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80082b2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80082b6:	4b8d      	ldr	r3, [pc, #564]	; (80084ec <HAL_UART_IRQHandler+0x2b8>)
 80082b8:	4013      	ands	r3, r2
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d106      	bne.n	80082cc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80082be:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80082c2:	4b8b      	ldr	r3, [pc, #556]	; (80084f0 <HAL_UART_IRQHandler+0x2bc>)
 80082c4:	4013      	ands	r3, r2
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	f000 8116 	beq.w	80084f8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80082cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082d0:	f003 0301 	and.w	r3, r3, #1
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d011      	beq.n	80082fc <HAL_UART_IRQHandler+0xc8>
 80082d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80082dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d00b      	beq.n	80082fc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	2201      	movs	r2, #1
 80082ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082f2:	f043 0201 	orr.w	r2, r3, #1
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80082fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008300:	f003 0302 	and.w	r3, r3, #2
 8008304:	2b00      	cmp	r3, #0
 8008306:	d011      	beq.n	800832c <HAL_UART_IRQHandler+0xf8>
 8008308:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800830c:	f003 0301 	and.w	r3, r3, #1
 8008310:	2b00      	cmp	r3, #0
 8008312:	d00b      	beq.n	800832c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	2202      	movs	r2, #2
 800831a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008322:	f043 0204 	orr.w	r2, r3, #4
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800832c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008330:	f003 0304 	and.w	r3, r3, #4
 8008334:	2b00      	cmp	r3, #0
 8008336:	d011      	beq.n	800835c <HAL_UART_IRQHandler+0x128>
 8008338:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800833c:	f003 0301 	and.w	r3, r3, #1
 8008340:	2b00      	cmp	r3, #0
 8008342:	d00b      	beq.n	800835c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	2204      	movs	r2, #4
 800834a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008352:	f043 0202 	orr.w	r2, r3, #2
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800835c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008360:	f003 0308 	and.w	r3, r3, #8
 8008364:	2b00      	cmp	r3, #0
 8008366:	d017      	beq.n	8008398 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008368:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800836c:	f003 0320 	and.w	r3, r3, #32
 8008370:	2b00      	cmp	r3, #0
 8008372:	d105      	bne.n	8008380 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008374:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8008378:	4b5c      	ldr	r3, [pc, #368]	; (80084ec <HAL_UART_IRQHandler+0x2b8>)
 800837a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800837c:	2b00      	cmp	r3, #0
 800837e:	d00b      	beq.n	8008398 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	2208      	movs	r2, #8
 8008386:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800838e:	f043 0208 	orr.w	r2, r3, #8
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008398:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800839c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d012      	beq.n	80083ca <HAL_UART_IRQHandler+0x196>
 80083a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80083a8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d00c      	beq.n	80083ca <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80083b8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083c0:	f043 0220 	orr.w	r2, r3, #32
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	f000 8249 	beq.w	8008868 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80083d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083da:	f003 0320 	and.w	r3, r3, #32
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d013      	beq.n	800840a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80083e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80083e6:	f003 0320 	and.w	r3, r3, #32
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d105      	bne.n	80083fa <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80083ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80083f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d007      	beq.n	800840a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d003      	beq.n	800840a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008406:	6878      	ldr	r0, [r7, #4]
 8008408:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008410:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	689b      	ldr	r3, [r3, #8]
 800841a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800841e:	2b40      	cmp	r3, #64	; 0x40
 8008420:	d005      	beq.n	800842e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008422:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008426:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800842a:	2b00      	cmp	r3, #0
 800842c:	d054      	beq.n	80084d8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800842e:	6878      	ldr	r0, [r7, #4]
 8008430:	f000 ff83 	bl	800933a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	689b      	ldr	r3, [r3, #8]
 800843a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800843e:	2b40      	cmp	r3, #64	; 0x40
 8008440:	d146      	bne.n	80084d0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	3308      	adds	r3, #8
 8008448:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800844c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008450:	e853 3f00 	ldrex	r3, [r3]
 8008454:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008458:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800845c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008460:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	3308      	adds	r3, #8
 800846a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800846e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008472:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008476:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800847a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800847e:	e841 2300 	strex	r3, r2, [r1]
 8008482:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008486:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800848a:	2b00      	cmp	r3, #0
 800848c:	d1d9      	bne.n	8008442 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008494:	2b00      	cmp	r3, #0
 8008496:	d017      	beq.n	80084c8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800849e:	4a15      	ldr	r2, [pc, #84]	; (80084f4 <HAL_UART_IRQHandler+0x2c0>)
 80084a0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80084a8:	4618      	mov	r0, r3
 80084aa:	f7fd f96d 	bl	8005788 <HAL_DMA_Abort_IT>
 80084ae:	4603      	mov	r3, r0
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d019      	beq.n	80084e8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80084ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084bc:	687a      	ldr	r2, [r7, #4]
 80084be:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80084c2:	4610      	mov	r0, r2
 80084c4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084c6:	e00f      	b.n	80084e8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80084c8:	6878      	ldr	r0, [r7, #4]
 80084ca:	f000 f9e1 	bl	8008890 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084ce:	e00b      	b.n	80084e8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80084d0:	6878      	ldr	r0, [r7, #4]
 80084d2:	f000 f9dd 	bl	8008890 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084d6:	e007      	b.n	80084e8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80084d8:	6878      	ldr	r0, [r7, #4]
 80084da:	f000 f9d9 	bl	8008890 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	2200      	movs	r2, #0
 80084e2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 80084e6:	e1bf      	b.n	8008868 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084e8:	bf00      	nop
    return;
 80084ea:	e1bd      	b.n	8008868 <HAL_UART_IRQHandler+0x634>
 80084ec:	10000001 	.word	0x10000001
 80084f0:	04000120 	.word	0x04000120
 80084f4:	0800953d 	.word	0x0800953d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80084fc:	2b01      	cmp	r3, #1
 80084fe:	f040 8153 	bne.w	80087a8 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008502:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008506:	f003 0310 	and.w	r3, r3, #16
 800850a:	2b00      	cmp	r3, #0
 800850c:	f000 814c 	beq.w	80087a8 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008510:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008514:	f003 0310 	and.w	r3, r3, #16
 8008518:	2b00      	cmp	r3, #0
 800851a:	f000 8145 	beq.w	80087a8 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	2210      	movs	r2, #16
 8008524:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	689b      	ldr	r3, [r3, #8]
 800852c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008530:	2b40      	cmp	r3, #64	; 0x40
 8008532:	f040 80bb 	bne.w	80086ac <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	685b      	ldr	r3, [r3, #4]
 8008540:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008544:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008548:	2b00      	cmp	r3, #0
 800854a:	f000 818f 	beq.w	800886c <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008554:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008558:	429a      	cmp	r2, r3
 800855a:	f080 8187 	bcs.w	800886c <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008564:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	f003 0320 	and.w	r3, r3, #32
 8008576:	2b00      	cmp	r3, #0
 8008578:	f040 8087 	bne.w	800868a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008584:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008588:	e853 3f00 	ldrex	r3, [r3]
 800858c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008590:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008594:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008598:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	461a      	mov	r2, r3
 80085a2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80085a6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80085aa:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085ae:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80085b2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80085b6:	e841 2300 	strex	r3, r2, [r1]
 80085ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80085be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d1da      	bne.n	800857c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	3308      	adds	r3, #8
 80085cc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80085d0:	e853 3f00 	ldrex	r3, [r3]
 80085d4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80085d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80085d8:	f023 0301 	bic.w	r3, r3, #1
 80085dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	3308      	adds	r3, #8
 80085e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80085ea:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80085ee:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085f0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80085f2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80085f6:	e841 2300 	strex	r3, r2, [r1]
 80085fa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80085fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d1e1      	bne.n	80085c6 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	3308      	adds	r3, #8
 8008608:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800860a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800860c:	e853 3f00 	ldrex	r3, [r3]
 8008610:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008612:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008614:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008618:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	3308      	adds	r3, #8
 8008622:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008626:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008628:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800862a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800862c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800862e:	e841 2300 	strex	r3, r2, [r1]
 8008632:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008634:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008636:	2b00      	cmp	r3, #0
 8008638:	d1e3      	bne.n	8008602 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	2220      	movs	r2, #32
 800863e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	2200      	movs	r2, #0
 8008646:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800864e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008650:	e853 3f00 	ldrex	r3, [r3]
 8008654:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008656:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008658:	f023 0310 	bic.w	r3, r3, #16
 800865c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	461a      	mov	r2, r3
 8008666:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800866a:	65bb      	str	r3, [r7, #88]	; 0x58
 800866c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800866e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008670:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008672:	e841 2300 	strex	r3, r2, [r1]
 8008676:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008678:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800867a:	2b00      	cmp	r3, #0
 800867c:	d1e4      	bne.n	8008648 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008684:	4618      	mov	r0, r3
 8008686:	f7fd f820 	bl	80056ca <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	2202      	movs	r2, #2
 800868e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800869c:	b29b      	uxth	r3, r3
 800869e:	1ad3      	subs	r3, r2, r3
 80086a0:	b29b      	uxth	r3, r3
 80086a2:	4619      	mov	r1, r3
 80086a4:	6878      	ldr	r0, [r7, #4]
 80086a6:	f000 f8fd 	bl	80088a4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80086aa:	e0df      	b.n	800886c <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80086b8:	b29b      	uxth	r3, r3
 80086ba:	1ad3      	subs	r3, r2, r3
 80086bc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80086c6:	b29b      	uxth	r3, r3
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	f000 80d1 	beq.w	8008870 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 80086ce:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	f000 80cc 	beq.w	8008870 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086e0:	e853 3f00 	ldrex	r3, [r3]
 80086e4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80086e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80086ec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	461a      	mov	r2, r3
 80086f6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80086fa:	647b      	str	r3, [r7, #68]	; 0x44
 80086fc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086fe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008700:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008702:	e841 2300 	strex	r3, r2, [r1]
 8008706:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008708:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800870a:	2b00      	cmp	r3, #0
 800870c:	d1e4      	bne.n	80086d8 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	3308      	adds	r3, #8
 8008714:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008718:	e853 3f00 	ldrex	r3, [r3]
 800871c:	623b      	str	r3, [r7, #32]
   return(result);
 800871e:	6a3b      	ldr	r3, [r7, #32]
 8008720:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008724:	f023 0301 	bic.w	r3, r3, #1
 8008728:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	3308      	adds	r3, #8
 8008732:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008736:	633a      	str	r2, [r7, #48]	; 0x30
 8008738:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800873a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800873c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800873e:	e841 2300 	strex	r3, r2, [r1]
 8008742:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008746:	2b00      	cmp	r3, #0
 8008748:	d1e1      	bne.n	800870e <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	2220      	movs	r2, #32
 800874e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	2200      	movs	r2, #0
 8008756:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2200      	movs	r2, #0
 800875c:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008764:	693b      	ldr	r3, [r7, #16]
 8008766:	e853 3f00 	ldrex	r3, [r3]
 800876a:	60fb      	str	r3, [r7, #12]
   return(result);
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	f023 0310 	bic.w	r3, r3, #16
 8008772:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	461a      	mov	r2, r3
 800877c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008780:	61fb      	str	r3, [r7, #28]
 8008782:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008784:	69b9      	ldr	r1, [r7, #24]
 8008786:	69fa      	ldr	r2, [r7, #28]
 8008788:	e841 2300 	strex	r3, r2, [r1]
 800878c:	617b      	str	r3, [r7, #20]
   return(result);
 800878e:	697b      	ldr	r3, [r7, #20]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d1e4      	bne.n	800875e <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2202      	movs	r2, #2
 8008798:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800879a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800879e:	4619      	mov	r1, r3
 80087a0:	6878      	ldr	r0, [r7, #4]
 80087a2:	f000 f87f 	bl	80088a4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80087a6:	e063      	b.n	8008870 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80087a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d00e      	beq.n	80087d2 <HAL_UART_IRQHandler+0x59e>
 80087b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80087b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d008      	beq.n	80087d2 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80087c8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80087ca:	6878      	ldr	r0, [r7, #4]
 80087cc:	f001 fc14 	bl	8009ff8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80087d0:	e051      	b.n	8008876 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80087d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d014      	beq.n	8008808 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80087de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80087e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d105      	bne.n	80087f6 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80087ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80087ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d008      	beq.n	8008808 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d03a      	beq.n	8008874 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008802:	6878      	ldr	r0, [r7, #4]
 8008804:	4798      	blx	r3
    }
    return;
 8008806:	e035      	b.n	8008874 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008808:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800880c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008810:	2b00      	cmp	r3, #0
 8008812:	d009      	beq.n	8008828 <HAL_UART_IRQHandler+0x5f4>
 8008814:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008818:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800881c:	2b00      	cmp	r3, #0
 800881e:	d003      	beq.n	8008828 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8008820:	6878      	ldr	r0, [r7, #4]
 8008822:	f000 fea1 	bl	8009568 <UART_EndTransmit_IT>
    return;
 8008826:	e026      	b.n	8008876 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008828:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800882c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008830:	2b00      	cmp	r3, #0
 8008832:	d009      	beq.n	8008848 <HAL_UART_IRQHandler+0x614>
 8008834:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008838:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800883c:	2b00      	cmp	r3, #0
 800883e:	d003      	beq.n	8008848 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008840:	6878      	ldr	r0, [r7, #4]
 8008842:	f001 fbed 	bl	800a020 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008846:	e016      	b.n	8008876 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008848:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800884c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008850:	2b00      	cmp	r3, #0
 8008852:	d010      	beq.n	8008876 <HAL_UART_IRQHandler+0x642>
 8008854:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008858:	2b00      	cmp	r3, #0
 800885a:	da0c      	bge.n	8008876 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800885c:	6878      	ldr	r0, [r7, #4]
 800885e:	f001 fbd5 	bl	800a00c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008862:	e008      	b.n	8008876 <HAL_UART_IRQHandler+0x642>
      return;
 8008864:	bf00      	nop
 8008866:	e006      	b.n	8008876 <HAL_UART_IRQHandler+0x642>
    return;
 8008868:	bf00      	nop
 800886a:	e004      	b.n	8008876 <HAL_UART_IRQHandler+0x642>
      return;
 800886c:	bf00      	nop
 800886e:	e002      	b.n	8008876 <HAL_UART_IRQHandler+0x642>
      return;
 8008870:	bf00      	nop
 8008872:	e000      	b.n	8008876 <HAL_UART_IRQHandler+0x642>
    return;
 8008874:	bf00      	nop
  }
}
 8008876:	37e8      	adds	r7, #232	; 0xe8
 8008878:	46bd      	mov	sp, r7
 800887a:	bd80      	pop	{r7, pc}

0800887c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800887c:	b480      	push	{r7}
 800887e:	b083      	sub	sp, #12
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8008884:	bf00      	nop
 8008886:	370c      	adds	r7, #12
 8008888:	46bd      	mov	sp, r7
 800888a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888e:	4770      	bx	lr

08008890 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008890:	b480      	push	{r7}
 8008892:	b083      	sub	sp, #12
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008898:	bf00      	nop
 800889a:	370c      	adds	r7, #12
 800889c:	46bd      	mov	sp, r7
 800889e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a2:	4770      	bx	lr

080088a4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80088a4:	b480      	push	{r7}
 80088a6:	b083      	sub	sp, #12
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
 80088ac:	460b      	mov	r3, r1
 80088ae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80088b0:	bf00      	nop
 80088b2:	370c      	adds	r7, #12
 80088b4:	46bd      	mov	sp, r7
 80088b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ba:	4770      	bx	lr

080088bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80088bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80088c0:	b08c      	sub	sp, #48	; 0x30
 80088c2:	af00      	add	r7, sp, #0
 80088c4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80088c6:	2300      	movs	r3, #0
 80088c8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80088cc:	697b      	ldr	r3, [r7, #20]
 80088ce:	689a      	ldr	r2, [r3, #8]
 80088d0:	697b      	ldr	r3, [r7, #20]
 80088d2:	691b      	ldr	r3, [r3, #16]
 80088d4:	431a      	orrs	r2, r3
 80088d6:	697b      	ldr	r3, [r7, #20]
 80088d8:	695b      	ldr	r3, [r3, #20]
 80088da:	431a      	orrs	r2, r3
 80088dc:	697b      	ldr	r3, [r7, #20]
 80088de:	69db      	ldr	r3, [r3, #28]
 80088e0:	4313      	orrs	r3, r2
 80088e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80088e4:	697b      	ldr	r3, [r7, #20]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	681a      	ldr	r2, [r3, #0]
 80088ea:	4baf      	ldr	r3, [pc, #700]	; (8008ba8 <UART_SetConfig+0x2ec>)
 80088ec:	4013      	ands	r3, r2
 80088ee:	697a      	ldr	r2, [r7, #20]
 80088f0:	6812      	ldr	r2, [r2, #0]
 80088f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80088f4:	430b      	orrs	r3, r1
 80088f6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80088f8:	697b      	ldr	r3, [r7, #20]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	685b      	ldr	r3, [r3, #4]
 80088fe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008902:	697b      	ldr	r3, [r7, #20]
 8008904:	68da      	ldr	r2, [r3, #12]
 8008906:	697b      	ldr	r3, [r7, #20]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	430a      	orrs	r2, r1
 800890c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800890e:	697b      	ldr	r3, [r7, #20]
 8008910:	699b      	ldr	r3, [r3, #24]
 8008912:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008914:	697b      	ldr	r3, [r7, #20]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	4aa4      	ldr	r2, [pc, #656]	; (8008bac <UART_SetConfig+0x2f0>)
 800891a:	4293      	cmp	r3, r2
 800891c:	d004      	beq.n	8008928 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800891e:	697b      	ldr	r3, [r7, #20]
 8008920:	6a1b      	ldr	r3, [r3, #32]
 8008922:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008924:	4313      	orrs	r3, r2
 8008926:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008928:	697b      	ldr	r3, [r7, #20]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	689b      	ldr	r3, [r3, #8]
 800892e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8008932:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8008936:	697a      	ldr	r2, [r7, #20]
 8008938:	6812      	ldr	r2, [r2, #0]
 800893a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800893c:	430b      	orrs	r3, r1
 800893e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008940:	697b      	ldr	r3, [r7, #20]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008946:	f023 010f 	bic.w	r1, r3, #15
 800894a:	697b      	ldr	r3, [r7, #20]
 800894c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800894e:	697b      	ldr	r3, [r7, #20]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	430a      	orrs	r2, r1
 8008954:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008956:	697b      	ldr	r3, [r7, #20]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	4a95      	ldr	r2, [pc, #596]	; (8008bb0 <UART_SetConfig+0x2f4>)
 800895c:	4293      	cmp	r3, r2
 800895e:	d125      	bne.n	80089ac <UART_SetConfig+0xf0>
 8008960:	2003      	movs	r0, #3
 8008962:	f7ff fb2b 	bl	8007fbc <LL_RCC_GetUSARTClockSource>
 8008966:	4603      	mov	r3, r0
 8008968:	2b03      	cmp	r3, #3
 800896a:	d81b      	bhi.n	80089a4 <UART_SetConfig+0xe8>
 800896c:	a201      	add	r2, pc, #4	; (adr r2, 8008974 <UART_SetConfig+0xb8>)
 800896e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008972:	bf00      	nop
 8008974:	08008985 	.word	0x08008985
 8008978:	08008995 	.word	0x08008995
 800897c:	0800898d 	.word	0x0800898d
 8008980:	0800899d 	.word	0x0800899d
 8008984:	2301      	movs	r3, #1
 8008986:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800898a:	e042      	b.n	8008a12 <UART_SetConfig+0x156>
 800898c:	2302      	movs	r3, #2
 800898e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008992:	e03e      	b.n	8008a12 <UART_SetConfig+0x156>
 8008994:	2304      	movs	r3, #4
 8008996:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800899a:	e03a      	b.n	8008a12 <UART_SetConfig+0x156>
 800899c:	2308      	movs	r3, #8
 800899e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80089a2:	e036      	b.n	8008a12 <UART_SetConfig+0x156>
 80089a4:	2310      	movs	r3, #16
 80089a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80089aa:	e032      	b.n	8008a12 <UART_SetConfig+0x156>
 80089ac:	697b      	ldr	r3, [r7, #20]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	4a7e      	ldr	r2, [pc, #504]	; (8008bac <UART_SetConfig+0x2f0>)
 80089b2:	4293      	cmp	r3, r2
 80089b4:	d12a      	bne.n	8008a0c <UART_SetConfig+0x150>
 80089b6:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80089ba:	f7ff fb0f 	bl	8007fdc <LL_RCC_GetLPUARTClockSource>
 80089be:	4603      	mov	r3, r0
 80089c0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80089c4:	d01a      	beq.n	80089fc <UART_SetConfig+0x140>
 80089c6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80089ca:	d81b      	bhi.n	8008a04 <UART_SetConfig+0x148>
 80089cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80089d0:	d00c      	beq.n	80089ec <UART_SetConfig+0x130>
 80089d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80089d6:	d815      	bhi.n	8008a04 <UART_SetConfig+0x148>
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d003      	beq.n	80089e4 <UART_SetConfig+0x128>
 80089dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80089e0:	d008      	beq.n	80089f4 <UART_SetConfig+0x138>
 80089e2:	e00f      	b.n	8008a04 <UART_SetConfig+0x148>
 80089e4:	2300      	movs	r3, #0
 80089e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80089ea:	e012      	b.n	8008a12 <UART_SetConfig+0x156>
 80089ec:	2302      	movs	r3, #2
 80089ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80089f2:	e00e      	b.n	8008a12 <UART_SetConfig+0x156>
 80089f4:	2304      	movs	r3, #4
 80089f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80089fa:	e00a      	b.n	8008a12 <UART_SetConfig+0x156>
 80089fc:	2308      	movs	r3, #8
 80089fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008a02:	e006      	b.n	8008a12 <UART_SetConfig+0x156>
 8008a04:	2310      	movs	r3, #16
 8008a06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008a0a:	e002      	b.n	8008a12 <UART_SetConfig+0x156>
 8008a0c:	2310      	movs	r3, #16
 8008a0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008a12:	697b      	ldr	r3, [r7, #20]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	4a65      	ldr	r2, [pc, #404]	; (8008bac <UART_SetConfig+0x2f0>)
 8008a18:	4293      	cmp	r3, r2
 8008a1a:	f040 8097 	bne.w	8008b4c <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008a1e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008a22:	2b08      	cmp	r3, #8
 8008a24:	d823      	bhi.n	8008a6e <UART_SetConfig+0x1b2>
 8008a26:	a201      	add	r2, pc, #4	; (adr r2, 8008a2c <UART_SetConfig+0x170>)
 8008a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a2c:	08008a51 	.word	0x08008a51
 8008a30:	08008a6f 	.word	0x08008a6f
 8008a34:	08008a59 	.word	0x08008a59
 8008a38:	08008a6f 	.word	0x08008a6f
 8008a3c:	08008a5f 	.word	0x08008a5f
 8008a40:	08008a6f 	.word	0x08008a6f
 8008a44:	08008a6f 	.word	0x08008a6f
 8008a48:	08008a6f 	.word	0x08008a6f
 8008a4c:	08008a67 	.word	0x08008a67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008a50:	f7fe fbbe 	bl	80071d0 <HAL_RCC_GetPCLK1Freq>
 8008a54:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008a56:	e010      	b.n	8008a7a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008a58:	4b56      	ldr	r3, [pc, #344]	; (8008bb4 <UART_SetConfig+0x2f8>)
 8008a5a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008a5c:	e00d      	b.n	8008a7a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008a5e:	f7fe fb37 	bl	80070d0 <HAL_RCC_GetSysClockFreq>
 8008a62:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008a64:	e009      	b.n	8008a7a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008a66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008a6a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008a6c:	e005      	b.n	8008a7a <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8008a6e:	2300      	movs	r3, #0
 8008a70:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008a72:	2301      	movs	r3, #1
 8008a74:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008a78:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	f000 812b 	beq.w	8008cd8 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008a82:	697b      	ldr	r3, [r7, #20]
 8008a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a86:	4a4c      	ldr	r2, [pc, #304]	; (8008bb8 <UART_SetConfig+0x2fc>)
 8008a88:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008a8c:	461a      	mov	r2, r3
 8008a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a90:	fbb3 f3f2 	udiv	r3, r3, r2
 8008a94:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008a96:	697b      	ldr	r3, [r7, #20]
 8008a98:	685a      	ldr	r2, [r3, #4]
 8008a9a:	4613      	mov	r3, r2
 8008a9c:	005b      	lsls	r3, r3, #1
 8008a9e:	4413      	add	r3, r2
 8008aa0:	69ba      	ldr	r2, [r7, #24]
 8008aa2:	429a      	cmp	r2, r3
 8008aa4:	d305      	bcc.n	8008ab2 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008aa6:	697b      	ldr	r3, [r7, #20]
 8008aa8:	685b      	ldr	r3, [r3, #4]
 8008aaa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008aac:	69ba      	ldr	r2, [r7, #24]
 8008aae:	429a      	cmp	r2, r3
 8008ab0:	d903      	bls.n	8008aba <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8008ab2:	2301      	movs	r3, #1
 8008ab4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008ab8:	e10e      	b.n	8008cd8 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008abc:	2200      	movs	r2, #0
 8008abe:	60bb      	str	r3, [r7, #8]
 8008ac0:	60fa      	str	r2, [r7, #12]
 8008ac2:	697b      	ldr	r3, [r7, #20]
 8008ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ac6:	4a3c      	ldr	r2, [pc, #240]	; (8008bb8 <UART_SetConfig+0x2fc>)
 8008ac8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008acc:	b29b      	uxth	r3, r3
 8008ace:	2200      	movs	r2, #0
 8008ad0:	603b      	str	r3, [r7, #0]
 8008ad2:	607a      	str	r2, [r7, #4]
 8008ad4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ad8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008adc:	f7f8 f84c 	bl	8000b78 <__aeabi_uldivmod>
 8008ae0:	4602      	mov	r2, r0
 8008ae2:	460b      	mov	r3, r1
 8008ae4:	4610      	mov	r0, r2
 8008ae6:	4619      	mov	r1, r3
 8008ae8:	f04f 0200 	mov.w	r2, #0
 8008aec:	f04f 0300 	mov.w	r3, #0
 8008af0:	020b      	lsls	r3, r1, #8
 8008af2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008af6:	0202      	lsls	r2, r0, #8
 8008af8:	6979      	ldr	r1, [r7, #20]
 8008afa:	6849      	ldr	r1, [r1, #4]
 8008afc:	0849      	lsrs	r1, r1, #1
 8008afe:	2000      	movs	r0, #0
 8008b00:	460c      	mov	r4, r1
 8008b02:	4605      	mov	r5, r0
 8008b04:	eb12 0804 	adds.w	r8, r2, r4
 8008b08:	eb43 0905 	adc.w	r9, r3, r5
 8008b0c:	697b      	ldr	r3, [r7, #20]
 8008b0e:	685b      	ldr	r3, [r3, #4]
 8008b10:	2200      	movs	r2, #0
 8008b12:	469a      	mov	sl, r3
 8008b14:	4693      	mov	fp, r2
 8008b16:	4652      	mov	r2, sl
 8008b18:	465b      	mov	r3, fp
 8008b1a:	4640      	mov	r0, r8
 8008b1c:	4649      	mov	r1, r9
 8008b1e:	f7f8 f82b 	bl	8000b78 <__aeabi_uldivmod>
 8008b22:	4602      	mov	r2, r0
 8008b24:	460b      	mov	r3, r1
 8008b26:	4613      	mov	r3, r2
 8008b28:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008b2a:	6a3b      	ldr	r3, [r7, #32]
 8008b2c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008b30:	d308      	bcc.n	8008b44 <UART_SetConfig+0x288>
 8008b32:	6a3b      	ldr	r3, [r7, #32]
 8008b34:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b38:	d204      	bcs.n	8008b44 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8008b3a:	697b      	ldr	r3, [r7, #20]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	6a3a      	ldr	r2, [r7, #32]
 8008b40:	60da      	str	r2, [r3, #12]
 8008b42:	e0c9      	b.n	8008cd8 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8008b44:	2301      	movs	r3, #1
 8008b46:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008b4a:	e0c5      	b.n	8008cd8 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008b4c:	697b      	ldr	r3, [r7, #20]
 8008b4e:	69db      	ldr	r3, [r3, #28]
 8008b50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008b54:	d16d      	bne.n	8008c32 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8008b56:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008b5a:	3b01      	subs	r3, #1
 8008b5c:	2b07      	cmp	r3, #7
 8008b5e:	d82d      	bhi.n	8008bbc <UART_SetConfig+0x300>
 8008b60:	a201      	add	r2, pc, #4	; (adr r2, 8008b68 <UART_SetConfig+0x2ac>)
 8008b62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b66:	bf00      	nop
 8008b68:	08008b89 	.word	0x08008b89
 8008b6c:	08008b91 	.word	0x08008b91
 8008b70:	08008bbd 	.word	0x08008bbd
 8008b74:	08008b97 	.word	0x08008b97
 8008b78:	08008bbd 	.word	0x08008bbd
 8008b7c:	08008bbd 	.word	0x08008bbd
 8008b80:	08008bbd 	.word	0x08008bbd
 8008b84:	08008b9f 	.word	0x08008b9f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008b88:	f7fe fb38 	bl	80071fc <HAL_RCC_GetPCLK2Freq>
 8008b8c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008b8e:	e01b      	b.n	8008bc8 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008b90:	4b08      	ldr	r3, [pc, #32]	; (8008bb4 <UART_SetConfig+0x2f8>)
 8008b92:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008b94:	e018      	b.n	8008bc8 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008b96:	f7fe fa9b 	bl	80070d0 <HAL_RCC_GetSysClockFreq>
 8008b9a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008b9c:	e014      	b.n	8008bc8 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008b9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008ba2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008ba4:	e010      	b.n	8008bc8 <UART_SetConfig+0x30c>
 8008ba6:	bf00      	nop
 8008ba8:	cfff69f3 	.word	0xcfff69f3
 8008bac:	40008000 	.word	0x40008000
 8008bb0:	40013800 	.word	0x40013800
 8008bb4:	00f42400 	.word	0x00f42400
 8008bb8:	08011cf8 	.word	0x08011cf8
      default:
        pclk = 0U;
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008bc0:	2301      	movs	r3, #1
 8008bc2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008bc6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	f000 8084 	beq.w	8008cd8 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008bd0:	697b      	ldr	r3, [r7, #20]
 8008bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bd4:	4a4b      	ldr	r2, [pc, #300]	; (8008d04 <UART_SetConfig+0x448>)
 8008bd6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008bda:	461a      	mov	r2, r3
 8008bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bde:	fbb3 f3f2 	udiv	r3, r3, r2
 8008be2:	005a      	lsls	r2, r3, #1
 8008be4:	697b      	ldr	r3, [r7, #20]
 8008be6:	685b      	ldr	r3, [r3, #4]
 8008be8:	085b      	lsrs	r3, r3, #1
 8008bea:	441a      	add	r2, r3
 8008bec:	697b      	ldr	r3, [r7, #20]
 8008bee:	685b      	ldr	r3, [r3, #4]
 8008bf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bf4:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008bf6:	6a3b      	ldr	r3, [r7, #32]
 8008bf8:	2b0f      	cmp	r3, #15
 8008bfa:	d916      	bls.n	8008c2a <UART_SetConfig+0x36e>
 8008bfc:	6a3b      	ldr	r3, [r7, #32]
 8008bfe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c02:	d212      	bcs.n	8008c2a <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008c04:	6a3b      	ldr	r3, [r7, #32]
 8008c06:	b29b      	uxth	r3, r3
 8008c08:	f023 030f 	bic.w	r3, r3, #15
 8008c0c:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008c0e:	6a3b      	ldr	r3, [r7, #32]
 8008c10:	085b      	lsrs	r3, r3, #1
 8008c12:	b29b      	uxth	r3, r3
 8008c14:	f003 0307 	and.w	r3, r3, #7
 8008c18:	b29a      	uxth	r2, r3
 8008c1a:	8bfb      	ldrh	r3, [r7, #30]
 8008c1c:	4313      	orrs	r3, r2
 8008c1e:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008c20:	697b      	ldr	r3, [r7, #20]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	8bfa      	ldrh	r2, [r7, #30]
 8008c26:	60da      	str	r2, [r3, #12]
 8008c28:	e056      	b.n	8008cd8 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8008c2a:	2301      	movs	r3, #1
 8008c2c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008c30:	e052      	b.n	8008cd8 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008c32:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008c36:	3b01      	subs	r3, #1
 8008c38:	2b07      	cmp	r3, #7
 8008c3a:	d822      	bhi.n	8008c82 <UART_SetConfig+0x3c6>
 8008c3c:	a201      	add	r2, pc, #4	; (adr r2, 8008c44 <UART_SetConfig+0x388>)
 8008c3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c42:	bf00      	nop
 8008c44:	08008c65 	.word	0x08008c65
 8008c48:	08008c6d 	.word	0x08008c6d
 8008c4c:	08008c83 	.word	0x08008c83
 8008c50:	08008c73 	.word	0x08008c73
 8008c54:	08008c83 	.word	0x08008c83
 8008c58:	08008c83 	.word	0x08008c83
 8008c5c:	08008c83 	.word	0x08008c83
 8008c60:	08008c7b 	.word	0x08008c7b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008c64:	f7fe faca 	bl	80071fc <HAL_RCC_GetPCLK2Freq>
 8008c68:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008c6a:	e010      	b.n	8008c8e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008c6c:	4b26      	ldr	r3, [pc, #152]	; (8008d08 <UART_SetConfig+0x44c>)
 8008c6e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008c70:	e00d      	b.n	8008c8e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008c72:	f7fe fa2d 	bl	80070d0 <HAL_RCC_GetSysClockFreq>
 8008c76:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008c78:	e009      	b.n	8008c8e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008c7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008c7e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008c80:	e005      	b.n	8008c8e <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8008c82:	2300      	movs	r3, #0
 8008c84:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008c86:	2301      	movs	r3, #1
 8008c88:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008c8c:	bf00      	nop
    }

    if (pclk != 0U)
 8008c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d021      	beq.n	8008cd8 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008c94:	697b      	ldr	r3, [r7, #20]
 8008c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c98:	4a1a      	ldr	r2, [pc, #104]	; (8008d04 <UART_SetConfig+0x448>)
 8008c9a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008c9e:	461a      	mov	r2, r3
 8008ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ca2:	fbb3 f2f2 	udiv	r2, r3, r2
 8008ca6:	697b      	ldr	r3, [r7, #20]
 8008ca8:	685b      	ldr	r3, [r3, #4]
 8008caa:	085b      	lsrs	r3, r3, #1
 8008cac:	441a      	add	r2, r3
 8008cae:	697b      	ldr	r3, [r7, #20]
 8008cb0:	685b      	ldr	r3, [r3, #4]
 8008cb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cb6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008cb8:	6a3b      	ldr	r3, [r7, #32]
 8008cba:	2b0f      	cmp	r3, #15
 8008cbc:	d909      	bls.n	8008cd2 <UART_SetConfig+0x416>
 8008cbe:	6a3b      	ldr	r3, [r7, #32]
 8008cc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008cc4:	d205      	bcs.n	8008cd2 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008cc6:	6a3b      	ldr	r3, [r7, #32]
 8008cc8:	b29a      	uxth	r2, r3
 8008cca:	697b      	ldr	r3, [r7, #20]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	60da      	str	r2, [r3, #12]
 8008cd0:	e002      	b.n	8008cd8 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8008cd2:	2301      	movs	r3, #1
 8008cd4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008cd8:	697b      	ldr	r3, [r7, #20]
 8008cda:	2201      	movs	r2, #1
 8008cdc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008ce0:	697b      	ldr	r3, [r7, #20]
 8008ce2:	2201      	movs	r2, #1
 8008ce4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008ce8:	697b      	ldr	r3, [r7, #20]
 8008cea:	2200      	movs	r2, #0
 8008cec:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8008cee:	697b      	ldr	r3, [r7, #20]
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8008cf4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	3730      	adds	r7, #48	; 0x30
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008d02:	bf00      	nop
 8008d04:	08011cf8 	.word	0x08011cf8
 8008d08:	00f42400 	.word	0x00f42400

08008d0c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008d0c:	b480      	push	{r7}
 8008d0e:	b083      	sub	sp, #12
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d18:	f003 0308 	and.w	r3, r3, #8
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d00a      	beq.n	8008d36 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	685b      	ldr	r3, [r3, #4]
 8008d26:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	430a      	orrs	r2, r1
 8008d34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d3a:	f003 0301 	and.w	r3, r3, #1
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d00a      	beq.n	8008d58 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	685b      	ldr	r3, [r3, #4]
 8008d48:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	430a      	orrs	r2, r1
 8008d56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d5c:	f003 0302 	and.w	r3, r3, #2
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d00a      	beq.n	8008d7a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	685b      	ldr	r3, [r3, #4]
 8008d6a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	430a      	orrs	r2, r1
 8008d78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d7e:	f003 0304 	and.w	r3, r3, #4
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d00a      	beq.n	8008d9c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	685b      	ldr	r3, [r3, #4]
 8008d8c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	430a      	orrs	r2, r1
 8008d9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008da0:	f003 0310 	and.w	r3, r3, #16
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d00a      	beq.n	8008dbe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	689b      	ldr	r3, [r3, #8]
 8008dae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	430a      	orrs	r2, r1
 8008dbc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dc2:	f003 0320 	and.w	r3, r3, #32
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d00a      	beq.n	8008de0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	689b      	ldr	r3, [r3, #8]
 8008dd0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	430a      	orrs	r2, r1
 8008dde:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008de4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d01a      	beq.n	8008e22 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	685b      	ldr	r3, [r3, #4]
 8008df2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	430a      	orrs	r2, r1
 8008e00:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008e0a:	d10a      	bne.n	8008e22 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	685b      	ldr	r3, [r3, #4]
 8008e12:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	430a      	orrs	r2, r1
 8008e20:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d00a      	beq.n	8008e44 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	685b      	ldr	r3, [r3, #4]
 8008e34:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	430a      	orrs	r2, r1
 8008e42:	605a      	str	r2, [r3, #4]
  }
}
 8008e44:	bf00      	nop
 8008e46:	370c      	adds	r7, #12
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4e:	4770      	bx	lr

08008e50 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b098      	sub	sp, #96	; 0x60
 8008e54:	af02      	add	r7, sp, #8
 8008e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008e60:	f7fc f946 	bl	80050f0 <HAL_GetTick>
 8008e64:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	f003 0308 	and.w	r3, r3, #8
 8008e70:	2b08      	cmp	r3, #8
 8008e72:	d12f      	bne.n	8008ed4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008e74:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008e78:	9300      	str	r3, [sp, #0]
 8008e7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008e82:	6878      	ldr	r0, [r7, #4]
 8008e84:	f000 f88e 	bl	8008fa4 <UART_WaitOnFlagUntilTimeout>
 8008e88:	4603      	mov	r3, r0
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d022      	beq.n	8008ed4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e96:	e853 3f00 	ldrex	r3, [r3]
 8008e9a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008e9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008ea2:	653b      	str	r3, [r7, #80]	; 0x50
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	461a      	mov	r2, r3
 8008eaa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008eac:	647b      	str	r3, [r7, #68]	; 0x44
 8008eae:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eb0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008eb2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008eb4:	e841 2300 	strex	r3, r2, [r1]
 8008eb8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008eba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d1e6      	bne.n	8008e8e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	2220      	movs	r2, #32
 8008ec4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	2200      	movs	r2, #0
 8008ecc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008ed0:	2303      	movs	r3, #3
 8008ed2:	e063      	b.n	8008f9c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	f003 0304 	and.w	r3, r3, #4
 8008ede:	2b04      	cmp	r3, #4
 8008ee0:	d149      	bne.n	8008f76 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008ee2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008ee6:	9300      	str	r3, [sp, #0]
 8008ee8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008eea:	2200      	movs	r2, #0
 8008eec:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008ef0:	6878      	ldr	r0, [r7, #4]
 8008ef2:	f000 f857 	bl	8008fa4 <UART_WaitOnFlagUntilTimeout>
 8008ef6:	4603      	mov	r3, r0
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d03c      	beq.n	8008f76 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f04:	e853 3f00 	ldrex	r3, [r3]
 8008f08:	623b      	str	r3, [r7, #32]
   return(result);
 8008f0a:	6a3b      	ldr	r3, [r7, #32]
 8008f0c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008f10:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	461a      	mov	r2, r3
 8008f18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f1a:	633b      	str	r3, [r7, #48]	; 0x30
 8008f1c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f1e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008f20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f22:	e841 2300 	strex	r3, r2, [r1]
 8008f26:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d1e6      	bne.n	8008efc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	3308      	adds	r3, #8
 8008f34:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f36:	693b      	ldr	r3, [r7, #16]
 8008f38:	e853 3f00 	ldrex	r3, [r3]
 8008f3c:	60fb      	str	r3, [r7, #12]
   return(result);
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	f023 0301 	bic.w	r3, r3, #1
 8008f44:	64bb      	str	r3, [r7, #72]	; 0x48
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	3308      	adds	r3, #8
 8008f4c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008f4e:	61fa      	str	r2, [r7, #28]
 8008f50:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f52:	69b9      	ldr	r1, [r7, #24]
 8008f54:	69fa      	ldr	r2, [r7, #28]
 8008f56:	e841 2300 	strex	r3, r2, [r1]
 8008f5a:	617b      	str	r3, [r7, #20]
   return(result);
 8008f5c:	697b      	ldr	r3, [r7, #20]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d1e5      	bne.n	8008f2e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	2220      	movs	r2, #32
 8008f66:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	2200      	movs	r2, #0
 8008f6e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008f72:	2303      	movs	r3, #3
 8008f74:	e012      	b.n	8008f9c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	2220      	movs	r2, #32
 8008f7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	2220      	movs	r2, #32
 8008f82:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	2200      	movs	r2, #0
 8008f8a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	2200      	movs	r2, #0
 8008f90:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	2200      	movs	r2, #0
 8008f96:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008f9a:	2300      	movs	r3, #0
}
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	3758      	adds	r7, #88	; 0x58
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	bd80      	pop	{r7, pc}

08008fa4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	b084      	sub	sp, #16
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	60f8      	str	r0, [r7, #12]
 8008fac:	60b9      	str	r1, [r7, #8]
 8008fae:	603b      	str	r3, [r7, #0]
 8008fb0:	4613      	mov	r3, r2
 8008fb2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008fb4:	e049      	b.n	800904a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008fb6:	69bb      	ldr	r3, [r7, #24]
 8008fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fbc:	d045      	beq.n	800904a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008fbe:	f7fc f897 	bl	80050f0 <HAL_GetTick>
 8008fc2:	4602      	mov	r2, r0
 8008fc4:	683b      	ldr	r3, [r7, #0]
 8008fc6:	1ad3      	subs	r3, r2, r3
 8008fc8:	69ba      	ldr	r2, [r7, #24]
 8008fca:	429a      	cmp	r2, r3
 8008fcc:	d302      	bcc.n	8008fd4 <UART_WaitOnFlagUntilTimeout+0x30>
 8008fce:	69bb      	ldr	r3, [r7, #24]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d101      	bne.n	8008fd8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008fd4:	2303      	movs	r3, #3
 8008fd6:	e048      	b.n	800906a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	f003 0304 	and.w	r3, r3, #4
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d031      	beq.n	800904a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	69db      	ldr	r3, [r3, #28]
 8008fec:	f003 0308 	and.w	r3, r3, #8
 8008ff0:	2b08      	cmp	r3, #8
 8008ff2:	d110      	bne.n	8009016 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	2208      	movs	r2, #8
 8008ffa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008ffc:	68f8      	ldr	r0, [r7, #12]
 8008ffe:	f000 f99c 	bl	800933a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	2208      	movs	r2, #8
 8009006:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	2200      	movs	r2, #0
 800900e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8009012:	2301      	movs	r3, #1
 8009014:	e029      	b.n	800906a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	69db      	ldr	r3, [r3, #28]
 800901c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009020:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009024:	d111      	bne.n	800904a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800902e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009030:	68f8      	ldr	r0, [r7, #12]
 8009032:	f000 f982 	bl	800933a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	2220      	movs	r2, #32
 800903a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	2200      	movs	r2, #0
 8009042:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8009046:	2303      	movs	r3, #3
 8009048:	e00f      	b.n	800906a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	69da      	ldr	r2, [r3, #28]
 8009050:	68bb      	ldr	r3, [r7, #8]
 8009052:	4013      	ands	r3, r2
 8009054:	68ba      	ldr	r2, [r7, #8]
 8009056:	429a      	cmp	r2, r3
 8009058:	bf0c      	ite	eq
 800905a:	2301      	moveq	r3, #1
 800905c:	2300      	movne	r3, #0
 800905e:	b2db      	uxtb	r3, r3
 8009060:	461a      	mov	r2, r3
 8009062:	79fb      	ldrb	r3, [r7, #7]
 8009064:	429a      	cmp	r2, r3
 8009066:	d0a6      	beq.n	8008fb6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009068:	2300      	movs	r3, #0
}
 800906a:	4618      	mov	r0, r3
 800906c:	3710      	adds	r7, #16
 800906e:	46bd      	mov	sp, r7
 8009070:	bd80      	pop	{r7, pc}
	...

08009074 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009074:	b480      	push	{r7}
 8009076:	b0a3      	sub	sp, #140	; 0x8c
 8009078:	af00      	add	r7, sp, #0
 800907a:	60f8      	str	r0, [r7, #12]
 800907c:	60b9      	str	r1, [r7, #8]
 800907e:	4613      	mov	r3, r2
 8009080:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	68ba      	ldr	r2, [r7, #8]
 8009086:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	88fa      	ldrh	r2, [r7, #6]
 800908c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	88fa      	ldrh	r2, [r7, #6]
 8009094:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	2200      	movs	r2, #0
 800909c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	689b      	ldr	r3, [r3, #8]
 80090a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80090a6:	d10e      	bne.n	80090c6 <UART_Start_Receive_IT+0x52>
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	691b      	ldr	r3, [r3, #16]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d105      	bne.n	80090bc <UART_Start_Receive_IT+0x48>
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	f240 12ff 	movw	r2, #511	; 0x1ff
 80090b6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80090ba:	e02d      	b.n	8009118 <UART_Start_Receive_IT+0xa4>
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	22ff      	movs	r2, #255	; 0xff
 80090c0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80090c4:	e028      	b.n	8009118 <UART_Start_Receive_IT+0xa4>
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	689b      	ldr	r3, [r3, #8]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d10d      	bne.n	80090ea <UART_Start_Receive_IT+0x76>
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	691b      	ldr	r3, [r3, #16]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d104      	bne.n	80090e0 <UART_Start_Receive_IT+0x6c>
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	22ff      	movs	r2, #255	; 0xff
 80090da:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80090de:	e01b      	b.n	8009118 <UART_Start_Receive_IT+0xa4>
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	227f      	movs	r2, #127	; 0x7f
 80090e4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80090e8:	e016      	b.n	8009118 <UART_Start_Receive_IT+0xa4>
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	689b      	ldr	r3, [r3, #8]
 80090ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80090f2:	d10d      	bne.n	8009110 <UART_Start_Receive_IT+0x9c>
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	691b      	ldr	r3, [r3, #16]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d104      	bne.n	8009106 <UART_Start_Receive_IT+0x92>
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	227f      	movs	r2, #127	; 0x7f
 8009100:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009104:	e008      	b.n	8009118 <UART_Start_Receive_IT+0xa4>
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	223f      	movs	r2, #63	; 0x3f
 800910a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800910e:	e003      	b.n	8009118 <UART_Start_Receive_IT+0xa4>
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	2200      	movs	r2, #0
 8009114:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	2200      	movs	r2, #0
 800911c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	2222      	movs	r2, #34	; 0x22
 8009124:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	3308      	adds	r3, #8
 800912e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009130:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009132:	e853 3f00 	ldrex	r3, [r3]
 8009136:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8009138:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800913a:	f043 0301 	orr.w	r3, r3, #1
 800913e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	3308      	adds	r3, #8
 8009148:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800914c:	673a      	str	r2, [r7, #112]	; 0x70
 800914e:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009150:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8009152:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009154:	e841 2300 	strex	r3, r2, [r1]
 8009158:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800915a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800915c:	2b00      	cmp	r3, #0
 800915e:	d1e3      	bne.n	8009128 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009164:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009168:	d14f      	bne.n	800920a <UART_Start_Receive_IT+0x196>
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009170:	88fa      	ldrh	r2, [r7, #6]
 8009172:	429a      	cmp	r2, r3
 8009174:	d349      	bcc.n	800920a <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	689b      	ldr	r3, [r3, #8]
 800917a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800917e:	d107      	bne.n	8009190 <UART_Start_Receive_IT+0x11c>
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	691b      	ldr	r3, [r3, #16]
 8009184:	2b00      	cmp	r3, #0
 8009186:	d103      	bne.n	8009190 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	4a47      	ldr	r2, [pc, #284]	; (80092a8 <UART_Start_Receive_IT+0x234>)
 800918c:	675a      	str	r2, [r3, #116]	; 0x74
 800918e:	e002      	b.n	8009196 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	4a46      	ldr	r2, [pc, #280]	; (80092ac <UART_Start_Receive_IT+0x238>)
 8009194:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	691b      	ldr	r3, [r3, #16]
 800919a:	2b00      	cmp	r3, #0
 800919c:	d01a      	beq.n	80091d4 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80091a6:	e853 3f00 	ldrex	r3, [r3]
 80091aa:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80091ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80091ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80091b2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	461a      	mov	r2, r3
 80091bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80091c0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80091c2:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091c4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80091c6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80091c8:	e841 2300 	strex	r3, r2, [r1]
 80091cc:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80091ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d1e4      	bne.n	800919e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	3308      	adds	r3, #8
 80091da:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091de:	e853 3f00 	ldrex	r3, [r3]
 80091e2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80091e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80091ea:	67fb      	str	r3, [r7, #124]	; 0x7c
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	3308      	adds	r3, #8
 80091f2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80091f4:	64ba      	str	r2, [r7, #72]	; 0x48
 80091f6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091f8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80091fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80091fc:	e841 2300 	strex	r3, r2, [r1]
 8009200:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009202:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009204:	2b00      	cmp	r3, #0
 8009206:	d1e5      	bne.n	80091d4 <UART_Start_Receive_IT+0x160>
 8009208:	e046      	b.n	8009298 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	689b      	ldr	r3, [r3, #8]
 800920e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009212:	d107      	bne.n	8009224 <UART_Start_Receive_IT+0x1b0>
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	691b      	ldr	r3, [r3, #16]
 8009218:	2b00      	cmp	r3, #0
 800921a:	d103      	bne.n	8009224 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	4a24      	ldr	r2, [pc, #144]	; (80092b0 <UART_Start_Receive_IT+0x23c>)
 8009220:	675a      	str	r2, [r3, #116]	; 0x74
 8009222:	e002      	b.n	800922a <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	4a23      	ldr	r2, [pc, #140]	; (80092b4 <UART_Start_Receive_IT+0x240>)
 8009228:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	691b      	ldr	r3, [r3, #16]
 800922e:	2b00      	cmp	r3, #0
 8009230:	d019      	beq.n	8009266 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800923a:	e853 3f00 	ldrex	r3, [r3]
 800923e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009242:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8009246:	677b      	str	r3, [r7, #116]	; 0x74
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	461a      	mov	r2, r3
 800924e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009250:	637b      	str	r3, [r7, #52]	; 0x34
 8009252:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009254:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009256:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009258:	e841 2300 	strex	r3, r2, [r1]
 800925c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800925e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009260:	2b00      	cmp	r3, #0
 8009262:	d1e6      	bne.n	8009232 <UART_Start_Receive_IT+0x1be>
 8009264:	e018      	b.n	8009298 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800926c:	697b      	ldr	r3, [r7, #20]
 800926e:	e853 3f00 	ldrex	r3, [r3]
 8009272:	613b      	str	r3, [r7, #16]
   return(result);
 8009274:	693b      	ldr	r3, [r7, #16]
 8009276:	f043 0320 	orr.w	r3, r3, #32
 800927a:	67bb      	str	r3, [r7, #120]	; 0x78
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	461a      	mov	r2, r3
 8009282:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009284:	623b      	str	r3, [r7, #32]
 8009286:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009288:	69f9      	ldr	r1, [r7, #28]
 800928a:	6a3a      	ldr	r2, [r7, #32]
 800928c:	e841 2300 	strex	r3, r2, [r1]
 8009290:	61bb      	str	r3, [r7, #24]
   return(result);
 8009292:	69bb      	ldr	r3, [r7, #24]
 8009294:	2b00      	cmp	r3, #0
 8009296:	d1e6      	bne.n	8009266 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8009298:	2300      	movs	r3, #0
}
 800929a:	4618      	mov	r0, r3
 800929c:	378c      	adds	r7, #140	; 0x8c
 800929e:	46bd      	mov	sp, r7
 80092a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a4:	4770      	bx	lr
 80092a6:	bf00      	nop
 80092a8:	08009c91 	.word	0x08009c91
 80092ac:	08009931 	.word	0x08009931
 80092b0:	08009779 	.word	0x08009779
 80092b4:	080095c1 	.word	0x080095c1

080092b8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80092b8:	b480      	push	{r7}
 80092ba:	b08f      	sub	sp, #60	; 0x3c
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092c6:	6a3b      	ldr	r3, [r7, #32]
 80092c8:	e853 3f00 	ldrex	r3, [r3]
 80092cc:	61fb      	str	r3, [r7, #28]
   return(result);
 80092ce:	69fb      	ldr	r3, [r7, #28]
 80092d0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80092d4:	637b      	str	r3, [r7, #52]	; 0x34
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	461a      	mov	r2, r3
 80092dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80092e0:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80092e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80092e6:	e841 2300 	strex	r3, r2, [r1]
 80092ea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80092ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d1e6      	bne.n	80092c0 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	3308      	adds	r3, #8
 80092f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	e853 3f00 	ldrex	r3, [r3]
 8009300:	60bb      	str	r3, [r7, #8]
   return(result);
 8009302:	68bb      	ldr	r3, [r7, #8]
 8009304:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8009308:	633b      	str	r3, [r7, #48]	; 0x30
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	3308      	adds	r3, #8
 8009310:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009312:	61ba      	str	r2, [r7, #24]
 8009314:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009316:	6979      	ldr	r1, [r7, #20]
 8009318:	69ba      	ldr	r2, [r7, #24]
 800931a:	e841 2300 	strex	r3, r2, [r1]
 800931e:	613b      	str	r3, [r7, #16]
   return(result);
 8009320:	693b      	ldr	r3, [r7, #16]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d1e5      	bne.n	80092f2 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	2220      	movs	r2, #32
 800932a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 800932e:	bf00      	nop
 8009330:	373c      	adds	r7, #60	; 0x3c
 8009332:	46bd      	mov	sp, r7
 8009334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009338:	4770      	bx	lr

0800933a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800933a:	b480      	push	{r7}
 800933c:	b095      	sub	sp, #84	; 0x54
 800933e:	af00      	add	r7, sp, #0
 8009340:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009348:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800934a:	e853 3f00 	ldrex	r3, [r3]
 800934e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009352:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009356:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	461a      	mov	r2, r3
 800935e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009360:	643b      	str	r3, [r7, #64]	; 0x40
 8009362:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009364:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009366:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009368:	e841 2300 	strex	r3, r2, [r1]
 800936c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800936e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009370:	2b00      	cmp	r3, #0
 8009372:	d1e6      	bne.n	8009342 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	3308      	adds	r3, #8
 800937a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800937c:	6a3b      	ldr	r3, [r7, #32]
 800937e:	e853 3f00 	ldrex	r3, [r3]
 8009382:	61fb      	str	r3, [r7, #28]
   return(result);
 8009384:	69fb      	ldr	r3, [r7, #28]
 8009386:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800938a:	f023 0301 	bic.w	r3, r3, #1
 800938e:	64bb      	str	r3, [r7, #72]	; 0x48
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	3308      	adds	r3, #8
 8009396:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009398:	62fa      	str	r2, [r7, #44]	; 0x2c
 800939a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800939c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800939e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80093a0:	e841 2300 	strex	r3, r2, [r1]
 80093a4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80093a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d1e3      	bne.n	8009374 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80093b0:	2b01      	cmp	r3, #1
 80093b2:	d118      	bne.n	80093e6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	e853 3f00 	ldrex	r3, [r3]
 80093c0:	60bb      	str	r3, [r7, #8]
   return(result);
 80093c2:	68bb      	ldr	r3, [r7, #8]
 80093c4:	f023 0310 	bic.w	r3, r3, #16
 80093c8:	647b      	str	r3, [r7, #68]	; 0x44
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	461a      	mov	r2, r3
 80093d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80093d2:	61bb      	str	r3, [r7, #24]
 80093d4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093d6:	6979      	ldr	r1, [r7, #20]
 80093d8:	69ba      	ldr	r2, [r7, #24]
 80093da:	e841 2300 	strex	r3, r2, [r1]
 80093de:	613b      	str	r3, [r7, #16]
   return(result);
 80093e0:	693b      	ldr	r3, [r7, #16]
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d1e6      	bne.n	80093b4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	2220      	movs	r2, #32
 80093ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	2200      	movs	r2, #0
 80093f2:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	2200      	movs	r2, #0
 80093f8:	675a      	str	r2, [r3, #116]	; 0x74
}
 80093fa:	bf00      	nop
 80093fc:	3754      	adds	r7, #84	; 0x54
 80093fe:	46bd      	mov	sp, r7
 8009400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009404:	4770      	bx	lr

08009406 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009406:	b580      	push	{r7, lr}
 8009408:	b090      	sub	sp, #64	; 0x40
 800940a:	af00      	add	r7, sp, #0
 800940c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009412:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	f003 0320 	and.w	r3, r3, #32
 800941e:	2b00      	cmp	r3, #0
 8009420:	d137      	bne.n	8009492 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8009422:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009424:	2200      	movs	r2, #0
 8009426:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800942a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	3308      	adds	r3, #8
 8009430:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009434:	e853 3f00 	ldrex	r3, [r3]
 8009438:	623b      	str	r3, [r7, #32]
   return(result);
 800943a:	6a3b      	ldr	r3, [r7, #32]
 800943c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009440:	63bb      	str	r3, [r7, #56]	; 0x38
 8009442:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	3308      	adds	r3, #8
 8009448:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800944a:	633a      	str	r2, [r7, #48]	; 0x30
 800944c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800944e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009450:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009452:	e841 2300 	strex	r3, r2, [r1]
 8009456:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800945a:	2b00      	cmp	r3, #0
 800945c:	d1e5      	bne.n	800942a <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800945e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009464:	693b      	ldr	r3, [r7, #16]
 8009466:	e853 3f00 	ldrex	r3, [r3]
 800946a:	60fb      	str	r3, [r7, #12]
   return(result);
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009472:	637b      	str	r3, [r7, #52]	; 0x34
 8009474:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	461a      	mov	r2, r3
 800947a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800947c:	61fb      	str	r3, [r7, #28]
 800947e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009480:	69b9      	ldr	r1, [r7, #24]
 8009482:	69fa      	ldr	r2, [r7, #28]
 8009484:	e841 2300 	strex	r3, r2, [r1]
 8009488:	617b      	str	r3, [r7, #20]
   return(result);
 800948a:	697b      	ldr	r3, [r7, #20]
 800948c:	2b00      	cmp	r3, #0
 800948e:	d1e6      	bne.n	800945e <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009490:	e002      	b.n	8009498 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8009492:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009494:	f7f9 f9b6 	bl	8002804 <HAL_UART_TxCpltCallback>
}
 8009498:	bf00      	nop
 800949a:	3740      	adds	r7, #64	; 0x40
 800949c:	46bd      	mov	sp, r7
 800949e:	bd80      	pop	{r7, pc}

080094a0 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b084      	sub	sp, #16
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094ac:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80094ae:	68f8      	ldr	r0, [r7, #12]
 80094b0:	f7ff f9e4 	bl	800887c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80094b4:	bf00      	nop
 80094b6:	3710      	adds	r7, #16
 80094b8:	46bd      	mov	sp, r7
 80094ba:	bd80      	pop	{r7, pc}

080094bc <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80094bc:	b580      	push	{r7, lr}
 80094be:	b086      	sub	sp, #24
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094c8:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80094ca:	697b      	ldr	r3, [r7, #20]
 80094cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80094d0:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80094d2:	697b      	ldr	r3, [r7, #20]
 80094d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80094d8:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80094da:	697b      	ldr	r3, [r7, #20]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	689b      	ldr	r3, [r3, #8]
 80094e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094e4:	2b80      	cmp	r3, #128	; 0x80
 80094e6:	d109      	bne.n	80094fc <UART_DMAError+0x40>
 80094e8:	693b      	ldr	r3, [r7, #16]
 80094ea:	2b21      	cmp	r3, #33	; 0x21
 80094ec:	d106      	bne.n	80094fc <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80094ee:	697b      	ldr	r3, [r7, #20]
 80094f0:	2200      	movs	r2, #0
 80094f2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 80094f6:	6978      	ldr	r0, [r7, #20]
 80094f8:	f7ff fede 	bl	80092b8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80094fc:	697b      	ldr	r3, [r7, #20]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	689b      	ldr	r3, [r3, #8]
 8009502:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009506:	2b40      	cmp	r3, #64	; 0x40
 8009508:	d109      	bne.n	800951e <UART_DMAError+0x62>
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	2b22      	cmp	r3, #34	; 0x22
 800950e:	d106      	bne.n	800951e <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009510:	697b      	ldr	r3, [r7, #20]
 8009512:	2200      	movs	r2, #0
 8009514:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8009518:	6978      	ldr	r0, [r7, #20]
 800951a:	f7ff ff0e 	bl	800933a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800951e:	697b      	ldr	r3, [r7, #20]
 8009520:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009524:	f043 0210 	orr.w	r2, r3, #16
 8009528:	697b      	ldr	r3, [r7, #20]
 800952a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800952e:	6978      	ldr	r0, [r7, #20]
 8009530:	f7ff f9ae 	bl	8008890 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009534:	bf00      	nop
 8009536:	3718      	adds	r7, #24
 8009538:	46bd      	mov	sp, r7
 800953a:	bd80      	pop	{r7, pc}

0800953c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800953c:	b580      	push	{r7, lr}
 800953e:	b084      	sub	sp, #16
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009548:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	2200      	movs	r2, #0
 800954e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	2200      	movs	r2, #0
 8009556:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800955a:	68f8      	ldr	r0, [r7, #12]
 800955c:	f7ff f998 	bl	8008890 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009560:	bf00      	nop
 8009562:	3710      	adds	r7, #16
 8009564:	46bd      	mov	sp, r7
 8009566:	bd80      	pop	{r7, pc}

08009568 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009568:	b580      	push	{r7, lr}
 800956a:	b088      	sub	sp, #32
 800956c:	af00      	add	r7, sp, #0
 800956e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	e853 3f00 	ldrex	r3, [r3]
 800957c:	60bb      	str	r3, [r7, #8]
   return(result);
 800957e:	68bb      	ldr	r3, [r7, #8]
 8009580:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009584:	61fb      	str	r3, [r7, #28]
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	461a      	mov	r2, r3
 800958c:	69fb      	ldr	r3, [r7, #28]
 800958e:	61bb      	str	r3, [r7, #24]
 8009590:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009592:	6979      	ldr	r1, [r7, #20]
 8009594:	69ba      	ldr	r2, [r7, #24]
 8009596:	e841 2300 	strex	r3, r2, [r1]
 800959a:	613b      	str	r3, [r7, #16]
   return(result);
 800959c:	693b      	ldr	r3, [r7, #16]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d1e6      	bne.n	8009570 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	2220      	movs	r2, #32
 80095a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	2200      	movs	r2, #0
 80095ae:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80095b0:	6878      	ldr	r0, [r7, #4]
 80095b2:	f7f9 f927 	bl	8002804 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80095b6:	bf00      	nop
 80095b8:	3720      	adds	r7, #32
 80095ba:	46bd      	mov	sp, r7
 80095bc:	bd80      	pop	{r7, pc}
	...

080095c0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80095c0:	b580      	push	{r7, lr}
 80095c2:	b09c      	sub	sp, #112	; 0x70
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80095ce:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80095d8:	2b22      	cmp	r3, #34	; 0x22
 80095da:	f040 80be 	bne.w	800975a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095e4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80095e8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80095ec:	b2d9      	uxtb	r1, r3
 80095ee:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80095f2:	b2da      	uxtb	r2, r3
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095f8:	400a      	ands	r2, r1
 80095fa:	b2d2      	uxtb	r2, r2
 80095fc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009602:	1c5a      	adds	r2, r3, #1
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800960e:	b29b      	uxth	r3, r3
 8009610:	3b01      	subs	r3, #1
 8009612:	b29a      	uxth	r2, r3
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009620:	b29b      	uxth	r3, r3
 8009622:	2b00      	cmp	r3, #0
 8009624:	f040 80a1 	bne.w	800976a <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800962e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009630:	e853 3f00 	ldrex	r3, [r3]
 8009634:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009636:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009638:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800963c:	66bb      	str	r3, [r7, #104]	; 0x68
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	461a      	mov	r2, r3
 8009644:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009646:	65bb      	str	r3, [r7, #88]	; 0x58
 8009648:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800964a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800964c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800964e:	e841 2300 	strex	r3, r2, [r1]
 8009652:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009654:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009656:	2b00      	cmp	r3, #0
 8009658:	d1e6      	bne.n	8009628 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	3308      	adds	r3, #8
 8009660:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009664:	e853 3f00 	ldrex	r3, [r3]
 8009668:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800966a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800966c:	f023 0301 	bic.w	r3, r3, #1
 8009670:	667b      	str	r3, [r7, #100]	; 0x64
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	3308      	adds	r3, #8
 8009678:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800967a:	647a      	str	r2, [r7, #68]	; 0x44
 800967c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800967e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009680:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009682:	e841 2300 	strex	r3, r2, [r1]
 8009686:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009688:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800968a:	2b00      	cmp	r3, #0
 800968c:	d1e5      	bne.n	800965a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	2220      	movs	r2, #32
 8009692:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	2200      	movs	r2, #0
 800969a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	2200      	movs	r2, #0
 80096a0:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	4a33      	ldr	r2, [pc, #204]	; (8009774 <UART_RxISR_8BIT+0x1b4>)
 80096a8:	4293      	cmp	r3, r2
 80096aa:	d01f      	beq.n	80096ec <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	685b      	ldr	r3, [r3, #4]
 80096b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d018      	beq.n	80096ec <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096c2:	e853 3f00 	ldrex	r3, [r3]
 80096c6:	623b      	str	r3, [r7, #32]
   return(result);
 80096c8:	6a3b      	ldr	r3, [r7, #32]
 80096ca:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80096ce:	663b      	str	r3, [r7, #96]	; 0x60
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	461a      	mov	r2, r3
 80096d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80096d8:	633b      	str	r3, [r7, #48]	; 0x30
 80096da:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096dc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80096de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80096e0:	e841 2300 	strex	r3, r2, [r1]
 80096e4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80096e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d1e6      	bne.n	80096ba <UART_RxISR_8BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096f0:	2b01      	cmp	r3, #1
 80096f2:	d12e      	bne.n	8009752 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	2200      	movs	r2, #0
 80096f8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009700:	693b      	ldr	r3, [r7, #16]
 8009702:	e853 3f00 	ldrex	r3, [r3]
 8009706:	60fb      	str	r3, [r7, #12]
   return(result);
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	f023 0310 	bic.w	r3, r3, #16
 800970e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	461a      	mov	r2, r3
 8009716:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009718:	61fb      	str	r3, [r7, #28]
 800971a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800971c:	69b9      	ldr	r1, [r7, #24]
 800971e:	69fa      	ldr	r2, [r7, #28]
 8009720:	e841 2300 	strex	r3, r2, [r1]
 8009724:	617b      	str	r3, [r7, #20]
   return(result);
 8009726:	697b      	ldr	r3, [r7, #20]
 8009728:	2b00      	cmp	r3, #0
 800972a:	d1e6      	bne.n	80096fa <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	69db      	ldr	r3, [r3, #28]
 8009732:	f003 0310 	and.w	r3, r3, #16
 8009736:	2b10      	cmp	r3, #16
 8009738:	d103      	bne.n	8009742 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	2210      	movs	r2, #16
 8009740:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009748:	4619      	mov	r1, r3
 800974a:	6878      	ldr	r0, [r7, #4]
 800974c:	f7ff f8aa 	bl	80088a4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009750:	e00b      	b.n	800976a <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8009752:	6878      	ldr	r0, [r7, #4]
 8009754:	f7f9 f828 	bl	80027a8 <HAL_UART_RxCpltCallback>
}
 8009758:	e007      	b.n	800976a <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	699a      	ldr	r2, [r3, #24]
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	f042 0208 	orr.w	r2, r2, #8
 8009768:	619a      	str	r2, [r3, #24]
}
 800976a:	bf00      	nop
 800976c:	3770      	adds	r7, #112	; 0x70
 800976e:	46bd      	mov	sp, r7
 8009770:	bd80      	pop	{r7, pc}
 8009772:	bf00      	nop
 8009774:	40008000 	.word	0x40008000

08009778 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009778:	b580      	push	{r7, lr}
 800977a:	b09c      	sub	sp, #112	; 0x70
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009786:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009790:	2b22      	cmp	r3, #34	; 0x22
 8009792:	f040 80be 	bne.w	8009912 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800979c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097a4:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80097a6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80097aa:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80097ae:	4013      	ands	r3, r2
 80097b0:	b29a      	uxth	r2, r3
 80097b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80097b4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097ba:	1c9a      	adds	r2, r3, #2
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80097c6:	b29b      	uxth	r3, r3
 80097c8:	3b01      	subs	r3, #1
 80097ca:	b29a      	uxth	r2, r3
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80097d8:	b29b      	uxth	r3, r3
 80097da:	2b00      	cmp	r3, #0
 80097dc:	f040 80a1 	bne.w	8009922 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80097e8:	e853 3f00 	ldrex	r3, [r3]
 80097ec:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80097ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80097f0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80097f4:	667b      	str	r3, [r7, #100]	; 0x64
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	461a      	mov	r2, r3
 80097fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80097fe:	657b      	str	r3, [r7, #84]	; 0x54
 8009800:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009802:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009804:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009806:	e841 2300 	strex	r3, r2, [r1]
 800980a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800980c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800980e:	2b00      	cmp	r3, #0
 8009810:	d1e6      	bne.n	80097e0 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	3308      	adds	r3, #8
 8009818:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800981a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800981c:	e853 3f00 	ldrex	r3, [r3]
 8009820:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009824:	f023 0301 	bic.w	r3, r3, #1
 8009828:	663b      	str	r3, [r7, #96]	; 0x60
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	3308      	adds	r3, #8
 8009830:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009832:	643a      	str	r2, [r7, #64]	; 0x40
 8009834:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009836:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009838:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800983a:	e841 2300 	strex	r3, r2, [r1]
 800983e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009842:	2b00      	cmp	r3, #0
 8009844:	d1e5      	bne.n	8009812 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	2220      	movs	r2, #32
 800984a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	2200      	movs	r2, #0
 8009852:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	2200      	movs	r2, #0
 8009858:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	4a33      	ldr	r2, [pc, #204]	; (800992c <UART_RxISR_16BIT+0x1b4>)
 8009860:	4293      	cmp	r3, r2
 8009862:	d01f      	beq.n	80098a4 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	685b      	ldr	r3, [r3, #4]
 800986a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800986e:	2b00      	cmp	r3, #0
 8009870:	d018      	beq.n	80098a4 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009878:	6a3b      	ldr	r3, [r7, #32]
 800987a:	e853 3f00 	ldrex	r3, [r3]
 800987e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009880:	69fb      	ldr	r3, [r7, #28]
 8009882:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009886:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	461a      	mov	r2, r3
 800988e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009890:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009892:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009894:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009896:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009898:	e841 2300 	strex	r3, r2, [r1]
 800989c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800989e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d1e6      	bne.n	8009872 <UART_RxISR_16BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80098a8:	2b01      	cmp	r3, #1
 80098aa:	d12e      	bne.n	800990a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	2200      	movs	r2, #0
 80098b0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	e853 3f00 	ldrex	r3, [r3]
 80098be:	60bb      	str	r3, [r7, #8]
   return(result);
 80098c0:	68bb      	ldr	r3, [r7, #8]
 80098c2:	f023 0310 	bic.w	r3, r3, #16
 80098c6:	65bb      	str	r3, [r7, #88]	; 0x58
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	461a      	mov	r2, r3
 80098ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80098d0:	61bb      	str	r3, [r7, #24]
 80098d2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098d4:	6979      	ldr	r1, [r7, #20]
 80098d6:	69ba      	ldr	r2, [r7, #24]
 80098d8:	e841 2300 	strex	r3, r2, [r1]
 80098dc:	613b      	str	r3, [r7, #16]
   return(result);
 80098de:	693b      	ldr	r3, [r7, #16]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d1e6      	bne.n	80098b2 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	69db      	ldr	r3, [r3, #28]
 80098ea:	f003 0310 	and.w	r3, r3, #16
 80098ee:	2b10      	cmp	r3, #16
 80098f0:	d103      	bne.n	80098fa <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	2210      	movs	r2, #16
 80098f8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009900:	4619      	mov	r1, r3
 8009902:	6878      	ldr	r0, [r7, #4]
 8009904:	f7fe ffce 	bl	80088a4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009908:	e00b      	b.n	8009922 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800990a:	6878      	ldr	r0, [r7, #4]
 800990c:	f7f8 ff4c 	bl	80027a8 <HAL_UART_RxCpltCallback>
}
 8009910:	e007      	b.n	8009922 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	699a      	ldr	r2, [r3, #24]
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	f042 0208 	orr.w	r2, r2, #8
 8009920:	619a      	str	r2, [r3, #24]
}
 8009922:	bf00      	nop
 8009924:	3770      	adds	r7, #112	; 0x70
 8009926:	46bd      	mov	sp, r7
 8009928:	bd80      	pop	{r7, pc}
 800992a:	bf00      	nop
 800992c:	40008000 	.word	0x40008000

08009930 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009930:	b580      	push	{r7, lr}
 8009932:	b0ac      	sub	sp, #176	; 0xb0
 8009934:	af00      	add	r7, sp, #0
 8009936:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800993e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	69db      	ldr	r3, [r3, #28]
 8009948:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	689b      	ldr	r3, [r3, #8]
 800995c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009966:	2b22      	cmp	r3, #34	; 0x22
 8009968:	f040 8182 	bne.w	8009c70 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009972:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009976:	e125      	b.n	8009bc4 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800997e:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009982:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8009986:	b2d9      	uxtb	r1, r3
 8009988:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800998c:	b2da      	uxtb	r2, r3
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009992:	400a      	ands	r2, r1
 8009994:	b2d2      	uxtb	r2, r2
 8009996:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800999c:	1c5a      	adds	r2, r3, #1
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80099a8:	b29b      	uxth	r3, r3
 80099aa:	3b01      	subs	r3, #1
 80099ac:	b29a      	uxth	r2, r3
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	69db      	ldr	r3, [r3, #28]
 80099ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80099be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80099c2:	f003 0307 	and.w	r3, r3, #7
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d053      	beq.n	8009a72 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80099ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80099ce:	f003 0301 	and.w	r3, r3, #1
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d011      	beq.n	80099fa <UART_RxISR_8BIT_FIFOEN+0xca>
 80099d6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80099da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d00b      	beq.n	80099fa <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	2201      	movs	r2, #1
 80099e8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80099f0:	f043 0201 	orr.w	r2, r3, #1
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80099fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80099fe:	f003 0302 	and.w	r3, r3, #2
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d011      	beq.n	8009a2a <UART_RxISR_8BIT_FIFOEN+0xfa>
 8009a06:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009a0a:	f003 0301 	and.w	r3, r3, #1
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d00b      	beq.n	8009a2a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	2202      	movs	r2, #2
 8009a18:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a20:	f043 0204 	orr.w	r2, r3, #4
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009a2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009a2e:	f003 0304 	and.w	r3, r3, #4
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d011      	beq.n	8009a5a <UART_RxISR_8BIT_FIFOEN+0x12a>
 8009a36:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009a3a:	f003 0301 	and.w	r3, r3, #1
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d00b      	beq.n	8009a5a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	2204      	movs	r2, #4
 8009a48:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a50:	f043 0202 	orr.w	r2, r3, #2
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d006      	beq.n	8009a72 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009a64:	6878      	ldr	r0, [r7, #4]
 8009a66:	f7fe ff13 	bl	8008890 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	2200      	movs	r2, #0
 8009a6e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009a78:	b29b      	uxth	r3, r3
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	f040 80a2 	bne.w	8009bc4 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a86:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009a88:	e853 3f00 	ldrex	r3, [r3]
 8009a8c:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8009a8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009a90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009a94:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	461a      	mov	r2, r3
 8009a9e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009aa2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009aa4:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009aa6:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8009aa8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009aaa:	e841 2300 	strex	r3, r2, [r1]
 8009aae:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8009ab0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d1e4      	bne.n	8009a80 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	3308      	adds	r3, #8
 8009abc:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009abe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009ac0:	e853 3f00 	ldrex	r3, [r3]
 8009ac4:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8009ac6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009ac8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009acc:	f023 0301 	bic.w	r3, r3, #1
 8009ad0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	3308      	adds	r3, #8
 8009ada:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009ade:	66ba      	str	r2, [r7, #104]	; 0x68
 8009ae0:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ae2:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8009ae4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009ae6:	e841 2300 	strex	r3, r2, [r1]
 8009aea:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8009aec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d1e1      	bne.n	8009ab6 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	2220      	movs	r2, #32
 8009af6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	2200      	movs	r2, #0
 8009afe:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	2200      	movs	r2, #0
 8009b04:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	4a5f      	ldr	r2, [pc, #380]	; (8009c88 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8009b0c:	4293      	cmp	r3, r2
 8009b0e:	d021      	beq.n	8009b54 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	685b      	ldr	r3, [r3, #4]
 8009b16:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d01a      	beq.n	8009b54 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009b26:	e853 3f00 	ldrex	r3, [r3]
 8009b2a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009b2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009b2e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009b32:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	461a      	mov	r2, r3
 8009b3c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009b40:	657b      	str	r3, [r7, #84]	; 0x54
 8009b42:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b44:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009b46:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009b48:	e841 2300 	strex	r3, r2, [r1]
 8009b4c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009b4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d1e4      	bne.n	8009b1e <UART_RxISR_8BIT_FIFOEN+0x1ee>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009b58:	2b01      	cmp	r3, #1
 8009b5a:	d130      	bne.n	8009bbe <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	2200      	movs	r2, #0
 8009b60:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b6a:	e853 3f00 	ldrex	r3, [r3]
 8009b6e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b72:	f023 0310 	bic.w	r3, r3, #16
 8009b76:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	461a      	mov	r2, r3
 8009b80:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009b84:	643b      	str	r3, [r7, #64]	; 0x40
 8009b86:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b88:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009b8a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009b8c:	e841 2300 	strex	r3, r2, [r1]
 8009b90:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d1e4      	bne.n	8009b62 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	69db      	ldr	r3, [r3, #28]
 8009b9e:	f003 0310 	and.w	r3, r3, #16
 8009ba2:	2b10      	cmp	r3, #16
 8009ba4:	d103      	bne.n	8009bae <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	2210      	movs	r2, #16
 8009bac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009bb4:	4619      	mov	r1, r3
 8009bb6:	6878      	ldr	r0, [r7, #4]
 8009bb8:	f7fe fe74 	bl	80088a4 <HAL_UARTEx_RxEventCallback>
 8009bbc:	e002      	b.n	8009bc4 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009bbe:	6878      	ldr	r0, [r7, #4]
 8009bc0:	f7f8 fdf2 	bl	80027a8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009bc4:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d006      	beq.n	8009bda <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8009bcc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009bd0:	f003 0320 	and.w	r3, r3, #32
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	f47f aecf 	bne.w	8009978 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009be0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009be4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d049      	beq.n	8009c80 <UART_RxISR_8BIT_FIFOEN+0x350>
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009bf2:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8009bf6:	429a      	cmp	r2, r3
 8009bf8:	d242      	bcs.n	8009c80 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	3308      	adds	r3, #8
 8009c00:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c02:	6a3b      	ldr	r3, [r7, #32]
 8009c04:	e853 3f00 	ldrex	r3, [r3]
 8009c08:	61fb      	str	r3, [r7, #28]
   return(result);
 8009c0a:	69fb      	ldr	r3, [r7, #28]
 8009c0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009c10:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	3308      	adds	r3, #8
 8009c1a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8009c1e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009c20:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c22:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009c24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009c26:	e841 2300 	strex	r3, r2, [r1]
 8009c2a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d1e3      	bne.n	8009bfa <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	4a15      	ldr	r2, [pc, #84]	; (8009c8c <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8009c36:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	e853 3f00 	ldrex	r3, [r3]
 8009c44:	60bb      	str	r3, [r7, #8]
   return(result);
 8009c46:	68bb      	ldr	r3, [r7, #8]
 8009c48:	f043 0320 	orr.w	r3, r3, #32
 8009c4c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	461a      	mov	r2, r3
 8009c56:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009c5a:	61bb      	str	r3, [r7, #24]
 8009c5c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c5e:	6979      	ldr	r1, [r7, #20]
 8009c60:	69ba      	ldr	r2, [r7, #24]
 8009c62:	e841 2300 	strex	r3, r2, [r1]
 8009c66:	613b      	str	r3, [r7, #16]
   return(result);
 8009c68:	693b      	ldr	r3, [r7, #16]
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d1e4      	bne.n	8009c38 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009c6e:	e007      	b.n	8009c80 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	699a      	ldr	r2, [r3, #24]
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	f042 0208 	orr.w	r2, r2, #8
 8009c7e:	619a      	str	r2, [r3, #24]
}
 8009c80:	bf00      	nop
 8009c82:	37b0      	adds	r7, #176	; 0xb0
 8009c84:	46bd      	mov	sp, r7
 8009c86:	bd80      	pop	{r7, pc}
 8009c88:	40008000 	.word	0x40008000
 8009c8c:	080095c1 	.word	0x080095c1

08009c90 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009c90:	b580      	push	{r7, lr}
 8009c92:	b0ae      	sub	sp, #184	; 0xb8
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009c9e:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	69db      	ldr	r3, [r3, #28]
 8009ca8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	689b      	ldr	r3, [r3, #8]
 8009cbc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009cc6:	2b22      	cmp	r3, #34	; 0x22
 8009cc8:	f040 8186 	bne.w	8009fd8 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009cd2:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009cd6:	e129      	b.n	8009f2c <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cde:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ce6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8009cea:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8009cee:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8009cf2:	4013      	ands	r3, r2
 8009cf4:	b29a      	uxth	r2, r3
 8009cf6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009cfa:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d00:	1c9a      	adds	r2, r3, #2
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009d0c:	b29b      	uxth	r3, r3
 8009d0e:	3b01      	subs	r3, #1
 8009d10:	b29a      	uxth	r2, r3
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	69db      	ldr	r3, [r3, #28]
 8009d1e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009d22:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009d26:	f003 0307 	and.w	r3, r3, #7
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d053      	beq.n	8009dd6 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009d2e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009d32:	f003 0301 	and.w	r3, r3, #1
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d011      	beq.n	8009d5e <UART_RxISR_16BIT_FIFOEN+0xce>
 8009d3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009d3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d00b      	beq.n	8009d5e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	2201      	movs	r2, #1
 8009d4c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d54:	f043 0201 	orr.w	r2, r3, #1
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009d5e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009d62:	f003 0302 	and.w	r3, r3, #2
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d011      	beq.n	8009d8e <UART_RxISR_16BIT_FIFOEN+0xfe>
 8009d6a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009d6e:	f003 0301 	and.w	r3, r3, #1
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d00b      	beq.n	8009d8e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	2202      	movs	r2, #2
 8009d7c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d84:	f043 0204 	orr.w	r2, r3, #4
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009d8e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009d92:	f003 0304 	and.w	r3, r3, #4
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d011      	beq.n	8009dbe <UART_RxISR_16BIT_FIFOEN+0x12e>
 8009d9a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009d9e:	f003 0301 	and.w	r3, r3, #1
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d00b      	beq.n	8009dbe <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	2204      	movs	r2, #4
 8009dac:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009db4:	f043 0202 	orr.w	r2, r3, #2
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d006      	beq.n	8009dd6 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009dc8:	6878      	ldr	r0, [r7, #4]
 8009dca:	f7fe fd61 	bl	8008890 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	2200      	movs	r2, #0
 8009dd2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009ddc:	b29b      	uxth	r3, r3
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	f040 80a4 	bne.w	8009f2c <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009dec:	e853 3f00 	ldrex	r3, [r3]
 8009df0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009df2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009df4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009df8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	461a      	mov	r2, r3
 8009e02:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009e06:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009e0a:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e0c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009e0e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009e12:	e841 2300 	strex	r3, r2, [r1]
 8009e16:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009e18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d1e2      	bne.n	8009de4 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	3308      	adds	r3, #8
 8009e24:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009e28:	e853 3f00 	ldrex	r3, [r3]
 8009e2c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009e2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009e30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009e34:	f023 0301 	bic.w	r3, r3, #1
 8009e38:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	3308      	adds	r3, #8
 8009e42:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8009e46:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009e48:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e4a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009e4c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009e4e:	e841 2300 	strex	r3, r2, [r1]
 8009e52:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009e54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d1e1      	bne.n	8009e1e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	2220      	movs	r2, #32
 8009e5e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	2200      	movs	r2, #0
 8009e66:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	4a5f      	ldr	r2, [pc, #380]	; (8009ff0 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8009e74:	4293      	cmp	r3, r2
 8009e76:	d021      	beq.n	8009ebc <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	685b      	ldr	r3, [r3, #4]
 8009e7e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d01a      	beq.n	8009ebc <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e8e:	e853 3f00 	ldrex	r3, [r3]
 8009e92:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009e94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009e96:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009e9a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	461a      	mov	r2, r3
 8009ea4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009ea8:	65bb      	str	r3, [r7, #88]	; 0x58
 8009eaa:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009eac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009eae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009eb0:	e841 2300 	strex	r3, r2, [r1]
 8009eb4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009eb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d1e4      	bne.n	8009e86 <UART_RxISR_16BIT_FIFOEN+0x1f6>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009ec0:	2b01      	cmp	r3, #1
 8009ec2:	d130      	bne.n	8009f26 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	2200      	movs	r2, #0
 8009ec8:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ed2:	e853 3f00 	ldrex	r3, [r3]
 8009ed6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009ed8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009eda:	f023 0310 	bic.w	r3, r3, #16
 8009ede:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	461a      	mov	r2, r3
 8009ee8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009eec:	647b      	str	r3, [r7, #68]	; 0x44
 8009eee:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ef0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009ef2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009ef4:	e841 2300 	strex	r3, r2, [r1]
 8009ef8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009efa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d1e4      	bne.n	8009eca <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	69db      	ldr	r3, [r3, #28]
 8009f06:	f003 0310 	and.w	r3, r3, #16
 8009f0a:	2b10      	cmp	r3, #16
 8009f0c:	d103      	bne.n	8009f16 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	2210      	movs	r2, #16
 8009f14:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009f1c:	4619      	mov	r1, r3
 8009f1e:	6878      	ldr	r0, [r7, #4]
 8009f20:	f7fe fcc0 	bl	80088a4 <HAL_UARTEx_RxEventCallback>
 8009f24:	e002      	b.n	8009f2c <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009f26:	6878      	ldr	r0, [r7, #4]
 8009f28:	f7f8 fc3e 	bl	80027a8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009f2c:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d006      	beq.n	8009f42 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8009f34:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009f38:	f003 0320 	and.w	r3, r3, #32
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	f47f aecb 	bne.w	8009cd8 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009f48:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009f4c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d049      	beq.n	8009fe8 <UART_RxISR_16BIT_FIFOEN+0x358>
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009f5a:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8009f5e:	429a      	cmp	r2, r3
 8009f60:	d242      	bcs.n	8009fe8 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	3308      	adds	r3, #8
 8009f68:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f6c:	e853 3f00 	ldrex	r3, [r3]
 8009f70:	623b      	str	r3, [r7, #32]
   return(result);
 8009f72:	6a3b      	ldr	r3, [r7, #32]
 8009f74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009f78:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	3308      	adds	r3, #8
 8009f82:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8009f86:	633a      	str	r2, [r7, #48]	; 0x30
 8009f88:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f8a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009f8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009f8e:	e841 2300 	strex	r3, r2, [r1]
 8009f92:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d1e3      	bne.n	8009f62 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	4a15      	ldr	r2, [pc, #84]	; (8009ff4 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8009f9e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fa6:	693b      	ldr	r3, [r7, #16]
 8009fa8:	e853 3f00 	ldrex	r3, [r3]
 8009fac:	60fb      	str	r3, [r7, #12]
   return(result);
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	f043 0320 	orr.w	r3, r3, #32
 8009fb4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	461a      	mov	r2, r3
 8009fbe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009fc2:	61fb      	str	r3, [r7, #28]
 8009fc4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fc6:	69b9      	ldr	r1, [r7, #24]
 8009fc8:	69fa      	ldr	r2, [r7, #28]
 8009fca:	e841 2300 	strex	r3, r2, [r1]
 8009fce:	617b      	str	r3, [r7, #20]
   return(result);
 8009fd0:	697b      	ldr	r3, [r7, #20]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d1e4      	bne.n	8009fa0 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009fd6:	e007      	b.n	8009fe8 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	699a      	ldr	r2, [r3, #24]
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	f042 0208 	orr.w	r2, r2, #8
 8009fe6:	619a      	str	r2, [r3, #24]
}
 8009fe8:	bf00      	nop
 8009fea:	37b8      	adds	r7, #184	; 0xb8
 8009fec:	46bd      	mov	sp, r7
 8009fee:	bd80      	pop	{r7, pc}
 8009ff0:	40008000 	.word	0x40008000
 8009ff4:	08009779 	.word	0x08009779

08009ff8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009ff8:	b480      	push	{r7}
 8009ffa:	b083      	sub	sp, #12
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a000:	bf00      	nop
 800a002:	370c      	adds	r7, #12
 800a004:	46bd      	mov	sp, r7
 800a006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a00a:	4770      	bx	lr

0800a00c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a00c:	b480      	push	{r7}
 800a00e:	b083      	sub	sp, #12
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a014:	bf00      	nop
 800a016:	370c      	adds	r7, #12
 800a018:	46bd      	mov	sp, r7
 800a01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a01e:	4770      	bx	lr

0800a020 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a020:	b480      	push	{r7}
 800a022:	b083      	sub	sp, #12
 800a024:	af00      	add	r7, sp, #0
 800a026:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a028:	bf00      	nop
 800a02a:	370c      	adds	r7, #12
 800a02c:	46bd      	mov	sp, r7
 800a02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a032:	4770      	bx	lr

0800a034 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a034:	b480      	push	{r7}
 800a036:	b085      	sub	sp, #20
 800a038:	af00      	add	r7, sp, #0
 800a03a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a042:	2b01      	cmp	r3, #1
 800a044:	d101      	bne.n	800a04a <HAL_UARTEx_DisableFifoMode+0x16>
 800a046:	2302      	movs	r3, #2
 800a048:	e027      	b.n	800a09a <HAL_UARTEx_DisableFifoMode+0x66>
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	2201      	movs	r2, #1
 800a04e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	2224      	movs	r2, #36	; 0x24
 800a056:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	681a      	ldr	r2, [r3, #0]
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	f022 0201 	bic.w	r2, r2, #1
 800a070:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a078:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	2200      	movs	r2, #0
 800a07e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	68fa      	ldr	r2, [r7, #12]
 800a086:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	2220      	movs	r2, #32
 800a08c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	2200      	movs	r2, #0
 800a094:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a098:	2300      	movs	r3, #0
}
 800a09a:	4618      	mov	r0, r3
 800a09c:	3714      	adds	r7, #20
 800a09e:	46bd      	mov	sp, r7
 800a0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a4:	4770      	bx	lr

0800a0a6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a0a6:	b580      	push	{r7, lr}
 800a0a8:	b084      	sub	sp, #16
 800a0aa:	af00      	add	r7, sp, #0
 800a0ac:	6078      	str	r0, [r7, #4]
 800a0ae:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a0b6:	2b01      	cmp	r3, #1
 800a0b8:	d101      	bne.n	800a0be <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a0ba:	2302      	movs	r3, #2
 800a0bc:	e02d      	b.n	800a11a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	2201      	movs	r2, #1
 800a0c2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	2224      	movs	r2, #36	; 0x24
 800a0ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	681a      	ldr	r2, [r3, #0]
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	f022 0201 	bic.w	r2, r2, #1
 800a0e4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	689b      	ldr	r3, [r3, #8]
 800a0ec:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	683a      	ldr	r2, [r7, #0]
 800a0f6:	430a      	orrs	r2, r1
 800a0f8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a0fa:	6878      	ldr	r0, [r7, #4]
 800a0fc:	f000 f850 	bl	800a1a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	68fa      	ldr	r2, [r7, #12]
 800a106:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	2220      	movs	r2, #32
 800a10c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	2200      	movs	r2, #0
 800a114:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a118:	2300      	movs	r3, #0
}
 800a11a:	4618      	mov	r0, r3
 800a11c:	3710      	adds	r7, #16
 800a11e:	46bd      	mov	sp, r7
 800a120:	bd80      	pop	{r7, pc}

0800a122 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a122:	b580      	push	{r7, lr}
 800a124:	b084      	sub	sp, #16
 800a126:	af00      	add	r7, sp, #0
 800a128:	6078      	str	r0, [r7, #4]
 800a12a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a132:	2b01      	cmp	r3, #1
 800a134:	d101      	bne.n	800a13a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a136:	2302      	movs	r3, #2
 800a138:	e02d      	b.n	800a196 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	2201      	movs	r2, #1
 800a13e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	2224      	movs	r2, #36	; 0x24
 800a146:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	681a      	ldr	r2, [r3, #0]
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	f022 0201 	bic.w	r2, r2, #1
 800a160:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	689b      	ldr	r3, [r3, #8]
 800a168:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	683a      	ldr	r2, [r7, #0]
 800a172:	430a      	orrs	r2, r1
 800a174:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a176:	6878      	ldr	r0, [r7, #4]
 800a178:	f000 f812 	bl	800a1a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	68fa      	ldr	r2, [r7, #12]
 800a182:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	2220      	movs	r2, #32
 800a188:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	2200      	movs	r2, #0
 800a190:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a194:	2300      	movs	r3, #0
}
 800a196:	4618      	mov	r0, r3
 800a198:	3710      	adds	r7, #16
 800a19a:	46bd      	mov	sp, r7
 800a19c:	bd80      	pop	{r7, pc}
	...

0800a1a0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a1a0:	b480      	push	{r7}
 800a1a2:	b085      	sub	sp, #20
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d108      	bne.n	800a1c2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	2201      	movs	r2, #1
 800a1b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	2201      	movs	r2, #1
 800a1bc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a1c0:	e031      	b.n	800a226 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a1c2:	2308      	movs	r3, #8
 800a1c4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a1c6:	2308      	movs	r3, #8
 800a1c8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	689b      	ldr	r3, [r3, #8]
 800a1d0:	0e5b      	lsrs	r3, r3, #25
 800a1d2:	b2db      	uxtb	r3, r3
 800a1d4:	f003 0307 	and.w	r3, r3, #7
 800a1d8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	689b      	ldr	r3, [r3, #8]
 800a1e0:	0f5b      	lsrs	r3, r3, #29
 800a1e2:	b2db      	uxtb	r3, r3
 800a1e4:	f003 0307 	and.w	r3, r3, #7
 800a1e8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a1ea:	7bbb      	ldrb	r3, [r7, #14]
 800a1ec:	7b3a      	ldrb	r2, [r7, #12]
 800a1ee:	4911      	ldr	r1, [pc, #68]	; (800a234 <UARTEx_SetNbDataToProcess+0x94>)
 800a1f0:	5c8a      	ldrb	r2, [r1, r2]
 800a1f2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a1f6:	7b3a      	ldrb	r2, [r7, #12]
 800a1f8:	490f      	ldr	r1, [pc, #60]	; (800a238 <UARTEx_SetNbDataToProcess+0x98>)
 800a1fa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a1fc:	fb93 f3f2 	sdiv	r3, r3, r2
 800a200:	b29a      	uxth	r2, r3
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a208:	7bfb      	ldrb	r3, [r7, #15]
 800a20a:	7b7a      	ldrb	r2, [r7, #13]
 800a20c:	4909      	ldr	r1, [pc, #36]	; (800a234 <UARTEx_SetNbDataToProcess+0x94>)
 800a20e:	5c8a      	ldrb	r2, [r1, r2]
 800a210:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a214:	7b7a      	ldrb	r2, [r7, #13]
 800a216:	4908      	ldr	r1, [pc, #32]	; (800a238 <UARTEx_SetNbDataToProcess+0x98>)
 800a218:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a21a:	fb93 f3f2 	sdiv	r3, r3, r2
 800a21e:	b29a      	uxth	r2, r3
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a226:	bf00      	nop
 800a228:	3714      	adds	r7, #20
 800a22a:	46bd      	mov	sp, r7
 800a22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a230:	4770      	bx	lr
 800a232:	bf00      	nop
 800a234:	08011d10 	.word	0x08011d10
 800a238:	08011d18 	.word	0x08011d18

0800a23c <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 800a23c:	b580      	push	{r7, lr}
 800a23e:	b088      	sub	sp, #32
 800a240:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800a242:	2300      	movs	r3, #0
 800a244:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a246:	f107 0308 	add.w	r3, r7, #8
 800a24a:	2218      	movs	r2, #24
 800a24c:	2100      	movs	r1, #0
 800a24e:	4618      	mov	r0, r3
 800a250:	f001 fc9a 	bl	800bb88 <Osal_MemSet>
  rq.ogf = 0x3f;
 800a254:	233f      	movs	r3, #63	; 0x3f
 800a256:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 800a258:	2381      	movs	r3, #129	; 0x81
 800a25a:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800a25c:	1dfb      	adds	r3, r7, #7
 800a25e:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800a260:	2301      	movs	r3, #1
 800a262:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a264:	f107 0308 	add.w	r3, r7, #8
 800a268:	2100      	movs	r1, #0
 800a26a:	4618      	mov	r0, r3
 800a26c:	f001 fb4a 	bl	800b904 <hci_send_req>
 800a270:	4603      	mov	r3, r0
 800a272:	2b00      	cmp	r3, #0
 800a274:	da01      	bge.n	800a27a <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 800a276:	23ff      	movs	r3, #255	; 0xff
 800a278:	e000      	b.n	800a27c <aci_gap_set_non_discoverable+0x40>
  return status;
 800a27a:	79fb      	ldrb	r3, [r7, #7]
}
 800a27c:	4618      	mov	r0, r3
 800a27e:	3720      	adds	r7, #32
 800a280:	46bd      	mov	sp, r7
 800a282:	bd80      	pop	{r7, pc}

0800a284 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Conn_Interval_Min,
                                     uint16_t Conn_Interval_Max )
{
 800a284:	b5b0      	push	{r4, r5, r7, lr}
 800a286:	b0ce      	sub	sp, #312	; 0x138
 800a288:	af00      	add	r7, sp, #0
 800a28a:	4605      	mov	r5, r0
 800a28c:	460c      	mov	r4, r1
 800a28e:	4610      	mov	r0, r2
 800a290:	4619      	mov	r1, r3
 800a292:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800a296:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800a29a:	462a      	mov	r2, r5
 800a29c:	701a      	strb	r2, [r3, #0]
 800a29e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800a2a2:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800a2a6:	4622      	mov	r2, r4
 800a2a8:	801a      	strh	r2, [r3, #0]
 800a2aa:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800a2ae:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 800a2b2:	4602      	mov	r2, r0
 800a2b4:	801a      	strh	r2, [r3, #0]
 800a2b6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800a2ba:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800a2be:	460a      	mov	r2, r1
 800a2c0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 800a2c2:	f107 0310 	add.w	r3, r7, #16
 800a2c6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 800a2ca:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 800a2ce:	3308      	adds	r3, #8
 800a2d0:	f107 0210 	add.w	r2, r7, #16
 800a2d4:	4413      	add	r3, r2
 800a2d6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 800a2da:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800a2de:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 800a2e2:	4413      	add	r3, r2
 800a2e4:	3309      	adds	r3, #9
 800a2e6:	f107 0210 	add.w	r2, r7, #16
 800a2ea:	4413      	add	r3, r2
 800a2ec:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800a2f0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800a2f4:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800a2f8:	2200      	movs	r2, #0
 800a2fa:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a2fc:	2300      	movs	r3, #0
 800a2fe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 800a302:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800a306:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800a30a:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 800a30e:	7812      	ldrb	r2, [r2, #0]
 800a310:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800a312:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a316:	3301      	adds	r3, #1
 800a318:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 800a31c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800a320:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800a324:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 800a328:	8812      	ldrh	r2, [r2, #0]
 800a32a:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 800a32e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a332:	3302      	adds	r3, #2
 800a334:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 800a338:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800a33c:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800a340:	f5a2 729b 	sub.w	r2, r2, #310	; 0x136
 800a344:	8812      	ldrh	r2, [r2, #0]
 800a346:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 800a34a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a34e:	3302      	adds	r3, #2
 800a350:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 800a354:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800a358:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800a35c:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 800a360:	7812      	ldrb	r2, [r2, #0]
 800a362:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800a364:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a368:	3301      	adds	r3, #1
 800a36a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 800a36e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800a372:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 800a376:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800a378:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a37c:	3301      	adds	r3, #1
 800a37e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 800a382:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800a386:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800a38a:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 800a38c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a390:	3301      	adds	r3, #1
 800a392:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 800a396:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800a39a:	3308      	adds	r3, #8
 800a39c:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800a3a0:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	f001 fbdf 	bl	800bb68 <Osal_MemCpy>
    index_input += Local_Name_Length;
 800a3aa:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 800a3ae:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800a3b2:	4413      	add	r3, r2
 800a3b4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 800a3b8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a3bc:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800a3c0:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800a3c2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a3c6:	3301      	adds	r3, #1
 800a3c8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 800a3cc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a3d0:	3301      	adds	r3, #1
 800a3d2:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800a3d6:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 800a3da:	4618      	mov	r0, r3
 800a3dc:	f001 fbc4 	bl	800bb68 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 800a3e0:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 800a3e4:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800a3e8:	4413      	add	r3, r2
 800a3ea:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Conn_Interval_Min = Conn_Interval_Min;
 800a3ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a3f2:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 800a3f6:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800a3f8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a3fc:	3302      	adds	r3, #2
 800a3fe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Conn_Interval_Max = Conn_Interval_Max;
 800a402:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a406:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 800a40a:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 800a40c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a410:	3302      	adds	r3, #2
 800a412:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a416:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a41a:	2218      	movs	r2, #24
 800a41c:	2100      	movs	r1, #0
 800a41e:	4618      	mov	r0, r3
 800a420:	f001 fbb2 	bl	800bb88 <Osal_MemSet>
  rq.ogf = 0x3f;
 800a424:	233f      	movs	r3, #63	; 0x3f
 800a426:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 800a42a:	2383      	movs	r3, #131	; 0x83
 800a42c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800a430:	f107 0310 	add.w	r3, r7, #16
 800a434:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800a438:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a43c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800a440:	f107 030f 	add.w	r3, r7, #15
 800a444:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800a448:	2301      	movs	r3, #1
 800a44a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a44e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a452:	2100      	movs	r1, #0
 800a454:	4618      	mov	r0, r3
 800a456:	f001 fa55 	bl	800b904 <hci_send_req>
 800a45a:	4603      	mov	r3, r0
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	da01      	bge.n	800a464 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 800a460:	23ff      	movs	r3, #255	; 0xff
 800a462:	e004      	b.n	800a46e <aci_gap_set_discoverable+0x1ea>
  return status;
 800a464:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800a468:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800a46c:	781b      	ldrb	r3, [r3, #0]
}
 800a46e:	4618      	mov	r0, r3
 800a470:	f507 779c 	add.w	r7, r7, #312	; 0x138
 800a474:	46bd      	mov	sp, r7
 800a476:	bdb0      	pop	{r4, r5, r7, pc}

0800a478 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 800a478:	b580      	push	{r7, lr}
 800a47a:	b0cc      	sub	sp, #304	; 0x130
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	4602      	mov	r2, r0
 800a480:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a484:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800a488:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 800a48a:	f107 0310 	add.w	r3, r7, #16
 800a48e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800a492:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a496:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800a49a:	2200      	movs	r2, #0
 800a49c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a49e:	2300      	movs	r3, #0
 800a4a0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 800a4a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a4a8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a4ac:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800a4b0:	7812      	ldrb	r2, [r2, #0]
 800a4b2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800a4b4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a4b8:	3301      	adds	r3, #1
 800a4ba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a4be:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a4c2:	2218      	movs	r2, #24
 800a4c4:	2100      	movs	r1, #0
 800a4c6:	4618      	mov	r0, r3
 800a4c8:	f001 fb5e 	bl	800bb88 <Osal_MemSet>
  rq.ogf = 0x3f;
 800a4cc:	233f      	movs	r3, #63	; 0x3f
 800a4ce:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 800a4d2:	2385      	movs	r3, #133	; 0x85
 800a4d4:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800a4d8:	f107 0310 	add.w	r3, r7, #16
 800a4dc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800a4e0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a4e4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800a4e8:	f107 030f 	add.w	r3, r7, #15
 800a4ec:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800a4f0:	2301      	movs	r3, #1
 800a4f2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a4f6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a4fa:	2100      	movs	r1, #0
 800a4fc:	4618      	mov	r0, r3
 800a4fe:	f001 fa01 	bl	800b904 <hci_send_req>
 800a502:	4603      	mov	r3, r0
 800a504:	2b00      	cmp	r3, #0
 800a506:	da01      	bge.n	800a50c <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 800a508:	23ff      	movs	r3, #255	; 0xff
 800a50a:	e004      	b.n	800a516 <aci_gap_set_io_capability+0x9e>
  return status;
 800a50c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a510:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800a514:	781b      	ldrb	r3, [r3, #0]
}
 800a516:	4618      	mov	r0, r3
 800a518:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800a51c:	46bd      	mov	sp, r7
 800a51e:	bd80      	pop	{r7, pc}

0800a520 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 800a520:	b5b0      	push	{r4, r5, r7, lr}
 800a522:	b0cc      	sub	sp, #304	; 0x130
 800a524:	af00      	add	r7, sp, #0
 800a526:	4605      	mov	r5, r0
 800a528:	460c      	mov	r4, r1
 800a52a:	4610      	mov	r0, r2
 800a52c:	4619      	mov	r1, r3
 800a52e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a532:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800a536:	462a      	mov	r2, r5
 800a538:	701a      	strb	r2, [r3, #0]
 800a53a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a53e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800a542:	4622      	mov	r2, r4
 800a544:	701a      	strb	r2, [r3, #0]
 800a546:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a54a:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800a54e:	4602      	mov	r2, r0
 800a550:	701a      	strb	r2, [r3, #0]
 800a552:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a556:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a55a:	460a      	mov	r2, r1
 800a55c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 800a55e:	f107 0310 	add.w	r3, r7, #16
 800a562:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800a566:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a56a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800a56e:	2200      	movs	r2, #0
 800a570:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a572:	2300      	movs	r3, #0
 800a574:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 800a578:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a57c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a580:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800a584:	7812      	ldrb	r2, [r2, #0]
 800a586:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800a588:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a58c:	3301      	adds	r3, #1
 800a58e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 800a592:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a596:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a59a:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800a59e:	7812      	ldrb	r2, [r2, #0]
 800a5a0:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800a5a2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a5a6:	3301      	adds	r3, #1
 800a5a8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 800a5ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a5b0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a5b4:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 800a5b8:	7812      	ldrb	r2, [r2, #0]
 800a5ba:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800a5bc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a5c0:	3301      	adds	r3, #1
 800a5c2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 800a5c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a5ca:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a5ce:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800a5d2:	7812      	ldrb	r2, [r2, #0]
 800a5d4:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 800a5d6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a5da:	3301      	adds	r3, #1
 800a5dc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 800a5e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a5e4:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 800a5e8:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800a5ea:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a5ee:	3301      	adds	r3, #1
 800a5f0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 800a5f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a5f8:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 800a5fc:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800a5fe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a602:	3301      	adds	r3, #1
 800a604:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 800a608:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a60c:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 800a610:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800a612:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a616:	3301      	adds	r3, #1
 800a618:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 800a61c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a620:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800a624:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 800a628:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a62c:	3304      	adds	r3, #4
 800a62e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 800a632:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a636:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 800a63a:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 800a63c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a640:	3301      	adds	r3, #1
 800a642:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a646:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a64a:	2218      	movs	r2, #24
 800a64c:	2100      	movs	r1, #0
 800a64e:	4618      	mov	r0, r3
 800a650:	f001 fa9a 	bl	800bb88 <Osal_MemSet>
  rq.ogf = 0x3f;
 800a654:	233f      	movs	r3, #63	; 0x3f
 800a656:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 800a65a:	2386      	movs	r3, #134	; 0x86
 800a65c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800a660:	f107 0310 	add.w	r3, r7, #16
 800a664:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800a668:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a66c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800a670:	f107 030f 	add.w	r3, r7, #15
 800a674:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800a678:	2301      	movs	r3, #1
 800a67a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a67e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a682:	2100      	movs	r1, #0
 800a684:	4618      	mov	r0, r3
 800a686:	f001 f93d 	bl	800b904 <hci_send_req>
 800a68a:	4603      	mov	r3, r0
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	da01      	bge.n	800a694 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 800a690:	23ff      	movs	r3, #255	; 0xff
 800a692:	e004      	b.n	800a69e <aci_gap_set_authentication_requirement+0x17e>
  return status;
 800a694:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a698:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800a69c:	781b      	ldrb	r3, [r3, #0]
}
 800a69e:	4618      	mov	r0, r3
 800a6a0:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800a6a4:	46bd      	mov	sp, r7
 800a6a6:	bdb0      	pop	{r4, r5, r7, pc}

0800a6a8 <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 800a6a8:	b580      	push	{r7, lr}
 800a6aa:	b0cc      	sub	sp, #304	; 0x130
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	4602      	mov	r2, r0
 800a6b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a6b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a6b8:	6019      	str	r1, [r3, #0]
 800a6ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a6be:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800a6c2:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 800a6c4:	f107 0310 	add.w	r3, r7, #16
 800a6c8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800a6cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a6d0:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800a6d4:	2200      	movs	r2, #0
 800a6d6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a6d8:	2300      	movs	r3, #0
 800a6da:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 800a6de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a6e2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a6e6:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800a6ea:	8812      	ldrh	r2, [r2, #0]
 800a6ec:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800a6ee:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a6f2:	3302      	adds	r3, #2
 800a6f4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Pass_Key = Pass_Key;
 800a6f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a6fc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a700:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 800a704:	6812      	ldr	r2, [r2, #0]
 800a706:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 800a70a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a70e:	3304      	adds	r3, #4
 800a710:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a714:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a718:	2218      	movs	r2, #24
 800a71a:	2100      	movs	r1, #0
 800a71c:	4618      	mov	r0, r3
 800a71e:	f001 fa33 	bl	800bb88 <Osal_MemSet>
  rq.ogf = 0x3f;
 800a722:	233f      	movs	r3, #63	; 0x3f
 800a724:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x088;
 800a728:	2388      	movs	r3, #136	; 0x88
 800a72a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800a72e:	f107 0310 	add.w	r3, r7, #16
 800a732:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800a736:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a73a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800a73e:	f107 030f 	add.w	r3, r7, #15
 800a742:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800a746:	2301      	movs	r3, #1
 800a748:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a74c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a750:	2100      	movs	r1, #0
 800a752:	4618      	mov	r0, r3
 800a754:	f001 f8d6 	bl	800b904 <hci_send_req>
 800a758:	4603      	mov	r3, r0
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	da01      	bge.n	800a762 <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 800a75e:	23ff      	movs	r3, #255	; 0xff
 800a760:	e004      	b.n	800a76c <aci_gap_pass_key_resp+0xc4>
  return status;
 800a762:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a766:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800a76a:	781b      	ldrb	r3, [r3, #0]
}
 800a76c:	4618      	mov	r0, r3
 800a76e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800a772:	46bd      	mov	sp, r7
 800a774:	bd80      	pop	{r7, pc}

0800a776 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 800a776:	b590      	push	{r4, r7, lr}
 800a778:	b0cd      	sub	sp, #308	; 0x134
 800a77a:	af00      	add	r7, sp, #0
 800a77c:	4604      	mov	r4, r0
 800a77e:	4608      	mov	r0, r1
 800a780:	4611      	mov	r1, r2
 800a782:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a786:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 800a78a:	6013      	str	r3, [r2, #0]
 800a78c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a790:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800a794:	4622      	mov	r2, r4
 800a796:	701a      	strb	r2, [r3, #0]
 800a798:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a79c:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800a7a0:	4602      	mov	r2, r0
 800a7a2:	701a      	strb	r2, [r3, #0]
 800a7a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a7a8:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800a7ac:	460a      	mov	r2, r1
 800a7ae:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 800a7b0:	f107 0310 	add.w	r3, r7, #16
 800a7b4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800a7b8:	f107 0308 	add.w	r3, r7, #8
 800a7bc:	2207      	movs	r2, #7
 800a7be:	2100      	movs	r1, #0
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	f001 f9e1 	bl	800bb88 <Osal_MemSet>
  int index_input = 0;
 800a7c6:	2300      	movs	r3, #0
 800a7c8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 800a7cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a7d0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a7d4:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800a7d8:	7812      	ldrb	r2, [r2, #0]
 800a7da:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800a7dc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a7e0:	3301      	adds	r3, #1
 800a7e2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 800a7e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a7ea:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a7ee:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800a7f2:	7812      	ldrb	r2, [r2, #0]
 800a7f4:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800a7f6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a7fa:	3301      	adds	r3, #1
 800a7fc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 800a800:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a804:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a808:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 800a80c:	7812      	ldrb	r2, [r2, #0]
 800a80e:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800a810:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a814:	3301      	adds	r3, #1
 800a816:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a81a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a81e:	2218      	movs	r2, #24
 800a820:	2100      	movs	r1, #0
 800a822:	4618      	mov	r0, r3
 800a824:	f001 f9b0 	bl	800bb88 <Osal_MemSet>
  rq.ogf = 0x3f;
 800a828:	233f      	movs	r3, #63	; 0x3f
 800a82a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 800a82e:	238a      	movs	r3, #138	; 0x8a
 800a830:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800a834:	f107 0310 	add.w	r3, r7, #16
 800a838:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800a83c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a840:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 800a844:	f107 0308 	add.w	r3, r7, #8
 800a848:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 800a84c:	2307      	movs	r3, #7
 800a84e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a852:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a856:	2100      	movs	r1, #0
 800a858:	4618      	mov	r0, r3
 800a85a:	f001 f853 	bl	800b904 <hci_send_req>
 800a85e:	4603      	mov	r3, r0
 800a860:	2b00      	cmp	r3, #0
 800a862:	da01      	bge.n	800a868 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 800a864:	23ff      	movs	r3, #255	; 0xff
 800a866:	e02e      	b.n	800a8c6 <aci_gap_init+0x150>
  if ( resp.Status )
 800a868:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a86c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800a870:	781b      	ldrb	r3, [r3, #0]
 800a872:	2b00      	cmp	r3, #0
 800a874:	d005      	beq.n	800a882 <aci_gap_init+0x10c>
    return resp.Status;
 800a876:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a87a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800a87e:	781b      	ldrb	r3, [r3, #0]
 800a880:	e021      	b.n	800a8c6 <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 800a882:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a886:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800a88a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800a88e:	b29a      	uxth	r2, r3
 800a890:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a894:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 800a89c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a8a0:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800a8a4:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800a8a8:	b29a      	uxth	r2, r3
 800a8aa:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800a8ae:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 800a8b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a8b4:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800a8b8:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800a8bc:	b29a      	uxth	r2, r3
 800a8be:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800a8c2:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800a8c4:	2300      	movs	r3, #0
}
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800a8cc:	46bd      	mov	sp, r7
 800a8ce:	bd90      	pop	{r4, r7, pc}

0800a8d0 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 800a8d0:	b580      	push	{r7, lr}
 800a8d2:	b0cc      	sub	sp, #304	; 0x130
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	4602      	mov	r2, r0
 800a8d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a8dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a8e0:	6019      	str	r1, [r3, #0]
 800a8e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a8e6:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800a8ea:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 800a8ec:	f107 0310 	add.w	r3, r7, #16
 800a8f0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800a8f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a8f8:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800a8fc:	2200      	movs	r2, #0
 800a8fe:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a900:	2300      	movs	r3, #0
 800a902:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 800a906:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a90a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a90e:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800a912:	7812      	ldrb	r2, [r2, #0]
 800a914:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800a916:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a91a:	3301      	adds	r3, #1
 800a91c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 800a920:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a924:	1c58      	adds	r0, r3, #1
 800a926:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a92a:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800a92e:	781a      	ldrb	r2, [r3, #0]
 800a930:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a934:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a938:	6819      	ldr	r1, [r3, #0]
 800a93a:	f001 f915 	bl	800bb68 <Osal_MemCpy>
  index_input += AdvDataLen;
 800a93e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a942:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800a946:	781b      	ldrb	r3, [r3, #0]
 800a948:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800a94c:	4413      	add	r3, r2
 800a94e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a952:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a956:	2218      	movs	r2, #24
 800a958:	2100      	movs	r1, #0
 800a95a:	4618      	mov	r0, r3
 800a95c:	f001 f914 	bl	800bb88 <Osal_MemSet>
  rq.ogf = 0x3f;
 800a960:	233f      	movs	r3, #63	; 0x3f
 800a962:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 800a966:	238e      	movs	r3, #142	; 0x8e
 800a968:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800a96c:	f107 0310 	add.w	r3, r7, #16
 800a970:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800a974:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a978:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800a97c:	f107 030f 	add.w	r3, r7, #15
 800a980:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800a984:	2301      	movs	r3, #1
 800a986:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a98a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a98e:	2100      	movs	r1, #0
 800a990:	4618      	mov	r0, r3
 800a992:	f000 ffb7 	bl	800b904 <hci_send_req>
 800a996:	4603      	mov	r3, r0
 800a998:	2b00      	cmp	r3, #0
 800a99a:	da01      	bge.n	800a9a0 <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 800a99c:	23ff      	movs	r3, #255	; 0xff
 800a99e:	e004      	b.n	800a9aa <aci_gap_update_adv_data+0xda>
  return status;
 800a9a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a9a4:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800a9a8:	781b      	ldrb	r3, [r3, #0]
}
 800a9aa:	4618      	mov	r0, r3
 800a9ac:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800a9b0:	46bd      	mov	sp, r7
 800a9b2:	bd80      	pop	{r7, pc}

0800a9b4 <aci_gap_configure_filter_accept_list>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_filter_accept_list( void )
{
 800a9b4:	b580      	push	{r7, lr}
 800a9b6:	b088      	sub	sp, #32
 800a9b8:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800a9ba:	2300      	movs	r3, #0
 800a9bc:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a9be:	f107 0308 	add.w	r3, r7, #8
 800a9c2:	2218      	movs	r2, #24
 800a9c4:	2100      	movs	r1, #0
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	f001 f8de 	bl	800bb88 <Osal_MemSet>
  rq.ogf = 0x3f;
 800a9cc:	233f      	movs	r3, #63	; 0x3f
 800a9ce:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 800a9d0:	2392      	movs	r3, #146	; 0x92
 800a9d2:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800a9d4:	1dfb      	adds	r3, r7, #7
 800a9d6:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800a9d8:	2301      	movs	r3, #1
 800a9da:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a9dc:	f107 0308 	add.w	r3, r7, #8
 800a9e0:	2100      	movs	r1, #0
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	f000 ff8e 	bl	800b904 <hci_send_req>
 800a9e8:	4603      	mov	r3, r0
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	da01      	bge.n	800a9f2 <aci_gap_configure_filter_accept_list+0x3e>
    return BLE_STATUS_TIMEOUT;
 800a9ee:	23ff      	movs	r3, #255	; 0xff
 800a9f0:	e000      	b.n	800a9f4 <aci_gap_configure_filter_accept_list+0x40>
  return status;
 800a9f2:	79fb      	ldrb	r3, [r7, #7]
}
 800a9f4:	4618      	mov	r0, r3
 800a9f6:	3720      	adds	r7, #32
 800a9f8:	46bd      	mov	sp, r7
 800a9fa:	bd80      	pop	{r7, pc}

0800a9fc <aci_gap_clear_security_db>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_clear_security_db( void )
{
 800a9fc:	b580      	push	{r7, lr}
 800a9fe:	b088      	sub	sp, #32
 800aa00:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800aa02:	2300      	movs	r3, #0
 800aa04:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800aa06:	f107 0308 	add.w	r3, r7, #8
 800aa0a:	2218      	movs	r2, #24
 800aa0c:	2100      	movs	r1, #0
 800aa0e:	4618      	mov	r0, r3
 800aa10:	f001 f8ba 	bl	800bb88 <Osal_MemSet>
  rq.ogf = 0x3f;
 800aa14:	233f      	movs	r3, #63	; 0x3f
 800aa16:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x094;
 800aa18:	2394      	movs	r3, #148	; 0x94
 800aa1a:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800aa1c:	1dfb      	adds	r3, r7, #7
 800aa1e:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800aa20:	2301      	movs	r3, #1
 800aa22:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800aa24:	f107 0308 	add.w	r3, r7, #8
 800aa28:	2100      	movs	r1, #0
 800aa2a:	4618      	mov	r0, r3
 800aa2c:	f000 ff6a 	bl	800b904 <hci_send_req>
 800aa30:	4603      	mov	r3, r0
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	da01      	bge.n	800aa3a <aci_gap_clear_security_db+0x3e>
    return BLE_STATUS_TIMEOUT;
 800aa36:	23ff      	movs	r3, #255	; 0xff
 800aa38:	e000      	b.n	800aa3c <aci_gap_clear_security_db+0x40>
  return status;
 800aa3a:	79fb      	ldrb	r3, [r7, #7]
}
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	3720      	adds	r7, #32
 800aa40:	46bd      	mov	sp, r7
 800aa42:	bd80      	pop	{r7, pc}

0800aa44 <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 800aa44:	b580      	push	{r7, lr}
 800aa46:	b0cc      	sub	sp, #304	; 0x130
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	4602      	mov	r2, r0
 800aa4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800aa50:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800aa54:	801a      	strh	r2, [r3, #0]
 800aa56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800aa5a:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800aa5e:	460a      	mov	r2, r1
 800aa60:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 800aa62:	f107 0310 	add.w	r3, r7, #16
 800aa66:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800aa6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800aa6e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800aa72:	2200      	movs	r2, #0
 800aa74:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800aa76:	2300      	movs	r3, #0
 800aa78:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 800aa7c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aa80:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800aa84:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800aa88:	8812      	ldrh	r2, [r2, #0]
 800aa8a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800aa8c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800aa90:	3302      	adds	r3, #2
 800aa92:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 800aa96:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aa9a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800aa9e:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 800aaa2:	7812      	ldrb	r2, [r2, #0]
 800aaa4:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800aaa6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800aaaa:	3301      	adds	r3, #1
 800aaac:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800aab0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800aab4:	2218      	movs	r2, #24
 800aab6:	2100      	movs	r1, #0
 800aab8:	4618      	mov	r0, r3
 800aaba:	f001 f865 	bl	800bb88 <Osal_MemSet>
  rq.ogf = 0x3f;
 800aabe:	233f      	movs	r3, #63	; 0x3f
 800aac0:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x0a5;
 800aac4:	23a5      	movs	r3, #165	; 0xa5
 800aac6:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800aaca:	f107 0310 	add.w	r3, r7, #16
 800aace:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800aad2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800aad6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800aada:	f107 030f 	add.w	r3, r7, #15
 800aade:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800aae2:	2301      	movs	r3, #1
 800aae4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800aae8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800aaec:	2100      	movs	r1, #0
 800aaee:	4618      	mov	r0, r3
 800aaf0:	f000 ff08 	bl	800b904 <hci_send_req>
 800aaf4:	4603      	mov	r3, r0
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	da01      	bge.n	800aafe <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 800aafa:	23ff      	movs	r3, #255	; 0xff
 800aafc:	e004      	b.n	800ab08 <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 800aafe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ab02:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800ab06:	781b      	ldrb	r3, [r3, #0]
}
 800ab08:	4618      	mov	r0, r3
 800ab0a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800ab0e:	46bd      	mov	sp, r7
 800ab10:	bd80      	pop	{r7, pc}

0800ab12 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 800ab12:	b580      	push	{r7, lr}
 800ab14:	b088      	sub	sp, #32
 800ab16:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800ab18:	2300      	movs	r3, #0
 800ab1a:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800ab1c:	f107 0308 	add.w	r3, r7, #8
 800ab20:	2218      	movs	r2, #24
 800ab22:	2100      	movs	r1, #0
 800ab24:	4618      	mov	r0, r3
 800ab26:	f001 f82f 	bl	800bb88 <Osal_MemSet>
  rq.ogf = 0x3f;
 800ab2a:	233f      	movs	r3, #63	; 0x3f
 800ab2c:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 800ab2e:	f240 1301 	movw	r3, #257	; 0x101
 800ab32:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800ab34:	1dfb      	adds	r3, r7, #7
 800ab36:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800ab38:	2301      	movs	r3, #1
 800ab3a:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800ab3c:	f107 0308 	add.w	r3, r7, #8
 800ab40:	2100      	movs	r1, #0
 800ab42:	4618      	mov	r0, r3
 800ab44:	f000 fede 	bl	800b904 <hci_send_req>
 800ab48:	4603      	mov	r3, r0
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	da01      	bge.n	800ab52 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 800ab4e:	23ff      	movs	r3, #255	; 0xff
 800ab50:	e000      	b.n	800ab54 <aci_gatt_init+0x42>
  return status;
 800ab52:	79fb      	ldrb	r3, [r7, #7]
}
 800ab54:	4618      	mov	r0, r3
 800ab56:	3720      	adds	r7, #32
 800ab58:	46bd      	mov	sp, r7
 800ab5a:	bd80      	pop	{r7, pc}

0800ab5c <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 800ab5c:	b590      	push	{r4, r7, lr}
 800ab5e:	b0cf      	sub	sp, #316	; 0x13c
 800ab60:	af00      	add	r7, sp, #0
 800ab62:	4604      	mov	r4, r0
 800ab64:	f507 709c 	add.w	r0, r7, #312	; 0x138
 800ab68:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 800ab6c:	6001      	str	r1, [r0, #0]
 800ab6e:	4610      	mov	r0, r2
 800ab70:	4619      	mov	r1, r3
 800ab72:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800ab76:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800ab7a:	4622      	mov	r2, r4
 800ab7c:	701a      	strb	r2, [r3, #0]
 800ab7e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800ab82:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800ab86:	4602      	mov	r2, r0
 800ab88:	701a      	strb	r2, [r3, #0]
 800ab8a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800ab8e:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800ab92:	460a      	mov	r2, r1
 800ab94:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 800ab96:	f107 0310 	add.w	r3, r7, #16
 800ab9a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 800ab9e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800aba2:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800aba6:	781b      	ldrb	r3, [r3, #0]
 800aba8:	2b01      	cmp	r3, #1
 800abaa:	d00a      	beq.n	800abc2 <aci_gatt_add_service+0x66>
 800abac:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800abb0:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800abb4:	781b      	ldrb	r3, [r3, #0]
 800abb6:	2b02      	cmp	r3, #2
 800abb8:	d101      	bne.n	800abbe <aci_gatt_add_service+0x62>
 800abba:	2311      	movs	r3, #17
 800abbc:	e002      	b.n	800abc4 <aci_gatt_add_service+0x68>
 800abbe:	2301      	movs	r3, #1
 800abc0:	e000      	b.n	800abc4 <aci_gatt_add_service+0x68>
 800abc2:	2303      	movs	r3, #3
 800abc4:	f107 0210 	add.w	r2, r7, #16
 800abc8:	4413      	add	r3, r2
 800abca:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800abce:	f107 030c 	add.w	r3, r7, #12
 800abd2:	2203      	movs	r2, #3
 800abd4:	2100      	movs	r1, #0
 800abd6:	4618      	mov	r0, r3
 800abd8:	f000 ffd6 	bl	800bb88 <Osal_MemSet>
  int index_input = 0;
 800abdc:	2300      	movs	r3, #0
 800abde:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 800abe2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800abe6:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800abea:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 800abee:	7812      	ldrb	r2, [r2, #0]
 800abf0:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800abf2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800abf6:	3301      	adds	r3, #1
 800abf8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 800abfc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800ac00:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800ac04:	781b      	ldrb	r3, [r3, #0]
 800ac06:	2b01      	cmp	r3, #1
 800ac08:	d002      	beq.n	800ac10 <aci_gatt_add_service+0xb4>
 800ac0a:	2b02      	cmp	r3, #2
 800ac0c:	d004      	beq.n	800ac18 <aci_gatt_add_service+0xbc>
 800ac0e:	e007      	b.n	800ac20 <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 800ac10:	2302      	movs	r3, #2
 800ac12:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800ac16:	e005      	b.n	800ac24 <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 800ac18:	2310      	movs	r3, #16
 800ac1a:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800ac1e:	e001      	b.n	800ac24 <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 800ac20:	2397      	movs	r3, #151	; 0x97
 800ac22:	e06c      	b.n	800acfe <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 800ac24:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800ac28:	1c58      	adds	r0, r3, #1
 800ac2a:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 800ac2e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800ac32:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800ac36:	6819      	ldr	r1, [r3, #0]
 800ac38:	f000 ff96 	bl	800bb68 <Osal_MemCpy>
    index_input += size;
 800ac3c:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 800ac40:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800ac44:	4413      	add	r3, r2
 800ac46:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = Service_Type;
 800ac4a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ac4e:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800ac52:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 800ac56:	7812      	ldrb	r2, [r2, #0]
 800ac58:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800ac5a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ac5e:	3301      	adds	r3, #1
 800ac60:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 800ac64:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ac68:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800ac6c:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 800ac70:	7812      	ldrb	r2, [r2, #0]
 800ac72:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 800ac74:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ac78:	3301      	adds	r3, #1
 800ac7a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800ac7e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ac82:	2218      	movs	r2, #24
 800ac84:	2100      	movs	r1, #0
 800ac86:	4618      	mov	r0, r3
 800ac88:	f000 ff7e 	bl	800bb88 <Osal_MemSet>
  rq.ogf = 0x3f;
 800ac8c:	233f      	movs	r3, #63	; 0x3f
 800ac8e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 800ac92:	f44f 7381 	mov.w	r3, #258	; 0x102
 800ac96:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800ac9a:	f107 0310 	add.w	r3, r7, #16
 800ac9e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800aca2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800aca6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 800acaa:	f107 030c 	add.w	r3, r7, #12
 800acae:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 800acb2:	2303      	movs	r3, #3
 800acb4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800acb8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800acbc:	2100      	movs	r1, #0
 800acbe:	4618      	mov	r0, r3
 800acc0:	f000 fe20 	bl	800b904 <hci_send_req>
 800acc4:	4603      	mov	r3, r0
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	da01      	bge.n	800acce <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 800acca:	23ff      	movs	r3, #255	; 0xff
 800accc:	e017      	b.n	800acfe <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 800acce:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800acd2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800acd6:	781b      	ldrb	r3, [r3, #0]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d005      	beq.n	800ace8 <aci_gatt_add_service+0x18c>
    return resp.Status;
 800acdc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800ace0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ace4:	781b      	ldrb	r3, [r3, #0]
 800ace6:	e00a      	b.n	800acfe <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 800ace8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800acec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800acf0:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800acf4:	b29a      	uxth	r2, r3
 800acf6:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800acfa:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800acfc:	2300      	movs	r3, #0
}
 800acfe:	4618      	mov	r0, r3
 800ad00:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 800ad04:	46bd      	mov	sp, r7
 800ad06:	bd90      	pop	{r4, r7, pc}

0800ad08 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 800ad08:	b590      	push	{r4, r7, lr}
 800ad0a:	b0d1      	sub	sp, #324	; 0x144
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	4604      	mov	r4, r0
 800ad10:	4608      	mov	r0, r1
 800ad12:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 800ad16:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 800ad1a:	600a      	str	r2, [r1, #0]
 800ad1c:	4619      	mov	r1, r3
 800ad1e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ad22:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800ad26:	4622      	mov	r2, r4
 800ad28:	801a      	strh	r2, [r3, #0]
 800ad2a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ad2e:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800ad32:	4602      	mov	r2, r0
 800ad34:	701a      	strb	r2, [r3, #0]
 800ad36:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ad3a:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 800ad3e:	460a      	mov	r2, r1
 800ad40:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 800ad42:	f107 0318 	add.w	r3, r7, #24
 800ad46:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 800ad4a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ad4e:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800ad52:	781b      	ldrb	r3, [r3, #0]
 800ad54:	2b01      	cmp	r3, #1
 800ad56:	d00a      	beq.n	800ad6e <aci_gatt_add_char+0x66>
 800ad58:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ad5c:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800ad60:	781b      	ldrb	r3, [r3, #0]
 800ad62:	2b02      	cmp	r3, #2
 800ad64:	d101      	bne.n	800ad6a <aci_gatt_add_char+0x62>
 800ad66:	2313      	movs	r3, #19
 800ad68:	e002      	b.n	800ad70 <aci_gatt_add_char+0x68>
 800ad6a:	2303      	movs	r3, #3
 800ad6c:	e000      	b.n	800ad70 <aci_gatt_add_char+0x68>
 800ad6e:	2305      	movs	r3, #5
 800ad70:	f107 0218 	add.w	r2, r7, #24
 800ad74:	4413      	add	r3, r2
 800ad76:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800ad7a:	f107 0314 	add.w	r3, r7, #20
 800ad7e:	2203      	movs	r2, #3
 800ad80:	2100      	movs	r1, #0
 800ad82:	4618      	mov	r0, r3
 800ad84:	f000 ff00 	bl	800bb88 <Osal_MemSet>
  int index_input = 0;
 800ad88:	2300      	movs	r3, #0
 800ad8a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = Service_Handle;
 800ad8e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800ad92:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800ad96:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 800ad9a:	8812      	ldrh	r2, [r2, #0]
 800ad9c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800ad9e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800ada2:	3302      	adds	r3, #2
 800ada4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 800ada8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800adac:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800adb0:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 800adb4:	7812      	ldrb	r2, [r2, #0]
 800adb6:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800adb8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800adbc:	3301      	adds	r3, #1
 800adbe:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 800adc2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800adc6:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800adca:	781b      	ldrb	r3, [r3, #0]
 800adcc:	2b01      	cmp	r3, #1
 800adce:	d002      	beq.n	800add6 <aci_gatt_add_char+0xce>
 800add0:	2b02      	cmp	r3, #2
 800add2:	d004      	beq.n	800adde <aci_gatt_add_char+0xd6>
 800add4:	e007      	b.n	800ade6 <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 800add6:	2302      	movs	r3, #2
 800add8:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 800addc:	e005      	b.n	800adea <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 800adde:	2310      	movs	r3, #16
 800ade0:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 800ade4:	e001      	b.n	800adea <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 800ade6:	2397      	movs	r3, #151	; 0x97
 800ade8:	e091      	b.n	800af0e <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 800adea:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800adee:	1cd8      	adds	r0, r3, #3
 800adf0:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 800adf4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800adf8:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800adfc:	6819      	ldr	r1, [r3, #0]
 800adfe:	f000 feb3 	bl	800bb68 <Osal_MemCpy>
    index_input += size;
 800ae02:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800ae06:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800ae0a:	4413      	add	r3, r2
 800ae0c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 800ae10:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800ae14:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800ae18:	f5a2 729d 	sub.w	r2, r2, #314	; 0x13a
 800ae1c:	8812      	ldrh	r2, [r2, #0]
 800ae1e:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800ae20:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800ae24:	3302      	adds	r3, #2
 800ae26:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = Char_Properties;
 800ae2a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800ae2e:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 800ae32:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 800ae34:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800ae38:	3301      	adds	r3, #1
 800ae3a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 800ae3e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800ae42:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800ae46:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 800ae48:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800ae4c:	3301      	adds	r3, #1
 800ae4e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 800ae52:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800ae56:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 800ae5a:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 800ae5c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800ae60:	3301      	adds	r3, #1
 800ae62:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 800ae66:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800ae6a:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 800ae6e:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 800ae70:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800ae74:	3301      	adds	r3, #1
 800ae76:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = Is_Variable;
 800ae7a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800ae7e:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 800ae82:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 800ae84:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800ae88:	3301      	adds	r3, #1
 800ae8a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800ae8e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800ae92:	2218      	movs	r2, #24
 800ae94:	2100      	movs	r1, #0
 800ae96:	4618      	mov	r0, r3
 800ae98:	f000 fe76 	bl	800bb88 <Osal_MemSet>
  rq.ogf = 0x3f;
 800ae9c:	233f      	movs	r3, #63	; 0x3f
 800ae9e:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 800aea2:	f44f 7382 	mov.w	r3, #260	; 0x104
 800aea6:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 800aeaa:	f107 0318 	add.w	r3, r7, #24
 800aeae:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 800aeb2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800aeb6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 800aeba:	f107 0314 	add.w	r3, r7, #20
 800aebe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 800aec2:	2303      	movs	r3, #3
 800aec4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 800aec8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800aecc:	2100      	movs	r1, #0
 800aece:	4618      	mov	r0, r3
 800aed0:	f000 fd18 	bl	800b904 <hci_send_req>
 800aed4:	4603      	mov	r3, r0
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	da01      	bge.n	800aede <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 800aeda:	23ff      	movs	r3, #255	; 0xff
 800aedc:	e017      	b.n	800af0e <aci_gatt_add_char+0x206>
  if ( resp.Status )
 800aede:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800aee2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800aee6:	781b      	ldrb	r3, [r3, #0]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d005      	beq.n	800aef8 <aci_gatt_add_char+0x1f0>
    return resp.Status;
 800aeec:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800aef0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800aef4:	781b      	ldrb	r3, [r3, #0]
 800aef6:	e00a      	b.n	800af0e <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 800aef8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800aefc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800af00:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800af04:	b29a      	uxth	r2, r3
 800af06:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800af0a:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800af0c:	2300      	movs	r3, #0
}
 800af0e:	4618      	mov	r0, r3
 800af10:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 800af14:	46bd      	mov	sp, r7
 800af16:	bd90      	pop	{r4, r7, pc}

0800af18 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 800af18:	b5b0      	push	{r4, r5, r7, lr}
 800af1a:	b0cc      	sub	sp, #304	; 0x130
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	4605      	mov	r5, r0
 800af20:	460c      	mov	r4, r1
 800af22:	4610      	mov	r0, r2
 800af24:	4619      	mov	r1, r3
 800af26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800af2a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800af2e:	462a      	mov	r2, r5
 800af30:	801a      	strh	r2, [r3, #0]
 800af32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800af36:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800af3a:	4622      	mov	r2, r4
 800af3c:	801a      	strh	r2, [r3, #0]
 800af3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800af42:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 800af46:	4602      	mov	r2, r0
 800af48:	701a      	strb	r2, [r3, #0]
 800af4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800af4e:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800af52:	460a      	mov	r2, r1
 800af54:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 800af56:	f107 0310 	add.w	r3, r7, #16
 800af5a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800af5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800af62:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800af66:	2200      	movs	r2, #0
 800af68:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800af6a:	2300      	movs	r3, #0
 800af6c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 800af70:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800af74:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800af78:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800af7c:	8812      	ldrh	r2, [r2, #0]
 800af7e:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800af80:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800af84:	3302      	adds	r3, #2
 800af86:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 800af8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800af8e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800af92:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800af96:	8812      	ldrh	r2, [r2, #0]
 800af98:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800af9a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800af9e:	3302      	adds	r3, #2
 800afa0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 800afa4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800afa8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800afac:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 800afb0:	7812      	ldrb	r2, [r2, #0]
 800afb2:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800afb4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800afb8:	3301      	adds	r3, #1
 800afba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 800afbe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800afc2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800afc6:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 800afca:	7812      	ldrb	r2, [r2, #0]
 800afcc:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800afce:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800afd2:	3301      	adds	r3, #1
 800afd4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 800afd8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800afdc:	1d98      	adds	r0, r3, #6
 800afde:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800afe2:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800afe6:	781b      	ldrb	r3, [r3, #0]
 800afe8:	461a      	mov	r2, r3
 800afea:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800afee:	f000 fdbb 	bl	800bb68 <Osal_MemCpy>
  index_input += Char_Value_Length;
 800aff2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800aff6:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800affa:	781b      	ldrb	r3, [r3, #0]
 800affc:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800b000:	4413      	add	r3, r2
 800b002:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800b006:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b00a:	2218      	movs	r2, #24
 800b00c:	2100      	movs	r1, #0
 800b00e:	4618      	mov	r0, r3
 800b010:	f000 fdba 	bl	800bb88 <Osal_MemSet>
  rq.ogf = 0x3f;
 800b014:	233f      	movs	r3, #63	; 0x3f
 800b016:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 800b01a:	f44f 7383 	mov.w	r3, #262	; 0x106
 800b01e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800b022:	f107 0310 	add.w	r3, r7, #16
 800b026:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800b02a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b02e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800b032:	f107 030f 	add.w	r3, r7, #15
 800b036:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800b03a:	2301      	movs	r3, #1
 800b03c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800b040:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b044:	2100      	movs	r1, #0
 800b046:	4618      	mov	r0, r3
 800b048:	f000 fc5c 	bl	800b904 <hci_send_req>
 800b04c:	4603      	mov	r3, r0
 800b04e:	2b00      	cmp	r3, #0
 800b050:	da01      	bge.n	800b056 <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 800b052:	23ff      	movs	r3, #255	; 0xff
 800b054:	e004      	b.n	800b060 <aci_gatt_update_char_value+0x148>
  return status;
 800b056:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b05a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800b05e:	781b      	ldrb	r3, [r3, #0]
}
 800b060:	4618      	mov	r0, r3
 800b062:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800b066:	46bd      	mov	sp, r7
 800b068:	bdb0      	pop	{r4, r5, r7, pc}

0800b06a <aci_gatt_write_resp>:
                                uint16_t Attr_Handle,
                                uint8_t Write_status,
                                uint8_t Error_Code,
                                uint8_t Attribute_Val_Length,
                                const uint8_t* Attribute_Val )
{
 800b06a:	b5b0      	push	{r4, r5, r7, lr}
 800b06c:	b0cc      	sub	sp, #304	; 0x130
 800b06e:	af00      	add	r7, sp, #0
 800b070:	4605      	mov	r5, r0
 800b072:	460c      	mov	r4, r1
 800b074:	4610      	mov	r0, r2
 800b076:	4619      	mov	r1, r3
 800b078:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b07c:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800b080:	462a      	mov	r2, r5
 800b082:	801a      	strh	r2, [r3, #0]
 800b084:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b088:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b08c:	4622      	mov	r2, r4
 800b08e:	801a      	strh	r2, [r3, #0]
 800b090:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b094:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 800b098:	4602      	mov	r2, r0
 800b09a:	701a      	strb	r2, [r3, #0]
 800b09c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b0a0:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800b0a4:	460a      	mov	r2, r1
 800b0a6:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_write_resp_cp0 *cp0 = (aci_gatt_write_resp_cp0*)(cmd_buffer);
 800b0a8:	f107 0310 	add.w	r3, r7, #16
 800b0ac:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800b0b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b0b4:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800b0b8:	2200      	movs	r2, #0
 800b0ba:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800b0bc:	2300      	movs	r3, #0
 800b0be:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 800b0c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b0c6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800b0ca:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800b0ce:	8812      	ldrh	r2, [r2, #0]
 800b0d0:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800b0d2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b0d6:	3302      	adds	r3, #2
 800b0d8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Attr_Handle = Attr_Handle;
 800b0dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b0e0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800b0e4:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800b0e8:	8812      	ldrh	r2, [r2, #0]
 800b0ea:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800b0ec:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b0f0:	3302      	adds	r3, #2
 800b0f2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Write_status = Write_status;
 800b0f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b0fa:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800b0fe:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 800b102:	7812      	ldrb	r2, [r2, #0]
 800b104:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800b106:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b10a:	3301      	adds	r3, #1
 800b10c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Error_Code = Error_Code;
 800b110:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b114:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800b118:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 800b11c:	7812      	ldrb	r2, [r2, #0]
 800b11e:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800b120:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b124:	3301      	adds	r3, #1
 800b126:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Attribute_Val_Length = Attribute_Val_Length;
 800b12a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b12e:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 800b132:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800b134:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b138:	3301      	adds	r3, #1
 800b13a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Attribute_Val, (const void*)Attribute_Val, Attribute_Val_Length );
 800b13e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b142:	3307      	adds	r3, #7
 800b144:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 800b148:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800b14c:	4618      	mov	r0, r3
 800b14e:	f000 fd0b 	bl	800bb68 <Osal_MemCpy>
  index_input += Attribute_Val_Length;
 800b152:	f897 3140 	ldrb.w	r3, [r7, #320]	; 0x140
 800b156:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800b15a:	4413      	add	r3, r2
 800b15c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800b160:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b164:	2218      	movs	r2, #24
 800b166:	2100      	movs	r1, #0
 800b168:	4618      	mov	r0, r3
 800b16a:	f000 fd0d 	bl	800bb88 <Osal_MemSet>
  rq.ogf = 0x3f;
 800b16e:	233f      	movs	r3, #63	; 0x3f
 800b170:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x126;
 800b174:	f44f 7393 	mov.w	r3, #294	; 0x126
 800b178:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800b17c:	f107 0310 	add.w	r3, r7, #16
 800b180:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800b184:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b188:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800b18c:	f107 030f 	add.w	r3, r7, #15
 800b190:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800b194:	2301      	movs	r3, #1
 800b196:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800b19a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b19e:	2100      	movs	r1, #0
 800b1a0:	4618      	mov	r0, r3
 800b1a2:	f000 fbaf 	bl	800b904 <hci_send_req>
 800b1a6:	4603      	mov	r3, r0
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	da01      	bge.n	800b1b0 <aci_gatt_write_resp+0x146>
    return BLE_STATUS_TIMEOUT;
 800b1ac:	23ff      	movs	r3, #255	; 0xff
 800b1ae:	e004      	b.n	800b1ba <aci_gatt_write_resp+0x150>
  return status;
 800b1b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b1b4:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800b1b8:	781b      	ldrb	r3, [r3, #0]
}
 800b1ba:	4618      	mov	r0, r3
 800b1bc:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800b1c0:	46bd      	mov	sp, r7
 800b1c2:	bdb0      	pop	{r4, r5, r7, pc}

0800b1c4 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 800b1c4:	b580      	push	{r7, lr}
 800b1c6:	b0cc      	sub	sp, #304	; 0x130
 800b1c8:	af00      	add	r7, sp, #0
 800b1ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b1ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b1d2:	601a      	str	r2, [r3, #0]
 800b1d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b1d8:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800b1dc:	4602      	mov	r2, r0
 800b1de:	701a      	strb	r2, [r3, #0]
 800b1e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b1e4:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800b1e8:	460a      	mov	r2, r1
 800b1ea:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 800b1ec:	f107 0310 	add.w	r3, r7, #16
 800b1f0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800b1f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b1f8:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800b1fc:	2200      	movs	r2, #0
 800b1fe:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800b200:	2300      	movs	r3, #0
 800b202:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 800b206:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b20a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800b20e:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800b212:	7812      	ldrb	r2, [r2, #0]
 800b214:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800b216:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b21a:	3301      	adds	r3, #1
 800b21c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 800b220:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b224:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800b228:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800b22c:	7812      	ldrb	r2, [r2, #0]
 800b22e:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800b230:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b234:	3301      	adds	r3, #1
 800b236:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 800b23a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b23e:	1c98      	adds	r0, r3, #2
 800b240:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b244:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800b248:	781a      	ldrb	r2, [r3, #0]
 800b24a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b24e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b252:	6819      	ldr	r1, [r3, #0]
 800b254:	f000 fc88 	bl	800bb68 <Osal_MemCpy>
  index_input += Length;
 800b258:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b25c:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800b260:	781b      	ldrb	r3, [r3, #0]
 800b262:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800b266:	4413      	add	r3, r2
 800b268:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800b26c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b270:	2218      	movs	r2, #24
 800b272:	2100      	movs	r1, #0
 800b274:	4618      	mov	r0, r3
 800b276:	f000 fc87 	bl	800bb88 <Osal_MemSet>
  rq.ogf = 0x3f;
 800b27a:	233f      	movs	r3, #63	; 0x3f
 800b27c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 800b280:	230c      	movs	r3, #12
 800b282:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800b286:	f107 0310 	add.w	r3, r7, #16
 800b28a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800b28e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b292:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800b296:	f107 030f 	add.w	r3, r7, #15
 800b29a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800b29e:	2301      	movs	r3, #1
 800b2a0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800b2a4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b2a8:	2100      	movs	r1, #0
 800b2aa:	4618      	mov	r0, r3
 800b2ac:	f000 fb2a 	bl	800b904 <hci_send_req>
 800b2b0:	4603      	mov	r3, r0
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	da01      	bge.n	800b2ba <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 800b2b6:	23ff      	movs	r3, #255	; 0xff
 800b2b8:	e004      	b.n	800b2c4 <aci_hal_write_config_data+0x100>
  return status;
 800b2ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b2be:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800b2c2:	781b      	ldrb	r3, [r3, #0]
}
 800b2c4:	4618      	mov	r0, r3
 800b2c6:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800b2ca:	46bd      	mov	sp, r7
 800b2cc:	bd80      	pop	{r7, pc}

0800b2ce <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 800b2ce:	b580      	push	{r7, lr}
 800b2d0:	b0cc      	sub	sp, #304	; 0x130
 800b2d2:	af00      	add	r7, sp, #0
 800b2d4:	4602      	mov	r2, r0
 800b2d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b2da:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800b2de:	701a      	strb	r2, [r3, #0]
 800b2e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b2e4:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800b2e8:	460a      	mov	r2, r1
 800b2ea:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 800b2ec:	f107 0310 	add.w	r3, r7, #16
 800b2f0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800b2f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b2f8:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800b2fc:	2200      	movs	r2, #0
 800b2fe:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800b300:	2300      	movs	r3, #0
 800b302:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 800b306:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b30a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800b30e:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800b312:	7812      	ldrb	r2, [r2, #0]
 800b314:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800b316:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b31a:	3301      	adds	r3, #1
 800b31c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 800b320:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b324:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800b328:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800b32c:	7812      	ldrb	r2, [r2, #0]
 800b32e:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800b330:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b334:	3301      	adds	r3, #1
 800b336:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800b33a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b33e:	2218      	movs	r2, #24
 800b340:	2100      	movs	r1, #0
 800b342:	4618      	mov	r0, r3
 800b344:	f000 fc20 	bl	800bb88 <Osal_MemSet>
  rq.ogf = 0x3f;
 800b348:	233f      	movs	r3, #63	; 0x3f
 800b34a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 800b34e:	230f      	movs	r3, #15
 800b350:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800b354:	f107 0310 	add.w	r3, r7, #16
 800b358:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800b35c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b360:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800b364:	f107 030f 	add.w	r3, r7, #15
 800b368:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800b36c:	2301      	movs	r3, #1
 800b36e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800b372:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b376:	2100      	movs	r1, #0
 800b378:	4618      	mov	r0, r3
 800b37a:	f000 fac3 	bl	800b904 <hci_send_req>
 800b37e:	4603      	mov	r3, r0
 800b380:	2b00      	cmp	r3, #0
 800b382:	da01      	bge.n	800b388 <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 800b384:	23ff      	movs	r3, #255	; 0xff
 800b386:	e004      	b.n	800b392 <aci_hal_set_tx_power_level+0xc4>
  return status;
 800b388:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b38c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800b390:	781b      	ldrb	r3, [r3, #0]
}
 800b392:	4618      	mov	r0, r3
 800b394:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800b398:	46bd      	mov	sp, r7
 800b39a:	bd80      	pop	{r7, pc}

0800b39c <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 800b39c:	b580      	push	{r7, lr}
 800b39e:	b0cc      	sub	sp, #304	; 0x130
 800b3a0:	af00      	add	r7, sp, #0
 800b3a2:	4602      	mov	r2, r0
 800b3a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b3a8:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800b3ac:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 800b3ae:	f107 0310 	add.w	r3, r7, #16
 800b3b2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800b3b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b3ba:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800b3be:	2200      	movs	r2, #0
 800b3c0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800b3c2:	2300      	movs	r3, #0
 800b3c4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 800b3c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b3cc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800b3d0:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800b3d4:	8812      	ldrh	r2, [r2, #0]
 800b3d6:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800b3d8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b3dc:	3302      	adds	r3, #2
 800b3de:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800b3e2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b3e6:	2218      	movs	r2, #24
 800b3e8:	2100      	movs	r1, #0
 800b3ea:	4618      	mov	r0, r3
 800b3ec:	f000 fbcc 	bl	800bb88 <Osal_MemSet>
  rq.ogf = 0x3f;
 800b3f0:	233f      	movs	r3, #63	; 0x3f
 800b3f2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 800b3f6:	2318      	movs	r3, #24
 800b3f8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800b3fc:	f107 0310 	add.w	r3, r7, #16
 800b400:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800b404:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b408:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800b40c:	f107 030f 	add.w	r3, r7, #15
 800b410:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800b414:	2301      	movs	r3, #1
 800b416:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800b41a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b41e:	2100      	movs	r1, #0
 800b420:	4618      	mov	r0, r3
 800b422:	f000 fa6f 	bl	800b904 <hci_send_req>
 800b426:	4603      	mov	r3, r0
 800b428:	2b00      	cmp	r3, #0
 800b42a:	da01      	bge.n	800b430 <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 800b42c:	23ff      	movs	r3, #255	; 0xff
 800b42e:	e004      	b.n	800b43a <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 800b430:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b434:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800b438:	781b      	ldrb	r3, [r3, #0]
}
 800b43a:	4618      	mov	r0, r3
 800b43c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800b440:	46bd      	mov	sp, r7
 800b442:	bd80      	pop	{r7, pc}

0800b444 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 800b444:	b580      	push	{r7, lr}
 800b446:	b088      	sub	sp, #32
 800b448:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800b44a:	2300      	movs	r3, #0
 800b44c:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800b44e:	f107 0308 	add.w	r3, r7, #8
 800b452:	2218      	movs	r2, #24
 800b454:	2100      	movs	r1, #0
 800b456:	4618      	mov	r0, r3
 800b458:	f000 fb96 	bl	800bb88 <Osal_MemSet>
  rq.ogf = 0x03;
 800b45c:	2303      	movs	r3, #3
 800b45e:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 800b460:	2303      	movs	r3, #3
 800b462:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800b464:	1dfb      	adds	r3, r7, #7
 800b466:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800b468:	2301      	movs	r3, #1
 800b46a:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800b46c:	f107 0308 	add.w	r3, r7, #8
 800b470:	2100      	movs	r1, #0
 800b472:	4618      	mov	r0, r3
 800b474:	f000 fa46 	bl	800b904 <hci_send_req>
 800b478:	4603      	mov	r3, r0
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	da01      	bge.n	800b482 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 800b47e:	23ff      	movs	r3, #255	; 0xff
 800b480:	e000      	b.n	800b484 <hci_reset+0x40>
  return status;
 800b482:	79fb      	ldrb	r3, [r7, #7]
}
 800b484:	4618      	mov	r0, r3
 800b486:	3720      	adds	r7, #32
 800b488:	46bd      	mov	sp, r7
 800b48a:	bd80      	pop	{r7, pc}

0800b48c <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 800b48c:	b590      	push	{r4, r7, lr}
 800b48e:	b0cd      	sub	sp, #308	; 0x134
 800b490:	af00      	add	r7, sp, #0
 800b492:	4604      	mov	r4, r0
 800b494:	4608      	mov	r0, r1
 800b496:	4611      	mov	r1, r2
 800b498:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b49c:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800b4a0:	4622      	mov	r2, r4
 800b4a2:	701a      	strb	r2, [r3, #0]
 800b4a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b4a8:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800b4ac:	4602      	mov	r2, r0
 800b4ae:	701a      	strb	r2, [r3, #0]
 800b4b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b4b4:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800b4b8:	460a      	mov	r2, r1
 800b4ba:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 800b4bc:	f107 0310 	add.w	r3, r7, #16
 800b4c0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800b4c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b4c8:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800b4cc:	2200      	movs	r2, #0
 800b4ce:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800b4d0:	2300      	movs	r3, #0
 800b4d2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 800b4d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b4da:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800b4de:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800b4e2:	7812      	ldrb	r2, [r2, #0]
 800b4e4:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800b4e6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b4ea:	3301      	adds	r3, #1
 800b4ec:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = TX_PHYS;
 800b4f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b4f4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800b4f8:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800b4fc:	7812      	ldrb	r2, [r2, #0]
 800b4fe:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800b500:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b504:	3301      	adds	r3, #1
 800b506:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = RX_PHYS;
 800b50a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b50e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800b512:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 800b516:	7812      	ldrb	r2, [r2, #0]
 800b518:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800b51a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b51e:	3301      	adds	r3, #1
 800b520:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800b524:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b528:	2218      	movs	r2, #24
 800b52a:	2100      	movs	r1, #0
 800b52c:	4618      	mov	r0, r3
 800b52e:	f000 fb2b 	bl	800bb88 <Osal_MemSet>
  rq.ogf = 0x08;
 800b532:	2308      	movs	r3, #8
 800b534:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 800b538:	2331      	movs	r3, #49	; 0x31
 800b53a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800b53e:	f107 0310 	add.w	r3, r7, #16
 800b542:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800b546:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b54a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800b54e:	f107 030f 	add.w	r3, r7, #15
 800b552:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800b556:	2301      	movs	r3, #1
 800b558:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800b55c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b560:	2100      	movs	r1, #0
 800b562:	4618      	mov	r0, r3
 800b564:	f000 f9ce 	bl	800b904 <hci_send_req>
 800b568:	4603      	mov	r3, r0
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	da01      	bge.n	800b572 <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 800b56e:	23ff      	movs	r3, #255	; 0xff
 800b570:	e004      	b.n	800b57c <hci_le_set_default_phy+0xf0>
  return status;
 800b572:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b576:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800b57a:	781b      	ldrb	r3, [r3, #0]
}
 800b57c:	4618      	mov	r0, r3
 800b57e:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800b582:	46bd      	mov	sp, r7
 800b584:	bd90      	pop	{r4, r7, pc}

0800b586 <aci_l2cap_connection_parameter_update_req>:
tBleStatus aci_l2cap_connection_parameter_update_req( uint16_t Connection_Handle,
                                                      uint16_t Conn_Interval_Min,
                                                      uint16_t Conn_Interval_Max,
                                                      uint16_t Latency,
                                                      uint16_t Timeout_Multiplier )
{
 800b586:	b5b0      	push	{r4, r5, r7, lr}
 800b588:	b0cc      	sub	sp, #304	; 0x130
 800b58a:	af00      	add	r7, sp, #0
 800b58c:	4605      	mov	r5, r0
 800b58e:	460c      	mov	r4, r1
 800b590:	4610      	mov	r0, r2
 800b592:	4619      	mov	r1, r3
 800b594:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b598:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800b59c:	462a      	mov	r2, r5
 800b59e:	801a      	strh	r2, [r3, #0]
 800b5a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b5a4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b5a8:	4622      	mov	r2, r4
 800b5aa:	801a      	strh	r2, [r3, #0]
 800b5ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b5b0:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800b5b4:	4602      	mov	r2, r0
 800b5b6:	801a      	strh	r2, [r3, #0]
 800b5b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b5bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b5c0:	460a      	mov	r2, r1
 800b5c2:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_l2cap_connection_parameter_update_req_cp0 *cp0 = (aci_l2cap_connection_parameter_update_req_cp0*)(cmd_buffer);
 800b5c4:	f107 0310 	add.w	r3, r7, #16
 800b5c8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800b5cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b5d0:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800b5d4:	2200      	movs	r2, #0
 800b5d6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800b5d8:	2300      	movs	r3, #0
 800b5da:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 800b5de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b5e2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800b5e6:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800b5ea:	8812      	ldrh	r2, [r2, #0]
 800b5ec:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800b5ee:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b5f2:	3302      	adds	r3, #2
 800b5f4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Conn_Interval_Min = Conn_Interval_Min;
 800b5f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b5fc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800b600:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800b604:	8812      	ldrh	r2, [r2, #0]
 800b606:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800b608:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b60c:	3302      	adds	r3, #2
 800b60e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Conn_Interval_Max = Conn_Interval_Max;
 800b612:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b616:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800b61a:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 800b61e:	8812      	ldrh	r2, [r2, #0]
 800b620:	809a      	strh	r2, [r3, #4]
  index_input += 2;
 800b622:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b626:	3302      	adds	r3, #2
 800b628:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Latency = Latency;
 800b62c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b630:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800b634:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 800b638:	8812      	ldrh	r2, [r2, #0]
 800b63a:	80da      	strh	r2, [r3, #6]
  index_input += 2;
 800b63c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b640:	3302      	adds	r3, #2
 800b642:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Timeout_Multiplier = Timeout_Multiplier;
 800b646:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b64a:	f8b7 2140 	ldrh.w	r2, [r7, #320]	; 0x140
 800b64e:	811a      	strh	r2, [r3, #8]
  index_input += 2;
 800b650:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b654:	3302      	adds	r3, #2
 800b656:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800b65a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b65e:	2218      	movs	r2, #24
 800b660:	2100      	movs	r1, #0
 800b662:	4618      	mov	r0, r3
 800b664:	f000 fa90 	bl	800bb88 <Osal_MemSet>
  rq.ogf = 0x3f;
 800b668:	233f      	movs	r3, #63	; 0x3f
 800b66a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x181;
 800b66e:	f240 1381 	movw	r3, #385	; 0x181
 800b672:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 800b676:	230f      	movs	r3, #15
 800b678:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 800b67c:	f107 0310 	add.w	r3, r7, #16
 800b680:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800b684:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b688:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800b68c:	f107 030f 	add.w	r3, r7, #15
 800b690:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800b694:	2301      	movs	r3, #1
 800b696:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800b69a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b69e:	2100      	movs	r1, #0
 800b6a0:	4618      	mov	r0, r3
 800b6a2:	f000 f92f 	bl	800b904 <hci_send_req>
 800b6a6:	4603      	mov	r3, r0
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	da01      	bge.n	800b6b0 <aci_l2cap_connection_parameter_update_req+0x12a>
    return BLE_STATUS_TIMEOUT;
 800b6ac:	23ff      	movs	r3, #255	; 0xff
 800b6ae:	e004      	b.n	800b6ba <aci_l2cap_connection_parameter_update_req+0x134>
  return status;
 800b6b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b6b4:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800b6b8:	781b      	ldrb	r3, [r3, #0]
}
 800b6ba:	4618      	mov	r0, r3
 800b6bc:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800b6c0:	46bd      	mov	sp, r7
 800b6c2:	bdb0      	pop	{r4, r5, r7, pc}

0800b6c4 <DbgTrace_TxCpltCallback>:
 * @note   Indicate the end of the transmission of a DBG_TRACE trace buffer to DBG_TRACE USART. If queue
 *         contains new trace data to transmit, start a new transmission.
 * @retval None
 */
static void DbgTrace_TxCpltCallback(void)
{
 800b6c4:	b580      	push	{r7, lr}
 800b6c6:	b086      	sub	sp, #24
 800b6c8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b6ca:	f3ef 8310 	mrs	r3, PRIMASK
 800b6ce:	60fb      	str	r3, [r7, #12]
  return(result);
 800b6d0:	68fb      	ldr	r3, [r7, #12]
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  uint8_t* buf;
  uint16_t bufSize;

  BACKUP_PRIMASK();
 800b6d2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b6d4:	b672      	cpsid	i
}
 800b6d6:	bf00      	nop

  DISABLE_IRQ();			/**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  CircularQueue_Remove(&MsgDbgTraceQueue,&bufSize);
 800b6d8:	1cbb      	adds	r3, r7, #2
 800b6da:	4619      	mov	r1, r3
 800b6dc:	4812      	ldr	r0, [pc, #72]	; (800b728 <DbgTrace_TxCpltCallback+0x64>)
 800b6de:	f000 ffcc 	bl	800c67a <CircularQueue_Remove>

  /* Sense if new data to be sent */
  buf=CircularQueue_Sense(&MsgDbgTraceQueue,&bufSize);
 800b6e2:	1cbb      	adds	r3, r7, #2
 800b6e4:	4619      	mov	r1, r3
 800b6e6:	4810      	ldr	r0, [pc, #64]	; (800b728 <DbgTrace_TxCpltCallback+0x64>)
 800b6e8:	f001 f8b8 	bl	800c85c <CircularQueue_Sense>
 800b6ec:	6138      	str	r0, [r7, #16]


  if ( buf != NULL) 
 800b6ee:	693b      	ldr	r3, [r7, #16]
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d00c      	beq.n	800b70e <DbgTrace_TxCpltCallback+0x4a>
 800b6f4:	697b      	ldr	r3, [r7, #20]
 800b6f6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b6f8:	68bb      	ldr	r3, [r7, #8]
 800b6fa:	f383 8810 	msr	PRIMASK, r3
}
 800b6fe:	bf00      	nop
  {
    RESTORE_PRIMASK();
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
 800b700:	887b      	ldrh	r3, [r7, #2]
 800b702:	4a0a      	ldr	r2, [pc, #40]	; (800b72c <DbgTrace_TxCpltCallback+0x68>)
 800b704:	4619      	mov	r1, r3
 800b706:	6938      	ldr	r0, [r7, #16]
 800b708:	f7f5 fce1 	bl	80010ce <DbgOutputTraces>

  DbgTracePeripheralReady = SET;

  RESTORE_PRIMASK();
#endif
}
 800b70c:	e008      	b.n	800b720 <DbgTrace_TxCpltCallback+0x5c>
    DbgTracePeripheralReady = SET;
 800b70e:	4b08      	ldr	r3, [pc, #32]	; (800b730 <DbgTrace_TxCpltCallback+0x6c>)
 800b710:	2201      	movs	r2, #1
 800b712:	701a      	strb	r2, [r3, #0]
 800b714:	697b      	ldr	r3, [r7, #20]
 800b716:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	f383 8810 	msr	PRIMASK, r3
}
 800b71e:	bf00      	nop
}
 800b720:	bf00      	nop
 800b722:	3718      	adds	r7, #24
 800b724:	46bd      	mov	sp, r7
 800b726:	bd80      	pop	{r7, pc}
 800b728:	2000095c 	.word	0x2000095c
 800b72c:	0800b6c5 	.word	0x0800b6c5
 800b730:	2000004d 	.word	0x2000004d

0800b734 <DbgTraceInit>:
#endif

void DbgTraceInit( void )
{
 800b734:	b580      	push	{r7, lr}
 800b736:	b082      	sub	sp, #8
 800b738:	af02      	add	r7, sp, #8
#if (( CFG_DEBUG_TRACE_FULL != 0 ) || ( CFG_DEBUG_TRACE_LIGHT != 0 ))
  DbgOutputInit();
 800b73a:	f7f5 fcc2 	bl	80010c2 <DbgOutputInit>
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  CircularQueue_Init(&MsgDbgTraceQueue, MsgDbgTraceQueueBuff, DBG_TRACE_MSG_QUEUE_SIZE, 0, CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG);
 800b73e:	2302      	movs	r3, #2
 800b740:	9300      	str	r3, [sp, #0]
 800b742:	2300      	movs	r3, #0
 800b744:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b748:	4903      	ldr	r1, [pc, #12]	; (800b758 <DbgTraceInit+0x24>)
 800b74a:	4804      	ldr	r0, [pc, #16]	; (800b75c <DbgTraceInit+0x28>)
 800b74c:	f000 fd3c 	bl	800c1c8 <CircularQueue_Init>
#endif 
#endif
  return;
 800b750:	bf00      	nop
}
 800b752:	46bd      	mov	sp, r7
 800b754:	bd80      	pop	{r7, pc}
 800b756:	bf00      	nop
 800b758:	2000097c 	.word	0x2000097c
 800b75c:	2000095c 	.word	0x2000095c

0800b760 <_write>:
 * @param	bufsize buffer size
 * @param	...: arguments to be formatted in format string
 * @retval none
 */
size_t _write(int handle, const unsigned char * buf, size_t bufSize)
{
 800b760:	b580      	push	{r7, lr}
 800b762:	b084      	sub	sp, #16
 800b764:	af00      	add	r7, sp, #0
 800b766:	60f8      	str	r0, [r7, #12]
 800b768:	60b9      	str	r1, [r7, #8]
 800b76a:	607a      	str	r2, [r7, #4]
  return ( DbgTraceWrite(handle, buf, bufSize) );
 800b76c:	687a      	ldr	r2, [r7, #4]
 800b76e:	68b9      	ldr	r1, [r7, #8]
 800b770:	68f8      	ldr	r0, [r7, #12]
 800b772:	f000 f805 	bl	800b780 <DbgTraceWrite>
 800b776:	4603      	mov	r3, r0
}
 800b778:	4618      	mov	r0, r3
 800b77a:	3710      	adds	r7, #16
 800b77c:	46bd      	mov	sp, r7
 800b77e:	bd80      	pop	{r7, pc}

0800b780 <DbgTraceWrite>:
 * @param buf buffer to write
 * @param bufsize buffer size
 * @retval Number of elements written
 */
size_t DbgTraceWrite(int handle, const unsigned char * buf, size_t bufSize)
{
 800b780:	b580      	push	{r7, lr}
 800b782:	b08a      	sub	sp, #40	; 0x28
 800b784:	af00      	add	r7, sp, #0
 800b786:	60f8      	str	r0, [r7, #12]
 800b788:	60b9      	str	r1, [r7, #8]
 800b78a:	607a      	str	r2, [r7, #4]
  size_t chars_written = 0;
 800b78c:	2300      	movs	r3, #0
 800b78e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b790:	f3ef 8310 	mrs	r3, PRIMASK
 800b794:	61bb      	str	r3, [r7, #24]
  return(result);
 800b796:	69bb      	ldr	r3, [r7, #24]
  uint8_t* buffer;

  BACKUP_PRIMASK();
 800b798:	623b      	str	r3, [r7, #32]

  /* Ignore flushes */
  if ( handle == -1 )
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7a0:	d102      	bne.n	800b7a8 <DbgTraceWrite+0x28>
  {
    chars_written = ( size_t ) 0;
 800b7a2:	2300      	movs	r3, #0
 800b7a4:	627b      	str	r3, [r7, #36]	; 0x24
 800b7a6:	e037      	b.n	800b818 <DbgTraceWrite+0x98>
  }
  /* Only allow stdout/stderr output */
  else if ( ( handle != 1 ) && ( handle != 2 ) )
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	2b01      	cmp	r3, #1
 800b7ac:	d006      	beq.n	800b7bc <DbgTraceWrite+0x3c>
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	2b02      	cmp	r3, #2
 800b7b2:	d003      	beq.n	800b7bc <DbgTraceWrite+0x3c>
  {
    chars_written = ( size_t ) - 1;
 800b7b4:	f04f 33ff 	mov.w	r3, #4294967295
 800b7b8:	627b      	str	r3, [r7, #36]	; 0x24
 800b7ba:	e02d      	b.n	800b818 <DbgTraceWrite+0x98>
  }
  /* Parameters OK, call the low-level character output routine */
  else if (bufSize != 0)
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d02a      	beq.n	800b818 <DbgTraceWrite+0x98>
  {
    chars_written = bufSize;
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 800b7c6:	b672      	cpsid	i
}
 800b7c8:	bf00      	nop
    /* If queue emepty and TX free, send directly */
    /* CS Start */

#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
    DISABLE_IRQ();      /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
    buffer=CircularQueue_Add(&MsgDbgTraceQueue,(uint8_t*)buf, bufSize,1);
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	b29a      	uxth	r2, r3
 800b7ce:	2301      	movs	r3, #1
 800b7d0:	68b9      	ldr	r1, [r7, #8]
 800b7d2:	4814      	ldr	r0, [pc, #80]	; (800b824 <DbgTraceWrite+0xa4>)
 800b7d4:	f000 fd2a 	bl	800c22c <CircularQueue_Add>
 800b7d8:	61f8      	str	r0, [r7, #28]
    if (buffer && DbgTracePeripheralReady)
 800b7da:	69fb      	ldr	r3, [r7, #28]
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d015      	beq.n	800b80c <DbgTraceWrite+0x8c>
 800b7e0:	4b11      	ldr	r3, [pc, #68]	; (800b828 <DbgTraceWrite+0xa8>)
 800b7e2:	781b      	ldrb	r3, [r3, #0]
 800b7e4:	b2db      	uxtb	r3, r3
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d010      	beq.n	800b80c <DbgTraceWrite+0x8c>
    {
      DbgTracePeripheralReady = RESET;
 800b7ea:	4b0f      	ldr	r3, [pc, #60]	; (800b828 <DbgTraceWrite+0xa8>)
 800b7ec:	2200      	movs	r2, #0
 800b7ee:	701a      	strb	r2, [r3, #0]
 800b7f0:	6a3b      	ldr	r3, [r7, #32]
 800b7f2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b7f4:	697b      	ldr	r3, [r7, #20]
 800b7f6:	f383 8810 	msr	PRIMASK, r3
}
 800b7fa:	bf00      	nop
      RESTORE_PRIMASK();
      DbgOutputTraces((uint8_t*)buffer, bufSize, DbgTrace_TxCpltCallback);
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	b29b      	uxth	r3, r3
 800b800:	4a0a      	ldr	r2, [pc, #40]	; (800b82c <DbgTraceWrite+0xac>)
 800b802:	4619      	mov	r1, r3
 800b804:	69f8      	ldr	r0, [r7, #28]
 800b806:	f7f5 fc62 	bl	80010ce <DbgOutputTraces>
 800b80a:	e005      	b.n	800b818 <DbgTraceWrite+0x98>
 800b80c:	6a3b      	ldr	r3, [r7, #32]
 800b80e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b810:	693b      	ldr	r3, [r7, #16]
 800b812:	f383 8810 	msr	PRIMASK, r3
}
 800b816:	bf00      	nop
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
    while (!DbgTracePeripheralReady);
#endif
    /* CS END */
  }
  return ( chars_written );
 800b818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b81a:	4618      	mov	r0, r3
 800b81c:	3728      	adds	r7, #40	; 0x28
 800b81e:	46bd      	mov	sp, r7
 800b820:	bd80      	pop	{r7, pc}
 800b822:	bf00      	nop
 800b824:	2000095c 	.word	0x2000095c
 800b828:	2000004d 	.word	0x2000004d
 800b82c:	0800b6c5 	.word	0x0800b6c5

0800b830 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800b830:	b580      	push	{r7, lr}
 800b832:	b082      	sub	sp, #8
 800b834:	af00      	add	r7, sp, #0
 800b836:	6078      	str	r0, [r7, #4]
 800b838:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800b83a:	683b      	ldr	r3, [r7, #0]
 800b83c:	685b      	ldr	r3, [r3, #4]
 800b83e:	4a08      	ldr	r2, [pc, #32]	; (800b860 <hci_init+0x30>)
 800b840:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 800b842:	4a08      	ldr	r2, [pc, #32]	; (800b864 <hci_init+0x34>)
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 800b848:	4806      	ldr	r0, [pc, #24]	; (800b864 <hci_init+0x34>)
 800b84a:	f000 f979 	bl	800bb40 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800b84e:	683b      	ldr	r3, [r7, #0]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	4618      	mov	r0, r3
 800b854:	f000 f8da 	bl	800ba0c <TlInit>

  return;
 800b858:	bf00      	nop
}
 800b85a:	3708      	adds	r7, #8
 800b85c:	46bd      	mov	sp, r7
 800b85e:	bd80      	pop	{r7, pc}
 800b860:	200019a4 	.word	0x200019a4
 800b864:	2000197c 	.word	0x2000197c

0800b868 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800b868:	b580      	push	{r7, lr}
 800b86a:	b084      	sub	sp, #16
 800b86c:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800b86e:	4822      	ldr	r0, [pc, #136]	; (800b8f8 <hci_user_evt_proc+0x90>)
 800b870:	f000 fbfc 	bl	800c06c <LST_is_empty>
 800b874:	4603      	mov	r3, r0
 800b876:	2b00      	cmp	r3, #0
 800b878:	d12b      	bne.n	800b8d2 <hci_user_evt_proc+0x6a>
 800b87a:	4b20      	ldr	r3, [pc, #128]	; (800b8fc <hci_user_evt_proc+0x94>)
 800b87c:	781b      	ldrb	r3, [r3, #0]
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d027      	beq.n	800b8d2 <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800b882:	f107 030c 	add.w	r3, r7, #12
 800b886:	4619      	mov	r1, r3
 800b888:	481b      	ldr	r0, [pc, #108]	; (800b8f8 <hci_user_evt_proc+0x90>)
 800b88a:	f000 fc7e 	bl	800c18a <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800b88e:	4b1c      	ldr	r3, [pc, #112]	; (800b900 <hci_user_evt_proc+0x98>)
 800b890:	69db      	ldr	r3, [r3, #28]
 800b892:	2b00      	cmp	r3, #0
 800b894:	d00c      	beq.n	800b8b0 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 800b89a:	2301      	movs	r3, #1
 800b89c:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 800b89e:	4b18      	ldr	r3, [pc, #96]	; (800b900 <hci_user_evt_proc+0x98>)
 800b8a0:	69db      	ldr	r3, [r3, #28]
 800b8a2:	1d3a      	adds	r2, r7, #4
 800b8a4:	4610      	mov	r0, r2
 800b8a6:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 800b8a8:	793a      	ldrb	r2, [r7, #4]
 800b8aa:	4b14      	ldr	r3, [pc, #80]	; (800b8fc <hci_user_evt_proc+0x94>)
 800b8ac:	701a      	strb	r2, [r3, #0]
 800b8ae:	e002      	b.n	800b8b6 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800b8b0:	4b12      	ldr	r3, [pc, #72]	; (800b8fc <hci_user_evt_proc+0x94>)
 800b8b2:	2201      	movs	r2, #1
 800b8b4:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 800b8b6:	4b11      	ldr	r3, [pc, #68]	; (800b8fc <hci_user_evt_proc+0x94>)
 800b8b8:	781b      	ldrb	r3, [r3, #0]
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d004      	beq.n	800b8c8 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	4618      	mov	r0, r3
 800b8c2:	f001 fb23 	bl	800cf0c <TL_MM_EvtDone>
 800b8c6:	e004      	b.n	800b8d2 <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	4619      	mov	r1, r3
 800b8cc:	480a      	ldr	r0, [pc, #40]	; (800b8f8 <hci_user_evt_proc+0x90>)
 800b8ce:	f000 fbef 	bl	800c0b0 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800b8d2:	4809      	ldr	r0, [pc, #36]	; (800b8f8 <hci_user_evt_proc+0x90>)
 800b8d4:	f000 fbca 	bl	800c06c <LST_is_empty>
 800b8d8:	4603      	mov	r3, r0
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d107      	bne.n	800b8ee <hci_user_evt_proc+0x86>
 800b8de:	4b07      	ldr	r3, [pc, #28]	; (800b8fc <hci_user_evt_proc+0x94>)
 800b8e0:	781b      	ldrb	r3, [r3, #0]
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d003      	beq.n	800b8ee <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 800b8e6:	4804      	ldr	r0, [pc, #16]	; (800b8f8 <hci_user_evt_proc+0x90>)
 800b8e8:	f7f8 fa9c 	bl	8003e24 <hci_notify_asynch_evt>
  }


  return;
 800b8ec:	bf00      	nop
 800b8ee:	bf00      	nop
}
 800b8f0:	3710      	adds	r7, #16
 800b8f2:	46bd      	mov	sp, r7
 800b8f4:	bd80      	pop	{r7, pc}
 800b8f6:	bf00      	nop
 800b8f8:	2000022c 	.word	0x2000022c
 800b8fc:	20000238 	.word	0x20000238
 800b900:	2000197c 	.word	0x2000197c

0800b904 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 800b904:	b580      	push	{r7, lr}
 800b906:	b088      	sub	sp, #32
 800b908:	af00      	add	r7, sp, #0
 800b90a:	6078      	str	r0, [r7, #4]
 800b90c:	460b      	mov	r3, r1
 800b90e:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 800b910:	2000      	movs	r0, #0
 800b912:	f000 f8d1 	bl	800bab8 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 800b916:	2300      	movs	r3, #0
 800b918:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	885b      	ldrh	r3, [r3, #2]
 800b91e:	b21b      	sxth	r3, r3
 800b920:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b924:	b21a      	sxth	r2, r3
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	881b      	ldrh	r3, [r3, #0]
 800b92a:	029b      	lsls	r3, r3, #10
 800b92c:	b21b      	sxth	r3, r3
 800b92e:	4313      	orrs	r3, r2
 800b930:	b21b      	sxth	r3, r3
 800b932:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 800b934:	4b33      	ldr	r3, [pc, #204]	; (800ba04 <hci_send_req+0x100>)
 800b936:	2201      	movs	r2, #1
 800b938:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	68db      	ldr	r3, [r3, #12]
 800b93e:	b2d9      	uxtb	r1, r3
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	689a      	ldr	r2, [r3, #8]
 800b944:	8bbb      	ldrh	r3, [r7, #28]
 800b946:	4618      	mov	r0, r3
 800b948:	f000 f890 	bl	800ba6c <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 800b94c:	e04e      	b.n	800b9ec <hci_send_req+0xe8>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 800b94e:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800b952:	f7f8 fa7e 	bl	8003e52 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800b956:	e043      	b.n	800b9e0 <hci_send_req+0xdc>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 800b958:	f107 030c 	add.w	r3, r7, #12
 800b95c:	4619      	mov	r1, r3
 800b95e:	482a      	ldr	r0, [pc, #168]	; (800ba08 <hci_send_req+0x104>)
 800b960:	f000 fc13 	bl	800c18a <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	7a5b      	ldrb	r3, [r3, #9]
 800b968:	2b0f      	cmp	r3, #15
 800b96a:	d114      	bne.n	800b996 <hci_send_req+0x92>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	330b      	adds	r3, #11
 800b970:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 800b972:	693b      	ldr	r3, [r7, #16]
 800b974:	885b      	ldrh	r3, [r3, #2]
 800b976:	b29b      	uxth	r3, r3
 800b978:	8bba      	ldrh	r2, [r7, #28]
 800b97a:	429a      	cmp	r2, r3
 800b97c:	d104      	bne.n	800b988 <hci_send_req+0x84>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	691b      	ldr	r3, [r3, #16]
 800b982:	693a      	ldr	r2, [r7, #16]
 800b984:	7812      	ldrb	r2, [r2, #0]
 800b986:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 800b988:	693b      	ldr	r3, [r7, #16]
 800b98a:	785b      	ldrb	r3, [r3, #1]
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d027      	beq.n	800b9e0 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800b990:	2301      	movs	r3, #1
 800b992:	77fb      	strb	r3, [r7, #31]
 800b994:	e024      	b.n	800b9e0 <hci_send_req+0xdc>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	330b      	adds	r3, #11
 800b99a:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 800b99c:	69bb      	ldr	r3, [r7, #24]
 800b99e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800b9a2:	b29b      	uxth	r3, r3
 800b9a4:	8bba      	ldrh	r2, [r7, #28]
 800b9a6:	429a      	cmp	r2, r3
 800b9a8:	d114      	bne.n	800b9d4 <hci_send_req+0xd0>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	7a9b      	ldrb	r3, [r3, #10]
 800b9ae:	3b03      	subs	r3, #3
 800b9b0:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	695a      	ldr	r2, [r3, #20]
 800b9b6:	7dfb      	ldrb	r3, [r7, #23]
 800b9b8:	429a      	cmp	r2, r3
 800b9ba:	bfa8      	it	ge
 800b9bc:	461a      	movge	r2, r3
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	6918      	ldr	r0, [r3, #16]
 800b9c6:	69bb      	ldr	r3, [r7, #24]
 800b9c8:	1cd9      	adds	r1, r3, #3
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	695b      	ldr	r3, [r3, #20]
 800b9ce:	461a      	mov	r2, r3
 800b9d0:	f001 fe0a 	bl	800d5e8 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 800b9d4:	69bb      	ldr	r3, [r7, #24]
 800b9d6:	781b      	ldrb	r3, [r3, #0]
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d001      	beq.n	800b9e0 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800b9dc:	2301      	movs	r3, #1
 800b9de:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800b9e0:	4809      	ldr	r0, [pc, #36]	; (800ba08 <hci_send_req+0x104>)
 800b9e2:	f000 fb43 	bl	800c06c <LST_is_empty>
 800b9e6:	4603      	mov	r3, r0
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d0b5      	beq.n	800b958 <hci_send_req+0x54>
  while(local_cmd_status == HCI_TL_CmdBusy)
 800b9ec:	7ffb      	ldrb	r3, [r7, #31]
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d0ad      	beq.n	800b94e <hci_send_req+0x4a>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 800b9f2:	2001      	movs	r0, #1
 800b9f4:	f000 f860 	bl	800bab8 <NotifyCmdStatus>

  return 0;
 800b9f8:	2300      	movs	r3, #0
}
 800b9fa:	4618      	mov	r0, r3
 800b9fc:	3720      	adds	r7, #32
 800b9fe:	46bd      	mov	sp, r7
 800ba00:	bd80      	pop	{r7, pc}
 800ba02:	bf00      	nop
 800ba04:	200019a8 	.word	0x200019a8
 800ba08:	2000199c 	.word	0x2000199c

0800ba0c <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800ba0c:	b580      	push	{r7, lr}
 800ba0e:	b086      	sub	sp, #24
 800ba10:	af00      	add	r7, sp, #0
 800ba12:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 800ba14:	480f      	ldr	r0, [pc, #60]	; (800ba54 <TlInit+0x48>)
 800ba16:	f000 fb19 	bl	800c04c <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 800ba1a:	4a0f      	ldr	r2, [pc, #60]	; (800ba58 <TlInit+0x4c>)
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 800ba20:	480e      	ldr	r0, [pc, #56]	; (800ba5c <TlInit+0x50>)
 800ba22:	f000 fb13 	bl	800c04c <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800ba26:	4b0e      	ldr	r3, [pc, #56]	; (800ba60 <TlInit+0x54>)
 800ba28:	2201      	movs	r2, #1
 800ba2a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 800ba2c:	4b0d      	ldr	r3, [pc, #52]	; (800ba64 <TlInit+0x58>)
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d00a      	beq.n	800ba4a <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 800ba38:	4b0b      	ldr	r3, [pc, #44]	; (800ba68 <TlInit+0x5c>)
 800ba3a:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 800ba3c:	4b09      	ldr	r3, [pc, #36]	; (800ba64 <TlInit+0x58>)
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	f107 0208 	add.w	r2, r7, #8
 800ba44:	4610      	mov	r0, r2
 800ba46:	4798      	blx	r3
  }

  return;
 800ba48:	bf00      	nop
 800ba4a:	bf00      	nop
}
 800ba4c:	3718      	adds	r7, #24
 800ba4e:	46bd      	mov	sp, r7
 800ba50:	bd80      	pop	{r7, pc}
 800ba52:	bf00      	nop
 800ba54:	2000199c 	.word	0x2000199c
 800ba58:	20000234 	.word	0x20000234
 800ba5c:	2000022c 	.word	0x2000022c
 800ba60:	20000238 	.word	0x20000238
 800ba64:	2000197c 	.word	0x2000197c
 800ba68:	0800baf9 	.word	0x0800baf9

0800ba6c <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 800ba6c:	b580      	push	{r7, lr}
 800ba6e:	b082      	sub	sp, #8
 800ba70:	af00      	add	r7, sp, #0
 800ba72:	4603      	mov	r3, r0
 800ba74:	603a      	str	r2, [r7, #0]
 800ba76:	80fb      	strh	r3, [r7, #6]
 800ba78:	460b      	mov	r3, r1
 800ba7a:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 800ba7c:	4b0c      	ldr	r3, [pc, #48]	; (800bab0 <SendCmd+0x44>)
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	88fa      	ldrh	r2, [r7, #6]
 800ba82:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 800ba86:	4b0a      	ldr	r3, [pc, #40]	; (800bab0 <SendCmd+0x44>)
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	797a      	ldrb	r2, [r7, #5]
 800ba8c:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 800ba8e:	4b08      	ldr	r3, [pc, #32]	; (800bab0 <SendCmd+0x44>)
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	330c      	adds	r3, #12
 800ba94:	797a      	ldrb	r2, [r7, #5]
 800ba96:	6839      	ldr	r1, [r7, #0]
 800ba98:	4618      	mov	r0, r3
 800ba9a:	f001 fda5 	bl	800d5e8 <memcpy>

  hciContext.io.Send(0,0);
 800ba9e:	4b05      	ldr	r3, [pc, #20]	; (800bab4 <SendCmd+0x48>)
 800baa0:	691b      	ldr	r3, [r3, #16]
 800baa2:	2100      	movs	r1, #0
 800baa4:	2000      	movs	r0, #0
 800baa6:	4798      	blx	r3

  return;
 800baa8:	bf00      	nop
}
 800baaa:	3708      	adds	r7, #8
 800baac:	46bd      	mov	sp, r7
 800baae:	bd80      	pop	{r7, pc}
 800bab0:	20000234 	.word	0x20000234
 800bab4:	2000197c 	.word	0x2000197c

0800bab8 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 800bab8:	b580      	push	{r7, lr}
 800baba:	b082      	sub	sp, #8
 800babc:	af00      	add	r7, sp, #0
 800babe:	4603      	mov	r3, r0
 800bac0:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 800bac2:	79fb      	ldrb	r3, [r7, #7]
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d108      	bne.n	800bada <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 800bac8:	4b0a      	ldr	r3, [pc, #40]	; (800baf4 <NotifyCmdStatus+0x3c>)
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d00d      	beq.n	800baec <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 800bad0:	4b08      	ldr	r3, [pc, #32]	; (800baf4 <NotifyCmdStatus+0x3c>)
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	2000      	movs	r0, #0
 800bad6:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 800bad8:	e008      	b.n	800baec <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 800bada:	4b06      	ldr	r3, [pc, #24]	; (800baf4 <NotifyCmdStatus+0x3c>)
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d004      	beq.n	800baec <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 800bae2:	4b04      	ldr	r3, [pc, #16]	; (800baf4 <NotifyCmdStatus+0x3c>)
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	2001      	movs	r0, #1
 800bae8:	4798      	blx	r3
  return;
 800baea:	bf00      	nop
 800baec:	bf00      	nop
}
 800baee:	3708      	adds	r7, #8
 800baf0:	46bd      	mov	sp, r7
 800baf2:	bd80      	pop	{r7, pc}
 800baf4:	200019a4 	.word	0x200019a4

0800baf8 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 800baf8:	b580      	push	{r7, lr}
 800bafa:	b082      	sub	sp, #8
 800bafc:	af00      	add	r7, sp, #0
 800bafe:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	7a5b      	ldrb	r3, [r3, #9]
 800bb04:	2b0f      	cmp	r3, #15
 800bb06:	d003      	beq.n	800bb10 <TlEvtReceived+0x18>
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	7a5b      	ldrb	r3, [r3, #9]
 800bb0c:	2b0e      	cmp	r3, #14
 800bb0e:	d107      	bne.n	800bb20 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 800bb10:	6879      	ldr	r1, [r7, #4]
 800bb12:	4809      	ldr	r0, [pc, #36]	; (800bb38 <TlEvtReceived+0x40>)
 800bb14:	f000 faf2 	bl	800c0fc <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 800bb18:	2000      	movs	r0, #0
 800bb1a:	f7f8 f98f 	bl	8003e3c <hci_cmd_resp_release>
 800bb1e:	e006      	b.n	800bb2e <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 800bb20:	6879      	ldr	r1, [r7, #4]
 800bb22:	4806      	ldr	r0, [pc, #24]	; (800bb3c <TlEvtReceived+0x44>)
 800bb24:	f000 faea 	bl	800c0fc <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800bb28:	4804      	ldr	r0, [pc, #16]	; (800bb3c <TlEvtReceived+0x44>)
 800bb2a:	f7f8 f97b 	bl	8003e24 <hci_notify_asynch_evt>
  }

  return;
 800bb2e:	bf00      	nop
}
 800bb30:	3708      	adds	r7, #8
 800bb32:	46bd      	mov	sp, r7
 800bb34:	bd80      	pop	{r7, pc}
 800bb36:	bf00      	nop
 800bb38:	2000199c 	.word	0x2000199c
 800bb3c:	2000022c 	.word	0x2000022c

0800bb40 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 800bb40:	b480      	push	{r7}
 800bb42:	b083      	sub	sp, #12
 800bb44:	af00      	add	r7, sp, #0
 800bb46:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	4a05      	ldr	r2, [pc, #20]	; (800bb60 <hci_register_io_bus+0x20>)
 800bb4c:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	4a04      	ldr	r2, [pc, #16]	; (800bb64 <hci_register_io_bus+0x24>)
 800bb52:	611a      	str	r2, [r3, #16]

  return;
 800bb54:	bf00      	nop
}
 800bb56:	370c      	adds	r7, #12
 800bb58:	46bd      	mov	sp, r7
 800bb5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb5e:	4770      	bx	lr
 800bb60:	0800cc85 	.word	0x0800cc85
 800bb64:	0800cced 	.word	0x0800cced

0800bb68 <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 800bb68:	b580      	push	{r7, lr}
 800bb6a:	b084      	sub	sp, #16
 800bb6c:	af00      	add	r7, sp, #0
 800bb6e:	60f8      	str	r0, [r7, #12]
 800bb70:	60b9      	str	r1, [r7, #8]
 800bb72:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 800bb74:	687a      	ldr	r2, [r7, #4]
 800bb76:	68b9      	ldr	r1, [r7, #8]
 800bb78:	68f8      	ldr	r0, [r7, #12]
 800bb7a:	f001 fd35 	bl	800d5e8 <memcpy>
 800bb7e:	4603      	mov	r3, r0
}
 800bb80:	4618      	mov	r0, r3
 800bb82:	3710      	adds	r7, #16
 800bb84:	46bd      	mov	sp, r7
 800bb86:	bd80      	pop	{r7, pc}

0800bb88 <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 800bb88:	b580      	push	{r7, lr}
 800bb8a:	b084      	sub	sp, #16
 800bb8c:	af00      	add	r7, sp, #0
 800bb8e:	60f8      	str	r0, [r7, #12]
 800bb90:	60b9      	str	r1, [r7, #8]
 800bb92:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 800bb94:	687a      	ldr	r2, [r7, #4]
 800bb96:	68b9      	ldr	r1, [r7, #8]
 800bb98:	68f8      	ldr	r0, [r7, #12]
 800bb9a:	f001 fd33 	bl	800d604 <memset>
 800bb9e:	4603      	mov	r3, r0
}
 800bba0:	4618      	mov	r0, r3
 800bba2:	3710      	adds	r7, #16
 800bba4:	46bd      	mov	sp, r7
 800bba6:	bd80      	pop	{r7, pc}

0800bba8 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800bba8:	b480      	push	{r7}
 800bbaa:	b085      	sub	sp, #20
 800bbac:	af00      	add	r7, sp, #0
 800bbae:	4603      	mov	r3, r0
 800bbb0:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800bbb2:	4b0f      	ldr	r3, [pc, #60]	; (800bbf0 <OTP_Read+0x48>)
 800bbb4:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800bbb6:	e002      	b.n	800bbbe <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	3b08      	subs	r3, #8
 800bbbc:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	3307      	adds	r3, #7
 800bbc2:	781b      	ldrb	r3, [r3, #0]
 800bbc4:	79fa      	ldrb	r2, [r7, #7]
 800bbc6:	429a      	cmp	r2, r3
 800bbc8:	d003      	beq.n	800bbd2 <OTP_Read+0x2a>
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	4a09      	ldr	r2, [pc, #36]	; (800bbf4 <OTP_Read+0x4c>)
 800bbce:	4293      	cmp	r3, r2
 800bbd0:	d1f2      	bne.n	800bbb8 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	3307      	adds	r3, #7
 800bbd6:	781b      	ldrb	r3, [r3, #0]
 800bbd8:	79fa      	ldrb	r2, [r7, #7]
 800bbda:	429a      	cmp	r2, r3
 800bbdc:	d001      	beq.n	800bbe2 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800bbde:	2300      	movs	r3, #0
 800bbe0:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800bbe2:	68fb      	ldr	r3, [r7, #12]
}
 800bbe4:	4618      	mov	r0, r3
 800bbe6:	3714      	adds	r7, #20
 800bbe8:	46bd      	mov	sp, r7
 800bbea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbee:	4770      	bx	lr
 800bbf0:	1fff73f8 	.word	0x1fff73f8
 800bbf4:	1fff7000 	.word	0x1fff7000

0800bbf8 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 800bbf8:	b580      	push	{r7, lr}
 800bbfa:	b088      	sub	sp, #32
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800bc00:	f107 030c 	add.w	r3, r7, #12
 800bc04:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 800bc0c:	69fb      	ldr	r3, [r7, #28]
 800bc0e:	212e      	movs	r1, #46	; 0x2e
 800bc10:	f64f 4066 	movw	r0, #64614	; 0xfc66
 800bc14:	f000 f94c 	bl	800beb0 <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800bc18:	69fb      	ldr	r3, [r7, #28]
 800bc1a:	330b      	adds	r3, #11
 800bc1c:	78db      	ldrb	r3, [r3, #3]
}
 800bc1e:	4618      	mov	r0, r3
 800bc20:	3720      	adds	r7, #32
 800bc22:	46bd      	mov	sp, r7
 800bc24:	bd80      	pop	{r7, pc}

0800bc26 <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 800bc26:	b580      	push	{r7, lr}
 800bc28:	b088      	sub	sp, #32
 800bc2a:	af00      	add	r7, sp, #0
 800bc2c:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800bc2e:	f107 030c 	add.w	r3, r7, #12
 800bc32:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 800bc3a:	69fb      	ldr	r3, [r7, #28]
 800bc3c:	210f      	movs	r1, #15
 800bc3e:	f64f 4068 	movw	r0, #64616	; 0xfc68
 800bc42:	f000 f935 	bl	800beb0 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800bc46:	69fb      	ldr	r3, [r7, #28]
 800bc48:	330b      	adds	r3, #11
 800bc4a:	78db      	ldrb	r3, [r3, #3]
}
 800bc4c:	4618      	mov	r0, r3
 800bc4e:	3720      	adds	r7, #32
 800bc50:	46bd      	mov	sp, r7
 800bc52:	bd80      	pop	{r7, pc}

0800bc54 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 800bc54:	b580      	push	{r7, lr}
 800bc56:	b088      	sub	sp, #32
 800bc58:	af00      	add	r7, sp, #0
 800bc5a:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800bc5c:	f107 030c 	add.w	r3, r7, #12
 800bc60:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 800bc62:	69fb      	ldr	r3, [r7, #28]
 800bc64:	687a      	ldr	r2, [r7, #4]
 800bc66:	2110      	movs	r1, #16
 800bc68:	f64f 4075 	movw	r0, #64629	; 0xfc75
 800bc6c:	f000 f920 	bl	800beb0 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800bc70:	69fb      	ldr	r3, [r7, #28]
 800bc72:	330b      	adds	r3, #11
 800bc74:	78db      	ldrb	r3, [r3, #3]
}
 800bc76:	4618      	mov	r0, r3
 800bc78:	3720      	adds	r7, #32
 800bc7a:	46bd      	mov	sp, r7
 800bc7c:	bd80      	pop	{r7, pc}
	...

0800bc80 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 800bc80:	b480      	push	{r7}
 800bc82:	b08b      	sub	sp, #44	; 0x2c
 800bc84:	af00      	add	r7, sp, #0
 800bc86:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 800bc88:	2300      	movs	r3, #0
 800bc8a:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 800bc8c:	2300      	movs	r3, #0
 800bc8e:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 800bc90:	2300      	movs	r3, #0
 800bc92:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 800bc94:	2300      	movs	r3, #0
 800bc96:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 800bc98:	2300      	movs	r3, #0
 800bc9a:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 800bc9c:	2300      	movs	r3, #0
 800bc9e:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 800bca0:	2300      	movs	r3, #0
 800bca2:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 800bca4:	2300      	movs	r3, #0
 800bca6:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 800bca8:	4b4a      	ldr	r3, [pc, #296]	; (800bdd4 <SHCI_GetWirelessFwInfo+0x154>)
 800bcaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bcac:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800bcb0:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 800bcb2:	693b      	ldr	r3, [r7, #16]
 800bcb4:	009b      	lsls	r3, r3, #2
 800bcb6:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800bcba:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 800bcc2:	68bb      	ldr	r3, [r7, #8]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	4a44      	ldr	r2, [pc, #272]	; (800bdd8 <SHCI_GetWirelessFwInfo+0x158>)
 800bcc8:	4293      	cmp	r3, r2
 800bcca:	d10f      	bne.n	800bcec <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 800bccc:	68bb      	ldr	r3, [r7, #8]
 800bcce:	695b      	ldr	r3, [r3, #20]
 800bcd0:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 800bcd2:	68bb      	ldr	r3, [r7, #8]
 800bcd4:	699b      	ldr	r3, [r3, #24]
 800bcd6:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 800bcd8:	68bb      	ldr	r3, [r7, #8]
 800bcda:	69db      	ldr	r3, [r3, #28]
 800bcdc:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 800bcde:	68bb      	ldr	r3, [r7, #8]
 800bce0:	68db      	ldr	r3, [r3, #12]
 800bce2:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 800bce4:	68bb      	ldr	r3, [r7, #8]
 800bce6:	691b      	ldr	r3, [r3, #16]
 800bce8:	617b      	str	r3, [r7, #20]
 800bcea:	e01a      	b.n	800bd22 <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 800bcec:	693b      	ldr	r3, [r7, #16]
 800bcee:	009b      	lsls	r3, r3, #2
 800bcf0:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800bcf4:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800bcf8:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	691b      	ldr	r3, [r3, #16]
 800bd00:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	695b      	ldr	r3, [r3, #20]
 800bd08:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	699b      	ldr	r3, [r3, #24]
 800bd10:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	685b      	ldr	r3, [r3, #4]
 800bd18:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	689b      	ldr	r3, [r3, #8]
 800bd20:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800bd22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd24:	0e1b      	lsrs	r3, r3, #24
 800bd26:	b2da      	uxtb	r2, r3
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800bd2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd2e:	0c1b      	lsrs	r3, r3, #16
 800bd30:	b2da      	uxtb	r2, r3
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800bd36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd38:	0a1b      	lsrs	r3, r3, #8
 800bd3a:	b2da      	uxtb	r2, r3
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 800bd40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd42:	091b      	lsrs	r3, r3, #4
 800bd44:	b2db      	uxtb	r3, r3
 800bd46:	f003 030f 	and.w	r3, r3, #15
 800bd4a:	b2da      	uxtb	r2, r3
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 800bd50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd52:	b2db      	uxtb	r3, r3
 800bd54:	f003 030f 	and.w	r3, r3, #15
 800bd58:	b2da      	uxtb	r2, r3
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800bd5e:	6a3b      	ldr	r3, [r7, #32]
 800bd60:	0e1b      	lsrs	r3, r3, #24
 800bd62:	b2da      	uxtb	r2, r3
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800bd68:	6a3b      	ldr	r3, [r7, #32]
 800bd6a:	0c1b      	lsrs	r3, r3, #16
 800bd6c:	b2da      	uxtb	r2, r3
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 800bd72:	6a3b      	ldr	r3, [r7, #32]
 800bd74:	0a1b      	lsrs	r3, r3, #8
 800bd76:	b2da      	uxtb	r2, r3
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800bd7c:	6a3b      	ldr	r3, [r7, #32]
 800bd7e:	b2da      	uxtb	r2, r3
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 800bd84:	69fb      	ldr	r3, [r7, #28]
 800bd86:	b2da      	uxtb	r2, r3
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800bd8c:	69bb      	ldr	r3, [r7, #24]
 800bd8e:	0e1b      	lsrs	r3, r3, #24
 800bd90:	b2da      	uxtb	r2, r3
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800bd96:	69bb      	ldr	r3, [r7, #24]
 800bd98:	0c1b      	lsrs	r3, r3, #16
 800bd9a:	b2da      	uxtb	r2, r3
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800bda0:	69bb      	ldr	r3, [r7, #24]
 800bda2:	0a1b      	lsrs	r3, r3, #8
 800bda4:	b2da      	uxtb	r2, r3
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800bdaa:	697b      	ldr	r3, [r7, #20]
 800bdac:	0e1b      	lsrs	r3, r3, #24
 800bdae:	b2da      	uxtb	r2, r3
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800bdb4:	697b      	ldr	r3, [r7, #20]
 800bdb6:	0c1b      	lsrs	r3, r3, #16
 800bdb8:	b2da      	uxtb	r2, r3
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800bdbe:	697b      	ldr	r3, [r7, #20]
 800bdc0:	b2da      	uxtb	r2, r3
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 800bdc6:	2300      	movs	r3, #0
}
 800bdc8:	4618      	mov	r0, r3
 800bdca:	372c      	adds	r7, #44	; 0x2c
 800bdcc:	46bd      	mov	sp, r7
 800bdce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd2:	4770      	bx	lr
 800bdd4:	58004000 	.word	0x58004000
 800bdd8:	a94656b9 	.word	0xa94656b9

0800bddc <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800bddc:	b580      	push	{r7, lr}
 800bdde:	b082      	sub	sp, #8
 800bde0:	af00      	add	r7, sp, #0
 800bde2:	6078      	str	r0, [r7, #4]
 800bde4:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800bde6:	683b      	ldr	r3, [r7, #0]
 800bde8:	685b      	ldr	r3, [r3, #4]
 800bdea:	4a08      	ldr	r2, [pc, #32]	; (800be0c <shci_init+0x30>)
 800bdec:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800bdee:	4a08      	ldr	r2, [pc, #32]	; (800be10 <shci_init+0x34>)
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 800bdf4:	4806      	ldr	r0, [pc, #24]	; (800be10 <shci_init+0x34>)
 800bdf6:	f000 f915 	bl	800c024 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800bdfa:	683b      	ldr	r3, [r7, #0]
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	4618      	mov	r0, r3
 800be00:	f000 f898 	bl	800bf34 <TlInit>

  return;
 800be04:	bf00      	nop
}
 800be06:	3708      	adds	r7, #8
 800be08:	46bd      	mov	sp, r7
 800be0a:	bd80      	pop	{r7, pc}
 800be0c:	200019cc 	.word	0x200019cc
 800be10:	200019ac 	.word	0x200019ac

0800be14 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 800be14:	b580      	push	{r7, lr}
 800be16:	b084      	sub	sp, #16
 800be18:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800be1a:	4822      	ldr	r0, [pc, #136]	; (800bea4 <shci_user_evt_proc+0x90>)
 800be1c:	f000 f926 	bl	800c06c <LST_is_empty>
 800be20:	4603      	mov	r3, r0
 800be22:	2b00      	cmp	r3, #0
 800be24:	d12b      	bne.n	800be7e <shci_user_evt_proc+0x6a>
 800be26:	4b20      	ldr	r3, [pc, #128]	; (800bea8 <shci_user_evt_proc+0x94>)
 800be28:	781b      	ldrb	r3, [r3, #0]
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d027      	beq.n	800be7e <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800be2e:	f107 030c 	add.w	r3, r7, #12
 800be32:	4619      	mov	r1, r3
 800be34:	481b      	ldr	r0, [pc, #108]	; (800bea4 <shci_user_evt_proc+0x90>)
 800be36:	f000 f9a8 	bl	800c18a <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 800be3a:	4b1c      	ldr	r3, [pc, #112]	; (800beac <shci_user_evt_proc+0x98>)
 800be3c:	69db      	ldr	r3, [r3, #28]
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d00c      	beq.n	800be5c <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 800be46:	2301      	movs	r3, #1
 800be48:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800be4a:	4b18      	ldr	r3, [pc, #96]	; (800beac <shci_user_evt_proc+0x98>)
 800be4c:	69db      	ldr	r3, [r3, #28]
 800be4e:	1d3a      	adds	r2, r7, #4
 800be50:	4610      	mov	r0, r2
 800be52:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 800be54:	793a      	ldrb	r2, [r7, #4]
 800be56:	4b14      	ldr	r3, [pc, #80]	; (800bea8 <shci_user_evt_proc+0x94>)
 800be58:	701a      	strb	r2, [r3, #0]
 800be5a:	e002      	b.n	800be62 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800be5c:	4b12      	ldr	r3, [pc, #72]	; (800bea8 <shci_user_evt_proc+0x94>)
 800be5e:	2201      	movs	r2, #1
 800be60:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800be62:	4b11      	ldr	r3, [pc, #68]	; (800bea8 <shci_user_evt_proc+0x94>)
 800be64:	781b      	ldrb	r3, [r3, #0]
 800be66:	2b00      	cmp	r3, #0
 800be68:	d004      	beq.n	800be74 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	4618      	mov	r0, r3
 800be6e:	f001 f84d 	bl	800cf0c <TL_MM_EvtDone>
 800be72:	e004      	b.n	800be7e <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	4619      	mov	r1, r3
 800be78:	480a      	ldr	r0, [pc, #40]	; (800bea4 <shci_user_evt_proc+0x90>)
 800be7a:	f000 f919 	bl	800c0b0 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800be7e:	4809      	ldr	r0, [pc, #36]	; (800bea4 <shci_user_evt_proc+0x90>)
 800be80:	f000 f8f4 	bl	800c06c <LST_is_empty>
 800be84:	4603      	mov	r3, r0
 800be86:	2b00      	cmp	r3, #0
 800be88:	d107      	bne.n	800be9a <shci_user_evt_proc+0x86>
 800be8a:	4b07      	ldr	r3, [pc, #28]	; (800bea8 <shci_user_evt_proc+0x94>)
 800be8c:	781b      	ldrb	r3, [r3, #0]
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d003      	beq.n	800be9a <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800be92:	4804      	ldr	r0, [pc, #16]	; (800bea4 <shci_user_evt_proc+0x90>)
 800be94:	f7f5 fd13 	bl	80018be <shci_notify_asynch_evt>
  }


  return;
 800be98:	bf00      	nop
 800be9a:	bf00      	nop
}
 800be9c:	3710      	adds	r7, #16
 800be9e:	46bd      	mov	sp, r7
 800bea0:	bd80      	pop	{r7, pc}
 800bea2:	bf00      	nop
 800bea4:	20000260 	.word	0x20000260
 800bea8:	20000270 	.word	0x20000270
 800beac:	200019ac 	.word	0x200019ac

0800beb0 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 800beb0:	b580      	push	{r7, lr}
 800beb2:	b084      	sub	sp, #16
 800beb4:	af00      	add	r7, sp, #0
 800beb6:	60ba      	str	r2, [r7, #8]
 800beb8:	607b      	str	r3, [r7, #4]
 800beba:	4603      	mov	r3, r0
 800bebc:	81fb      	strh	r3, [r7, #14]
 800bebe:	460b      	mov	r3, r1
 800bec0:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800bec2:	2000      	movs	r0, #0
 800bec4:	f000 f868 	bl	800bf98 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800bec8:	4b17      	ldr	r3, [pc, #92]	; (800bf28 <shci_send+0x78>)
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	89fa      	ldrh	r2, [r7, #14]
 800bece:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800bed2:	4b15      	ldr	r3, [pc, #84]	; (800bf28 <shci_send+0x78>)
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	7b7a      	ldrb	r2, [r7, #13]
 800bed8:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800beda:	4b13      	ldr	r3, [pc, #76]	; (800bf28 <shci_send+0x78>)
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	330c      	adds	r3, #12
 800bee0:	7b7a      	ldrb	r2, [r7, #13]
 800bee2:	68b9      	ldr	r1, [r7, #8]
 800bee4:	4618      	mov	r0, r3
 800bee6:	f001 fb7f 	bl	800d5e8 <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 800beea:	4b10      	ldr	r3, [pc, #64]	; (800bf2c <shci_send+0x7c>)
 800beec:	2201      	movs	r2, #1
 800beee:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 800bef0:	4b0f      	ldr	r3, [pc, #60]	; (800bf30 <shci_send+0x80>)
 800bef2:	691b      	ldr	r3, [r3, #16]
 800bef4:	2100      	movs	r1, #0
 800bef6:	2000      	movs	r0, #0
 800bef8:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800befa:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800befe:	f7f5 fcf5 	bl	80018ec <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	f103 0008 	add.w	r0, r3, #8
 800bf08:	4b07      	ldr	r3, [pc, #28]	; (800bf28 <shci_send+0x78>)
 800bf0a:	6819      	ldr	r1, [r3, #0]
 800bf0c:	4b06      	ldr	r3, [pc, #24]	; (800bf28 <shci_send+0x78>)
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	789b      	ldrb	r3, [r3, #2]
 800bf12:	3303      	adds	r3, #3
 800bf14:	461a      	mov	r2, r3
 800bf16:	f001 fb67 	bl	800d5e8 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800bf1a:	2001      	movs	r0, #1
 800bf1c:	f000 f83c 	bl	800bf98 <Cmd_SetStatus>

  return;
 800bf20:	bf00      	nop
}
 800bf22:	3710      	adds	r7, #16
 800bf24:	46bd      	mov	sp, r7
 800bf26:	bd80      	pop	{r7, pc}
 800bf28:	2000026c 	.word	0x2000026c
 800bf2c:	200019d0 	.word	0x200019d0
 800bf30:	200019ac 	.word	0x200019ac

0800bf34 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800bf34:	b580      	push	{r7, lr}
 800bf36:	b086      	sub	sp, #24
 800bf38:	af00      	add	r7, sp, #0
 800bf3a:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 800bf3c:	4a10      	ldr	r2, [pc, #64]	; (800bf80 <TlInit+0x4c>)
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800bf42:	4810      	ldr	r0, [pc, #64]	; (800bf84 <TlInit+0x50>)
 800bf44:	f000 f882 	bl	800c04c <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800bf48:	2001      	movs	r0, #1
 800bf4a:	f000 f825 	bl	800bf98 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800bf4e:	4b0e      	ldr	r3, [pc, #56]	; (800bf88 <TlInit+0x54>)
 800bf50:	2201      	movs	r2, #1
 800bf52:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 800bf54:	4b0d      	ldr	r3, [pc, #52]	; (800bf8c <TlInit+0x58>)
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d00c      	beq.n	800bf76 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800bf60:	4b0b      	ldr	r3, [pc, #44]	; (800bf90 <TlInit+0x5c>)
 800bf62:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800bf64:	4b0b      	ldr	r3, [pc, #44]	; (800bf94 <TlInit+0x60>)
 800bf66:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 800bf68:	4b08      	ldr	r3, [pc, #32]	; (800bf8c <TlInit+0x58>)
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	f107 020c 	add.w	r2, r7, #12
 800bf70:	4610      	mov	r0, r2
 800bf72:	4798      	blx	r3
  }

  return;
 800bf74:	bf00      	nop
 800bf76:	bf00      	nop
}
 800bf78:	3718      	adds	r7, #24
 800bf7a:	46bd      	mov	sp, r7
 800bf7c:	bd80      	pop	{r7, pc}
 800bf7e:	bf00      	nop
 800bf80:	2000026c 	.word	0x2000026c
 800bf84:	20000260 	.word	0x20000260
 800bf88:	20000270 	.word	0x20000270
 800bf8c:	200019ac 	.word	0x200019ac
 800bf90:	0800bfe9 	.word	0x0800bfe9
 800bf94:	0800c001 	.word	0x0800c001

0800bf98 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 800bf98:	b580      	push	{r7, lr}
 800bf9a:	b082      	sub	sp, #8
 800bf9c:	af00      	add	r7, sp, #0
 800bf9e:	4603      	mov	r3, r0
 800bfa0:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800bfa2:	79fb      	ldrb	r3, [r7, #7]
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d10b      	bne.n	800bfc0 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 800bfa8:	4b0d      	ldr	r3, [pc, #52]	; (800bfe0 <Cmd_SetStatus+0x48>)
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d003      	beq.n	800bfb8 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800bfb0:	4b0b      	ldr	r3, [pc, #44]	; (800bfe0 <Cmd_SetStatus+0x48>)
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	2000      	movs	r0, #0
 800bfb6:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800bfb8:	4b0a      	ldr	r3, [pc, #40]	; (800bfe4 <Cmd_SetStatus+0x4c>)
 800bfba:	2200      	movs	r2, #0
 800bfbc:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800bfbe:	e00b      	b.n	800bfd8 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800bfc0:	4b08      	ldr	r3, [pc, #32]	; (800bfe4 <Cmd_SetStatus+0x4c>)
 800bfc2:	2201      	movs	r2, #1
 800bfc4:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800bfc6:	4b06      	ldr	r3, [pc, #24]	; (800bfe0 <Cmd_SetStatus+0x48>)
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d004      	beq.n	800bfd8 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800bfce:	4b04      	ldr	r3, [pc, #16]	; (800bfe0 <Cmd_SetStatus+0x48>)
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	2001      	movs	r0, #1
 800bfd4:	4798      	blx	r3
  return;
 800bfd6:	bf00      	nop
 800bfd8:	bf00      	nop
}
 800bfda:	3708      	adds	r7, #8
 800bfdc:	46bd      	mov	sp, r7
 800bfde:	bd80      	pop	{r7, pc}
 800bfe0:	200019cc 	.word	0x200019cc
 800bfe4:	20000268 	.word	0x20000268

0800bfe8 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 800bfe8:	b580      	push	{r7, lr}
 800bfea:	b082      	sub	sp, #8
 800bfec:	af00      	add	r7, sp, #0
 800bfee:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800bff0:	2000      	movs	r0, #0
 800bff2:	f7f5 fc70 	bl	80018d6 <shci_cmd_resp_release>

  return;
 800bff6:	bf00      	nop
}
 800bff8:	3708      	adds	r7, #8
 800bffa:	46bd      	mov	sp, r7
 800bffc:	bd80      	pop	{r7, pc}
	...

0800c000 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800c000:	b580      	push	{r7, lr}
 800c002:	b082      	sub	sp, #8
 800c004:	af00      	add	r7, sp, #0
 800c006:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800c008:	6879      	ldr	r1, [r7, #4]
 800c00a:	4805      	ldr	r0, [pc, #20]	; (800c020 <TlUserEvtReceived+0x20>)
 800c00c:	f000 f876 	bl	800c0fc <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800c010:	4803      	ldr	r0, [pc, #12]	; (800c020 <TlUserEvtReceived+0x20>)
 800c012:	f7f5 fc54 	bl	80018be <shci_notify_asynch_evt>

  return;
 800c016:	bf00      	nop
}
 800c018:	3708      	adds	r7, #8
 800c01a:	46bd      	mov	sp, r7
 800c01c:	bd80      	pop	{r7, pc}
 800c01e:	bf00      	nop
 800c020:	20000260 	.word	0x20000260

0800c024 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 800c024:	b480      	push	{r7}
 800c026:	b083      	sub	sp, #12
 800c028:	af00      	add	r7, sp, #0
 800c02a:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	4a05      	ldr	r2, [pc, #20]	; (800c044 <shci_register_io_bus+0x20>)
 800c030:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	4a04      	ldr	r2, [pc, #16]	; (800c048 <shci_register_io_bus+0x24>)
 800c036:	611a      	str	r2, [r3, #16]

  return;
 800c038:	bf00      	nop
}
 800c03a:	370c      	adds	r7, #12
 800c03c:	46bd      	mov	sp, r7
 800c03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c042:	4770      	bx	lr
 800c044:	0800cd99 	.word	0x0800cd99
 800c048:	0800cded 	.word	0x0800cded

0800c04c <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800c04c:	b480      	push	{r7}
 800c04e:	b083      	sub	sp, #12
 800c050:	af00      	add	r7, sp, #0
 800c052:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	687a      	ldr	r2, [r7, #4]
 800c058:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	687a      	ldr	r2, [r7, #4]
 800c05e:	605a      	str	r2, [r3, #4]
}
 800c060:	bf00      	nop
 800c062:	370c      	adds	r7, #12
 800c064:	46bd      	mov	sp, r7
 800c066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c06a:	4770      	bx	lr

0800c06c <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800c06c:	b480      	push	{r7}
 800c06e:	b087      	sub	sp, #28
 800c070:	af00      	add	r7, sp, #0
 800c072:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c074:	f3ef 8310 	mrs	r3, PRIMASK
 800c078:	60fb      	str	r3, [r7, #12]
  return(result);
 800c07a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800c07c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800c07e:	b672      	cpsid	i
}
 800c080:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	687a      	ldr	r2, [r7, #4]
 800c088:	429a      	cmp	r2, r3
 800c08a:	d102      	bne.n	800c092 <LST_is_empty+0x26>
  {
    return_value = TRUE;
 800c08c:	2301      	movs	r3, #1
 800c08e:	75fb      	strb	r3, [r7, #23]
 800c090:	e001      	b.n	800c096 <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 800c092:	2300      	movs	r3, #0
 800c094:	75fb      	strb	r3, [r7, #23]
 800c096:	693b      	ldr	r3, [r7, #16]
 800c098:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c09a:	68bb      	ldr	r3, [r7, #8]
 800c09c:	f383 8810 	msr	PRIMASK, r3
}
 800c0a0:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800c0a2:	7dfb      	ldrb	r3, [r7, #23]
}
 800c0a4:	4618      	mov	r0, r3
 800c0a6:	371c      	adds	r7, #28
 800c0a8:	46bd      	mov	sp, r7
 800c0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ae:	4770      	bx	lr

0800c0b0 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800c0b0:	b480      	push	{r7}
 800c0b2:	b087      	sub	sp, #28
 800c0b4:	af00      	add	r7, sp, #0
 800c0b6:	6078      	str	r0, [r7, #4]
 800c0b8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c0ba:	f3ef 8310 	mrs	r3, PRIMASK
 800c0be:	60fb      	str	r3, [r7, #12]
  return(result);
 800c0c0:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800c0c2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c0c4:	b672      	cpsid	i
}
 800c0c6:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	681a      	ldr	r2, [r3, #0]
 800c0cc:	683b      	ldr	r3, [r7, #0]
 800c0ce:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800c0d0:	683b      	ldr	r3, [r7, #0]
 800c0d2:	687a      	ldr	r2, [r7, #4]
 800c0d4:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	683a      	ldr	r2, [r7, #0]
 800c0da:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800c0dc:	683b      	ldr	r3, [r7, #0]
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	683a      	ldr	r2, [r7, #0]
 800c0e2:	605a      	str	r2, [r3, #4]
 800c0e4:	697b      	ldr	r3, [r7, #20]
 800c0e6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c0e8:	693b      	ldr	r3, [r7, #16]
 800c0ea:	f383 8810 	msr	PRIMASK, r3
}
 800c0ee:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800c0f0:	bf00      	nop
 800c0f2:	371c      	adds	r7, #28
 800c0f4:	46bd      	mov	sp, r7
 800c0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0fa:	4770      	bx	lr

0800c0fc <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800c0fc:	b480      	push	{r7}
 800c0fe:	b087      	sub	sp, #28
 800c100:	af00      	add	r7, sp, #0
 800c102:	6078      	str	r0, [r7, #4]
 800c104:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c106:	f3ef 8310 	mrs	r3, PRIMASK
 800c10a:	60fb      	str	r3, [r7, #12]
  return(result);
 800c10c:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800c10e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c110:	b672      	cpsid	i
}
 800c112:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800c114:	683b      	ldr	r3, [r7, #0]
 800c116:	687a      	ldr	r2, [r7, #4]
 800c118:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	685a      	ldr	r2, [r3, #4]
 800c11e:	683b      	ldr	r3, [r7, #0]
 800c120:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	683a      	ldr	r2, [r7, #0]
 800c126:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800c128:	683b      	ldr	r3, [r7, #0]
 800c12a:	685b      	ldr	r3, [r3, #4]
 800c12c:	683a      	ldr	r2, [r7, #0]
 800c12e:	601a      	str	r2, [r3, #0]
 800c130:	697b      	ldr	r3, [r7, #20]
 800c132:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c134:	693b      	ldr	r3, [r7, #16]
 800c136:	f383 8810 	msr	PRIMASK, r3
}
 800c13a:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800c13c:	bf00      	nop
 800c13e:	371c      	adds	r7, #28
 800c140:	46bd      	mov	sp, r7
 800c142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c146:	4770      	bx	lr

0800c148 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800c148:	b480      	push	{r7}
 800c14a:	b087      	sub	sp, #28
 800c14c:	af00      	add	r7, sp, #0
 800c14e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c150:	f3ef 8310 	mrs	r3, PRIMASK
 800c154:	60fb      	str	r3, [r7, #12]
  return(result);
 800c156:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800c158:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c15a:	b672      	cpsid	i
}
 800c15c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	685b      	ldr	r3, [r3, #4]
 800c162:	687a      	ldr	r2, [r7, #4]
 800c164:	6812      	ldr	r2, [r2, #0]
 800c166:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	687a      	ldr	r2, [r7, #4]
 800c16e:	6852      	ldr	r2, [r2, #4]
 800c170:	605a      	str	r2, [r3, #4]
 800c172:	697b      	ldr	r3, [r7, #20]
 800c174:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c176:	693b      	ldr	r3, [r7, #16]
 800c178:	f383 8810 	msr	PRIMASK, r3
}
 800c17c:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800c17e:	bf00      	nop
 800c180:	371c      	adds	r7, #28
 800c182:	46bd      	mov	sp, r7
 800c184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c188:	4770      	bx	lr

0800c18a <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800c18a:	b580      	push	{r7, lr}
 800c18c:	b086      	sub	sp, #24
 800c18e:	af00      	add	r7, sp, #0
 800c190:	6078      	str	r0, [r7, #4]
 800c192:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c194:	f3ef 8310 	mrs	r3, PRIMASK
 800c198:	60fb      	str	r3, [r7, #12]
  return(result);
 800c19a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800c19c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c19e:	b672      	cpsid	i
}
 800c1a0:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	681a      	ldr	r2, [r3, #0]
 800c1a6:	683b      	ldr	r3, [r7, #0]
 800c1a8:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	4618      	mov	r0, r3
 800c1b0:	f7ff ffca 	bl	800c148 <LST_remove_node>
 800c1b4:	697b      	ldr	r3, [r7, #20]
 800c1b6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c1b8:	693b      	ldr	r3, [r7, #16]
 800c1ba:	f383 8810 	msr	PRIMASK, r3
}
 800c1be:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800c1c0:	bf00      	nop
 800c1c2:	3718      	adds	r7, #24
 800c1c4:	46bd      	mov	sp, r7
 800c1c6:	bd80      	pop	{r7, pc}

0800c1c8 <CircularQueue_Init>:
  * @param  queueSize:  Size of Queue Buffer
  * @param  elementSize: Size of an element in the queue. if =0, the queue will manage variable sizze elements
  * @retval   always 0
  */
int CircularQueue_Init(queue_t *q, uint8_t* queueBuffer, uint32_t queueSize, uint16_t elementSize, uint8_t optionFlags)
{
 800c1c8:	b480      	push	{r7}
 800c1ca:	b085      	sub	sp, #20
 800c1cc:	af00      	add	r7, sp, #0
 800c1ce:	60f8      	str	r0, [r7, #12]
 800c1d0:	60b9      	str	r1, [r7, #8]
 800c1d2:	607a      	str	r2, [r7, #4]
 800c1d4:	807b      	strh	r3, [r7, #2]
  q->qBuff = queueBuffer;
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	68ba      	ldr	r2, [r7, #8]
 800c1da:	601a      	str	r2, [r3, #0]
  q->first = 0;
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	2200      	movs	r2, #0
 800c1e0:	60da      	str	r2, [r3, #12]
  q->last = 0; /* queueSize-1; */
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	2200      	movs	r2, #0
 800c1e6:	611a      	str	r2, [r3, #16]
  q->byteCount = 0;
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	2200      	movs	r2, #0
 800c1ec:	615a      	str	r2, [r3, #20]
  q->elementCount = 0;
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	2200      	movs	r2, #0
 800c1f2:	619a      	str	r2, [r3, #24]
  q->queueMaxSize = queueSize;
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	687a      	ldr	r2, [r7, #4]
 800c1f8:	605a      	str	r2, [r3, #4]
  q->elementSize = elementSize;
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	887a      	ldrh	r2, [r7, #2]
 800c1fe:	811a      	strh	r2, [r3, #8]
  q->optionFlags = optionFlags;
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	7e3a      	ldrb	r2, [r7, #24]
 800c204:	771a      	strb	r2, [r3, #28]

   if ((optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG) && q-> elementSize)
 800c206:	7e3b      	ldrb	r3, [r7, #24]
 800c208:	f003 0302 	and.w	r3, r3, #2
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d006      	beq.n	800c21e <CircularQueue_Init+0x56>
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	891b      	ldrh	r3, [r3, #8]
 800c214:	2b00      	cmp	r3, #0
 800c216:	d002      	beq.n	800c21e <CircularQueue_Init+0x56>
   {
    /* can not deal with splitting at the end of buffer with fixed size element */
    return -1;
 800c218:	f04f 33ff 	mov.w	r3, #4294967295
 800c21c:	e000      	b.n	800c220 <CircularQueue_Init+0x58>
  }
  return 0;
 800c21e:	2300      	movs	r3, #0
}
 800c220:	4618      	mov	r0, r3
 800c222:	3714      	adds	r7, #20
 800c224:	46bd      	mov	sp, r7
 800c226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c22a:	4770      	bx	lr

0800c22c <CircularQueue_Add>:
  * @param  elementSize:  Size of element to be added to the queue. Only used if the queue manage variable size elements
  * @param  nbElements:  number of elements in the in buffer pointed by x
  * @retval  pointer on last element just added to the queue, NULL if the element to be added do not fit in the queue (too big)
  */
uint8_t* CircularQueue_Add(queue_t *q, uint8_t* x, uint16_t elementSize, uint32_t nbElements)
{
 800c22c:	b580      	push	{r7, lr}
 800c22e:	b08e      	sub	sp, #56	; 0x38
 800c230:	af00      	add	r7, sp, #0
 800c232:	60f8      	str	r0, [r7, #12]
 800c234:	60b9      	str	r1, [r7, #8]
 800c236:	603b      	str	r3, [r7, #0]
 800c238:	4613      	mov	r3, r2
 800c23a:	80fb      	strh	r3, [r7, #6]

  uint8_t* ptr = NULL;                      /* fct return ptr to the element freshly added, if no room fct return NULL */
 800c23c:	2300      	movs	r3, #0
 800c23e:	623b      	str	r3, [r7, #32]
  uint16_t curElementSize = 0;              /* the size of the element currently  stored at q->last position */
 800c240:	2300      	movs	r3, #0
 800c242:	86fb      	strh	r3, [r7, #54]	; 0x36
  uint8_t  elemSizeStorageRoom  = 0 ;       /* Indicate the header (which contain only size) of element in case of varaibale size element (q->elementsize == 0) */
 800c244:	2300      	movs	r3, #0
 800c246:	77fb      	strb	r3, [r7, #31]
  uint32_t curBuffPosition;                  /* the current position in the queue buffer */
  uint32_t i;                               /* loop counter */
  uint32_t NbBytesToCopy = 0, NbCopiedBytes = 0 ; /* Indicators for copying bytes in queue */
 800c248:	2300      	movs	r3, #0
 800c24a:	62bb      	str	r3, [r7, #40]	; 0x28
 800c24c:	2300      	movs	r3, #0
 800c24e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t eob_free_size;                         /* Eof End of Quque Buffer Free Size */
  uint8_t  wrap_will_occur = 0;                   /* indicate if a wrap around will occurs */
 800c250:	2300      	movs	r3, #0
 800c252:	77bb      	strb	r3, [r7, #30]
  uint8_t  wrapped_element_eob_size;              /* In case of Wrap around, indicate size of parta of element that fit at thened of the queuue  buffer */
  uint16_t overhead = 0;                          /* In case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG or CIRCULAR_QUEUE_NO_WRAP_FLAG options, 
 800c254:	2300      	movs	r3, #0
 800c256:	83bb      	strh	r3, [r7, #28]
                                                     indcate the size overhead that will be generated by adding the element with wrap management (split or no wrap ) */ 
  
  
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	891b      	ldrh	r3, [r3, #8]
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d101      	bne.n	800c264 <CircularQueue_Add+0x38>
 800c260:	2302      	movs	r3, #2
 800c262:	e000      	b.n	800c266 <CircularQueue_Add+0x3a>
 800c264:	2300      	movs	r3, #0
 800c266:	77fb      	strb	r3, [r7, #31]
  /* retrieve the size of last element sored: the value stored at the beginning of the queue element if element size is variable otherwise take it from fixed element Size member */
  if (q->byteCount)
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	695b      	ldr	r3, [r3, #20]
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d02a      	beq.n	800c2c6 <CircularQueue_Add+0x9a>
  {
    curElementSize = (q->elementSize == 0) ? q->qBuff[q->last] + ((q->qBuff[MOD((q->last+1), q->queueMaxSize)])<<8) + 2 : q->elementSize;
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	891b      	ldrh	r3, [r3, #8]
 800c274:	2b00      	cmp	r3, #0
 800c276:	d123      	bne.n	800c2c0 <CircularQueue_Add+0x94>
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	681a      	ldr	r2, [r3, #0]
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	691b      	ldr	r3, [r3, #16]
 800c280:	4413      	add	r3, r2
 800c282:	781b      	ldrb	r3, [r3, #0]
 800c284:	b29a      	uxth	r2, r3
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	6819      	ldr	r1, [r3, #0]
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	691b      	ldr	r3, [r3, #16]
 800c28e:	1c58      	adds	r0, r3, #1
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	685b      	ldr	r3, [r3, #4]
 800c294:	4298      	cmp	r0, r3
 800c296:	d306      	bcc.n	800c2a6 <CircularQueue_Add+0x7a>
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	6918      	ldr	r0, [r3, #16]
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	685b      	ldr	r3, [r3, #4]
 800c2a0:	1ac3      	subs	r3, r0, r3
 800c2a2:	3301      	adds	r3, #1
 800c2a4:	e002      	b.n	800c2ac <CircularQueue_Add+0x80>
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	691b      	ldr	r3, [r3, #16]
 800c2aa:	3301      	adds	r3, #1
 800c2ac:	440b      	add	r3, r1
 800c2ae:	781b      	ldrb	r3, [r3, #0]
 800c2b0:	b29b      	uxth	r3, r3
 800c2b2:	021b      	lsls	r3, r3, #8
 800c2b4:	b29b      	uxth	r3, r3
 800c2b6:	4413      	add	r3, r2
 800c2b8:	b29b      	uxth	r3, r3
 800c2ba:	3302      	adds	r3, #2
 800c2bc:	b29b      	uxth	r3, r3
 800c2be:	e001      	b.n	800c2c4 <CircularQueue_Add+0x98>
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	891b      	ldrh	r3, [r3, #8]
 800c2c4:	86fb      	strh	r3, [r7, #54]	; 0x36
  }
  /* if queue element have fixed size , reset the elementSize arg with fixed element size value */
  if (q->elementSize > 0)               
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	891b      	ldrh	r3, [r3, #8]
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d002      	beq.n	800c2d4 <CircularQueue_Add+0xa8>
  {
    elementSize = q->elementSize;
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	891b      	ldrh	r3, [r3, #8]
 800c2d2:	80fb      	strh	r3, [r7, #6]
  }

   eob_free_size = (q->last >= q->first) ? q->queueMaxSize - (q->last + curElementSize) : 0;
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	691a      	ldr	r2, [r3, #16]
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	68db      	ldr	r3, [r3, #12]
 800c2dc:	429a      	cmp	r2, r3
 800c2de:	d307      	bcc.n	800c2f0 <CircularQueue_Add+0xc4>
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	685a      	ldr	r2, [r3, #4]
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	6919      	ldr	r1, [r3, #16]
 800c2e8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c2ea:	440b      	add	r3, r1
 800c2ec:	1ad3      	subs	r3, r2, r3
 800c2ee:	e000      	b.n	800c2f2 <CircularQueue_Add+0xc6>
 800c2f0:	2300      	movs	r3, #0
 800c2f2:	61bb      	str	r3, [r7, #24]

   /* check how many bytes of wrapped element (if anay) are at end of buffer */
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 800c2f4:	88fa      	ldrh	r2, [r7, #6]
 800c2f6:	7ffb      	ldrb	r3, [r7, #31]
 800c2f8:	4413      	add	r3, r2
 800c2fa:	461a      	mov	r2, r3
 800c2fc:	683b      	ldr	r3, [r7, #0]
 800c2fe:	fb02 f303 	mul.w	r3, r2, r3
 800c302:	69ba      	ldr	r2, [r7, #24]
 800c304:	429a      	cmp	r2, r3
 800c306:	d80b      	bhi.n	800c320 <CircularQueue_Add+0xf4>
 800c308:	88fa      	ldrh	r2, [r7, #6]
 800c30a:	7ffb      	ldrb	r3, [r7, #31]
 800c30c:	4413      	add	r3, r2
 800c30e:	461a      	mov	r2, r3
 800c310:	69bb      	ldr	r3, [r7, #24]
 800c312:	fbb3 f1f2 	udiv	r1, r3, r2
 800c316:	fb01 f202 	mul.w	r2, r1, r2
 800c31a:	1a9b      	subs	r3, r3, r2
 800c31c:	b2db      	uxtb	r3, r3
 800c31e:	e000      	b.n	800c322 <CircularQueue_Add+0xf6>
 800c320:	2300      	movs	r3, #0
 800c322:	75fb      	strb	r3, [r7, #23]
   wrap_will_occur  = wrapped_element_eob_size > elemSizeStorageRoom;
 800c324:	7dfa      	ldrb	r2, [r7, #23]
 800c326:	7ffb      	ldrb	r3, [r7, #31]
 800c328:	429a      	cmp	r2, r3
 800c32a:	bf8c      	ite	hi
 800c32c:	2301      	movhi	r3, #1
 800c32e:	2300      	movls	r3, #0
 800c330:	b2db      	uxtb	r3, r3
 800c332:	77bb      	strb	r3, [r7, #30]

   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)) ? wrapped_element_eob_size : overhead;
 800c334:	7fbb      	ldrb	r3, [r7, #30]
 800c336:	2b00      	cmp	r3, #0
 800c338:	d008      	beq.n	800c34c <CircularQueue_Add+0x120>
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	7f1b      	ldrb	r3, [r3, #28]
 800c33e:	f003 0301 	and.w	r3, r3, #1
 800c342:	2b00      	cmp	r3, #0
 800c344:	d002      	beq.n	800c34c <CircularQueue_Add+0x120>
 800c346:	7dfb      	ldrb	r3, [r7, #23]
 800c348:	b29b      	uxth	r3, r3
 800c34a:	e000      	b.n	800c34e <CircularQueue_Add+0x122>
 800c34c:	8bbb      	ldrh	r3, [r7, #28]
 800c34e:	83bb      	strh	r3, [r7, #28]
   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)) ? elemSizeStorageRoom  : overhead;
 800c350:	7fbb      	ldrb	r3, [r7, #30]
 800c352:	2b00      	cmp	r3, #0
 800c354:	d008      	beq.n	800c368 <CircularQueue_Add+0x13c>
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	7f1b      	ldrb	r3, [r3, #28]
 800c35a:	f003 0302 	and.w	r3, r3, #2
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d002      	beq.n	800c368 <CircularQueue_Add+0x13c>
 800c362:	7ffb      	ldrb	r3, [r7, #31]
 800c364:	b29b      	uxth	r3, r3
 800c366:	e000      	b.n	800c36a <CircularQueue_Add+0x13e>
 800c368:	8bbb      	ldrh	r3, [r7, #28]
 800c36a:	83bb      	strh	r3, [r7, #28]
   
   
  /* Store now the elements if ennough room for all elements */
  if (elementSize && ((q->byteCount + ((elementSize + elemSizeStorageRoom )*nbElements) + overhead) <= q->queueMaxSize)) 
 800c36c:	88fb      	ldrh	r3, [r7, #6]
 800c36e:	2b00      	cmp	r3, #0
 800c370:	f000 817e 	beq.w	800c670 <CircularQueue_Add+0x444>
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	695a      	ldr	r2, [r3, #20]
 800c378:	88f9      	ldrh	r1, [r7, #6]
 800c37a:	7ffb      	ldrb	r3, [r7, #31]
 800c37c:	440b      	add	r3, r1
 800c37e:	4619      	mov	r1, r3
 800c380:	683b      	ldr	r3, [r7, #0]
 800c382:	fb01 f303 	mul.w	r3, r1, r3
 800c386:	441a      	add	r2, r3
 800c388:	8bbb      	ldrh	r3, [r7, #28]
 800c38a:	441a      	add	r2, r3
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	685b      	ldr	r3, [r3, #4]
 800c390:	429a      	cmp	r2, r3
 800c392:	f200 816d 	bhi.w	800c670 <CircularQueue_Add+0x444>
  { 
    /* loop to add all elements  */
    for (i=0; i < nbElements; i++) 
 800c396:	2300      	movs	r3, #0
 800c398:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c39a:	e14a      	b.n	800c632 <CircularQueue_Add+0x406>
    {
      q->last = MOD ((q->last + curElementSize),q->queueMaxSize);
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	691a      	ldr	r2, [r3, #16]
 800c3a0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c3a2:	441a      	add	r2, r3
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	685b      	ldr	r3, [r3, #4]
 800c3a8:	429a      	cmp	r2, r3
 800c3aa:	d307      	bcc.n	800c3bc <CircularQueue_Add+0x190>
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	691a      	ldr	r2, [r3, #16]
 800c3b0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c3b2:	441a      	add	r2, r3
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	685b      	ldr	r3, [r3, #4]
 800c3b8:	1ad3      	subs	r3, r2, r3
 800c3ba:	e003      	b.n	800c3c4 <CircularQueue_Add+0x198>
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	691a      	ldr	r2, [r3, #16]
 800c3c0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c3c2:	4413      	add	r3, r2
 800c3c4:	68fa      	ldr	r2, [r7, #12]
 800c3c6:	6113      	str	r3, [r2, #16]
      curBuffPosition = q->last;
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	691b      	ldr	r3, [r3, #16]
 800c3cc:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* store the element  */
      /* store first the element size if element size is variable */
      if (q->elementSize == 0) 
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	891b      	ldrh	r3, [r3, #8]
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d130      	bne.n	800c438 <CircularQueue_Add+0x20c>
      {
        q->qBuff[curBuffPosition++]= elementSize & 0xFF;
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	681a      	ldr	r2, [r3, #0]
 800c3da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3dc:	1c59      	adds	r1, r3, #1
 800c3de:	6339      	str	r1, [r7, #48]	; 0x30
 800c3e0:	4413      	add	r3, r2
 800c3e2:	88fa      	ldrh	r2, [r7, #6]
 800c3e4:	b2d2      	uxtb	r2, r2
 800c3e6:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	685b      	ldr	r3, [r3, #4]
 800c3ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c3ee:	429a      	cmp	r2, r3
 800c3f0:	d304      	bcc.n	800c3fc <CircularQueue_Add+0x1d0>
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	685b      	ldr	r3, [r3, #4]
 800c3f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c3f8:	1ad3      	subs	r3, r2, r3
 800c3fa:	e000      	b.n	800c3fe <CircularQueue_Add+0x1d2>
 800c3fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3fe:	633b      	str	r3, [r7, #48]	; 0x30
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 800c400:	88fb      	ldrh	r3, [r7, #6]
 800c402:	0a1b      	lsrs	r3, r3, #8
 800c404:	b298      	uxth	r0, r3
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	681a      	ldr	r2, [r3, #0]
 800c40a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c40c:	1c59      	adds	r1, r3, #1
 800c40e:	6339      	str	r1, [r7, #48]	; 0x30
 800c410:	4413      	add	r3, r2
 800c412:	b2c2      	uxtb	r2, r0
 800c414:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	685b      	ldr	r3, [r3, #4]
 800c41a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c41c:	429a      	cmp	r2, r3
 800c41e:	d304      	bcc.n	800c42a <CircularQueue_Add+0x1fe>
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	685b      	ldr	r3, [r3, #4]
 800c424:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c426:	1ad3      	subs	r3, r2, r3
 800c428:	e000      	b.n	800c42c <CircularQueue_Add+0x200>
 800c42a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c42c:	633b      	str	r3, [r7, #48]	; 0x30
        q->byteCount += 2;
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	695b      	ldr	r3, [r3, #20]
 800c432:	1c9a      	adds	r2, r3, #2
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	615a      	str	r2, [r3, #20]
      }
      
      /* Identify number of bytes of copy takeing account possible wrap, in this case NbBytesToCopy will contains size that fit at end of the queue buffer */
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 800c438:	88fa      	ldrh	r2, [r7, #6]
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	6859      	ldr	r1, [r3, #4]
 800c43e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c440:	1acb      	subs	r3, r1, r3
 800c442:	4293      	cmp	r3, r2
 800c444:	bf28      	it	cs
 800c446:	4613      	movcs	r3, r2
 800c448:	62bb      	str	r3, [r7, #40]	; 0x28
      /* check if no wrap (NbBytesToCopy == elementSize) or if Wrap and no spsicf option; 
         In this case part of data will copied at the end of the buffer and the rest a the beginning */
      if ((NbBytesToCopy == elementSize) || ((NbBytesToCopy < elementSize) && (q->optionFlags == CIRCULAR_QUEUE_NO_FLAG)))
 800c44a:	88fb      	ldrh	r3, [r7, #6]
 800c44c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c44e:	429a      	cmp	r2, r3
 800c450:	d007      	beq.n	800c462 <CircularQueue_Add+0x236>
 800c452:	88fb      	ldrh	r3, [r7, #6]
 800c454:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c456:	429a      	cmp	r2, r3
 800c458:	d225      	bcs.n	800c4a6 <CircularQueue_Add+0x27a>
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	7f1b      	ldrb	r3, [r3, #28]
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d121      	bne.n	800c4a6 <CircularQueue_Add+0x27a>
      {
        /* Copy First part (or emtire buffer ) from current position up to the end of the buffer queue (or before if enough room)  */
        memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	681a      	ldr	r2, [r3, #0]
 800c466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c468:	18d0      	adds	r0, r2, r3
 800c46a:	88fb      	ldrh	r3, [r7, #6]
 800c46c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c46e:	fb02 f303 	mul.w	r3, r2, r3
 800c472:	68ba      	ldr	r2, [r7, #8]
 800c474:	4413      	add	r3, r2
 800c476:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c478:	4619      	mov	r1, r3
 800c47a:	f001 f8b5 	bl	800d5e8 <memcpy>
        /* Adjust bytes count */
        q->byteCount += NbBytesToCopy;
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	695a      	ldr	r2, [r3, #20]
 800c482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c484:	441a      	add	r2, r3
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	615a      	str	r2, [r3, #20]
        /* Wrap */
        curBuffPosition = 0; 
 800c48a:	2300      	movs	r3, #0
 800c48c:	633b      	str	r3, [r7, #48]	; 0x30
        /* set NbCopiedBytes bytes with  ampount copied */
        NbCopiedBytes = NbBytesToCopy;
 800c48e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c490:	627b      	str	r3, [r7, #36]	; 0x24
        /* set the rest to copy if wrao , if no wrap will be 0 */
        NbBytesToCopy = elementSize - NbBytesToCopy;
 800c492:	88fa      	ldrh	r2, [r7, #6]
 800c494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c496:	1ad3      	subs	r3, r2, r3
 800c498:	62bb      	str	r3, [r7, #40]	; 0x28
        /* set the current element Size, will be used to calaculate next last position at beginning of loop */
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 800c49a:	7ffb      	ldrb	r3, [r7, #31]
 800c49c:	b29a      	uxth	r2, r3
 800c49e:	88fb      	ldrh	r3, [r7, #6]
 800c4a0:	4413      	add	r3, r2
 800c4a2:	86fb      	strh	r3, [r7, #54]	; 0x36
 800c4a4:	e0a4      	b.n	800c5f0 <CircularQueue_Add+0x3c4>
      }
      else if (NbBytesToCopy)  /* We have a wrap  to manage */
 800c4a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	f000 80a1 	beq.w	800c5f0 <CircularQueue_Add+0x3c4>
      {
       /* case of CIRCULAR_QUEUE_NO_WRAP_FLAG option */
         if (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	7f1b      	ldrb	r3, [r3, #28]
 800c4b2:	f003 0301 	and.w	r3, r3, #1
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d03a      	beq.n	800c530 <CircularQueue_Add+0x304>
        {
          /* if element size are variable and NO_WRAP option, Invalidate end of buffer setting 0xFFFF size*/
          if (q->elementSize == 0)
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	891b      	ldrh	r3, [r3, #8]
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d10d      	bne.n	800c4de <CircularQueue_Add+0x2b2>
          {
             q->qBuff[curBuffPosition-2] = 0xFF;
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	681a      	ldr	r2, [r3, #0]
 800c4c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4c8:	3b02      	subs	r3, #2
 800c4ca:	4413      	add	r3, r2
 800c4cc:	22ff      	movs	r2, #255	; 0xff
 800c4ce:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = 0xFF;
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	681a      	ldr	r2, [r3, #0]
 800c4d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4d6:	3b01      	subs	r3, #1
 800c4d8:	4413      	add	r3, r2
 800c4da:	22ff      	movs	r2, #255	; 0xff
 800c4dc:	701a      	strb	r2, [r3, #0]
          }
          q->byteCount += NbBytesToCopy;  /* invalid data at the end of buffer are take into account in byteCount */
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	695a      	ldr	r2, [r3, #20]
 800c4e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4e4:	441a      	add	r2, r3
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	615a      	str	r2, [r3, #20]
          /* No bytes coped a the end of buffer */
          NbCopiedBytes = 0;
 800c4ea:	2300      	movs	r3, #0
 800c4ec:	627b      	str	r3, [r7, #36]	; 0x24
          /* all element to be copied at the begnning of buffer */
          NbBytesToCopy = elementSize; 
 800c4ee:	88fb      	ldrh	r3, [r7, #6]
 800c4f0:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Wrap */
          curBuffPosition = 0; 
 800c4f2:	2300      	movs	r3, #0
 800c4f4:	633b      	str	r3, [r7, #48]	; 0x30
          /* if variable size element, invalidate end of buffer setting OxFFFF in element header (size) */
          if (q->elementSize == 0)
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	891b      	ldrh	r3, [r3, #8]
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d16f      	bne.n	800c5de <CircularQueue_Add+0x3b2>
          {
            q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	681a      	ldr	r2, [r3, #0]
 800c502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c504:	1c59      	adds	r1, r3, #1
 800c506:	6339      	str	r1, [r7, #48]	; 0x30
 800c508:	4413      	add	r3, r2
 800c50a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c50c:	b2d2      	uxtb	r2, r2
 800c50e:	701a      	strb	r2, [r3, #0]
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800c510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c512:	0a18      	lsrs	r0, r3, #8
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	681a      	ldr	r2, [r3, #0]
 800c518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c51a:	1c59      	adds	r1, r3, #1
 800c51c:	6339      	str	r1, [r7, #48]	; 0x30
 800c51e:	4413      	add	r3, r2
 800c520:	b2c2      	uxtb	r2, r0
 800c522:	701a      	strb	r2, [r3, #0]
            q->byteCount += 2;   
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	695b      	ldr	r3, [r3, #20]
 800c528:	1c9a      	adds	r2, r3, #2
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	615a      	str	r2, [r3, #20]
 800c52e:	e056      	b.n	800c5de <CircularQueue_Add+0x3b2>
          } 
           
        }
        /* case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG option */
        else if (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	7f1b      	ldrb	r3, [r3, #28]
 800c534:	f003 0302 	and.w	r3, r3, #2
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d050      	beq.n	800c5de <CircularQueue_Add+0x3b2>
        {
          if (q->elementSize == 0)
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	891b      	ldrh	r3, [r3, #8]
 800c540:	2b00      	cmp	r3, #0
 800c542:	d14a      	bne.n	800c5da <CircularQueue_Add+0x3ae>
          {
            /* reset the size of current element to the nb bytes fitting at the end of buffer */
             q->qBuff[curBuffPosition-2] = NbBytesToCopy & 0xFF;
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	681a      	ldr	r2, [r3, #0]
 800c548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c54a:	3b02      	subs	r3, #2
 800c54c:	4413      	add	r3, r2
 800c54e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c550:	b2d2      	uxtb	r2, r2
 800c552:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800c554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c556:	0a19      	lsrs	r1, r3, #8
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	681a      	ldr	r2, [r3, #0]
 800c55c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c55e:	3b01      	subs	r3, #1
 800c560:	4413      	add	r3, r2
 800c562:	b2ca      	uxtb	r2, r1
 800c564:	701a      	strb	r2, [r3, #0]
             /* copy the bytes */ 
             memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	681a      	ldr	r2, [r3, #0]
 800c56a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c56c:	18d0      	adds	r0, r2, r3
 800c56e:	88fb      	ldrh	r3, [r7, #6]
 800c570:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c572:	fb02 f303 	mul.w	r3, r2, r3
 800c576:	68ba      	ldr	r2, [r7, #8]
 800c578:	4413      	add	r3, r2
 800c57a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c57c:	4619      	mov	r1, r3
 800c57e:	f001 f833 	bl	800d5e8 <memcpy>
             q->byteCount += NbBytesToCopy; 
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	695a      	ldr	r2, [r3, #20]
 800c586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c588:	441a      	add	r2, r3
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	615a      	str	r2, [r3, #20]
             /* set the number of copied bytes */
             NbCopiedBytes = NbBytesToCopy;             
 800c58e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c590:	627b      	str	r3, [r7, #36]	; 0x24
             /* set rest of data to be copied to begnning of buffer */
             NbBytesToCopy = elementSize - NbBytesToCopy;
 800c592:	88fa      	ldrh	r2, [r7, #6]
 800c594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c596:	1ad3      	subs	r3, r2, r3
 800c598:	62bb      	str	r3, [r7, #40]	; 0x28
             /* one element more dur to split in 2 elements */
             q->elementCount++;
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	699b      	ldr	r3, [r3, #24]
 800c59e:	1c5a      	adds	r2, r3, #1
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	619a      	str	r2, [r3, #24]
             /* Wrap */
             curBuffPosition = 0; 
 800c5a4:	2300      	movs	r3, #0
 800c5a6:	633b      	str	r3, [r7, #48]	; 0x30
             /* Set new size for rest of data */
             q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	681a      	ldr	r2, [r3, #0]
 800c5ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5ae:	1c59      	adds	r1, r3, #1
 800c5b0:	6339      	str	r1, [r7, #48]	; 0x30
 800c5b2:	4413      	add	r3, r2
 800c5b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c5b6:	b2d2      	uxtb	r2, r2
 800c5b8:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800c5ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5bc:	0a18      	lsrs	r0, r3, #8
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	681a      	ldr	r2, [r3, #0]
 800c5c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5c4:	1c59      	adds	r1, r3, #1
 800c5c6:	6339      	str	r1, [r7, #48]	; 0x30
 800c5c8:	4413      	add	r3, r2
 800c5ca:	b2c2      	uxtb	r2, r0
 800c5cc:	701a      	strb	r2, [r3, #0]
             q->byteCount += 2;              
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	695b      	ldr	r3, [r3, #20]
 800c5d2:	1c9a      	adds	r2, r3, #2
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	615a      	str	r2, [r3, #20]
 800c5d8:	e001      	b.n	800c5de <CircularQueue_Add+0x3b2>
          else
          {
            /* Should not occur */
            /* can not manage split Flag on Fixed size element */
            /* Buffer is corrupted */
            return NULL;
 800c5da:	2300      	movs	r3, #0
 800c5dc:	e049      	b.n	800c672 <CircularQueue_Add+0x446>
          }
        }
        curElementSize = (NbBytesToCopy) + elemSizeStorageRoom ;
 800c5de:	7ffb      	ldrb	r3, [r7, #31]
 800c5e0:	b29a      	uxth	r2, r3
 800c5e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5e4:	b29b      	uxth	r3, r3
 800c5e6:	4413      	add	r3, r2
 800c5e8:	86fb      	strh	r3, [r7, #54]	; 0x36
        q->last = 0;        
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	2200      	movs	r2, #0
 800c5ee:	611a      	str	r2, [r3, #16]
      }  
      
      /* some remaining byte to copy */
      if (NbBytesToCopy)      
 800c5f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d015      	beq.n	800c622 <CircularQueue_Add+0x3f6>
      {
        memcpy(&q->qBuff[curBuffPosition],&x[(i*elementSize)+NbCopiedBytes],NbBytesToCopy);
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	681a      	ldr	r2, [r3, #0]
 800c5fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5fc:	18d0      	adds	r0, r2, r3
 800c5fe:	88fb      	ldrh	r3, [r7, #6]
 800c600:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c602:	fb03 f202 	mul.w	r2, r3, r2
 800c606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c608:	4413      	add	r3, r2
 800c60a:	68ba      	ldr	r2, [r7, #8]
 800c60c:	4413      	add	r3, r2
 800c60e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c610:	4619      	mov	r1, r3
 800c612:	f000 ffe9 	bl	800d5e8 <memcpy>
        q->byteCount += NbBytesToCopy;
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	695a      	ldr	r2, [r3, #20]
 800c61a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c61c:	441a      	add	r2, r3
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	615a      	str	r2, [r3, #20]
      }      
      
      /* One more element */
      q->elementCount++;
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	699b      	ldr	r3, [r3, #24]
 800c626:	1c5a      	adds	r2, r3, #1
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	619a      	str	r2, [r3, #24]
    for (i=0; i < nbElements; i++) 
 800c62c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c62e:	3301      	adds	r3, #1
 800c630:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c632:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c634:	683b      	ldr	r3, [r7, #0]
 800c636:	429a      	cmp	r2, r3
 800c638:	f4ff aeb0 	bcc.w	800c39c <CircularQueue_Add+0x170>
    }
    
    ptr = q->qBuff + (MOD((q->last+elemSizeStorageRoom ),q->queueMaxSize));
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	681a      	ldr	r2, [r3, #0]
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	6919      	ldr	r1, [r3, #16]
 800c644:	7ffb      	ldrb	r3, [r7, #31]
 800c646:	4419      	add	r1, r3
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	685b      	ldr	r3, [r3, #4]
 800c64c:	4299      	cmp	r1, r3
 800c64e:	d307      	bcc.n	800c660 <CircularQueue_Add+0x434>
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	6919      	ldr	r1, [r3, #16]
 800c654:	7ffb      	ldrb	r3, [r7, #31]
 800c656:	4419      	add	r1, r3
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	685b      	ldr	r3, [r3, #4]
 800c65c:	1acb      	subs	r3, r1, r3
 800c65e:	e003      	b.n	800c668 <CircularQueue_Add+0x43c>
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	6919      	ldr	r1, [r3, #16]
 800c664:	7ffb      	ldrb	r3, [r7, #31]
 800c666:	440b      	add	r3, r1
 800c668:	4413      	add	r3, r2
 800c66a:	623b      	str	r3, [r7, #32]
  /* for Breakpoint only...to remove */
  else
  {
    return NULL;
  }
  return ptr;
 800c66c:	6a3b      	ldr	r3, [r7, #32]
 800c66e:	e000      	b.n	800c672 <CircularQueue_Add+0x446>
    return NULL;
 800c670:	2300      	movs	r3, #0
}
 800c672:	4618      	mov	r0, r3
 800c674:	3738      	adds	r7, #56	; 0x38
 800c676:	46bd      	mov	sp, r7
 800c678:	bd80      	pop	{r7, pc}

0800c67a <CircularQueue_Remove>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize: Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on removed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Remove(queue_t *q, uint16_t* elementSize)
{
 800c67a:	b480      	push	{r7}
 800c67c:	b085      	sub	sp, #20
 800c67e:	af00      	add	r7, sp, #0
 800c680:	6078      	str	r0, [r7, #4]
 800c682:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800c684:	2300      	movs	r3, #0
 800c686:	727b      	strb	r3, [r7, #9]
  uint8_t* ptr= NULL;
 800c688:	2300      	movs	r3, #0
 800c68a:	60fb      	str	r3, [r7, #12]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	891b      	ldrh	r3, [r3, #8]
 800c690:	2b00      	cmp	r3, #0
 800c692:	d101      	bne.n	800c698 <CircularQueue_Remove+0x1e>
 800c694:	2302      	movs	r3, #2
 800c696:	e000      	b.n	800c69a <CircularQueue_Remove+0x20>
 800c698:	2300      	movs	r3, #0
 800c69a:	727b      	strb	r3, [r7, #9]
  uint16_t eltSize = 0;
 800c69c:	2300      	movs	r3, #0
 800c69e:	817b      	strh	r3, [r7, #10]
  if (q->byteCount > 0) 
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	695b      	ldr	r3, [r3, #20]
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	f000 80cc 	beq.w	800c842 <CircularQueue_Remove+0x1c8>
  {
    /* retrieve element Size */
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	891b      	ldrh	r3, [r3, #8]
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d121      	bne.n	800c6f6 <CircularQueue_Remove+0x7c>
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	681a      	ldr	r2, [r3, #0]
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	68db      	ldr	r3, [r3, #12]
 800c6ba:	4413      	add	r3, r2
 800c6bc:	781b      	ldrb	r3, [r3, #0]
 800c6be:	b29a      	uxth	r2, r3
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	6819      	ldr	r1, [r3, #0]
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	68db      	ldr	r3, [r3, #12]
 800c6c8:	1c58      	adds	r0, r3, #1
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	685b      	ldr	r3, [r3, #4]
 800c6ce:	4298      	cmp	r0, r3
 800c6d0:	d306      	bcc.n	800c6e0 <CircularQueue_Remove+0x66>
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	68d8      	ldr	r0, [r3, #12]
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	685b      	ldr	r3, [r3, #4]
 800c6da:	1ac3      	subs	r3, r0, r3
 800c6dc:	3301      	adds	r3, #1
 800c6de:	e002      	b.n	800c6e6 <CircularQueue_Remove+0x6c>
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	68db      	ldr	r3, [r3, #12]
 800c6e4:	3301      	adds	r3, #1
 800c6e6:	440b      	add	r3, r1
 800c6e8:	781b      	ldrb	r3, [r3, #0]
 800c6ea:	b29b      	uxth	r3, r3
 800c6ec:	021b      	lsls	r3, r3, #8
 800c6ee:	b29b      	uxth	r3, r3
 800c6f0:	4413      	add	r3, r2
 800c6f2:	b29b      	uxth	r3, r3
 800c6f4:	e001      	b.n	800c6fa <CircularQueue_Remove+0x80>
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	891b      	ldrh	r3, [r3, #8]
 800c6fa:	817b      	strh	r3, [r7, #10]

     if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	7f1b      	ldrb	r3, [r3, #28]
 800c700:	f003 0301 	and.w	r3, r3, #1
 800c704:	2b00      	cmp	r3, #0
 800c706:	d057      	beq.n	800c7b8 <CircularQueue_Remove+0x13e>
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	7f1b      	ldrb	r3, [r3, #28]
 800c70c:	f003 0302 	and.w	r3, r3, #2
 800c710:	2b00      	cmp	r3, #0
 800c712:	d151      	bne.n	800c7b8 <CircularQueue_Remove+0x13e>
     {
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800c714:	897b      	ldrh	r3, [r7, #10]
 800c716:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c71a:	4293      	cmp	r3, r2
 800c71c:	d103      	bne.n	800c726 <CircularQueue_Remove+0xac>
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	891b      	ldrh	r3, [r3, #8]
 800c722:	2b00      	cmp	r3, #0
 800c724:	d012      	beq.n	800c74c <CircularQueue_Remove+0xd2>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	68da      	ldr	r2, [r3, #12]
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	691b      	ldr	r3, [r3, #16]
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800c72e:	429a      	cmp	r2, r3
 800c730:	d942      	bls.n	800c7b8 <CircularQueue_Remove+0x13e>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	891b      	ldrh	r3, [r3, #8]
 800c736:	2b00      	cmp	r3, #0
 800c738:	d03e      	beq.n	800c7b8 <CircularQueue_Remove+0x13e>
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	685a      	ldr	r2, [r3, #4]
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	68db      	ldr	r3, [r3, #12]
 800c742:	1ad3      	subs	r3, r2, r3
 800c744:	687a      	ldr	r2, [r7, #4]
 800c746:	8912      	ldrh	r2, [r2, #8]
 800c748:	4293      	cmp	r3, r2
 800c74a:	d235      	bcs.n	800c7b8 <CircularQueue_Remove+0x13e>
       {
          /* all data from current position up to the end of buffer are invalid */
          q->byteCount -= (q->queueMaxSize - q->first);
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	695a      	ldr	r2, [r3, #20]
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	68d9      	ldr	r1, [r3, #12]
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	685b      	ldr	r3, [r3, #4]
 800c758:	1acb      	subs	r3, r1, r3
 800c75a:	441a      	add	r2, r3
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	615a      	str	r2, [r3, #20]
          /* Adjust first element pos */
          q->first = 0;
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	2200      	movs	r2, #0
 800c764:	60da      	str	r2, [r3, #12]
          /* retrieve the right size after the wrap [if variable size element] */
          eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	891b      	ldrh	r3, [r3, #8]
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d121      	bne.n	800c7b2 <CircularQueue_Remove+0x138>
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	681a      	ldr	r2, [r3, #0]
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	68db      	ldr	r3, [r3, #12]
 800c776:	4413      	add	r3, r2
 800c778:	781b      	ldrb	r3, [r3, #0]
 800c77a:	b29a      	uxth	r2, r3
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	6819      	ldr	r1, [r3, #0]
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	68db      	ldr	r3, [r3, #12]
 800c784:	1c58      	adds	r0, r3, #1
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	685b      	ldr	r3, [r3, #4]
 800c78a:	4298      	cmp	r0, r3
 800c78c:	d306      	bcc.n	800c79c <CircularQueue_Remove+0x122>
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	68d8      	ldr	r0, [r3, #12]
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	685b      	ldr	r3, [r3, #4]
 800c796:	1ac3      	subs	r3, r0, r3
 800c798:	3301      	adds	r3, #1
 800c79a:	e002      	b.n	800c7a2 <CircularQueue_Remove+0x128>
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	68db      	ldr	r3, [r3, #12]
 800c7a0:	3301      	adds	r3, #1
 800c7a2:	440b      	add	r3, r1
 800c7a4:	781b      	ldrb	r3, [r3, #0]
 800c7a6:	b29b      	uxth	r3, r3
 800c7a8:	021b      	lsls	r3, r3, #8
 800c7aa:	b29b      	uxth	r3, r3
 800c7ac:	4413      	add	r3, r2
 800c7ae:	b29b      	uxth	r3, r3
 800c7b0:	e001      	b.n	800c7b6 <CircularQueue_Remove+0x13c>
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	891b      	ldrh	r3, [r3, #8]
 800c7b6:	817b      	strh	r3, [r7, #10]
       }
     }

    /* retrieve element */
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	681a      	ldr	r2, [r3, #0]
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	68d9      	ldr	r1, [r3, #12]
 800c7c0:	7a7b      	ldrb	r3, [r7, #9]
 800c7c2:	4419      	add	r1, r3
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	685b      	ldr	r3, [r3, #4]
 800c7c8:	4299      	cmp	r1, r3
 800c7ca:	d307      	bcc.n	800c7dc <CircularQueue_Remove+0x162>
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	68d9      	ldr	r1, [r3, #12]
 800c7d0:	7a7b      	ldrb	r3, [r7, #9]
 800c7d2:	4419      	add	r1, r3
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	685b      	ldr	r3, [r3, #4]
 800c7d8:	1acb      	subs	r3, r1, r3
 800c7da:	e003      	b.n	800c7e4 <CircularQueue_Remove+0x16a>
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	68d9      	ldr	r1, [r3, #12]
 800c7e0:	7a7b      	ldrb	r3, [r7, #9]
 800c7e2:	440b      	add	r3, r1
 800c7e4:	4413      	add	r3, r2
 800c7e6:	60fb      	str	r3, [r7, #12]

    /* adjust byte count */
    q->byteCount -= (eltSize + elemSizeStorageRoom) ;
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	695b      	ldr	r3, [r3, #20]
 800c7ec:	8979      	ldrh	r1, [r7, #10]
 800c7ee:	7a7a      	ldrb	r2, [r7, #9]
 800c7f0:	440a      	add	r2, r1
 800c7f2:	1a9a      	subs	r2, r3, r2
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	615a      	str	r2, [r3, #20]
    
    /* Adjust q->first */
    if (q->byteCount > 0)
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	695b      	ldr	r3, [r3, #20]
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d01b      	beq.n	800c838 <CircularQueue_Remove+0x1be>
    {
      q->first = MOD((q->first+ eltSize + elemSizeStorageRoom ), q->queueMaxSize);
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	68da      	ldr	r2, [r3, #12]
 800c804:	897b      	ldrh	r3, [r7, #10]
 800c806:	441a      	add	r2, r3
 800c808:	7a7b      	ldrb	r3, [r7, #9]
 800c80a:	441a      	add	r2, r3
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	685b      	ldr	r3, [r3, #4]
 800c810:	429a      	cmp	r2, r3
 800c812:	d309      	bcc.n	800c828 <CircularQueue_Remove+0x1ae>
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	68da      	ldr	r2, [r3, #12]
 800c818:	897b      	ldrh	r3, [r7, #10]
 800c81a:	441a      	add	r2, r3
 800c81c:	7a7b      	ldrb	r3, [r7, #9]
 800c81e:	441a      	add	r2, r3
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	685b      	ldr	r3, [r3, #4]
 800c824:	1ad3      	subs	r3, r2, r3
 800c826:	e005      	b.n	800c834 <CircularQueue_Remove+0x1ba>
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	68da      	ldr	r2, [r3, #12]
 800c82c:	897b      	ldrh	r3, [r7, #10]
 800c82e:	441a      	add	r2, r3
 800c830:	7a7b      	ldrb	r3, [r7, #9]
 800c832:	4413      	add	r3, r2
 800c834:	687a      	ldr	r2, [r7, #4]
 800c836:	60d3      	str	r3, [r2, #12]
    }    
    /* adjust element count */    
    --q->elementCount;    
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	699b      	ldr	r3, [r3, #24]
 800c83c:	1e5a      	subs	r2, r3, #1
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	619a      	str	r2, [r3, #24]
  }
  if (elementSize != NULL)
 800c842:	683b      	ldr	r3, [r7, #0]
 800c844:	2b00      	cmp	r3, #0
 800c846:	d002      	beq.n	800c84e <CircularQueue_Remove+0x1d4>
  {
    *elementSize = eltSize;
 800c848:	683b      	ldr	r3, [r7, #0]
 800c84a:	897a      	ldrh	r2, [r7, #10]
 800c84c:	801a      	strh	r2, [r3, #0]
  }
  return ptr;
 800c84e:	68fb      	ldr	r3, [r7, #12]
}
 800c850:	4618      	mov	r0, r3
 800c852:	3714      	adds	r7, #20
 800c854:	46bd      	mov	sp, r7
 800c856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c85a:	4770      	bx	lr

0800c85c <CircularQueue_Sense>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize:  Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on sensed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Sense(queue_t *q, uint16_t* elementSize)
{
 800c85c:	b480      	push	{r7}
 800c85e:	b087      	sub	sp, #28
 800c860:	af00      	add	r7, sp, #0
 800c862:	6078      	str	r0, [r7, #4]
 800c864:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800c866:	2300      	movs	r3, #0
 800c868:	72fb      	strb	r3, [r7, #11]
  uint8_t* x= NULL;
 800c86a:	2300      	movs	r3, #0
 800c86c:	617b      	str	r3, [r7, #20]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	891b      	ldrh	r3, [r3, #8]
 800c872:	2b00      	cmp	r3, #0
 800c874:	d101      	bne.n	800c87a <CircularQueue_Sense+0x1e>
 800c876:	2302      	movs	r3, #2
 800c878:	e000      	b.n	800c87c <CircularQueue_Sense+0x20>
 800c87a:	2300      	movs	r3, #0
 800c87c:	72fb      	strb	r3, [r7, #11]
  uint16_t eltSize = 0;
 800c87e:	2300      	movs	r3, #0
 800c880:	827b      	strh	r3, [r7, #18]
  uint32_t FirstElemetPos = 0;
 800c882:	2300      	movs	r3, #0
 800c884:	60fb      	str	r3, [r7, #12]
    
  if (q->byteCount > 0) 
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	695b      	ldr	r3, [r3, #20]
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	f000 8090 	beq.w	800c9b0 <CircularQueue_Sense+0x154>
  {
    FirstElemetPos = q->first;
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	68db      	ldr	r3, [r3, #12]
 800c894:	60fb      	str	r3, [r7, #12]
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	891b      	ldrh	r3, [r3, #8]
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d121      	bne.n	800c8e2 <CircularQueue_Sense+0x86>
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	681a      	ldr	r2, [r3, #0]
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	68db      	ldr	r3, [r3, #12]
 800c8a6:	4413      	add	r3, r2
 800c8a8:	781b      	ldrb	r3, [r3, #0]
 800c8aa:	b29a      	uxth	r2, r3
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	6819      	ldr	r1, [r3, #0]
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	68db      	ldr	r3, [r3, #12]
 800c8b4:	1c58      	adds	r0, r3, #1
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	685b      	ldr	r3, [r3, #4]
 800c8ba:	4298      	cmp	r0, r3
 800c8bc:	d306      	bcc.n	800c8cc <CircularQueue_Sense+0x70>
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	68d8      	ldr	r0, [r3, #12]
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	685b      	ldr	r3, [r3, #4]
 800c8c6:	1ac3      	subs	r3, r0, r3
 800c8c8:	3301      	adds	r3, #1
 800c8ca:	e002      	b.n	800c8d2 <CircularQueue_Sense+0x76>
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	68db      	ldr	r3, [r3, #12]
 800c8d0:	3301      	adds	r3, #1
 800c8d2:	440b      	add	r3, r1
 800c8d4:	781b      	ldrb	r3, [r3, #0]
 800c8d6:	b29b      	uxth	r3, r3
 800c8d8:	021b      	lsls	r3, r3, #8
 800c8da:	b29b      	uxth	r3, r3
 800c8dc:	4413      	add	r3, r2
 800c8de:	b29b      	uxth	r3, r3
 800c8e0:	e001      	b.n	800c8e6 <CircularQueue_Sense+0x8a>
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	891b      	ldrh	r3, [r3, #8]
 800c8e6:	827b      	strh	r3, [r7, #18]
    
    if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	7f1b      	ldrb	r3, [r3, #28]
 800c8ec:	f003 0301 	and.w	r3, r3, #1
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d048      	beq.n	800c986 <CircularQueue_Sense+0x12a>
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	7f1b      	ldrb	r3, [r3, #28]
 800c8f8:	f003 0302 	and.w	r3, r3, #2
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d142      	bne.n	800c986 <CircularQueue_Sense+0x12a>
    { 
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800c900:	8a7b      	ldrh	r3, [r7, #18]
 800c902:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c906:	4293      	cmp	r3, r2
 800c908:	d103      	bne.n	800c912 <CircularQueue_Sense+0xb6>
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	891b      	ldrh	r3, [r3, #8]
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d012      	beq.n	800c938 <CircularQueue_Sense+0xdc>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	68da      	ldr	r2, [r3, #12]
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	691b      	ldr	r3, [r3, #16]
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800c91a:	429a      	cmp	r2, r3
 800c91c:	d933      	bls.n	800c986 <CircularQueue_Sense+0x12a>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	891b      	ldrh	r3, [r3, #8]
 800c922:	2b00      	cmp	r3, #0
 800c924:	d02f      	beq.n	800c986 <CircularQueue_Sense+0x12a>
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	685a      	ldr	r2, [r3, #4]
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	68db      	ldr	r3, [r3, #12]
 800c92e:	1ad3      	subs	r3, r2, r3
 800c930:	687a      	ldr	r2, [r7, #4]
 800c932:	8912      	ldrh	r2, [r2, #8]
 800c934:	4293      	cmp	r3, r2
 800c936:	d226      	bcs.n	800c986 <CircularQueue_Sense+0x12a>

      {
        /* all data from current position up to the end of buffer are invalid */
        FirstElemetPos = 0; /* wrap to the begiining of buffer */
 800c938:	2300      	movs	r3, #0
 800c93a:	60fb      	str	r3, [r7, #12]

        /* retrieve the right size after the wrap [if variable size element] */
        eltSize = (q->elementSize == 0) ? q->qBuff[FirstElemetPos]+ ((q->qBuff[MOD((FirstElemetPos+1), q->queueMaxSize)])<<8) : q->elementSize;
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	891b      	ldrh	r3, [r3, #8]
 800c940:	2b00      	cmp	r3, #0
 800c942:	d11d      	bne.n	800c980 <CircularQueue_Sense+0x124>
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	681a      	ldr	r2, [r3, #0]
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	4413      	add	r3, r2
 800c94c:	781b      	ldrb	r3, [r3, #0]
 800c94e:	b29a      	uxth	r2, r3
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	6819      	ldr	r1, [r3, #0]
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	1c58      	adds	r0, r3, #1
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	685b      	ldr	r3, [r3, #4]
 800c95c:	4298      	cmp	r0, r3
 800c95e:	d305      	bcc.n	800c96c <CircularQueue_Sense+0x110>
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	685b      	ldr	r3, [r3, #4]
 800c964:	68f8      	ldr	r0, [r7, #12]
 800c966:	1ac3      	subs	r3, r0, r3
 800c968:	3301      	adds	r3, #1
 800c96a:	e001      	b.n	800c970 <CircularQueue_Sense+0x114>
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	3301      	adds	r3, #1
 800c970:	440b      	add	r3, r1
 800c972:	781b      	ldrb	r3, [r3, #0]
 800c974:	b29b      	uxth	r3, r3
 800c976:	021b      	lsls	r3, r3, #8
 800c978:	b29b      	uxth	r3, r3
 800c97a:	4413      	add	r3, r2
 800c97c:	b29b      	uxth	r3, r3
 800c97e:	e001      	b.n	800c984 <CircularQueue_Sense+0x128>
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	891b      	ldrh	r3, [r3, #8]
 800c984:	827b      	strh	r3, [r7, #18]
      }
   }
   /* retrieve element */
    x = q->qBuff + (MOD((FirstElemetPos + elemSizeStorageRoom), q->queueMaxSize));
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	681a      	ldr	r2, [r3, #0]
 800c98a:	7af9      	ldrb	r1, [r7, #11]
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	4419      	add	r1, r3
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	685b      	ldr	r3, [r3, #4]
 800c994:	4299      	cmp	r1, r3
 800c996:	d306      	bcc.n	800c9a6 <CircularQueue_Sense+0x14a>
 800c998:	7af9      	ldrb	r1, [r7, #11]
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	4419      	add	r1, r3
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	685b      	ldr	r3, [r3, #4]
 800c9a2:	1acb      	subs	r3, r1, r3
 800c9a4:	e002      	b.n	800c9ac <CircularQueue_Sense+0x150>
 800c9a6:	7af9      	ldrb	r1, [r7, #11]
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	440b      	add	r3, r1
 800c9ac:	4413      	add	r3, r2
 800c9ae:	617b      	str	r3, [r7, #20]
  }
  if (elementSize != NULL)
 800c9b0:	683b      	ldr	r3, [r7, #0]
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d002      	beq.n	800c9bc <CircularQueue_Sense+0x160>
  {
    *elementSize = eltSize;
 800c9b6:	683b      	ldr	r3, [r7, #0]
 800c9b8:	8a7a      	ldrh	r2, [r7, #18]
 800c9ba:	801a      	strh	r2, [r3, #0]
  }
  return x;
 800c9bc:	697b      	ldr	r3, [r7, #20]
}
 800c9be:	4618      	mov	r0, r3
 800c9c0:	371c      	adds	r7, #28
 800c9c2:	46bd      	mov	sp, r7
 800c9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9c8:	4770      	bx	lr

0800c9ca <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 800c9ca:	b480      	push	{r7}
 800c9cc:	af00      	add	r7, sp, #0
  return;
 800c9ce:	bf00      	nop
}
 800c9d0:	46bd      	mov	sp, r7
 800c9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9d6:	4770      	bx	lr

0800c9d8 <BLS_Init>:

__WEAK void BLS_Init( void )
{
 800c9d8:	b480      	push	{r7}
 800c9da:	af00      	add	r7, sp, #0
  return;
 800c9dc:	bf00      	nop
}
 800c9de:	46bd      	mov	sp, r7
 800c9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9e4:	4770      	bx	lr

0800c9e6 <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 800c9e6:	b480      	push	{r7}
 800c9e8:	af00      	add	r7, sp, #0
  return;
 800c9ea:	bf00      	nop
}
 800c9ec:	46bd      	mov	sp, r7
 800c9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9f2:	4770      	bx	lr

0800c9f4 <DIS_Init>:
__WEAK void DIS_Init( void )
{
 800c9f4:	b480      	push	{r7}
 800c9f6:	af00      	add	r7, sp, #0
  return;
 800c9f8:	bf00      	nop
}
 800c9fa:	46bd      	mov	sp, r7
 800c9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca00:	4770      	bx	lr

0800ca02 <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 800ca02:	b480      	push	{r7}
 800ca04:	af00      	add	r7, sp, #0
  return;
 800ca06:	bf00      	nop
}
 800ca08:	46bd      	mov	sp, r7
 800ca0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca0e:	4770      	bx	lr

0800ca10 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 800ca10:	b480      	push	{r7}
 800ca12:	af00      	add	r7, sp, #0
  return;
 800ca14:	bf00      	nop
}
 800ca16:	46bd      	mov	sp, r7
 800ca18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca1c:	4770      	bx	lr

0800ca1e <HRS_Init>:
__WEAK void HRS_Init( void )
{
 800ca1e:	b480      	push	{r7}
 800ca20:	af00      	add	r7, sp, #0
  return;
 800ca22:	bf00      	nop
}
 800ca24:	46bd      	mov	sp, r7
 800ca26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca2a:	4770      	bx	lr

0800ca2c <HTS_Init>:
__WEAK void HTS_Init( void )
{
 800ca2c:	b480      	push	{r7}
 800ca2e:	af00      	add	r7, sp, #0
  return;
 800ca30:	bf00      	nop
}
 800ca32:	46bd      	mov	sp, r7
 800ca34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca38:	4770      	bx	lr

0800ca3a <IAS_Init>:
__WEAK void IAS_Init( void )
{
 800ca3a:	b480      	push	{r7}
 800ca3c:	af00      	add	r7, sp, #0
  return;
 800ca3e:	bf00      	nop
}
 800ca40:	46bd      	mov	sp, r7
 800ca42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca46:	4770      	bx	lr

0800ca48 <LLS_Init>:
__WEAK void LLS_Init( void )
{
 800ca48:	b480      	push	{r7}
 800ca4a:	af00      	add	r7, sp, #0
  return;
 800ca4c:	bf00      	nop
}
 800ca4e:	46bd      	mov	sp, r7
 800ca50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca54:	4770      	bx	lr

0800ca56 <TPS_Init>:
__WEAK void TPS_Init( void )
{
 800ca56:	b480      	push	{r7}
 800ca58:	af00      	add	r7, sp, #0
  return;
 800ca5a:	bf00      	nop
}
 800ca5c:	46bd      	mov	sp, r7
 800ca5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca62:	4770      	bx	lr

0800ca64 <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 800ca64:	b480      	push	{r7}
 800ca66:	af00      	add	r7, sp, #0
  return;
 800ca68:	bf00      	nop
}
 800ca6a:	46bd      	mov	sp, r7
 800ca6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca70:	4770      	bx	lr

0800ca72 <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 800ca72:	b480      	push	{r7}
 800ca74:	af00      	add	r7, sp, #0
  return;
 800ca76:	bf00      	nop
}
 800ca78:	46bd      	mov	sp, r7
 800ca7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca7e:	4770      	bx	lr

0800ca80 <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 800ca80:	b480      	push	{r7}
 800ca82:	af00      	add	r7, sp, #0
  return;
 800ca84:	bf00      	nop
}
 800ca86:	46bd      	mov	sp, r7
 800ca88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca8c:	4770      	bx	lr

0800ca8e <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 800ca8e:	b480      	push	{r7}
 800ca90:	af00      	add	r7, sp, #0
  return;
 800ca92:	bf00      	nop
}
 800ca94:	46bd      	mov	sp, r7
 800ca96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca9a:	4770      	bx	lr

0800ca9c <MESH_Init>:
__WEAK void MESH_Init( void )
{
 800ca9c:	b480      	push	{r7}
 800ca9e:	af00      	add	r7, sp, #0
  return;
 800caa0:	bf00      	nop
}
 800caa2:	46bd      	mov	sp, r7
 800caa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caa8:	4770      	bx	lr

0800caaa <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 800caaa:	b480      	push	{r7}
 800caac:	af00      	add	r7, sp, #0
  return;
 800caae:	bf00      	nop
}
 800cab0:	46bd      	mov	sp, r7
 800cab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cab6:	4770      	bx	lr

0800cab8 <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 800cab8:	b580      	push	{r7, lr}
 800caba:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 800cabc:	4b04      	ldr	r3, [pc, #16]	; (800cad0 <SVCCTL_Init+0x18>)
 800cabe:	2200      	movs	r2, #0
 800cac0:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 800cac2:	4b04      	ldr	r3, [pc, #16]	; (800cad4 <SVCCTL_Init+0x1c>)
 800cac4:	2200      	movs	r2, #0
 800cac6:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 800cac8:	f000 f806 	bl	800cad8 <SVCCTL_SvcInit>

  return;
 800cacc:	bf00      	nop
}
 800cace:	bd80      	pop	{r7, pc}
 800cad0:	2000023c 	.word	0x2000023c
 800cad4:	2000025c 	.word	0x2000025c

0800cad8 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 800cad8:	b580      	push	{r7, lr}
 800cada:	af00      	add	r7, sp, #0
  BAS_Init();
 800cadc:	f7ff ff75 	bl	800c9ca <BAS_Init>

  BLS_Init();
 800cae0:	f7ff ff7a 	bl	800c9d8 <BLS_Init>

  CRS_STM_Init();
 800cae4:	f7ff ff7f 	bl	800c9e6 <CRS_STM_Init>

  DIS_Init();
 800cae8:	f7ff ff84 	bl	800c9f4 <DIS_Init>

  EDS_STM_Init();
 800caec:	f7ff ff89 	bl	800ca02 <EDS_STM_Init>

  HIDS_Init();
 800caf0:	f7ff ff8e 	bl	800ca10 <HIDS_Init>

  HRS_Init();
 800caf4:	f7ff ff93 	bl	800ca1e <HRS_Init>

  HTS_Init();
 800caf8:	f7ff ff98 	bl	800ca2c <HTS_Init>

  IAS_Init();
 800cafc:	f7ff ff9d 	bl	800ca3a <IAS_Init>

  LLS_Init();
 800cb00:	f7ff ffa2 	bl	800ca48 <LLS_Init>

  TPS_Init();
 800cb04:	f7ff ffa7 	bl	800ca56 <TPS_Init>

  MOTENV_STM_Init();
 800cb08:	f7ff ffac 	bl	800ca64 <MOTENV_STM_Init>

  P2PS_STM_Init();
 800cb0c:	f7ff ffb1 	bl	800ca72 <P2PS_STM_Init>

  ZDD_STM_Init();
 800cb10:	f7ff ffb6 	bl	800ca80 <ZDD_STM_Init>

  OTAS_STM_Init();
 800cb14:	f7ff ffbb 	bl	800ca8e <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 800cb18:	f7ff ffc7 	bl	800caaa <BVOPUS_STM_Init>

  MESH_Init();
 800cb1c:	f7ff ffbe 	bl	800ca9c <MESH_Init>

  SVCCTL_InitCustomSvc();
 800cb20:	f7f7 fc4a 	bl	80043b8 <SVCCTL_InitCustomSvc>
  
  return;
 800cb24:	bf00      	nop
}
 800cb26:	bd80      	pop	{r7, pc}

0800cb28 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 800cb28:	b480      	push	{r7}
 800cb2a:	b083      	sub	sp, #12
 800cb2c:	af00      	add	r7, sp, #0
 800cb2e:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 800cb30:	4b09      	ldr	r3, [pc, #36]	; (800cb58 <SVCCTL_RegisterSvcHandler+0x30>)
 800cb32:	7f1b      	ldrb	r3, [r3, #28]
 800cb34:	4619      	mov	r1, r3
 800cb36:	4a08      	ldr	r2, [pc, #32]	; (800cb58 <SVCCTL_RegisterSvcHandler+0x30>)
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 800cb3e:	4b06      	ldr	r3, [pc, #24]	; (800cb58 <SVCCTL_RegisterSvcHandler+0x30>)
 800cb40:	7f1b      	ldrb	r3, [r3, #28]
 800cb42:	3301      	adds	r3, #1
 800cb44:	b2da      	uxtb	r2, r3
 800cb46:	4b04      	ldr	r3, [pc, #16]	; (800cb58 <SVCCTL_RegisterSvcHandler+0x30>)
 800cb48:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 800cb4a:	bf00      	nop
}
 800cb4c:	370c      	adds	r7, #12
 800cb4e:	46bd      	mov	sp, r7
 800cb50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb54:	4770      	bx	lr
 800cb56:	bf00      	nop
 800cb58:	2000023c 	.word	0x2000023c

0800cb5c <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 800cb5c:	b580      	push	{r7, lr}
 800cb5e:	b086      	sub	sp, #24
 800cb60:	af00      	add	r7, sp, #0
 800cb62:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	3301      	adds	r3, #1
 800cb68:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 800cb6a:	2300      	movs	r3, #0
 800cb6c:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 800cb6e:	693b      	ldr	r3, [r7, #16]
 800cb70:	781b      	ldrb	r3, [r3, #0]
 800cb72:	2bff      	cmp	r3, #255	; 0xff
 800cb74:	d125      	bne.n	800cbc2 <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 800cb76:	693b      	ldr	r3, [r7, #16]
 800cb78:	3302      	adds	r3, #2
 800cb7a:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	881b      	ldrh	r3, [r3, #0]
 800cb80:	b29b      	uxth	r3, r3
 800cb82:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800cb86:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800cb8a:	d118      	bne.n	800cbbe <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800cb8c:	2300      	movs	r3, #0
 800cb8e:	757b      	strb	r3, [r7, #21]
 800cb90:	e00d      	b.n	800cbae <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 800cb92:	7d7b      	ldrb	r3, [r7, #21]
 800cb94:	4a1a      	ldr	r2, [pc, #104]	; (800cc00 <SVCCTL_UserEvtRx+0xa4>)
 800cb96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cb9a:	6878      	ldr	r0, [r7, #4]
 800cb9c:	4798      	blx	r3
 800cb9e:	4603      	mov	r3, r0
 800cba0:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 800cba2:	7dfb      	ldrb	r3, [r7, #23]
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d108      	bne.n	800cbba <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800cba8:	7d7b      	ldrb	r3, [r7, #21]
 800cbaa:	3301      	adds	r3, #1
 800cbac:	757b      	strb	r3, [r7, #21]
 800cbae:	4b14      	ldr	r3, [pc, #80]	; (800cc00 <SVCCTL_UserEvtRx+0xa4>)
 800cbb0:	7f1b      	ldrb	r3, [r3, #28]
 800cbb2:	7d7a      	ldrb	r2, [r7, #21]
 800cbb4:	429a      	cmp	r2, r3
 800cbb6:	d3ec      	bcc.n	800cb92 <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 800cbb8:	e002      	b.n	800cbc0 <SVCCTL_UserEvtRx+0x64>
              break;
 800cbba:	bf00      	nop
          break;
 800cbbc:	e000      	b.n	800cbc0 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 800cbbe:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 800cbc0:	e000      	b.n	800cbc4 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 800cbc2:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 800cbc4:	7dfb      	ldrb	r3, [r7, #23]
 800cbc6:	2b02      	cmp	r3, #2
 800cbc8:	d00f      	beq.n	800cbea <SVCCTL_UserEvtRx+0x8e>
 800cbca:	2b02      	cmp	r3, #2
 800cbcc:	dc10      	bgt.n	800cbf0 <SVCCTL_UserEvtRx+0x94>
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d002      	beq.n	800cbd8 <SVCCTL_UserEvtRx+0x7c>
 800cbd2:	2b01      	cmp	r3, #1
 800cbd4:	d006      	beq.n	800cbe4 <SVCCTL_UserEvtRx+0x88>
 800cbd6:	e00b      	b.n	800cbf0 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 800cbd8:	6878      	ldr	r0, [r7, #4]
 800cbda:	f7f6 fc4f 	bl	800347c <SVCCTL_App_Notification>
 800cbde:	4603      	mov	r3, r0
 800cbe0:	75bb      	strb	r3, [r7, #22]
      break;
 800cbe2:	e008      	b.n	800cbf6 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 800cbe4:	2301      	movs	r3, #1
 800cbe6:	75bb      	strb	r3, [r7, #22]
      break;
 800cbe8:	e005      	b.n	800cbf6 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 800cbea:	2300      	movs	r3, #0
 800cbec:	75bb      	strb	r3, [r7, #22]
      break;
 800cbee:	e002      	b.n	800cbf6 <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 800cbf0:	2301      	movs	r3, #1
 800cbf2:	75bb      	strb	r3, [r7, #22]
      break;
 800cbf4:	bf00      	nop
  }

  return (return_status);
 800cbf6:	7dbb      	ldrb	r3, [r7, #22]
}
 800cbf8:	4618      	mov	r0, r3
 800cbfa:	3718      	adds	r7, #24
 800cbfc:	46bd      	mov	sp, r7
 800cbfe:	bd80      	pop	{r7, pc}
 800cc00:	2000023c 	.word	0x2000023c

0800cc04 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 800cc04:	b580      	push	{r7, lr}
 800cc06:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800cc08:	f7f7 ffa8 	bl	8004b5c <HW_IPCC_Enable>

  return;
 800cc0c:	bf00      	nop
}
 800cc0e:	bd80      	pop	{r7, pc}

0800cc10 <TL_Init>:


void TL_Init( void )
{
 800cc10:	b580      	push	{r7, lr}
 800cc12:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800cc14:	4b10      	ldr	r3, [pc, #64]	; (800cc58 <TL_Init+0x48>)
 800cc16:	4a11      	ldr	r2, [pc, #68]	; (800cc5c <TL_Init+0x4c>)
 800cc18:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800cc1a:	4b0f      	ldr	r3, [pc, #60]	; (800cc58 <TL_Init+0x48>)
 800cc1c:	4a10      	ldr	r2, [pc, #64]	; (800cc60 <TL_Init+0x50>)
 800cc1e:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800cc20:	4b0d      	ldr	r3, [pc, #52]	; (800cc58 <TL_Init+0x48>)
 800cc22:	4a10      	ldr	r2, [pc, #64]	; (800cc64 <TL_Init+0x54>)
 800cc24:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800cc26:	4b0c      	ldr	r3, [pc, #48]	; (800cc58 <TL_Init+0x48>)
 800cc28:	4a0f      	ldr	r2, [pc, #60]	; (800cc68 <TL_Init+0x58>)
 800cc2a:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 800cc2c:	4b0a      	ldr	r3, [pc, #40]	; (800cc58 <TL_Init+0x48>)
 800cc2e:	4a0f      	ldr	r2, [pc, #60]	; (800cc6c <TL_Init+0x5c>)
 800cc30:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 800cc32:	4b09      	ldr	r3, [pc, #36]	; (800cc58 <TL_Init+0x48>)
 800cc34:	4a0e      	ldr	r2, [pc, #56]	; (800cc70 <TL_Init+0x60>)
 800cc36:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800cc38:	4b07      	ldr	r3, [pc, #28]	; (800cc58 <TL_Init+0x48>)
 800cc3a:	4a0e      	ldr	r2, [pc, #56]	; (800cc74 <TL_Init+0x64>)
 800cc3c:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800cc3e:	4b06      	ldr	r3, [pc, #24]	; (800cc58 <TL_Init+0x48>)
 800cc40:	4a0d      	ldr	r2, [pc, #52]	; (800cc78 <TL_Init+0x68>)
 800cc42:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800cc44:	4b04      	ldr	r3, [pc, #16]	; (800cc58 <TL_Init+0x48>)
 800cc46:	4a0d      	ldr	r2, [pc, #52]	; (800cc7c <TL_Init+0x6c>)
 800cc48:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800cc4a:	4b03      	ldr	r3, [pc, #12]	; (800cc58 <TL_Init+0x48>)
 800cc4c:	4a0c      	ldr	r2, [pc, #48]	; (800cc80 <TL_Init+0x70>)
 800cc4e:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800cc50:	f7f7 ff98 	bl	8004b84 <HW_IPCC_Init>

  return;
 800cc54:	bf00      	nop
}
 800cc56:	bd80      	pop	{r7, pc}
 800cc58:	20030000 	.word	0x20030000
 800cc5c:	20030134 	.word	0x20030134
 800cc60:	20030154 	.word	0x20030154
 800cc64:	20030164 	.word	0x20030164
 800cc68:	20030174 	.word	0x20030174
 800cc6c:	2003017c 	.word	0x2003017c
 800cc70:	20030184 	.word	0x20030184
 800cc74:	2003018c 	.word	0x2003018c
 800cc78:	200301a8 	.word	0x200301a8
 800cc7c:	200301ac 	.word	0x200301ac
 800cc80:	200301b8 	.word	0x200301b8

0800cc84 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 800cc84:	b580      	push	{r7, lr}
 800cc86:	b084      	sub	sp, #16
 800cc88:	af00      	add	r7, sp, #0
 800cc8a:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 800cc90:	4811      	ldr	r0, [pc, #68]	; (800ccd8 <TL_BLE_Init+0x54>)
 800cc92:	f7ff f9db 	bl	800c04c <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 800cc96:	4b11      	ldr	r3, [pc, #68]	; (800ccdc <TL_BLE_Init+0x58>)
 800cc98:	685b      	ldr	r3, [r3, #4]
 800cc9a:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	689a      	ldr	r2, [r3, #8]
 800cca0:	68bb      	ldr	r3, [r7, #8]
 800cca2:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	68da      	ldr	r2, [r3, #12]
 800cca8:	68bb      	ldr	r3, [r7, #8]
 800ccaa:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 800ccac:	68bb      	ldr	r3, [r7, #8]
 800ccae:	4a0c      	ldr	r2, [pc, #48]	; (800cce0 <TL_BLE_Init+0x5c>)
 800ccb0:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 800ccb2:	68bb      	ldr	r3, [r7, #8]
 800ccb4:	4a08      	ldr	r2, [pc, #32]	; (800ccd8 <TL_BLE_Init+0x54>)
 800ccb6:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 800ccb8:	f7f7 ff7a 	bl	8004bb0 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 800ccbc:	68fb      	ldr	r3, [r7, #12]
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	4a08      	ldr	r2, [pc, #32]	; (800cce4 <TL_BLE_Init+0x60>)
 800ccc2:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	685b      	ldr	r3, [r3, #4]
 800ccc8:	4a07      	ldr	r2, [pc, #28]	; (800cce8 <TL_BLE_Init+0x64>)
 800ccca:	6013      	str	r3, [r2, #0]

  return 0;
 800cccc:	2300      	movs	r3, #0
}
 800ccce:	4618      	mov	r0, r3
 800ccd0:	3710      	adds	r7, #16
 800ccd2:	46bd      	mov	sp, r7
 800ccd4:	bd80      	pop	{r7, pc}
 800ccd6:	bf00      	nop
 800ccd8:	200301d4 	.word	0x200301d4
 800ccdc:	20030000 	.word	0x20030000
 800cce0:	20030a58 	.word	0x20030a58
 800cce4:	200019dc 	.word	0x200019dc
 800cce8:	200019e0 	.word	0x200019e0

0800ccec <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 800ccec:	b580      	push	{r7, lr}
 800ccee:	b082      	sub	sp, #8
 800ccf0:	af00      	add	r7, sp, #0
 800ccf2:	6078      	str	r0, [r7, #4]
 800ccf4:	460b      	mov	r3, r1
 800ccf6:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 800ccf8:	4b09      	ldr	r3, [pc, #36]	; (800cd20 <TL_BLE_SendCmd+0x34>)
 800ccfa:	685b      	ldr	r3, [r3, #4]
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	2201      	movs	r2, #1
 800cd00:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 800cd02:	4b07      	ldr	r3, [pc, #28]	; (800cd20 <TL_BLE_SendCmd+0x34>)
 800cd04:	685b      	ldr	r3, [r3, #4]
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	4619      	mov	r1, r3
 800cd0a:	2001      	movs	r0, #1
 800cd0c:	f000 f96c 	bl	800cfe8 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 800cd10:	f7f7 ff58 	bl	8004bc4 <HW_IPCC_BLE_SendCmd>

  return 0;
 800cd14:	2300      	movs	r3, #0
}
 800cd16:	4618      	mov	r0, r3
 800cd18:	3708      	adds	r7, #8
 800cd1a:	46bd      	mov	sp, r7
 800cd1c:	bd80      	pop	{r7, pc}
 800cd1e:	bf00      	nop
 800cd20:	20030000 	.word	0x20030000

0800cd24 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 800cd24:	b580      	push	{r7, lr}
 800cd26:	b082      	sub	sp, #8
 800cd28:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800cd2a:	e01c      	b.n	800cd66 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800cd2c:	1d3b      	adds	r3, r7, #4
 800cd2e:	4619      	mov	r1, r3
 800cd30:	4812      	ldr	r0, [pc, #72]	; (800cd7c <HW_IPCC_BLE_RxEvtNot+0x58>)
 800cd32:	f7ff fa2a 	bl	800c18a <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	7a5b      	ldrb	r3, [r3, #9]
 800cd3a:	2b0f      	cmp	r3, #15
 800cd3c:	d003      	beq.n	800cd46 <HW_IPCC_BLE_RxEvtNot+0x22>
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	7a5b      	ldrb	r3, [r3, #9]
 800cd42:	2b0e      	cmp	r3, #14
 800cd44:	d105      	bne.n	800cd52 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	4619      	mov	r1, r3
 800cd4a:	2002      	movs	r0, #2
 800cd4c:	f000 f94c 	bl	800cfe8 <OutputDbgTrace>
 800cd50:	e004      	b.n	800cd5c <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	4619      	mov	r1, r3
 800cd56:	2003      	movs	r0, #3
 800cd58:	f000 f946 	bl	800cfe8 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 800cd5c:	4b08      	ldr	r3, [pc, #32]	; (800cd80 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	687a      	ldr	r2, [r7, #4]
 800cd62:	4610      	mov	r0, r2
 800cd64:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800cd66:	4805      	ldr	r0, [pc, #20]	; (800cd7c <HW_IPCC_BLE_RxEvtNot+0x58>)
 800cd68:	f7ff f980 	bl	800c06c <LST_is_empty>
 800cd6c:	4603      	mov	r3, r0
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d0dc      	beq.n	800cd2c <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800cd72:	bf00      	nop
}
 800cd74:	3708      	adds	r7, #8
 800cd76:	46bd      	mov	sp, r7
 800cd78:	bd80      	pop	{r7, pc}
 800cd7a:	bf00      	nop
 800cd7c:	200301d4 	.word	0x200301d4
 800cd80:	200019dc 	.word	0x200019dc

0800cd84 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800cd84:	b580      	push	{r7, lr}
 800cd86:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800cd88:	4b02      	ldr	r3, [pc, #8]	; (800cd94 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	4798      	blx	r3

  return;
 800cd8e:	bf00      	nop
}
 800cd90:	bd80      	pop	{r7, pc}
 800cd92:	bf00      	nop
 800cd94:	200019e0 	.word	0x200019e0

0800cd98 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800cd98:	b580      	push	{r7, lr}
 800cd9a:	b084      	sub	sp, #16
 800cd9c:	af00      	add	r7, sp, #0
 800cd9e:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800cda4:	480d      	ldr	r0, [pc, #52]	; (800cddc <TL_SYS_Init+0x44>)
 800cda6:	f7ff f951 	bl	800c04c <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800cdaa:	4b0d      	ldr	r3, [pc, #52]	; (800cde0 <TL_SYS_Init+0x48>)
 800cdac:	68db      	ldr	r3, [r3, #12]
 800cdae:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	689a      	ldr	r2, [r3, #8]
 800cdb4:	68bb      	ldr	r3, [r7, #8]
 800cdb6:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800cdb8:	68bb      	ldr	r3, [r7, #8]
 800cdba:	4a08      	ldr	r2, [pc, #32]	; (800cddc <TL_SYS_Init+0x44>)
 800cdbc:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800cdbe:	f7f7 ff23 	bl	8004c08 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	4a07      	ldr	r2, [pc, #28]	; (800cde4 <TL_SYS_Init+0x4c>)
 800cdc8:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	685b      	ldr	r3, [r3, #4]
 800cdce:	4a06      	ldr	r2, [pc, #24]	; (800cde8 <TL_SYS_Init+0x50>)
 800cdd0:	6013      	str	r3, [r2, #0]

  return 0;
 800cdd2:	2300      	movs	r3, #0
}
 800cdd4:	4618      	mov	r0, r3
 800cdd6:	3710      	adds	r7, #16
 800cdd8:	46bd      	mov	sp, r7
 800cdda:	bd80      	pop	{r7, pc}
 800cddc:	200301dc 	.word	0x200301dc
 800cde0:	20030000 	.word	0x20030000
 800cde4:	200019e4 	.word	0x200019e4
 800cde8:	200019e8 	.word	0x200019e8

0800cdec <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800cdec:	b580      	push	{r7, lr}
 800cdee:	b082      	sub	sp, #8
 800cdf0:	af00      	add	r7, sp, #0
 800cdf2:	6078      	str	r0, [r7, #4]
 800cdf4:	460b      	mov	r3, r1
 800cdf6:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800cdf8:	4b09      	ldr	r3, [pc, #36]	; (800ce20 <TL_SYS_SendCmd+0x34>)
 800cdfa:	68db      	ldr	r3, [r3, #12]
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	2210      	movs	r2, #16
 800ce00:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 800ce02:	4b07      	ldr	r3, [pc, #28]	; (800ce20 <TL_SYS_SendCmd+0x34>)
 800ce04:	68db      	ldr	r3, [r3, #12]
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	4619      	mov	r1, r3
 800ce0a:	2004      	movs	r0, #4
 800ce0c:	f000 f8ec 	bl	800cfe8 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 800ce10:	f7f7 ff04 	bl	8004c1c <HW_IPCC_SYS_SendCmd>

  return 0;
 800ce14:	2300      	movs	r3, #0
}
 800ce16:	4618      	mov	r0, r3
 800ce18:	3708      	adds	r7, #8
 800ce1a:	46bd      	mov	sp, r7
 800ce1c:	bd80      	pop	{r7, pc}
 800ce1e:	bf00      	nop
 800ce20:	20030000 	.word	0x20030000

0800ce24 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800ce24:	b580      	push	{r7, lr}
 800ce26:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800ce28:	4b07      	ldr	r3, [pc, #28]	; (800ce48 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800ce2a:	68db      	ldr	r3, [r3, #12]
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	4619      	mov	r1, r3
 800ce30:	2005      	movs	r0, #5
 800ce32:	f000 f8d9 	bl	800cfe8 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800ce36:	4b05      	ldr	r3, [pc, #20]	; (800ce4c <HW_IPCC_SYS_CmdEvtNot+0x28>)
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	4a03      	ldr	r2, [pc, #12]	; (800ce48 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800ce3c:	68d2      	ldr	r2, [r2, #12]
 800ce3e:	6812      	ldr	r2, [r2, #0]
 800ce40:	4610      	mov	r0, r2
 800ce42:	4798      	blx	r3

  return;
 800ce44:	bf00      	nop
}
 800ce46:	bd80      	pop	{r7, pc}
 800ce48:	20030000 	.word	0x20030000
 800ce4c:	200019e4 	.word	0x200019e4

0800ce50 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800ce50:	b580      	push	{r7, lr}
 800ce52:	b082      	sub	sp, #8
 800ce54:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800ce56:	e00e      	b.n	800ce76 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800ce58:	1d3b      	adds	r3, r7, #4
 800ce5a:	4619      	mov	r1, r3
 800ce5c:	480b      	ldr	r0, [pc, #44]	; (800ce8c <HW_IPCC_SYS_EvtNot+0x3c>)
 800ce5e:	f7ff f994 	bl	800c18a <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	4619      	mov	r1, r3
 800ce66:	2006      	movs	r0, #6
 800ce68:	f000 f8be 	bl	800cfe8 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 800ce6c:	4b08      	ldr	r3, [pc, #32]	; (800ce90 <HW_IPCC_SYS_EvtNot+0x40>)
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	687a      	ldr	r2, [r7, #4]
 800ce72:	4610      	mov	r0, r2
 800ce74:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800ce76:	4805      	ldr	r0, [pc, #20]	; (800ce8c <HW_IPCC_SYS_EvtNot+0x3c>)
 800ce78:	f7ff f8f8 	bl	800c06c <LST_is_empty>
 800ce7c:	4603      	mov	r3, r0
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d0ea      	beq.n	800ce58 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800ce82:	bf00      	nop
}
 800ce84:	3708      	adds	r7, #8
 800ce86:	46bd      	mov	sp, r7
 800ce88:	bd80      	pop	{r7, pc}
 800ce8a:	bf00      	nop
 800ce8c:	200301dc 	.word	0x200301dc
 800ce90:	200019e8 	.word	0x200019e8

0800ce94 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800ce94:	b580      	push	{r7, lr}
 800ce96:	b082      	sub	sp, #8
 800ce98:	af00      	add	r7, sp, #0
 800ce9a:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800ce9c:	4817      	ldr	r0, [pc, #92]	; (800cefc <TL_MM_Init+0x68>)
 800ce9e:	f7ff f8d5 	bl	800c04c <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800cea2:	4817      	ldr	r0, [pc, #92]	; (800cf00 <TL_MM_Init+0x6c>)
 800cea4:	f7ff f8d2 	bl	800c04c <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800cea8:	4b16      	ldr	r3, [pc, #88]	; (800cf04 <TL_MM_Init+0x70>)
 800ceaa:	691b      	ldr	r3, [r3, #16]
 800ceac:	4a16      	ldr	r2, [pc, #88]	; (800cf08 <TL_MM_Init+0x74>)
 800ceae:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800ceb0:	4b15      	ldr	r3, [pc, #84]	; (800cf08 <TL_MM_Init+0x74>)
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	687a      	ldr	r2, [r7, #4]
 800ceb6:	6892      	ldr	r2, [r2, #8]
 800ceb8:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800ceba:	4b13      	ldr	r3, [pc, #76]	; (800cf08 <TL_MM_Init+0x74>)
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	687a      	ldr	r2, [r7, #4]
 800cec0:	68d2      	ldr	r2, [r2, #12]
 800cec2:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800cec4:	4b10      	ldr	r3, [pc, #64]	; (800cf08 <TL_MM_Init+0x74>)
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	4a0c      	ldr	r2, [pc, #48]	; (800cefc <TL_MM_Init+0x68>)
 800ceca:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800cecc:	4b0e      	ldr	r3, [pc, #56]	; (800cf08 <TL_MM_Init+0x74>)
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	687a      	ldr	r2, [r7, #4]
 800ced2:	6812      	ldr	r2, [r2, #0]
 800ced4:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800ced6:	4b0c      	ldr	r3, [pc, #48]	; (800cf08 <TL_MM_Init+0x74>)
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	687a      	ldr	r2, [r7, #4]
 800cedc:	6852      	ldr	r2, [r2, #4]
 800cede:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800cee0:	4b09      	ldr	r3, [pc, #36]	; (800cf08 <TL_MM_Init+0x74>)
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	687a      	ldr	r2, [r7, #4]
 800cee6:	6912      	ldr	r2, [r2, #16]
 800cee8:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800ceea:	4b07      	ldr	r3, [pc, #28]	; (800cf08 <TL_MM_Init+0x74>)
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	687a      	ldr	r2, [r7, #4]
 800cef0:	6952      	ldr	r2, [r2, #20]
 800cef2:	619a      	str	r2, [r3, #24]

  return;
 800cef4:	bf00      	nop
}
 800cef6:	3708      	adds	r7, #8
 800cef8:	46bd      	mov	sp, r7
 800cefa:	bd80      	pop	{r7, pc}
 800cefc:	200301c4 	.word	0x200301c4
 800cf00:	200019d4 	.word	0x200019d4
 800cf04:	20030000 	.word	0x20030000
 800cf08:	200019ec 	.word	0x200019ec

0800cf0c <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800cf0c:	b580      	push	{r7, lr}
 800cf0e:	b082      	sub	sp, #8
 800cf10:	af00      	add	r7, sp, #0
 800cf12:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800cf14:	6879      	ldr	r1, [r7, #4]
 800cf16:	4807      	ldr	r0, [pc, #28]	; (800cf34 <TL_MM_EvtDone+0x28>)
 800cf18:	f7ff f8f0 	bl	800c0fc <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 800cf1c:	6879      	ldr	r1, [r7, #4]
 800cf1e:	2000      	movs	r0, #0
 800cf20:	f000 f862 	bl	800cfe8 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800cf24:	4804      	ldr	r0, [pc, #16]	; (800cf38 <TL_MM_EvtDone+0x2c>)
 800cf26:	f7f7 fe9f 	bl	8004c68 <HW_IPCC_MM_SendFreeBuf>

  return;
 800cf2a:	bf00      	nop
}
 800cf2c:	3708      	adds	r7, #8
 800cf2e:	46bd      	mov	sp, r7
 800cf30:	bd80      	pop	{r7, pc}
 800cf32:	bf00      	nop
 800cf34:	200019d4 	.word	0x200019d4
 800cf38:	0800cf3d 	.word	0x0800cf3d

0800cf3c <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800cf3c:	b580      	push	{r7, lr}
 800cf3e:	b082      	sub	sp, #8
 800cf40:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800cf42:	e00c      	b.n	800cf5e <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800cf44:	1d3b      	adds	r3, r7, #4
 800cf46:	4619      	mov	r1, r3
 800cf48:	480a      	ldr	r0, [pc, #40]	; (800cf74 <SendFreeBuf+0x38>)
 800cf4a:	f7ff f91e 	bl	800c18a <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800cf4e:	4b0a      	ldr	r3, [pc, #40]	; (800cf78 <SendFreeBuf+0x3c>)
 800cf50:	691b      	ldr	r3, [r3, #16]
 800cf52:	691b      	ldr	r3, [r3, #16]
 800cf54:	687a      	ldr	r2, [r7, #4]
 800cf56:	4611      	mov	r1, r2
 800cf58:	4618      	mov	r0, r3
 800cf5a:	f7ff f8cf 	bl	800c0fc <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800cf5e:	4805      	ldr	r0, [pc, #20]	; (800cf74 <SendFreeBuf+0x38>)
 800cf60:	f7ff f884 	bl	800c06c <LST_is_empty>
 800cf64:	4603      	mov	r3, r0
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d0ec      	beq.n	800cf44 <SendFreeBuf+0x8>
  }

  return;
 800cf6a:	bf00      	nop
}
 800cf6c:	3708      	adds	r7, #8
 800cf6e:	46bd      	mov	sp, r7
 800cf70:	bd80      	pop	{r7, pc}
 800cf72:	bf00      	nop
 800cf74:	200019d4 	.word	0x200019d4
 800cf78:	20030000 	.word	0x20030000

0800cf7c <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800cf7c:	b580      	push	{r7, lr}
 800cf7e:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800cf80:	4805      	ldr	r0, [pc, #20]	; (800cf98 <TL_TRACES_Init+0x1c>)
 800cf82:	f7ff f863 	bl	800c04c <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800cf86:	4b05      	ldr	r3, [pc, #20]	; (800cf9c <TL_TRACES_Init+0x20>)
 800cf88:	695b      	ldr	r3, [r3, #20]
 800cf8a:	4a03      	ldr	r2, [pc, #12]	; (800cf98 <TL_TRACES_Init+0x1c>)
 800cf8c:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800cf8e:	f7f7 fea1 	bl	8004cd4 <HW_IPCC_TRACES_Init>

  return;
 800cf92:	bf00      	nop
}
 800cf94:	bd80      	pop	{r7, pc}
 800cf96:	bf00      	nop
 800cf98:	200301cc 	.word	0x200301cc
 800cf9c:	20030000 	.word	0x20030000

0800cfa0 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800cfa0:	b580      	push	{r7, lr}
 800cfa2:	b082      	sub	sp, #8
 800cfa4:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800cfa6:	e008      	b.n	800cfba <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800cfa8:	1d3b      	adds	r3, r7, #4
 800cfaa:	4619      	mov	r1, r3
 800cfac:	4808      	ldr	r0, [pc, #32]	; (800cfd0 <HW_IPCC_TRACES_EvtNot+0x30>)
 800cfae:	f7ff f8ec 	bl	800c18a <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	4618      	mov	r0, r3
 800cfb6:	f000 f80d 	bl	800cfd4 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800cfba:	4805      	ldr	r0, [pc, #20]	; (800cfd0 <HW_IPCC_TRACES_EvtNot+0x30>)
 800cfbc:	f7ff f856 	bl	800c06c <LST_is_empty>
 800cfc0:	4603      	mov	r3, r0
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d0f0      	beq.n	800cfa8 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800cfc6:	bf00      	nop
}
 800cfc8:	3708      	adds	r7, #8
 800cfca:	46bd      	mov	sp, r7
 800cfcc:	bd80      	pop	{r7, pc}
 800cfce:	bf00      	nop
 800cfd0:	200301cc 	.word	0x200301cc

0800cfd4 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 800cfd4:	b480      	push	{r7}
 800cfd6:	b083      	sub	sp, #12
 800cfd8:	af00      	add	r7, sp, #0
 800cfda:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 800cfdc:	bf00      	nop
 800cfde:	370c      	adds	r7, #12
 800cfe0:	46bd      	mov	sp, r7
 800cfe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfe6:	4770      	bx	lr

0800cfe8 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 800cfe8:	b480      	push	{r7}
 800cfea:	b085      	sub	sp, #20
 800cfec:	af00      	add	r7, sp, #0
 800cfee:	4603      	mov	r3, r0
 800cff0:	6039      	str	r1, [r7, #0]
 800cff2:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 800cff4:	79fb      	ldrb	r3, [r7, #7]
 800cff6:	2b06      	cmp	r3, #6
 800cff8:	d845      	bhi.n	800d086 <OutputDbgTrace+0x9e>
 800cffa:	a201      	add	r2, pc, #4	; (adr r2, 800d000 <OutputDbgTrace+0x18>)
 800cffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d000:	0800d01d 	.word	0x0800d01d
 800d004:	0800d041 	.word	0x0800d041
 800d008:	0800d047 	.word	0x0800d047
 800d00c:	0800d05b 	.word	0x0800d05b
 800d010:	0800d067 	.word	0x0800d067
 800d014:	0800d06d 	.word	0x0800d06d
 800d018:	0800d07b 	.word	0x0800d07b
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800d01c:	683b      	ldr	r3, [r7, #0]
 800d01e:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	7a5b      	ldrb	r3, [r3, #9]
 800d024:	2bff      	cmp	r3, #255	; 0xff
 800d026:	d005      	beq.n	800d034 <OutputDbgTrace+0x4c>
 800d028:	2bff      	cmp	r3, #255	; 0xff
 800d02a:	dc05      	bgt.n	800d038 <OutputDbgTrace+0x50>
 800d02c:	2b0e      	cmp	r3, #14
 800d02e:	d005      	beq.n	800d03c <OutputDbgTrace+0x54>
 800d030:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 800d032:	e001      	b.n	800d038 <OutputDbgTrace+0x50>
          break;
 800d034:	bf00      	nop
 800d036:	e027      	b.n	800d088 <OutputDbgTrace+0xa0>
          break;
 800d038:	bf00      	nop
 800d03a:	e025      	b.n	800d088 <OutputDbgTrace+0xa0>
          break;
 800d03c:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800d03e:	e023      	b.n	800d088 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800d040:	683b      	ldr	r3, [r7, #0]
 800d042:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800d044:	e020      	b.n	800d088 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800d046:	683b      	ldr	r3, [r7, #0]
 800d048:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	7a5b      	ldrb	r3, [r3, #9]
 800d04e:	2b0e      	cmp	r3, #14
 800d050:	d001      	beq.n	800d056 <OutputDbgTrace+0x6e>
 800d052:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800d054:	e000      	b.n	800d058 <OutputDbgTrace+0x70>
          break;
 800d056:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800d058:	e016      	b.n	800d088 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800d05a:	683b      	ldr	r3, [r7, #0]
 800d05c:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	7a5b      	ldrb	r3, [r3, #9]
 800d062:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800d064:	e010      	b.n	800d088 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800d066:	683b      	ldr	r3, [r7, #0]
 800d068:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800d06a:	e00d      	b.n	800d088 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800d06c:	683b      	ldr	r3, [r7, #0]
 800d06e:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	7a5b      	ldrb	r3, [r3, #9]
 800d074:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800d076:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800d078:	e006      	b.n	800d088 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800d07a:	683b      	ldr	r3, [r7, #0]
 800d07c:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800d07e:	68fb      	ldr	r3, [r7, #12]
 800d080:	7a5b      	ldrb	r3, [r3, #9]
 800d082:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800d084:	e000      	b.n	800d088 <OutputDbgTrace+0xa0>

    default:
      break;
 800d086:	bf00      	nop
  }

  return;
 800d088:	bf00      	nop
}
 800d08a:	3714      	adds	r7, #20
 800d08c:	46bd      	mov	sp, r7
 800d08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d092:	4770      	bx	lr

0800d094 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800d094:	b480      	push	{r7}
 800d096:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800d098:	4b05      	ldr	r3, [pc, #20]	; (800d0b0 <UTIL_LPM_Init+0x1c>)
 800d09a:	2200      	movs	r2, #0
 800d09c:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800d09e:	4b05      	ldr	r3, [pc, #20]	; (800d0b4 <UTIL_LPM_Init+0x20>)
 800d0a0:	2200      	movs	r2, #0
 800d0a2:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800d0a4:	bf00      	nop
 800d0a6:	46bd      	mov	sp, r7
 800d0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ac:	4770      	bx	lr
 800d0ae:	bf00      	nop
 800d0b0:	200019f0 	.word	0x200019f0
 800d0b4:	200019f4 	.word	0x200019f4

0800d0b8 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800d0b8:	b480      	push	{r7}
 800d0ba:	b087      	sub	sp, #28
 800d0bc:	af00      	add	r7, sp, #0
 800d0be:	6078      	str	r0, [r7, #4]
 800d0c0:	460b      	mov	r3, r1
 800d0c2:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d0c4:	f3ef 8310 	mrs	r3, PRIMASK
 800d0c8:	613b      	str	r3, [r7, #16]
  return(result);
 800d0ca:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800d0cc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800d0ce:	b672      	cpsid	i
}
 800d0d0:	bf00      	nop
  
  switch(state)
 800d0d2:	78fb      	ldrb	r3, [r7, #3]
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d008      	beq.n	800d0ea <UTIL_LPM_SetOffMode+0x32>
 800d0d8:	2b01      	cmp	r3, #1
 800d0da:	d10e      	bne.n	800d0fa <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800d0dc:	4b0d      	ldr	r3, [pc, #52]	; (800d114 <UTIL_LPM_SetOffMode+0x5c>)
 800d0de:	681a      	ldr	r2, [r3, #0]
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	4313      	orrs	r3, r2
 800d0e4:	4a0b      	ldr	r2, [pc, #44]	; (800d114 <UTIL_LPM_SetOffMode+0x5c>)
 800d0e6:	6013      	str	r3, [r2, #0]
      break;
 800d0e8:	e008      	b.n	800d0fc <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	43da      	mvns	r2, r3
 800d0ee:	4b09      	ldr	r3, [pc, #36]	; (800d114 <UTIL_LPM_SetOffMode+0x5c>)
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	4013      	ands	r3, r2
 800d0f4:	4a07      	ldr	r2, [pc, #28]	; (800d114 <UTIL_LPM_SetOffMode+0x5c>)
 800d0f6:	6013      	str	r3, [r2, #0]
      break;
 800d0f8:	e000      	b.n	800d0fc <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800d0fa:	bf00      	nop
 800d0fc:	697b      	ldr	r3, [r7, #20]
 800d0fe:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	f383 8810 	msr	PRIMASK, r3
}
 800d106:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800d108:	bf00      	nop
 800d10a:	371c      	adds	r7, #28
 800d10c:	46bd      	mov	sp, r7
 800d10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d112:	4770      	bx	lr
 800d114:	200019f4 	.word	0x200019f4

0800d118 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800d118:	b580      	push	{r7, lr}
 800d11a:	b090      	sub	sp, #64	; 0x40
 800d11c:	af00      	add	r7, sp, #0
 800d11e:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800d120:	4b73      	ldr	r3, [pc, #460]	; (800d2f0 <UTIL_SEQ_Run+0x1d8>)
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 800d126:	4b72      	ldr	r3, [pc, #456]	; (800d2f0 <UTIL_SEQ_Run+0x1d8>)
 800d128:	681a      	ldr	r2, [r3, #0]
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	4013      	ands	r3, r2
 800d12e:	4a70      	ldr	r2, [pc, #448]	; (800d2f0 <UTIL_SEQ_Run+0x1d8>)
 800d130:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 800d132:	4b70      	ldr	r3, [pc, #448]	; (800d2f4 <UTIL_SEQ_Run+0x1dc>)
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800d138:	4b6f      	ldr	r3, [pc, #444]	; (800d2f8 <UTIL_SEQ_Run+0x1e0>)
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800d13e:	4b6f      	ldr	r3, [pc, #444]	; (800d2fc <UTIL_SEQ_Run+0x1e4>)
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 800d144:	4b6e      	ldr	r3, [pc, #440]	; (800d300 <UTIL_SEQ_Run+0x1e8>)
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800d14a:	e08d      	b.n	800d268 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 800d14c:	2300      	movs	r3, #0
 800d14e:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800d150:	e002      	b.n	800d158 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 800d152:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d154:	3301      	adds	r3, #1
 800d156:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800d158:	4a6a      	ldr	r2, [pc, #424]	; (800d304 <UTIL_SEQ_Run+0x1ec>)
 800d15a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d15c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800d160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d162:	401a      	ands	r2, r3
 800d164:	4b62      	ldr	r3, [pc, #392]	; (800d2f0 <UTIL_SEQ_Run+0x1d8>)
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	4013      	ands	r3, r2
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d0f1      	beq.n	800d152 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 800d16e:	4a65      	ldr	r2, [pc, #404]	; (800d304 <UTIL_SEQ_Run+0x1ec>)
 800d170:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d172:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800d176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d178:	401a      	ands	r2, r3
 800d17a:	4b5d      	ldr	r3, [pc, #372]	; (800d2f0 <UTIL_SEQ_Run+0x1d8>)
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	4013      	ands	r3, r2
 800d180:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800d182:	4a60      	ldr	r2, [pc, #384]	; (800d304 <UTIL_SEQ_Run+0x1ec>)
 800d184:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d186:	00db      	lsls	r3, r3, #3
 800d188:	4413      	add	r3, r2
 800d18a:	685a      	ldr	r2, [r3, #4]
 800d18c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d18e:	4013      	ands	r3, r2
 800d190:	2b00      	cmp	r3, #0
 800d192:	d106      	bne.n	800d1a2 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800d194:	4a5b      	ldr	r2, [pc, #364]	; (800d304 <UTIL_SEQ_Run+0x1ec>)
 800d196:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d198:	00db      	lsls	r3, r3, #3
 800d19a:	4413      	add	r3, r2
 800d19c:	f04f 32ff 	mov.w	r2, #4294967295
 800d1a0:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800d1a2:	4a58      	ldr	r2, [pc, #352]	; (800d304 <UTIL_SEQ_Run+0x1ec>)
 800d1a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d1a6:	00db      	lsls	r3, r3, #3
 800d1a8:	4413      	add	r3, r2
 800d1aa:	685a      	ldr	r2, [r3, #4]
 800d1ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1ae:	4013      	ands	r3, r2
 800d1b0:	4618      	mov	r0, r3
 800d1b2:	f000 f9b3 	bl	800d51c <SEQ_BitPosition>
 800d1b6:	4603      	mov	r3, r0
 800d1b8:	461a      	mov	r2, r3
 800d1ba:	4b53      	ldr	r3, [pc, #332]	; (800d308 <UTIL_SEQ_Run+0x1f0>)
 800d1bc:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800d1be:	4a51      	ldr	r2, [pc, #324]	; (800d304 <UTIL_SEQ_Run+0x1ec>)
 800d1c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d1c2:	00db      	lsls	r3, r3, #3
 800d1c4:	4413      	add	r3, r2
 800d1c6:	685a      	ldr	r2, [r3, #4]
 800d1c8:	4b4f      	ldr	r3, [pc, #316]	; (800d308 <UTIL_SEQ_Run+0x1f0>)
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	2101      	movs	r1, #1
 800d1ce:	fa01 f303 	lsl.w	r3, r1, r3
 800d1d2:	43db      	mvns	r3, r3
 800d1d4:	401a      	ands	r2, r3
 800d1d6:	494b      	ldr	r1, [pc, #300]	; (800d304 <UTIL_SEQ_Run+0x1ec>)
 800d1d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d1da:	00db      	lsls	r3, r3, #3
 800d1dc:	440b      	add	r3, r1
 800d1de:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d1e0:	f3ef 8310 	mrs	r3, PRIMASK
 800d1e4:	61bb      	str	r3, [r7, #24]
  return(result);
 800d1e6:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800d1e8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800d1ea:	b672      	cpsid	i
}
 800d1ec:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800d1ee:	4b46      	ldr	r3, [pc, #280]	; (800d308 <UTIL_SEQ_Run+0x1f0>)
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	2201      	movs	r2, #1
 800d1f4:	fa02 f303 	lsl.w	r3, r2, r3
 800d1f8:	43da      	mvns	r2, r3
 800d1fa:	4b3e      	ldr	r3, [pc, #248]	; (800d2f4 <UTIL_SEQ_Run+0x1dc>)
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	4013      	ands	r3, r2
 800d200:	4a3c      	ldr	r2, [pc, #240]	; (800d2f4 <UTIL_SEQ_Run+0x1dc>)
 800d202:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800d204:	2302      	movs	r3, #2
 800d206:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d208:	e013      	b.n	800d232 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800d20a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d20c:	3b01      	subs	r3, #1
 800d20e:	4a3d      	ldr	r2, [pc, #244]	; (800d304 <UTIL_SEQ_Run+0x1ec>)
 800d210:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800d214:	4b3c      	ldr	r3, [pc, #240]	; (800d308 <UTIL_SEQ_Run+0x1f0>)
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	2201      	movs	r2, #1
 800d21a:	fa02 f303 	lsl.w	r3, r2, r3
 800d21e:	43da      	mvns	r2, r3
 800d220:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d222:	3b01      	subs	r3, #1
 800d224:	400a      	ands	r2, r1
 800d226:	4937      	ldr	r1, [pc, #220]	; (800d304 <UTIL_SEQ_Run+0x1ec>)
 800d228:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800d22c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d22e:	3b01      	subs	r3, #1
 800d230:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d232:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d234:	2b00      	cmp	r3, #0
 800d236:	d1e8      	bne.n	800d20a <UTIL_SEQ_Run+0xf2>
 800d238:	6a3b      	ldr	r3, [r7, #32]
 800d23a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d23c:	697b      	ldr	r3, [r7, #20]
 800d23e:	f383 8810 	msr	PRIMASK, r3
}
 800d242:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800d244:	4b30      	ldr	r3, [pc, #192]	; (800d308 <UTIL_SEQ_Run+0x1f0>)
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	4a30      	ldr	r2, [pc, #192]	; (800d30c <UTIL_SEQ_Run+0x1f4>)
 800d24a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d24e:	4798      	blx	r3

    local_taskset = TaskSet;
 800d250:	4b28      	ldr	r3, [pc, #160]	; (800d2f4 <UTIL_SEQ_Run+0x1dc>)
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 800d256:	4b28      	ldr	r3, [pc, #160]	; (800d2f8 <UTIL_SEQ_Run+0x1e0>)
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 800d25c:	4b27      	ldr	r3, [pc, #156]	; (800d2fc <UTIL_SEQ_Run+0x1e4>)
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 800d262:	4b27      	ldr	r3, [pc, #156]	; (800d300 <UTIL_SEQ_Run+0x1e8>)
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800d268:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d26a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d26c:	401a      	ands	r2, r3
 800d26e:	4b20      	ldr	r3, [pc, #128]	; (800d2f0 <UTIL_SEQ_Run+0x1d8>)
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	4013      	ands	r3, r2
 800d274:	2b00      	cmp	r3, #0
 800d276:	d005      	beq.n	800d284 <UTIL_SEQ_Run+0x16c>
 800d278:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d27a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d27c:	4013      	ands	r3, r2
 800d27e:	2b00      	cmp	r3, #0
 800d280:	f43f af64 	beq.w	800d14c <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800d284:	4b20      	ldr	r3, [pc, #128]	; (800d308 <UTIL_SEQ_Run+0x1f0>)
 800d286:	f04f 32ff 	mov.w	r2, #4294967295
 800d28a:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800d28c:	f000 f938 	bl	800d500 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d290:	f3ef 8310 	mrs	r3, PRIMASK
 800d294:	613b      	str	r3, [r7, #16]
  return(result);
 800d296:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800d298:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800d29a:	b672      	cpsid	i
}
 800d29c:	bf00      	nop
  local_taskset = TaskSet;
 800d29e:	4b15      	ldr	r3, [pc, #84]	; (800d2f4 <UTIL_SEQ_Run+0x1dc>)
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800d2a4:	4b14      	ldr	r3, [pc, #80]	; (800d2f8 <UTIL_SEQ_Run+0x1e0>)
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800d2aa:	4b14      	ldr	r3, [pc, #80]	; (800d2fc <UTIL_SEQ_Run+0x1e4>)
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 800d2b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d2b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2b4:	401a      	ands	r2, r3
 800d2b6:	4b0e      	ldr	r3, [pc, #56]	; (800d2f0 <UTIL_SEQ_Run+0x1d8>)
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	4013      	ands	r3, r2
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d107      	bne.n	800d2d0 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 800d2c0:	4b0f      	ldr	r3, [pc, #60]	; (800d300 <UTIL_SEQ_Run+0x1e8>)
 800d2c2:	681a      	ldr	r2, [r3, #0]
 800d2c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2c6:	4013      	ands	r3, r2
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d101      	bne.n	800d2d0 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 800d2cc:	f7f4 fae3 	bl	8001896 <UTIL_SEQ_Idle>
 800d2d0:	69fb      	ldr	r3, [r7, #28]
 800d2d2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	f383 8810 	msr	PRIMASK, r3
}
 800d2da:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 800d2dc:	f000 f917 	bl	800d50e <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800d2e0:	4a03      	ldr	r2, [pc, #12]	; (800d2f0 <UTIL_SEQ_Run+0x1d8>)
 800d2e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2e4:	6013      	str	r3, [r2, #0]

  return;
 800d2e6:	bf00      	nop
}
 800d2e8:	3740      	adds	r7, #64	; 0x40
 800d2ea:	46bd      	mov	sp, r7
 800d2ec:	bd80      	pop	{r7, pc}
 800d2ee:	bf00      	nop
 800d2f0:	20000054 	.word	0x20000054
 800d2f4:	200019f8 	.word	0x200019f8
 800d2f8:	200019fc 	.word	0x200019fc
 800d2fc:	20000050 	.word	0x20000050
 800d300:	20001a00 	.word	0x20001a00
 800d304:	20001a88 	.word	0x20001a88
 800d308:	20001a04 	.word	0x20001a04
 800d30c:	20001a08 	.word	0x20001a08

0800d310 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800d310:	b580      	push	{r7, lr}
 800d312:	b088      	sub	sp, #32
 800d314:	af00      	add	r7, sp, #0
 800d316:	60f8      	str	r0, [r7, #12]
 800d318:	60b9      	str	r1, [r7, #8]
 800d31a:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d31c:	f3ef 8310 	mrs	r3, PRIMASK
 800d320:	617b      	str	r3, [r7, #20]
  return(result);
 800d322:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800d324:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800d326:	b672      	cpsid	i
}
 800d328:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800d32a:	68f8      	ldr	r0, [r7, #12]
 800d32c:	f000 f8f6 	bl	800d51c <SEQ_BitPosition>
 800d330:	4603      	mov	r3, r0
 800d332:	4619      	mov	r1, r3
 800d334:	4a06      	ldr	r2, [pc, #24]	; (800d350 <UTIL_SEQ_RegTask+0x40>)
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800d33c:	69fb      	ldr	r3, [r7, #28]
 800d33e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d340:	69bb      	ldr	r3, [r7, #24]
 800d342:	f383 8810 	msr	PRIMASK, r3
}
 800d346:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800d348:	bf00      	nop
}
 800d34a:	3720      	adds	r7, #32
 800d34c:	46bd      	mov	sp, r7
 800d34e:	bd80      	pop	{r7, pc}
 800d350:	20001a08 	.word	0x20001a08

0800d354 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800d354:	b480      	push	{r7}
 800d356:	b087      	sub	sp, #28
 800d358:	af00      	add	r7, sp, #0
 800d35a:	6078      	str	r0, [r7, #4]
 800d35c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d35e:	f3ef 8310 	mrs	r3, PRIMASK
 800d362:	60fb      	str	r3, [r7, #12]
  return(result);
 800d364:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800d366:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800d368:	b672      	cpsid	i
}
 800d36a:	bf00      	nop

  TaskSet |= TaskId_bm;
 800d36c:	4b0d      	ldr	r3, [pc, #52]	; (800d3a4 <UTIL_SEQ_SetTask+0x50>)
 800d36e:	681a      	ldr	r2, [r3, #0]
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	4313      	orrs	r3, r2
 800d374:	4a0b      	ldr	r2, [pc, #44]	; (800d3a4 <UTIL_SEQ_SetTask+0x50>)
 800d376:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800d378:	4a0b      	ldr	r2, [pc, #44]	; (800d3a8 <UTIL_SEQ_SetTask+0x54>)
 800d37a:	683b      	ldr	r3, [r7, #0]
 800d37c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	431a      	orrs	r2, r3
 800d384:	4908      	ldr	r1, [pc, #32]	; (800d3a8 <UTIL_SEQ_SetTask+0x54>)
 800d386:	683b      	ldr	r3, [r7, #0]
 800d388:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800d38c:	697b      	ldr	r3, [r7, #20]
 800d38e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d390:	693b      	ldr	r3, [r7, #16]
 800d392:	f383 8810 	msr	PRIMASK, r3
}
 800d396:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800d398:	bf00      	nop
}
 800d39a:	371c      	adds	r7, #28
 800d39c:	46bd      	mov	sp, r7
 800d39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3a2:	4770      	bx	lr
 800d3a4:	200019f8 	.word	0x200019f8
 800d3a8:	20001a88 	.word	0x20001a88

0800d3ac <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800d3ac:	b480      	push	{r7}
 800d3ae:	b087      	sub	sp, #28
 800d3b0:	af00      	add	r7, sp, #0
 800d3b2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d3b4:	f3ef 8310 	mrs	r3, PRIMASK
 800d3b8:	60fb      	str	r3, [r7, #12]
  return(result);
 800d3ba:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800d3bc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800d3be:	b672      	cpsid	i
}
 800d3c0:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	43da      	mvns	r2, r3
 800d3c6:	4b08      	ldr	r3, [pc, #32]	; (800d3e8 <UTIL_SEQ_PauseTask+0x3c>)
 800d3c8:	681b      	ldr	r3, [r3, #0]
 800d3ca:	4013      	ands	r3, r2
 800d3cc:	4a06      	ldr	r2, [pc, #24]	; (800d3e8 <UTIL_SEQ_PauseTask+0x3c>)
 800d3ce:	6013      	str	r3, [r2, #0]
 800d3d0:	697b      	ldr	r3, [r7, #20]
 800d3d2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d3d4:	693b      	ldr	r3, [r7, #16]
 800d3d6:	f383 8810 	msr	PRIMASK, r3
}
 800d3da:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800d3dc:	bf00      	nop
}
 800d3de:	371c      	adds	r7, #28
 800d3e0:	46bd      	mov	sp, r7
 800d3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3e6:	4770      	bx	lr
 800d3e8:	20000050 	.word	0x20000050

0800d3ec <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800d3ec:	b480      	push	{r7}
 800d3ee:	b087      	sub	sp, #28
 800d3f0:	af00      	add	r7, sp, #0
 800d3f2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d3f4:	f3ef 8310 	mrs	r3, PRIMASK
 800d3f8:	60fb      	str	r3, [r7, #12]
  return(result);
 800d3fa:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800d3fc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800d3fe:	b672      	cpsid	i
}
 800d400:	bf00      	nop

  TaskMask |= TaskId_bm;
 800d402:	4b09      	ldr	r3, [pc, #36]	; (800d428 <UTIL_SEQ_ResumeTask+0x3c>)
 800d404:	681a      	ldr	r2, [r3, #0]
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	4313      	orrs	r3, r2
 800d40a:	4a07      	ldr	r2, [pc, #28]	; (800d428 <UTIL_SEQ_ResumeTask+0x3c>)
 800d40c:	6013      	str	r3, [r2, #0]
 800d40e:	697b      	ldr	r3, [r7, #20]
 800d410:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d412:	693b      	ldr	r3, [r7, #16]
 800d414:	f383 8810 	msr	PRIMASK, r3
}
 800d418:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800d41a:	bf00      	nop
}
 800d41c:	371c      	adds	r7, #28
 800d41e:	46bd      	mov	sp, r7
 800d420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d424:	4770      	bx	lr
 800d426:	bf00      	nop
 800d428:	20000050 	.word	0x20000050

0800d42c <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 800d42c:	b480      	push	{r7}
 800d42e:	b087      	sub	sp, #28
 800d430:	af00      	add	r7, sp, #0
 800d432:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d434:	f3ef 8310 	mrs	r3, PRIMASK
 800d438:	60fb      	str	r3, [r7, #12]
  return(result);
 800d43a:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800d43c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800d43e:	b672      	cpsid	i
}
 800d440:	bf00      	nop

  EvtSet |= EvtId_bm;
 800d442:	4b09      	ldr	r3, [pc, #36]	; (800d468 <UTIL_SEQ_SetEvt+0x3c>)
 800d444:	681a      	ldr	r2, [r3, #0]
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	4313      	orrs	r3, r2
 800d44a:	4a07      	ldr	r2, [pc, #28]	; (800d468 <UTIL_SEQ_SetEvt+0x3c>)
 800d44c:	6013      	str	r3, [r2, #0]
 800d44e:	697b      	ldr	r3, [r7, #20]
 800d450:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d452:	693b      	ldr	r3, [r7, #16]
 800d454:	f383 8810 	msr	PRIMASK, r3
}
 800d458:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800d45a:	bf00      	nop
}
 800d45c:	371c      	adds	r7, #28
 800d45e:	46bd      	mov	sp, r7
 800d460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d464:	4770      	bx	lr
 800d466:	bf00      	nop
 800d468:	200019fc 	.word	0x200019fc

0800d46c <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 800d46c:	b580      	push	{r7, lr}
 800d46e:	b088      	sub	sp, #32
 800d470:	af00      	add	r7, sp, #0
 800d472:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 800d474:	4b1f      	ldr	r3, [pc, #124]	; (800d4f4 <UTIL_SEQ_WaitEvt+0x88>)
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800d47a:	4b1e      	ldr	r3, [pc, #120]	; (800d4f4 <UTIL_SEQ_WaitEvt+0x88>)
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d482:	d102      	bne.n	800d48a <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 800d484:	2300      	movs	r3, #0
 800d486:	61fb      	str	r3, [r7, #28]
 800d488:	e005      	b.n	800d496 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 800d48a:	4b1a      	ldr	r3, [pc, #104]	; (800d4f4 <UTIL_SEQ_WaitEvt+0x88>)
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	2201      	movs	r2, #1
 800d490:	fa02 f303 	lsl.w	r3, r2, r3
 800d494:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800d496:	4b18      	ldr	r3, [pc, #96]	; (800d4f8 <UTIL_SEQ_WaitEvt+0x8c>)
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 800d49c:	4a16      	ldr	r2, [pc, #88]	; (800d4f8 <UTIL_SEQ_WaitEvt+0x8c>)
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 800d4a2:	e003      	b.n	800d4ac <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 800d4a4:	6879      	ldr	r1, [r7, #4]
 800d4a6:	69f8      	ldr	r0, [r7, #28]
 800d4a8:	f7f4 f9fc 	bl	80018a4 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 800d4ac:	4b13      	ldr	r3, [pc, #76]	; (800d4fc <UTIL_SEQ_WaitEvt+0x90>)
 800d4ae:	681a      	ldr	r2, [r3, #0]
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	4013      	ands	r3, r2
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d0f5      	beq.n	800d4a4 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 800d4b8:	4a0e      	ldr	r2, [pc, #56]	; (800d4f4 <UTIL_SEQ_WaitEvt+0x88>)
 800d4ba:	69bb      	ldr	r3, [r7, #24]
 800d4bc:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d4be:	f3ef 8310 	mrs	r3, PRIMASK
 800d4c2:	60bb      	str	r3, [r7, #8]
  return(result);
 800d4c4:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800d4c6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800d4c8:	b672      	cpsid	i
}
 800d4ca:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	43da      	mvns	r2, r3
 800d4d0:	4b0a      	ldr	r3, [pc, #40]	; (800d4fc <UTIL_SEQ_WaitEvt+0x90>)
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	4013      	ands	r3, r2
 800d4d6:	4a09      	ldr	r2, [pc, #36]	; (800d4fc <UTIL_SEQ_WaitEvt+0x90>)
 800d4d8:	6013      	str	r3, [r2, #0]
 800d4da:	693b      	ldr	r3, [r7, #16]
 800d4dc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	f383 8810 	msr	PRIMASK, r3
}
 800d4e4:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 800d4e6:	4a04      	ldr	r2, [pc, #16]	; (800d4f8 <UTIL_SEQ_WaitEvt+0x8c>)
 800d4e8:	697b      	ldr	r3, [r7, #20]
 800d4ea:	6013      	str	r3, [r2, #0]
  return;
 800d4ec:	bf00      	nop
}
 800d4ee:	3720      	adds	r7, #32
 800d4f0:	46bd      	mov	sp, r7
 800d4f2:	bd80      	pop	{r7, pc}
 800d4f4:	20001a04 	.word	0x20001a04
 800d4f8:	20001a00 	.word	0x20001a00
 800d4fc:	200019fc 	.word	0x200019fc

0800d500 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800d500:	b480      	push	{r7}
 800d502:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800d504:	bf00      	nop
}
 800d506:	46bd      	mov	sp, r7
 800d508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d50c:	4770      	bx	lr

0800d50e <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800d50e:	b480      	push	{r7}
 800d510:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800d512:	bf00      	nop
}
 800d514:	46bd      	mov	sp, r7
 800d516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d51a:	4770      	bx	lr

0800d51c <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800d51c:	b480      	push	{r7}
 800d51e:	b085      	sub	sp, #20
 800d520:	af00      	add	r7, sp, #0
 800d522:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 800d524:	2300      	movs	r3, #0
 800d526:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 800d52c:	68bb      	ldr	r3, [r7, #8]
 800d52e:	0c1b      	lsrs	r3, r3, #16
 800d530:	041b      	lsls	r3, r3, #16
 800d532:	2b00      	cmp	r3, #0
 800d534:	d104      	bne.n	800d540 <SEQ_BitPosition+0x24>
 800d536:	2310      	movs	r3, #16
 800d538:	73fb      	strb	r3, [r7, #15]
 800d53a:	68bb      	ldr	r3, [r7, #8]
 800d53c:	041b      	lsls	r3, r3, #16
 800d53e:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 800d540:	68bb      	ldr	r3, [r7, #8]
 800d542:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800d546:	2b00      	cmp	r3, #0
 800d548:	d105      	bne.n	800d556 <SEQ_BitPosition+0x3a>
 800d54a:	7bfb      	ldrb	r3, [r7, #15]
 800d54c:	3308      	adds	r3, #8
 800d54e:	73fb      	strb	r3, [r7, #15]
 800d550:	68bb      	ldr	r3, [r7, #8]
 800d552:	021b      	lsls	r3, r3, #8
 800d554:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 800d556:	68bb      	ldr	r3, [r7, #8]
 800d558:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d105      	bne.n	800d56c <SEQ_BitPosition+0x50>
 800d560:	7bfb      	ldrb	r3, [r7, #15]
 800d562:	3304      	adds	r3, #4
 800d564:	73fb      	strb	r3, [r7, #15]
 800d566:	68bb      	ldr	r3, [r7, #8]
 800d568:	011b      	lsls	r3, r3, #4
 800d56a:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 800d56c:	68bb      	ldr	r3, [r7, #8]
 800d56e:	0f1b      	lsrs	r3, r3, #28
 800d570:	4a07      	ldr	r2, [pc, #28]	; (800d590 <SEQ_BitPosition+0x74>)
 800d572:	5cd2      	ldrb	r2, [r2, r3]
 800d574:	7bfb      	ldrb	r3, [r7, #15]
 800d576:	4413      	add	r3, r2
 800d578:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 800d57a:	7bfb      	ldrb	r3, [r7, #15]
 800d57c:	f1c3 031f 	rsb	r3, r3, #31
 800d580:	b2db      	uxtb	r3, r3
}
 800d582:	4618      	mov	r0, r3
 800d584:	3714      	adds	r7, #20
 800d586:	46bd      	mov	sp, r7
 800d588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d58c:	4770      	bx	lr
 800d58e:	bf00      	nop
 800d590:	08011d20 	.word	0x08011d20

0800d594 <__errno>:
 800d594:	4b01      	ldr	r3, [pc, #4]	; (800d59c <__errno+0x8>)
 800d596:	6818      	ldr	r0, [r3, #0]
 800d598:	4770      	bx	lr
 800d59a:	bf00      	nop
 800d59c:	20000058 	.word	0x20000058

0800d5a0 <__libc_init_array>:
 800d5a0:	b570      	push	{r4, r5, r6, lr}
 800d5a2:	4d0d      	ldr	r5, [pc, #52]	; (800d5d8 <__libc_init_array+0x38>)
 800d5a4:	4c0d      	ldr	r4, [pc, #52]	; (800d5dc <__libc_init_array+0x3c>)
 800d5a6:	1b64      	subs	r4, r4, r5
 800d5a8:	10a4      	asrs	r4, r4, #2
 800d5aa:	2600      	movs	r6, #0
 800d5ac:	42a6      	cmp	r6, r4
 800d5ae:	d109      	bne.n	800d5c4 <__libc_init_array+0x24>
 800d5b0:	4d0b      	ldr	r5, [pc, #44]	; (800d5e0 <__libc_init_array+0x40>)
 800d5b2:	4c0c      	ldr	r4, [pc, #48]	; (800d5e4 <__libc_init_array+0x44>)
 800d5b4:	f002 fe20 	bl	80101f8 <_init>
 800d5b8:	1b64      	subs	r4, r4, r5
 800d5ba:	10a4      	asrs	r4, r4, #2
 800d5bc:	2600      	movs	r6, #0
 800d5be:	42a6      	cmp	r6, r4
 800d5c0:	d105      	bne.n	800d5ce <__libc_init_array+0x2e>
 800d5c2:	bd70      	pop	{r4, r5, r6, pc}
 800d5c4:	f855 3b04 	ldr.w	r3, [r5], #4
 800d5c8:	4798      	blx	r3
 800d5ca:	3601      	adds	r6, #1
 800d5cc:	e7ee      	b.n	800d5ac <__libc_init_array+0xc>
 800d5ce:	f855 3b04 	ldr.w	r3, [r5], #4
 800d5d2:	4798      	blx	r3
 800d5d4:	3601      	adds	r6, #1
 800d5d6:	e7f2      	b.n	800d5be <__libc_init_array+0x1e>
 800d5d8:	08012114 	.word	0x08012114
 800d5dc:	08012114 	.word	0x08012114
 800d5e0:	08012114 	.word	0x08012114
 800d5e4:	08012118 	.word	0x08012118

0800d5e8 <memcpy>:
 800d5e8:	440a      	add	r2, r1
 800d5ea:	4291      	cmp	r1, r2
 800d5ec:	f100 33ff 	add.w	r3, r0, #4294967295
 800d5f0:	d100      	bne.n	800d5f4 <memcpy+0xc>
 800d5f2:	4770      	bx	lr
 800d5f4:	b510      	push	{r4, lr}
 800d5f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d5fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d5fe:	4291      	cmp	r1, r2
 800d600:	d1f9      	bne.n	800d5f6 <memcpy+0xe>
 800d602:	bd10      	pop	{r4, pc}

0800d604 <memset>:
 800d604:	4402      	add	r2, r0
 800d606:	4603      	mov	r3, r0
 800d608:	4293      	cmp	r3, r2
 800d60a:	d100      	bne.n	800d60e <memset+0xa>
 800d60c:	4770      	bx	lr
 800d60e:	f803 1b01 	strb.w	r1, [r3], #1
 800d612:	e7f9      	b.n	800d608 <memset+0x4>

0800d614 <__cvt>:
 800d614:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d618:	ec55 4b10 	vmov	r4, r5, d0
 800d61c:	2d00      	cmp	r5, #0
 800d61e:	460e      	mov	r6, r1
 800d620:	4619      	mov	r1, r3
 800d622:	462b      	mov	r3, r5
 800d624:	bfbb      	ittet	lt
 800d626:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800d62a:	461d      	movlt	r5, r3
 800d62c:	2300      	movge	r3, #0
 800d62e:	232d      	movlt	r3, #45	; 0x2d
 800d630:	700b      	strb	r3, [r1, #0]
 800d632:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d634:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800d638:	4691      	mov	r9, r2
 800d63a:	f023 0820 	bic.w	r8, r3, #32
 800d63e:	bfbc      	itt	lt
 800d640:	4622      	movlt	r2, r4
 800d642:	4614      	movlt	r4, r2
 800d644:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d648:	d005      	beq.n	800d656 <__cvt+0x42>
 800d64a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800d64e:	d100      	bne.n	800d652 <__cvt+0x3e>
 800d650:	3601      	adds	r6, #1
 800d652:	2102      	movs	r1, #2
 800d654:	e000      	b.n	800d658 <__cvt+0x44>
 800d656:	2103      	movs	r1, #3
 800d658:	ab03      	add	r3, sp, #12
 800d65a:	9301      	str	r3, [sp, #4]
 800d65c:	ab02      	add	r3, sp, #8
 800d65e:	9300      	str	r3, [sp, #0]
 800d660:	ec45 4b10 	vmov	d0, r4, r5
 800d664:	4653      	mov	r3, sl
 800d666:	4632      	mov	r2, r6
 800d668:	f000 fe2e 	bl	800e2c8 <_dtoa_r>
 800d66c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800d670:	4607      	mov	r7, r0
 800d672:	d102      	bne.n	800d67a <__cvt+0x66>
 800d674:	f019 0f01 	tst.w	r9, #1
 800d678:	d022      	beq.n	800d6c0 <__cvt+0xac>
 800d67a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d67e:	eb07 0906 	add.w	r9, r7, r6
 800d682:	d110      	bne.n	800d6a6 <__cvt+0x92>
 800d684:	783b      	ldrb	r3, [r7, #0]
 800d686:	2b30      	cmp	r3, #48	; 0x30
 800d688:	d10a      	bne.n	800d6a0 <__cvt+0x8c>
 800d68a:	2200      	movs	r2, #0
 800d68c:	2300      	movs	r3, #0
 800d68e:	4620      	mov	r0, r4
 800d690:	4629      	mov	r1, r5
 800d692:	f7f3 fa01 	bl	8000a98 <__aeabi_dcmpeq>
 800d696:	b918      	cbnz	r0, 800d6a0 <__cvt+0x8c>
 800d698:	f1c6 0601 	rsb	r6, r6, #1
 800d69c:	f8ca 6000 	str.w	r6, [sl]
 800d6a0:	f8da 3000 	ldr.w	r3, [sl]
 800d6a4:	4499      	add	r9, r3
 800d6a6:	2200      	movs	r2, #0
 800d6a8:	2300      	movs	r3, #0
 800d6aa:	4620      	mov	r0, r4
 800d6ac:	4629      	mov	r1, r5
 800d6ae:	f7f3 f9f3 	bl	8000a98 <__aeabi_dcmpeq>
 800d6b2:	b108      	cbz	r0, 800d6b8 <__cvt+0xa4>
 800d6b4:	f8cd 900c 	str.w	r9, [sp, #12]
 800d6b8:	2230      	movs	r2, #48	; 0x30
 800d6ba:	9b03      	ldr	r3, [sp, #12]
 800d6bc:	454b      	cmp	r3, r9
 800d6be:	d307      	bcc.n	800d6d0 <__cvt+0xbc>
 800d6c0:	9b03      	ldr	r3, [sp, #12]
 800d6c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d6c4:	1bdb      	subs	r3, r3, r7
 800d6c6:	4638      	mov	r0, r7
 800d6c8:	6013      	str	r3, [r2, #0]
 800d6ca:	b004      	add	sp, #16
 800d6cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d6d0:	1c59      	adds	r1, r3, #1
 800d6d2:	9103      	str	r1, [sp, #12]
 800d6d4:	701a      	strb	r2, [r3, #0]
 800d6d6:	e7f0      	b.n	800d6ba <__cvt+0xa6>

0800d6d8 <__exponent>:
 800d6d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d6da:	4603      	mov	r3, r0
 800d6dc:	2900      	cmp	r1, #0
 800d6de:	bfb8      	it	lt
 800d6e0:	4249      	neglt	r1, r1
 800d6e2:	f803 2b02 	strb.w	r2, [r3], #2
 800d6e6:	bfb4      	ite	lt
 800d6e8:	222d      	movlt	r2, #45	; 0x2d
 800d6ea:	222b      	movge	r2, #43	; 0x2b
 800d6ec:	2909      	cmp	r1, #9
 800d6ee:	7042      	strb	r2, [r0, #1]
 800d6f0:	dd2a      	ble.n	800d748 <__exponent+0x70>
 800d6f2:	f10d 0407 	add.w	r4, sp, #7
 800d6f6:	46a4      	mov	ip, r4
 800d6f8:	270a      	movs	r7, #10
 800d6fa:	46a6      	mov	lr, r4
 800d6fc:	460a      	mov	r2, r1
 800d6fe:	fb91 f6f7 	sdiv	r6, r1, r7
 800d702:	fb07 1516 	mls	r5, r7, r6, r1
 800d706:	3530      	adds	r5, #48	; 0x30
 800d708:	2a63      	cmp	r2, #99	; 0x63
 800d70a:	f104 34ff 	add.w	r4, r4, #4294967295
 800d70e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800d712:	4631      	mov	r1, r6
 800d714:	dcf1      	bgt.n	800d6fa <__exponent+0x22>
 800d716:	3130      	adds	r1, #48	; 0x30
 800d718:	f1ae 0502 	sub.w	r5, lr, #2
 800d71c:	f804 1c01 	strb.w	r1, [r4, #-1]
 800d720:	1c44      	adds	r4, r0, #1
 800d722:	4629      	mov	r1, r5
 800d724:	4561      	cmp	r1, ip
 800d726:	d30a      	bcc.n	800d73e <__exponent+0x66>
 800d728:	f10d 0209 	add.w	r2, sp, #9
 800d72c:	eba2 020e 	sub.w	r2, r2, lr
 800d730:	4565      	cmp	r5, ip
 800d732:	bf88      	it	hi
 800d734:	2200      	movhi	r2, #0
 800d736:	4413      	add	r3, r2
 800d738:	1a18      	subs	r0, r3, r0
 800d73a:	b003      	add	sp, #12
 800d73c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d73e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d742:	f804 2f01 	strb.w	r2, [r4, #1]!
 800d746:	e7ed      	b.n	800d724 <__exponent+0x4c>
 800d748:	2330      	movs	r3, #48	; 0x30
 800d74a:	3130      	adds	r1, #48	; 0x30
 800d74c:	7083      	strb	r3, [r0, #2]
 800d74e:	70c1      	strb	r1, [r0, #3]
 800d750:	1d03      	adds	r3, r0, #4
 800d752:	e7f1      	b.n	800d738 <__exponent+0x60>

0800d754 <_printf_float>:
 800d754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d758:	ed2d 8b02 	vpush	{d8}
 800d75c:	b08d      	sub	sp, #52	; 0x34
 800d75e:	460c      	mov	r4, r1
 800d760:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800d764:	4616      	mov	r6, r2
 800d766:	461f      	mov	r7, r3
 800d768:	4605      	mov	r5, r0
 800d76a:	f001 fd53 	bl	800f214 <_localeconv_r>
 800d76e:	f8d0 a000 	ldr.w	sl, [r0]
 800d772:	4650      	mov	r0, sl
 800d774:	f7f2 fd0e 	bl	8000194 <strlen>
 800d778:	2300      	movs	r3, #0
 800d77a:	930a      	str	r3, [sp, #40]	; 0x28
 800d77c:	6823      	ldr	r3, [r4, #0]
 800d77e:	9305      	str	r3, [sp, #20]
 800d780:	f8d8 3000 	ldr.w	r3, [r8]
 800d784:	f894 b018 	ldrb.w	fp, [r4, #24]
 800d788:	3307      	adds	r3, #7
 800d78a:	f023 0307 	bic.w	r3, r3, #7
 800d78e:	f103 0208 	add.w	r2, r3, #8
 800d792:	f8c8 2000 	str.w	r2, [r8]
 800d796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d79a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800d79e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800d7a2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d7a6:	9307      	str	r3, [sp, #28]
 800d7a8:	f8cd 8018 	str.w	r8, [sp, #24]
 800d7ac:	ee08 0a10 	vmov	s16, r0
 800d7b0:	4b9f      	ldr	r3, [pc, #636]	; (800da30 <_printf_float+0x2dc>)
 800d7b2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d7b6:	f04f 32ff 	mov.w	r2, #4294967295
 800d7ba:	f7f3 f99f 	bl	8000afc <__aeabi_dcmpun>
 800d7be:	bb88      	cbnz	r0, 800d824 <_printf_float+0xd0>
 800d7c0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d7c4:	4b9a      	ldr	r3, [pc, #616]	; (800da30 <_printf_float+0x2dc>)
 800d7c6:	f04f 32ff 	mov.w	r2, #4294967295
 800d7ca:	f7f3 f979 	bl	8000ac0 <__aeabi_dcmple>
 800d7ce:	bb48      	cbnz	r0, 800d824 <_printf_float+0xd0>
 800d7d0:	2200      	movs	r2, #0
 800d7d2:	2300      	movs	r3, #0
 800d7d4:	4640      	mov	r0, r8
 800d7d6:	4649      	mov	r1, r9
 800d7d8:	f7f3 f968 	bl	8000aac <__aeabi_dcmplt>
 800d7dc:	b110      	cbz	r0, 800d7e4 <_printf_float+0x90>
 800d7de:	232d      	movs	r3, #45	; 0x2d
 800d7e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d7e4:	4b93      	ldr	r3, [pc, #588]	; (800da34 <_printf_float+0x2e0>)
 800d7e6:	4894      	ldr	r0, [pc, #592]	; (800da38 <_printf_float+0x2e4>)
 800d7e8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800d7ec:	bf94      	ite	ls
 800d7ee:	4698      	movls	r8, r3
 800d7f0:	4680      	movhi	r8, r0
 800d7f2:	2303      	movs	r3, #3
 800d7f4:	6123      	str	r3, [r4, #16]
 800d7f6:	9b05      	ldr	r3, [sp, #20]
 800d7f8:	f023 0204 	bic.w	r2, r3, #4
 800d7fc:	6022      	str	r2, [r4, #0]
 800d7fe:	f04f 0900 	mov.w	r9, #0
 800d802:	9700      	str	r7, [sp, #0]
 800d804:	4633      	mov	r3, r6
 800d806:	aa0b      	add	r2, sp, #44	; 0x2c
 800d808:	4621      	mov	r1, r4
 800d80a:	4628      	mov	r0, r5
 800d80c:	f000 f9d8 	bl	800dbc0 <_printf_common>
 800d810:	3001      	adds	r0, #1
 800d812:	f040 8090 	bne.w	800d936 <_printf_float+0x1e2>
 800d816:	f04f 30ff 	mov.w	r0, #4294967295
 800d81a:	b00d      	add	sp, #52	; 0x34
 800d81c:	ecbd 8b02 	vpop	{d8}
 800d820:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d824:	4642      	mov	r2, r8
 800d826:	464b      	mov	r3, r9
 800d828:	4640      	mov	r0, r8
 800d82a:	4649      	mov	r1, r9
 800d82c:	f7f3 f966 	bl	8000afc <__aeabi_dcmpun>
 800d830:	b140      	cbz	r0, 800d844 <_printf_float+0xf0>
 800d832:	464b      	mov	r3, r9
 800d834:	2b00      	cmp	r3, #0
 800d836:	bfbc      	itt	lt
 800d838:	232d      	movlt	r3, #45	; 0x2d
 800d83a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800d83e:	487f      	ldr	r0, [pc, #508]	; (800da3c <_printf_float+0x2e8>)
 800d840:	4b7f      	ldr	r3, [pc, #508]	; (800da40 <_printf_float+0x2ec>)
 800d842:	e7d1      	b.n	800d7e8 <_printf_float+0x94>
 800d844:	6863      	ldr	r3, [r4, #4]
 800d846:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800d84a:	9206      	str	r2, [sp, #24]
 800d84c:	1c5a      	adds	r2, r3, #1
 800d84e:	d13f      	bne.n	800d8d0 <_printf_float+0x17c>
 800d850:	2306      	movs	r3, #6
 800d852:	6063      	str	r3, [r4, #4]
 800d854:	9b05      	ldr	r3, [sp, #20]
 800d856:	6861      	ldr	r1, [r4, #4]
 800d858:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800d85c:	2300      	movs	r3, #0
 800d85e:	9303      	str	r3, [sp, #12]
 800d860:	ab0a      	add	r3, sp, #40	; 0x28
 800d862:	e9cd b301 	strd	fp, r3, [sp, #4]
 800d866:	ab09      	add	r3, sp, #36	; 0x24
 800d868:	ec49 8b10 	vmov	d0, r8, r9
 800d86c:	9300      	str	r3, [sp, #0]
 800d86e:	6022      	str	r2, [r4, #0]
 800d870:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800d874:	4628      	mov	r0, r5
 800d876:	f7ff fecd 	bl	800d614 <__cvt>
 800d87a:	9b06      	ldr	r3, [sp, #24]
 800d87c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d87e:	2b47      	cmp	r3, #71	; 0x47
 800d880:	4680      	mov	r8, r0
 800d882:	d108      	bne.n	800d896 <_printf_float+0x142>
 800d884:	1cc8      	adds	r0, r1, #3
 800d886:	db02      	blt.n	800d88e <_printf_float+0x13a>
 800d888:	6863      	ldr	r3, [r4, #4]
 800d88a:	4299      	cmp	r1, r3
 800d88c:	dd41      	ble.n	800d912 <_printf_float+0x1be>
 800d88e:	f1ab 0b02 	sub.w	fp, fp, #2
 800d892:	fa5f fb8b 	uxtb.w	fp, fp
 800d896:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d89a:	d820      	bhi.n	800d8de <_printf_float+0x18a>
 800d89c:	3901      	subs	r1, #1
 800d89e:	465a      	mov	r2, fp
 800d8a0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800d8a4:	9109      	str	r1, [sp, #36]	; 0x24
 800d8a6:	f7ff ff17 	bl	800d6d8 <__exponent>
 800d8aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d8ac:	1813      	adds	r3, r2, r0
 800d8ae:	2a01      	cmp	r2, #1
 800d8b0:	4681      	mov	r9, r0
 800d8b2:	6123      	str	r3, [r4, #16]
 800d8b4:	dc02      	bgt.n	800d8bc <_printf_float+0x168>
 800d8b6:	6822      	ldr	r2, [r4, #0]
 800d8b8:	07d2      	lsls	r2, r2, #31
 800d8ba:	d501      	bpl.n	800d8c0 <_printf_float+0x16c>
 800d8bc:	3301      	adds	r3, #1
 800d8be:	6123      	str	r3, [r4, #16]
 800d8c0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d09c      	beq.n	800d802 <_printf_float+0xae>
 800d8c8:	232d      	movs	r3, #45	; 0x2d
 800d8ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d8ce:	e798      	b.n	800d802 <_printf_float+0xae>
 800d8d0:	9a06      	ldr	r2, [sp, #24]
 800d8d2:	2a47      	cmp	r2, #71	; 0x47
 800d8d4:	d1be      	bne.n	800d854 <_printf_float+0x100>
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d1bc      	bne.n	800d854 <_printf_float+0x100>
 800d8da:	2301      	movs	r3, #1
 800d8dc:	e7b9      	b.n	800d852 <_printf_float+0xfe>
 800d8de:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800d8e2:	d118      	bne.n	800d916 <_printf_float+0x1c2>
 800d8e4:	2900      	cmp	r1, #0
 800d8e6:	6863      	ldr	r3, [r4, #4]
 800d8e8:	dd0b      	ble.n	800d902 <_printf_float+0x1ae>
 800d8ea:	6121      	str	r1, [r4, #16]
 800d8ec:	b913      	cbnz	r3, 800d8f4 <_printf_float+0x1a0>
 800d8ee:	6822      	ldr	r2, [r4, #0]
 800d8f0:	07d0      	lsls	r0, r2, #31
 800d8f2:	d502      	bpl.n	800d8fa <_printf_float+0x1a6>
 800d8f4:	3301      	adds	r3, #1
 800d8f6:	440b      	add	r3, r1
 800d8f8:	6123      	str	r3, [r4, #16]
 800d8fa:	65a1      	str	r1, [r4, #88]	; 0x58
 800d8fc:	f04f 0900 	mov.w	r9, #0
 800d900:	e7de      	b.n	800d8c0 <_printf_float+0x16c>
 800d902:	b913      	cbnz	r3, 800d90a <_printf_float+0x1b6>
 800d904:	6822      	ldr	r2, [r4, #0]
 800d906:	07d2      	lsls	r2, r2, #31
 800d908:	d501      	bpl.n	800d90e <_printf_float+0x1ba>
 800d90a:	3302      	adds	r3, #2
 800d90c:	e7f4      	b.n	800d8f8 <_printf_float+0x1a4>
 800d90e:	2301      	movs	r3, #1
 800d910:	e7f2      	b.n	800d8f8 <_printf_float+0x1a4>
 800d912:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800d916:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d918:	4299      	cmp	r1, r3
 800d91a:	db05      	blt.n	800d928 <_printf_float+0x1d4>
 800d91c:	6823      	ldr	r3, [r4, #0]
 800d91e:	6121      	str	r1, [r4, #16]
 800d920:	07d8      	lsls	r0, r3, #31
 800d922:	d5ea      	bpl.n	800d8fa <_printf_float+0x1a6>
 800d924:	1c4b      	adds	r3, r1, #1
 800d926:	e7e7      	b.n	800d8f8 <_printf_float+0x1a4>
 800d928:	2900      	cmp	r1, #0
 800d92a:	bfd4      	ite	le
 800d92c:	f1c1 0202 	rsble	r2, r1, #2
 800d930:	2201      	movgt	r2, #1
 800d932:	4413      	add	r3, r2
 800d934:	e7e0      	b.n	800d8f8 <_printf_float+0x1a4>
 800d936:	6823      	ldr	r3, [r4, #0]
 800d938:	055a      	lsls	r2, r3, #21
 800d93a:	d407      	bmi.n	800d94c <_printf_float+0x1f8>
 800d93c:	6923      	ldr	r3, [r4, #16]
 800d93e:	4642      	mov	r2, r8
 800d940:	4631      	mov	r1, r6
 800d942:	4628      	mov	r0, r5
 800d944:	47b8      	blx	r7
 800d946:	3001      	adds	r0, #1
 800d948:	d12c      	bne.n	800d9a4 <_printf_float+0x250>
 800d94a:	e764      	b.n	800d816 <_printf_float+0xc2>
 800d94c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d950:	f240 80e0 	bls.w	800db14 <_printf_float+0x3c0>
 800d954:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d958:	2200      	movs	r2, #0
 800d95a:	2300      	movs	r3, #0
 800d95c:	f7f3 f89c 	bl	8000a98 <__aeabi_dcmpeq>
 800d960:	2800      	cmp	r0, #0
 800d962:	d034      	beq.n	800d9ce <_printf_float+0x27a>
 800d964:	4a37      	ldr	r2, [pc, #220]	; (800da44 <_printf_float+0x2f0>)
 800d966:	2301      	movs	r3, #1
 800d968:	4631      	mov	r1, r6
 800d96a:	4628      	mov	r0, r5
 800d96c:	47b8      	blx	r7
 800d96e:	3001      	adds	r0, #1
 800d970:	f43f af51 	beq.w	800d816 <_printf_float+0xc2>
 800d974:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d978:	429a      	cmp	r2, r3
 800d97a:	db02      	blt.n	800d982 <_printf_float+0x22e>
 800d97c:	6823      	ldr	r3, [r4, #0]
 800d97e:	07d8      	lsls	r0, r3, #31
 800d980:	d510      	bpl.n	800d9a4 <_printf_float+0x250>
 800d982:	ee18 3a10 	vmov	r3, s16
 800d986:	4652      	mov	r2, sl
 800d988:	4631      	mov	r1, r6
 800d98a:	4628      	mov	r0, r5
 800d98c:	47b8      	blx	r7
 800d98e:	3001      	adds	r0, #1
 800d990:	f43f af41 	beq.w	800d816 <_printf_float+0xc2>
 800d994:	f04f 0800 	mov.w	r8, #0
 800d998:	f104 091a 	add.w	r9, r4, #26
 800d99c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d99e:	3b01      	subs	r3, #1
 800d9a0:	4543      	cmp	r3, r8
 800d9a2:	dc09      	bgt.n	800d9b8 <_printf_float+0x264>
 800d9a4:	6823      	ldr	r3, [r4, #0]
 800d9a6:	079b      	lsls	r3, r3, #30
 800d9a8:	f100 8105 	bmi.w	800dbb6 <_printf_float+0x462>
 800d9ac:	68e0      	ldr	r0, [r4, #12]
 800d9ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d9b0:	4298      	cmp	r0, r3
 800d9b2:	bfb8      	it	lt
 800d9b4:	4618      	movlt	r0, r3
 800d9b6:	e730      	b.n	800d81a <_printf_float+0xc6>
 800d9b8:	2301      	movs	r3, #1
 800d9ba:	464a      	mov	r2, r9
 800d9bc:	4631      	mov	r1, r6
 800d9be:	4628      	mov	r0, r5
 800d9c0:	47b8      	blx	r7
 800d9c2:	3001      	adds	r0, #1
 800d9c4:	f43f af27 	beq.w	800d816 <_printf_float+0xc2>
 800d9c8:	f108 0801 	add.w	r8, r8, #1
 800d9cc:	e7e6      	b.n	800d99c <_printf_float+0x248>
 800d9ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	dc39      	bgt.n	800da48 <_printf_float+0x2f4>
 800d9d4:	4a1b      	ldr	r2, [pc, #108]	; (800da44 <_printf_float+0x2f0>)
 800d9d6:	2301      	movs	r3, #1
 800d9d8:	4631      	mov	r1, r6
 800d9da:	4628      	mov	r0, r5
 800d9dc:	47b8      	blx	r7
 800d9de:	3001      	adds	r0, #1
 800d9e0:	f43f af19 	beq.w	800d816 <_printf_float+0xc2>
 800d9e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d9e8:	4313      	orrs	r3, r2
 800d9ea:	d102      	bne.n	800d9f2 <_printf_float+0x29e>
 800d9ec:	6823      	ldr	r3, [r4, #0]
 800d9ee:	07d9      	lsls	r1, r3, #31
 800d9f0:	d5d8      	bpl.n	800d9a4 <_printf_float+0x250>
 800d9f2:	ee18 3a10 	vmov	r3, s16
 800d9f6:	4652      	mov	r2, sl
 800d9f8:	4631      	mov	r1, r6
 800d9fa:	4628      	mov	r0, r5
 800d9fc:	47b8      	blx	r7
 800d9fe:	3001      	adds	r0, #1
 800da00:	f43f af09 	beq.w	800d816 <_printf_float+0xc2>
 800da04:	f04f 0900 	mov.w	r9, #0
 800da08:	f104 0a1a 	add.w	sl, r4, #26
 800da0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da0e:	425b      	negs	r3, r3
 800da10:	454b      	cmp	r3, r9
 800da12:	dc01      	bgt.n	800da18 <_printf_float+0x2c4>
 800da14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800da16:	e792      	b.n	800d93e <_printf_float+0x1ea>
 800da18:	2301      	movs	r3, #1
 800da1a:	4652      	mov	r2, sl
 800da1c:	4631      	mov	r1, r6
 800da1e:	4628      	mov	r0, r5
 800da20:	47b8      	blx	r7
 800da22:	3001      	adds	r0, #1
 800da24:	f43f aef7 	beq.w	800d816 <_printf_float+0xc2>
 800da28:	f109 0901 	add.w	r9, r9, #1
 800da2c:	e7ee      	b.n	800da0c <_printf_float+0x2b8>
 800da2e:	bf00      	nop
 800da30:	7fefffff 	.word	0x7fefffff
 800da34:	08011d34 	.word	0x08011d34
 800da38:	08011d38 	.word	0x08011d38
 800da3c:	08011d40 	.word	0x08011d40
 800da40:	08011d3c 	.word	0x08011d3c
 800da44:	08011d44 	.word	0x08011d44
 800da48:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800da4a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800da4c:	429a      	cmp	r2, r3
 800da4e:	bfa8      	it	ge
 800da50:	461a      	movge	r2, r3
 800da52:	2a00      	cmp	r2, #0
 800da54:	4691      	mov	r9, r2
 800da56:	dc37      	bgt.n	800dac8 <_printf_float+0x374>
 800da58:	f04f 0b00 	mov.w	fp, #0
 800da5c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800da60:	f104 021a 	add.w	r2, r4, #26
 800da64:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800da66:	9305      	str	r3, [sp, #20]
 800da68:	eba3 0309 	sub.w	r3, r3, r9
 800da6c:	455b      	cmp	r3, fp
 800da6e:	dc33      	bgt.n	800dad8 <_printf_float+0x384>
 800da70:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800da74:	429a      	cmp	r2, r3
 800da76:	db3b      	blt.n	800daf0 <_printf_float+0x39c>
 800da78:	6823      	ldr	r3, [r4, #0]
 800da7a:	07da      	lsls	r2, r3, #31
 800da7c:	d438      	bmi.n	800daf0 <_printf_float+0x39c>
 800da7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800da80:	9a05      	ldr	r2, [sp, #20]
 800da82:	9909      	ldr	r1, [sp, #36]	; 0x24
 800da84:	1a9a      	subs	r2, r3, r2
 800da86:	eba3 0901 	sub.w	r9, r3, r1
 800da8a:	4591      	cmp	r9, r2
 800da8c:	bfa8      	it	ge
 800da8e:	4691      	movge	r9, r2
 800da90:	f1b9 0f00 	cmp.w	r9, #0
 800da94:	dc35      	bgt.n	800db02 <_printf_float+0x3ae>
 800da96:	f04f 0800 	mov.w	r8, #0
 800da9a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800da9e:	f104 0a1a 	add.w	sl, r4, #26
 800daa2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800daa6:	1a9b      	subs	r3, r3, r2
 800daa8:	eba3 0309 	sub.w	r3, r3, r9
 800daac:	4543      	cmp	r3, r8
 800daae:	f77f af79 	ble.w	800d9a4 <_printf_float+0x250>
 800dab2:	2301      	movs	r3, #1
 800dab4:	4652      	mov	r2, sl
 800dab6:	4631      	mov	r1, r6
 800dab8:	4628      	mov	r0, r5
 800daba:	47b8      	blx	r7
 800dabc:	3001      	adds	r0, #1
 800dabe:	f43f aeaa 	beq.w	800d816 <_printf_float+0xc2>
 800dac2:	f108 0801 	add.w	r8, r8, #1
 800dac6:	e7ec      	b.n	800daa2 <_printf_float+0x34e>
 800dac8:	4613      	mov	r3, r2
 800daca:	4631      	mov	r1, r6
 800dacc:	4642      	mov	r2, r8
 800dace:	4628      	mov	r0, r5
 800dad0:	47b8      	blx	r7
 800dad2:	3001      	adds	r0, #1
 800dad4:	d1c0      	bne.n	800da58 <_printf_float+0x304>
 800dad6:	e69e      	b.n	800d816 <_printf_float+0xc2>
 800dad8:	2301      	movs	r3, #1
 800dada:	4631      	mov	r1, r6
 800dadc:	4628      	mov	r0, r5
 800dade:	9205      	str	r2, [sp, #20]
 800dae0:	47b8      	blx	r7
 800dae2:	3001      	adds	r0, #1
 800dae4:	f43f ae97 	beq.w	800d816 <_printf_float+0xc2>
 800dae8:	9a05      	ldr	r2, [sp, #20]
 800daea:	f10b 0b01 	add.w	fp, fp, #1
 800daee:	e7b9      	b.n	800da64 <_printf_float+0x310>
 800daf0:	ee18 3a10 	vmov	r3, s16
 800daf4:	4652      	mov	r2, sl
 800daf6:	4631      	mov	r1, r6
 800daf8:	4628      	mov	r0, r5
 800dafa:	47b8      	blx	r7
 800dafc:	3001      	adds	r0, #1
 800dafe:	d1be      	bne.n	800da7e <_printf_float+0x32a>
 800db00:	e689      	b.n	800d816 <_printf_float+0xc2>
 800db02:	9a05      	ldr	r2, [sp, #20]
 800db04:	464b      	mov	r3, r9
 800db06:	4442      	add	r2, r8
 800db08:	4631      	mov	r1, r6
 800db0a:	4628      	mov	r0, r5
 800db0c:	47b8      	blx	r7
 800db0e:	3001      	adds	r0, #1
 800db10:	d1c1      	bne.n	800da96 <_printf_float+0x342>
 800db12:	e680      	b.n	800d816 <_printf_float+0xc2>
 800db14:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800db16:	2a01      	cmp	r2, #1
 800db18:	dc01      	bgt.n	800db1e <_printf_float+0x3ca>
 800db1a:	07db      	lsls	r3, r3, #31
 800db1c:	d538      	bpl.n	800db90 <_printf_float+0x43c>
 800db1e:	2301      	movs	r3, #1
 800db20:	4642      	mov	r2, r8
 800db22:	4631      	mov	r1, r6
 800db24:	4628      	mov	r0, r5
 800db26:	47b8      	blx	r7
 800db28:	3001      	adds	r0, #1
 800db2a:	f43f ae74 	beq.w	800d816 <_printf_float+0xc2>
 800db2e:	ee18 3a10 	vmov	r3, s16
 800db32:	4652      	mov	r2, sl
 800db34:	4631      	mov	r1, r6
 800db36:	4628      	mov	r0, r5
 800db38:	47b8      	blx	r7
 800db3a:	3001      	adds	r0, #1
 800db3c:	f43f ae6b 	beq.w	800d816 <_printf_float+0xc2>
 800db40:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800db44:	2200      	movs	r2, #0
 800db46:	2300      	movs	r3, #0
 800db48:	f7f2 ffa6 	bl	8000a98 <__aeabi_dcmpeq>
 800db4c:	b9d8      	cbnz	r0, 800db86 <_printf_float+0x432>
 800db4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800db50:	f108 0201 	add.w	r2, r8, #1
 800db54:	3b01      	subs	r3, #1
 800db56:	4631      	mov	r1, r6
 800db58:	4628      	mov	r0, r5
 800db5a:	47b8      	blx	r7
 800db5c:	3001      	adds	r0, #1
 800db5e:	d10e      	bne.n	800db7e <_printf_float+0x42a>
 800db60:	e659      	b.n	800d816 <_printf_float+0xc2>
 800db62:	2301      	movs	r3, #1
 800db64:	4652      	mov	r2, sl
 800db66:	4631      	mov	r1, r6
 800db68:	4628      	mov	r0, r5
 800db6a:	47b8      	blx	r7
 800db6c:	3001      	adds	r0, #1
 800db6e:	f43f ae52 	beq.w	800d816 <_printf_float+0xc2>
 800db72:	f108 0801 	add.w	r8, r8, #1
 800db76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800db78:	3b01      	subs	r3, #1
 800db7a:	4543      	cmp	r3, r8
 800db7c:	dcf1      	bgt.n	800db62 <_printf_float+0x40e>
 800db7e:	464b      	mov	r3, r9
 800db80:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800db84:	e6dc      	b.n	800d940 <_printf_float+0x1ec>
 800db86:	f04f 0800 	mov.w	r8, #0
 800db8a:	f104 0a1a 	add.w	sl, r4, #26
 800db8e:	e7f2      	b.n	800db76 <_printf_float+0x422>
 800db90:	2301      	movs	r3, #1
 800db92:	4642      	mov	r2, r8
 800db94:	e7df      	b.n	800db56 <_printf_float+0x402>
 800db96:	2301      	movs	r3, #1
 800db98:	464a      	mov	r2, r9
 800db9a:	4631      	mov	r1, r6
 800db9c:	4628      	mov	r0, r5
 800db9e:	47b8      	blx	r7
 800dba0:	3001      	adds	r0, #1
 800dba2:	f43f ae38 	beq.w	800d816 <_printf_float+0xc2>
 800dba6:	f108 0801 	add.w	r8, r8, #1
 800dbaa:	68e3      	ldr	r3, [r4, #12]
 800dbac:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dbae:	1a5b      	subs	r3, r3, r1
 800dbb0:	4543      	cmp	r3, r8
 800dbb2:	dcf0      	bgt.n	800db96 <_printf_float+0x442>
 800dbb4:	e6fa      	b.n	800d9ac <_printf_float+0x258>
 800dbb6:	f04f 0800 	mov.w	r8, #0
 800dbba:	f104 0919 	add.w	r9, r4, #25
 800dbbe:	e7f4      	b.n	800dbaa <_printf_float+0x456>

0800dbc0 <_printf_common>:
 800dbc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dbc4:	4616      	mov	r6, r2
 800dbc6:	4699      	mov	r9, r3
 800dbc8:	688a      	ldr	r2, [r1, #8]
 800dbca:	690b      	ldr	r3, [r1, #16]
 800dbcc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800dbd0:	4293      	cmp	r3, r2
 800dbd2:	bfb8      	it	lt
 800dbd4:	4613      	movlt	r3, r2
 800dbd6:	6033      	str	r3, [r6, #0]
 800dbd8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800dbdc:	4607      	mov	r7, r0
 800dbde:	460c      	mov	r4, r1
 800dbe0:	b10a      	cbz	r2, 800dbe6 <_printf_common+0x26>
 800dbe2:	3301      	adds	r3, #1
 800dbe4:	6033      	str	r3, [r6, #0]
 800dbe6:	6823      	ldr	r3, [r4, #0]
 800dbe8:	0699      	lsls	r1, r3, #26
 800dbea:	bf42      	ittt	mi
 800dbec:	6833      	ldrmi	r3, [r6, #0]
 800dbee:	3302      	addmi	r3, #2
 800dbf0:	6033      	strmi	r3, [r6, #0]
 800dbf2:	6825      	ldr	r5, [r4, #0]
 800dbf4:	f015 0506 	ands.w	r5, r5, #6
 800dbf8:	d106      	bne.n	800dc08 <_printf_common+0x48>
 800dbfa:	f104 0a19 	add.w	sl, r4, #25
 800dbfe:	68e3      	ldr	r3, [r4, #12]
 800dc00:	6832      	ldr	r2, [r6, #0]
 800dc02:	1a9b      	subs	r3, r3, r2
 800dc04:	42ab      	cmp	r3, r5
 800dc06:	dc26      	bgt.n	800dc56 <_printf_common+0x96>
 800dc08:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800dc0c:	1e13      	subs	r3, r2, #0
 800dc0e:	6822      	ldr	r2, [r4, #0]
 800dc10:	bf18      	it	ne
 800dc12:	2301      	movne	r3, #1
 800dc14:	0692      	lsls	r2, r2, #26
 800dc16:	d42b      	bmi.n	800dc70 <_printf_common+0xb0>
 800dc18:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800dc1c:	4649      	mov	r1, r9
 800dc1e:	4638      	mov	r0, r7
 800dc20:	47c0      	blx	r8
 800dc22:	3001      	adds	r0, #1
 800dc24:	d01e      	beq.n	800dc64 <_printf_common+0xa4>
 800dc26:	6823      	ldr	r3, [r4, #0]
 800dc28:	68e5      	ldr	r5, [r4, #12]
 800dc2a:	6832      	ldr	r2, [r6, #0]
 800dc2c:	f003 0306 	and.w	r3, r3, #6
 800dc30:	2b04      	cmp	r3, #4
 800dc32:	bf08      	it	eq
 800dc34:	1aad      	subeq	r5, r5, r2
 800dc36:	68a3      	ldr	r3, [r4, #8]
 800dc38:	6922      	ldr	r2, [r4, #16]
 800dc3a:	bf0c      	ite	eq
 800dc3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800dc40:	2500      	movne	r5, #0
 800dc42:	4293      	cmp	r3, r2
 800dc44:	bfc4      	itt	gt
 800dc46:	1a9b      	subgt	r3, r3, r2
 800dc48:	18ed      	addgt	r5, r5, r3
 800dc4a:	2600      	movs	r6, #0
 800dc4c:	341a      	adds	r4, #26
 800dc4e:	42b5      	cmp	r5, r6
 800dc50:	d11a      	bne.n	800dc88 <_printf_common+0xc8>
 800dc52:	2000      	movs	r0, #0
 800dc54:	e008      	b.n	800dc68 <_printf_common+0xa8>
 800dc56:	2301      	movs	r3, #1
 800dc58:	4652      	mov	r2, sl
 800dc5a:	4649      	mov	r1, r9
 800dc5c:	4638      	mov	r0, r7
 800dc5e:	47c0      	blx	r8
 800dc60:	3001      	adds	r0, #1
 800dc62:	d103      	bne.n	800dc6c <_printf_common+0xac>
 800dc64:	f04f 30ff 	mov.w	r0, #4294967295
 800dc68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc6c:	3501      	adds	r5, #1
 800dc6e:	e7c6      	b.n	800dbfe <_printf_common+0x3e>
 800dc70:	18e1      	adds	r1, r4, r3
 800dc72:	1c5a      	adds	r2, r3, #1
 800dc74:	2030      	movs	r0, #48	; 0x30
 800dc76:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800dc7a:	4422      	add	r2, r4
 800dc7c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800dc80:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800dc84:	3302      	adds	r3, #2
 800dc86:	e7c7      	b.n	800dc18 <_printf_common+0x58>
 800dc88:	2301      	movs	r3, #1
 800dc8a:	4622      	mov	r2, r4
 800dc8c:	4649      	mov	r1, r9
 800dc8e:	4638      	mov	r0, r7
 800dc90:	47c0      	blx	r8
 800dc92:	3001      	adds	r0, #1
 800dc94:	d0e6      	beq.n	800dc64 <_printf_common+0xa4>
 800dc96:	3601      	adds	r6, #1
 800dc98:	e7d9      	b.n	800dc4e <_printf_common+0x8e>
	...

0800dc9c <_printf_i>:
 800dc9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dca0:	7e0f      	ldrb	r7, [r1, #24]
 800dca2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800dca4:	2f78      	cmp	r7, #120	; 0x78
 800dca6:	4691      	mov	r9, r2
 800dca8:	4680      	mov	r8, r0
 800dcaa:	460c      	mov	r4, r1
 800dcac:	469a      	mov	sl, r3
 800dcae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800dcb2:	d807      	bhi.n	800dcc4 <_printf_i+0x28>
 800dcb4:	2f62      	cmp	r7, #98	; 0x62
 800dcb6:	d80a      	bhi.n	800dcce <_printf_i+0x32>
 800dcb8:	2f00      	cmp	r7, #0
 800dcba:	f000 80d8 	beq.w	800de6e <_printf_i+0x1d2>
 800dcbe:	2f58      	cmp	r7, #88	; 0x58
 800dcc0:	f000 80a3 	beq.w	800de0a <_printf_i+0x16e>
 800dcc4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dcc8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800dccc:	e03a      	b.n	800dd44 <_printf_i+0xa8>
 800dcce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800dcd2:	2b15      	cmp	r3, #21
 800dcd4:	d8f6      	bhi.n	800dcc4 <_printf_i+0x28>
 800dcd6:	a101      	add	r1, pc, #4	; (adr r1, 800dcdc <_printf_i+0x40>)
 800dcd8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800dcdc:	0800dd35 	.word	0x0800dd35
 800dce0:	0800dd49 	.word	0x0800dd49
 800dce4:	0800dcc5 	.word	0x0800dcc5
 800dce8:	0800dcc5 	.word	0x0800dcc5
 800dcec:	0800dcc5 	.word	0x0800dcc5
 800dcf0:	0800dcc5 	.word	0x0800dcc5
 800dcf4:	0800dd49 	.word	0x0800dd49
 800dcf8:	0800dcc5 	.word	0x0800dcc5
 800dcfc:	0800dcc5 	.word	0x0800dcc5
 800dd00:	0800dcc5 	.word	0x0800dcc5
 800dd04:	0800dcc5 	.word	0x0800dcc5
 800dd08:	0800de55 	.word	0x0800de55
 800dd0c:	0800dd79 	.word	0x0800dd79
 800dd10:	0800de37 	.word	0x0800de37
 800dd14:	0800dcc5 	.word	0x0800dcc5
 800dd18:	0800dcc5 	.word	0x0800dcc5
 800dd1c:	0800de77 	.word	0x0800de77
 800dd20:	0800dcc5 	.word	0x0800dcc5
 800dd24:	0800dd79 	.word	0x0800dd79
 800dd28:	0800dcc5 	.word	0x0800dcc5
 800dd2c:	0800dcc5 	.word	0x0800dcc5
 800dd30:	0800de3f 	.word	0x0800de3f
 800dd34:	682b      	ldr	r3, [r5, #0]
 800dd36:	1d1a      	adds	r2, r3, #4
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	602a      	str	r2, [r5, #0]
 800dd3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dd40:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800dd44:	2301      	movs	r3, #1
 800dd46:	e0a3      	b.n	800de90 <_printf_i+0x1f4>
 800dd48:	6820      	ldr	r0, [r4, #0]
 800dd4a:	6829      	ldr	r1, [r5, #0]
 800dd4c:	0606      	lsls	r6, r0, #24
 800dd4e:	f101 0304 	add.w	r3, r1, #4
 800dd52:	d50a      	bpl.n	800dd6a <_printf_i+0xce>
 800dd54:	680e      	ldr	r6, [r1, #0]
 800dd56:	602b      	str	r3, [r5, #0]
 800dd58:	2e00      	cmp	r6, #0
 800dd5a:	da03      	bge.n	800dd64 <_printf_i+0xc8>
 800dd5c:	232d      	movs	r3, #45	; 0x2d
 800dd5e:	4276      	negs	r6, r6
 800dd60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dd64:	485e      	ldr	r0, [pc, #376]	; (800dee0 <_printf_i+0x244>)
 800dd66:	230a      	movs	r3, #10
 800dd68:	e019      	b.n	800dd9e <_printf_i+0x102>
 800dd6a:	680e      	ldr	r6, [r1, #0]
 800dd6c:	602b      	str	r3, [r5, #0]
 800dd6e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800dd72:	bf18      	it	ne
 800dd74:	b236      	sxthne	r6, r6
 800dd76:	e7ef      	b.n	800dd58 <_printf_i+0xbc>
 800dd78:	682b      	ldr	r3, [r5, #0]
 800dd7a:	6820      	ldr	r0, [r4, #0]
 800dd7c:	1d19      	adds	r1, r3, #4
 800dd7e:	6029      	str	r1, [r5, #0]
 800dd80:	0601      	lsls	r1, r0, #24
 800dd82:	d501      	bpl.n	800dd88 <_printf_i+0xec>
 800dd84:	681e      	ldr	r6, [r3, #0]
 800dd86:	e002      	b.n	800dd8e <_printf_i+0xf2>
 800dd88:	0646      	lsls	r6, r0, #25
 800dd8a:	d5fb      	bpl.n	800dd84 <_printf_i+0xe8>
 800dd8c:	881e      	ldrh	r6, [r3, #0]
 800dd8e:	4854      	ldr	r0, [pc, #336]	; (800dee0 <_printf_i+0x244>)
 800dd90:	2f6f      	cmp	r7, #111	; 0x6f
 800dd92:	bf0c      	ite	eq
 800dd94:	2308      	moveq	r3, #8
 800dd96:	230a      	movne	r3, #10
 800dd98:	2100      	movs	r1, #0
 800dd9a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800dd9e:	6865      	ldr	r5, [r4, #4]
 800dda0:	60a5      	str	r5, [r4, #8]
 800dda2:	2d00      	cmp	r5, #0
 800dda4:	bfa2      	ittt	ge
 800dda6:	6821      	ldrge	r1, [r4, #0]
 800dda8:	f021 0104 	bicge.w	r1, r1, #4
 800ddac:	6021      	strge	r1, [r4, #0]
 800ddae:	b90e      	cbnz	r6, 800ddb4 <_printf_i+0x118>
 800ddb0:	2d00      	cmp	r5, #0
 800ddb2:	d04d      	beq.n	800de50 <_printf_i+0x1b4>
 800ddb4:	4615      	mov	r5, r2
 800ddb6:	fbb6 f1f3 	udiv	r1, r6, r3
 800ddba:	fb03 6711 	mls	r7, r3, r1, r6
 800ddbe:	5dc7      	ldrb	r7, [r0, r7]
 800ddc0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ddc4:	4637      	mov	r7, r6
 800ddc6:	42bb      	cmp	r3, r7
 800ddc8:	460e      	mov	r6, r1
 800ddca:	d9f4      	bls.n	800ddb6 <_printf_i+0x11a>
 800ddcc:	2b08      	cmp	r3, #8
 800ddce:	d10b      	bne.n	800dde8 <_printf_i+0x14c>
 800ddd0:	6823      	ldr	r3, [r4, #0]
 800ddd2:	07de      	lsls	r6, r3, #31
 800ddd4:	d508      	bpl.n	800dde8 <_printf_i+0x14c>
 800ddd6:	6923      	ldr	r3, [r4, #16]
 800ddd8:	6861      	ldr	r1, [r4, #4]
 800ddda:	4299      	cmp	r1, r3
 800dddc:	bfde      	ittt	le
 800ddde:	2330      	movle	r3, #48	; 0x30
 800dde0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800dde4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800dde8:	1b52      	subs	r2, r2, r5
 800ddea:	6122      	str	r2, [r4, #16]
 800ddec:	f8cd a000 	str.w	sl, [sp]
 800ddf0:	464b      	mov	r3, r9
 800ddf2:	aa03      	add	r2, sp, #12
 800ddf4:	4621      	mov	r1, r4
 800ddf6:	4640      	mov	r0, r8
 800ddf8:	f7ff fee2 	bl	800dbc0 <_printf_common>
 800ddfc:	3001      	adds	r0, #1
 800ddfe:	d14c      	bne.n	800de9a <_printf_i+0x1fe>
 800de00:	f04f 30ff 	mov.w	r0, #4294967295
 800de04:	b004      	add	sp, #16
 800de06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800de0a:	4835      	ldr	r0, [pc, #212]	; (800dee0 <_printf_i+0x244>)
 800de0c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800de10:	6829      	ldr	r1, [r5, #0]
 800de12:	6823      	ldr	r3, [r4, #0]
 800de14:	f851 6b04 	ldr.w	r6, [r1], #4
 800de18:	6029      	str	r1, [r5, #0]
 800de1a:	061d      	lsls	r5, r3, #24
 800de1c:	d514      	bpl.n	800de48 <_printf_i+0x1ac>
 800de1e:	07df      	lsls	r7, r3, #31
 800de20:	bf44      	itt	mi
 800de22:	f043 0320 	orrmi.w	r3, r3, #32
 800de26:	6023      	strmi	r3, [r4, #0]
 800de28:	b91e      	cbnz	r6, 800de32 <_printf_i+0x196>
 800de2a:	6823      	ldr	r3, [r4, #0]
 800de2c:	f023 0320 	bic.w	r3, r3, #32
 800de30:	6023      	str	r3, [r4, #0]
 800de32:	2310      	movs	r3, #16
 800de34:	e7b0      	b.n	800dd98 <_printf_i+0xfc>
 800de36:	6823      	ldr	r3, [r4, #0]
 800de38:	f043 0320 	orr.w	r3, r3, #32
 800de3c:	6023      	str	r3, [r4, #0]
 800de3e:	2378      	movs	r3, #120	; 0x78
 800de40:	4828      	ldr	r0, [pc, #160]	; (800dee4 <_printf_i+0x248>)
 800de42:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800de46:	e7e3      	b.n	800de10 <_printf_i+0x174>
 800de48:	0659      	lsls	r1, r3, #25
 800de4a:	bf48      	it	mi
 800de4c:	b2b6      	uxthmi	r6, r6
 800de4e:	e7e6      	b.n	800de1e <_printf_i+0x182>
 800de50:	4615      	mov	r5, r2
 800de52:	e7bb      	b.n	800ddcc <_printf_i+0x130>
 800de54:	682b      	ldr	r3, [r5, #0]
 800de56:	6826      	ldr	r6, [r4, #0]
 800de58:	6961      	ldr	r1, [r4, #20]
 800de5a:	1d18      	adds	r0, r3, #4
 800de5c:	6028      	str	r0, [r5, #0]
 800de5e:	0635      	lsls	r5, r6, #24
 800de60:	681b      	ldr	r3, [r3, #0]
 800de62:	d501      	bpl.n	800de68 <_printf_i+0x1cc>
 800de64:	6019      	str	r1, [r3, #0]
 800de66:	e002      	b.n	800de6e <_printf_i+0x1d2>
 800de68:	0670      	lsls	r0, r6, #25
 800de6a:	d5fb      	bpl.n	800de64 <_printf_i+0x1c8>
 800de6c:	8019      	strh	r1, [r3, #0]
 800de6e:	2300      	movs	r3, #0
 800de70:	6123      	str	r3, [r4, #16]
 800de72:	4615      	mov	r5, r2
 800de74:	e7ba      	b.n	800ddec <_printf_i+0x150>
 800de76:	682b      	ldr	r3, [r5, #0]
 800de78:	1d1a      	adds	r2, r3, #4
 800de7a:	602a      	str	r2, [r5, #0]
 800de7c:	681d      	ldr	r5, [r3, #0]
 800de7e:	6862      	ldr	r2, [r4, #4]
 800de80:	2100      	movs	r1, #0
 800de82:	4628      	mov	r0, r5
 800de84:	f7f2 f994 	bl	80001b0 <memchr>
 800de88:	b108      	cbz	r0, 800de8e <_printf_i+0x1f2>
 800de8a:	1b40      	subs	r0, r0, r5
 800de8c:	6060      	str	r0, [r4, #4]
 800de8e:	6863      	ldr	r3, [r4, #4]
 800de90:	6123      	str	r3, [r4, #16]
 800de92:	2300      	movs	r3, #0
 800de94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800de98:	e7a8      	b.n	800ddec <_printf_i+0x150>
 800de9a:	6923      	ldr	r3, [r4, #16]
 800de9c:	462a      	mov	r2, r5
 800de9e:	4649      	mov	r1, r9
 800dea0:	4640      	mov	r0, r8
 800dea2:	47d0      	blx	sl
 800dea4:	3001      	adds	r0, #1
 800dea6:	d0ab      	beq.n	800de00 <_printf_i+0x164>
 800dea8:	6823      	ldr	r3, [r4, #0]
 800deaa:	079b      	lsls	r3, r3, #30
 800deac:	d413      	bmi.n	800ded6 <_printf_i+0x23a>
 800deae:	68e0      	ldr	r0, [r4, #12]
 800deb0:	9b03      	ldr	r3, [sp, #12]
 800deb2:	4298      	cmp	r0, r3
 800deb4:	bfb8      	it	lt
 800deb6:	4618      	movlt	r0, r3
 800deb8:	e7a4      	b.n	800de04 <_printf_i+0x168>
 800deba:	2301      	movs	r3, #1
 800debc:	4632      	mov	r2, r6
 800debe:	4649      	mov	r1, r9
 800dec0:	4640      	mov	r0, r8
 800dec2:	47d0      	blx	sl
 800dec4:	3001      	adds	r0, #1
 800dec6:	d09b      	beq.n	800de00 <_printf_i+0x164>
 800dec8:	3501      	adds	r5, #1
 800deca:	68e3      	ldr	r3, [r4, #12]
 800decc:	9903      	ldr	r1, [sp, #12]
 800dece:	1a5b      	subs	r3, r3, r1
 800ded0:	42ab      	cmp	r3, r5
 800ded2:	dcf2      	bgt.n	800deba <_printf_i+0x21e>
 800ded4:	e7eb      	b.n	800deae <_printf_i+0x212>
 800ded6:	2500      	movs	r5, #0
 800ded8:	f104 0619 	add.w	r6, r4, #25
 800dedc:	e7f5      	b.n	800deca <_printf_i+0x22e>
 800dede:	bf00      	nop
 800dee0:	08011d46 	.word	0x08011d46
 800dee4:	08011d57 	.word	0x08011d57

0800dee8 <iprintf>:
 800dee8:	b40f      	push	{r0, r1, r2, r3}
 800deea:	4b0a      	ldr	r3, [pc, #40]	; (800df14 <iprintf+0x2c>)
 800deec:	b513      	push	{r0, r1, r4, lr}
 800deee:	681c      	ldr	r4, [r3, #0]
 800def0:	b124      	cbz	r4, 800defc <iprintf+0x14>
 800def2:	69a3      	ldr	r3, [r4, #24]
 800def4:	b913      	cbnz	r3, 800defc <iprintf+0x14>
 800def6:	4620      	mov	r0, r4
 800def8:	f001 f8ee 	bl	800f0d8 <__sinit>
 800defc:	ab05      	add	r3, sp, #20
 800defe:	9a04      	ldr	r2, [sp, #16]
 800df00:	68a1      	ldr	r1, [r4, #8]
 800df02:	9301      	str	r3, [sp, #4]
 800df04:	4620      	mov	r0, r4
 800df06:	f001 fe9d 	bl	800fc44 <_vfiprintf_r>
 800df0a:	b002      	add	sp, #8
 800df0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800df10:	b004      	add	sp, #16
 800df12:	4770      	bx	lr
 800df14:	20000058 	.word	0x20000058

0800df18 <putchar>:
 800df18:	4b09      	ldr	r3, [pc, #36]	; (800df40 <putchar+0x28>)
 800df1a:	b513      	push	{r0, r1, r4, lr}
 800df1c:	681c      	ldr	r4, [r3, #0]
 800df1e:	4601      	mov	r1, r0
 800df20:	b134      	cbz	r4, 800df30 <putchar+0x18>
 800df22:	69a3      	ldr	r3, [r4, #24]
 800df24:	b923      	cbnz	r3, 800df30 <putchar+0x18>
 800df26:	9001      	str	r0, [sp, #4]
 800df28:	4620      	mov	r0, r4
 800df2a:	f001 f8d5 	bl	800f0d8 <__sinit>
 800df2e:	9901      	ldr	r1, [sp, #4]
 800df30:	68a2      	ldr	r2, [r4, #8]
 800df32:	4620      	mov	r0, r4
 800df34:	b002      	add	sp, #8
 800df36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800df3a:	f001 bfb3 	b.w	800fea4 <_putc_r>
 800df3e:	bf00      	nop
 800df40:	20000058 	.word	0x20000058

0800df44 <_puts_r>:
 800df44:	b570      	push	{r4, r5, r6, lr}
 800df46:	460e      	mov	r6, r1
 800df48:	4605      	mov	r5, r0
 800df4a:	b118      	cbz	r0, 800df54 <_puts_r+0x10>
 800df4c:	6983      	ldr	r3, [r0, #24]
 800df4e:	b90b      	cbnz	r3, 800df54 <_puts_r+0x10>
 800df50:	f001 f8c2 	bl	800f0d8 <__sinit>
 800df54:	69ab      	ldr	r3, [r5, #24]
 800df56:	68ac      	ldr	r4, [r5, #8]
 800df58:	b913      	cbnz	r3, 800df60 <_puts_r+0x1c>
 800df5a:	4628      	mov	r0, r5
 800df5c:	f001 f8bc 	bl	800f0d8 <__sinit>
 800df60:	4b2c      	ldr	r3, [pc, #176]	; (800e014 <_puts_r+0xd0>)
 800df62:	429c      	cmp	r4, r3
 800df64:	d120      	bne.n	800dfa8 <_puts_r+0x64>
 800df66:	686c      	ldr	r4, [r5, #4]
 800df68:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800df6a:	07db      	lsls	r3, r3, #31
 800df6c:	d405      	bmi.n	800df7a <_puts_r+0x36>
 800df6e:	89a3      	ldrh	r3, [r4, #12]
 800df70:	0598      	lsls	r0, r3, #22
 800df72:	d402      	bmi.n	800df7a <_puts_r+0x36>
 800df74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800df76:	f001 f952 	bl	800f21e <__retarget_lock_acquire_recursive>
 800df7a:	89a3      	ldrh	r3, [r4, #12]
 800df7c:	0719      	lsls	r1, r3, #28
 800df7e:	d51d      	bpl.n	800dfbc <_puts_r+0x78>
 800df80:	6923      	ldr	r3, [r4, #16]
 800df82:	b1db      	cbz	r3, 800dfbc <_puts_r+0x78>
 800df84:	3e01      	subs	r6, #1
 800df86:	68a3      	ldr	r3, [r4, #8]
 800df88:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800df8c:	3b01      	subs	r3, #1
 800df8e:	60a3      	str	r3, [r4, #8]
 800df90:	bb39      	cbnz	r1, 800dfe2 <_puts_r+0x9e>
 800df92:	2b00      	cmp	r3, #0
 800df94:	da38      	bge.n	800e008 <_puts_r+0xc4>
 800df96:	4622      	mov	r2, r4
 800df98:	210a      	movs	r1, #10
 800df9a:	4628      	mov	r0, r5
 800df9c:	f000 f848 	bl	800e030 <__swbuf_r>
 800dfa0:	3001      	adds	r0, #1
 800dfa2:	d011      	beq.n	800dfc8 <_puts_r+0x84>
 800dfa4:	250a      	movs	r5, #10
 800dfa6:	e011      	b.n	800dfcc <_puts_r+0x88>
 800dfa8:	4b1b      	ldr	r3, [pc, #108]	; (800e018 <_puts_r+0xd4>)
 800dfaa:	429c      	cmp	r4, r3
 800dfac:	d101      	bne.n	800dfb2 <_puts_r+0x6e>
 800dfae:	68ac      	ldr	r4, [r5, #8]
 800dfb0:	e7da      	b.n	800df68 <_puts_r+0x24>
 800dfb2:	4b1a      	ldr	r3, [pc, #104]	; (800e01c <_puts_r+0xd8>)
 800dfb4:	429c      	cmp	r4, r3
 800dfb6:	bf08      	it	eq
 800dfb8:	68ec      	ldreq	r4, [r5, #12]
 800dfba:	e7d5      	b.n	800df68 <_puts_r+0x24>
 800dfbc:	4621      	mov	r1, r4
 800dfbe:	4628      	mov	r0, r5
 800dfc0:	f000 f888 	bl	800e0d4 <__swsetup_r>
 800dfc4:	2800      	cmp	r0, #0
 800dfc6:	d0dd      	beq.n	800df84 <_puts_r+0x40>
 800dfc8:	f04f 35ff 	mov.w	r5, #4294967295
 800dfcc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dfce:	07da      	lsls	r2, r3, #31
 800dfd0:	d405      	bmi.n	800dfde <_puts_r+0x9a>
 800dfd2:	89a3      	ldrh	r3, [r4, #12]
 800dfd4:	059b      	lsls	r3, r3, #22
 800dfd6:	d402      	bmi.n	800dfde <_puts_r+0x9a>
 800dfd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dfda:	f001 f921 	bl	800f220 <__retarget_lock_release_recursive>
 800dfde:	4628      	mov	r0, r5
 800dfe0:	bd70      	pop	{r4, r5, r6, pc}
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	da04      	bge.n	800dff0 <_puts_r+0xac>
 800dfe6:	69a2      	ldr	r2, [r4, #24]
 800dfe8:	429a      	cmp	r2, r3
 800dfea:	dc06      	bgt.n	800dffa <_puts_r+0xb6>
 800dfec:	290a      	cmp	r1, #10
 800dfee:	d004      	beq.n	800dffa <_puts_r+0xb6>
 800dff0:	6823      	ldr	r3, [r4, #0]
 800dff2:	1c5a      	adds	r2, r3, #1
 800dff4:	6022      	str	r2, [r4, #0]
 800dff6:	7019      	strb	r1, [r3, #0]
 800dff8:	e7c5      	b.n	800df86 <_puts_r+0x42>
 800dffa:	4622      	mov	r2, r4
 800dffc:	4628      	mov	r0, r5
 800dffe:	f000 f817 	bl	800e030 <__swbuf_r>
 800e002:	3001      	adds	r0, #1
 800e004:	d1bf      	bne.n	800df86 <_puts_r+0x42>
 800e006:	e7df      	b.n	800dfc8 <_puts_r+0x84>
 800e008:	6823      	ldr	r3, [r4, #0]
 800e00a:	250a      	movs	r5, #10
 800e00c:	1c5a      	adds	r2, r3, #1
 800e00e:	6022      	str	r2, [r4, #0]
 800e010:	701d      	strb	r5, [r3, #0]
 800e012:	e7db      	b.n	800dfcc <_puts_r+0x88>
 800e014:	08011e18 	.word	0x08011e18
 800e018:	08011e38 	.word	0x08011e38
 800e01c:	08011df8 	.word	0x08011df8

0800e020 <puts>:
 800e020:	4b02      	ldr	r3, [pc, #8]	; (800e02c <puts+0xc>)
 800e022:	4601      	mov	r1, r0
 800e024:	6818      	ldr	r0, [r3, #0]
 800e026:	f7ff bf8d 	b.w	800df44 <_puts_r>
 800e02a:	bf00      	nop
 800e02c:	20000058 	.word	0x20000058

0800e030 <__swbuf_r>:
 800e030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e032:	460e      	mov	r6, r1
 800e034:	4614      	mov	r4, r2
 800e036:	4605      	mov	r5, r0
 800e038:	b118      	cbz	r0, 800e042 <__swbuf_r+0x12>
 800e03a:	6983      	ldr	r3, [r0, #24]
 800e03c:	b90b      	cbnz	r3, 800e042 <__swbuf_r+0x12>
 800e03e:	f001 f84b 	bl	800f0d8 <__sinit>
 800e042:	4b21      	ldr	r3, [pc, #132]	; (800e0c8 <__swbuf_r+0x98>)
 800e044:	429c      	cmp	r4, r3
 800e046:	d12b      	bne.n	800e0a0 <__swbuf_r+0x70>
 800e048:	686c      	ldr	r4, [r5, #4]
 800e04a:	69a3      	ldr	r3, [r4, #24]
 800e04c:	60a3      	str	r3, [r4, #8]
 800e04e:	89a3      	ldrh	r3, [r4, #12]
 800e050:	071a      	lsls	r2, r3, #28
 800e052:	d52f      	bpl.n	800e0b4 <__swbuf_r+0x84>
 800e054:	6923      	ldr	r3, [r4, #16]
 800e056:	b36b      	cbz	r3, 800e0b4 <__swbuf_r+0x84>
 800e058:	6923      	ldr	r3, [r4, #16]
 800e05a:	6820      	ldr	r0, [r4, #0]
 800e05c:	1ac0      	subs	r0, r0, r3
 800e05e:	6963      	ldr	r3, [r4, #20]
 800e060:	b2f6      	uxtb	r6, r6
 800e062:	4283      	cmp	r3, r0
 800e064:	4637      	mov	r7, r6
 800e066:	dc04      	bgt.n	800e072 <__swbuf_r+0x42>
 800e068:	4621      	mov	r1, r4
 800e06a:	4628      	mov	r0, r5
 800e06c:	f000 ffa0 	bl	800efb0 <_fflush_r>
 800e070:	bb30      	cbnz	r0, 800e0c0 <__swbuf_r+0x90>
 800e072:	68a3      	ldr	r3, [r4, #8]
 800e074:	3b01      	subs	r3, #1
 800e076:	60a3      	str	r3, [r4, #8]
 800e078:	6823      	ldr	r3, [r4, #0]
 800e07a:	1c5a      	adds	r2, r3, #1
 800e07c:	6022      	str	r2, [r4, #0]
 800e07e:	701e      	strb	r6, [r3, #0]
 800e080:	6963      	ldr	r3, [r4, #20]
 800e082:	3001      	adds	r0, #1
 800e084:	4283      	cmp	r3, r0
 800e086:	d004      	beq.n	800e092 <__swbuf_r+0x62>
 800e088:	89a3      	ldrh	r3, [r4, #12]
 800e08a:	07db      	lsls	r3, r3, #31
 800e08c:	d506      	bpl.n	800e09c <__swbuf_r+0x6c>
 800e08e:	2e0a      	cmp	r6, #10
 800e090:	d104      	bne.n	800e09c <__swbuf_r+0x6c>
 800e092:	4621      	mov	r1, r4
 800e094:	4628      	mov	r0, r5
 800e096:	f000 ff8b 	bl	800efb0 <_fflush_r>
 800e09a:	b988      	cbnz	r0, 800e0c0 <__swbuf_r+0x90>
 800e09c:	4638      	mov	r0, r7
 800e09e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e0a0:	4b0a      	ldr	r3, [pc, #40]	; (800e0cc <__swbuf_r+0x9c>)
 800e0a2:	429c      	cmp	r4, r3
 800e0a4:	d101      	bne.n	800e0aa <__swbuf_r+0x7a>
 800e0a6:	68ac      	ldr	r4, [r5, #8]
 800e0a8:	e7cf      	b.n	800e04a <__swbuf_r+0x1a>
 800e0aa:	4b09      	ldr	r3, [pc, #36]	; (800e0d0 <__swbuf_r+0xa0>)
 800e0ac:	429c      	cmp	r4, r3
 800e0ae:	bf08      	it	eq
 800e0b0:	68ec      	ldreq	r4, [r5, #12]
 800e0b2:	e7ca      	b.n	800e04a <__swbuf_r+0x1a>
 800e0b4:	4621      	mov	r1, r4
 800e0b6:	4628      	mov	r0, r5
 800e0b8:	f000 f80c 	bl	800e0d4 <__swsetup_r>
 800e0bc:	2800      	cmp	r0, #0
 800e0be:	d0cb      	beq.n	800e058 <__swbuf_r+0x28>
 800e0c0:	f04f 37ff 	mov.w	r7, #4294967295
 800e0c4:	e7ea      	b.n	800e09c <__swbuf_r+0x6c>
 800e0c6:	bf00      	nop
 800e0c8:	08011e18 	.word	0x08011e18
 800e0cc:	08011e38 	.word	0x08011e38
 800e0d0:	08011df8 	.word	0x08011df8

0800e0d4 <__swsetup_r>:
 800e0d4:	4b32      	ldr	r3, [pc, #200]	; (800e1a0 <__swsetup_r+0xcc>)
 800e0d6:	b570      	push	{r4, r5, r6, lr}
 800e0d8:	681d      	ldr	r5, [r3, #0]
 800e0da:	4606      	mov	r6, r0
 800e0dc:	460c      	mov	r4, r1
 800e0de:	b125      	cbz	r5, 800e0ea <__swsetup_r+0x16>
 800e0e0:	69ab      	ldr	r3, [r5, #24]
 800e0e2:	b913      	cbnz	r3, 800e0ea <__swsetup_r+0x16>
 800e0e4:	4628      	mov	r0, r5
 800e0e6:	f000 fff7 	bl	800f0d8 <__sinit>
 800e0ea:	4b2e      	ldr	r3, [pc, #184]	; (800e1a4 <__swsetup_r+0xd0>)
 800e0ec:	429c      	cmp	r4, r3
 800e0ee:	d10f      	bne.n	800e110 <__swsetup_r+0x3c>
 800e0f0:	686c      	ldr	r4, [r5, #4]
 800e0f2:	89a3      	ldrh	r3, [r4, #12]
 800e0f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e0f8:	0719      	lsls	r1, r3, #28
 800e0fa:	d42c      	bmi.n	800e156 <__swsetup_r+0x82>
 800e0fc:	06dd      	lsls	r5, r3, #27
 800e0fe:	d411      	bmi.n	800e124 <__swsetup_r+0x50>
 800e100:	2309      	movs	r3, #9
 800e102:	6033      	str	r3, [r6, #0]
 800e104:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e108:	81a3      	strh	r3, [r4, #12]
 800e10a:	f04f 30ff 	mov.w	r0, #4294967295
 800e10e:	e03e      	b.n	800e18e <__swsetup_r+0xba>
 800e110:	4b25      	ldr	r3, [pc, #148]	; (800e1a8 <__swsetup_r+0xd4>)
 800e112:	429c      	cmp	r4, r3
 800e114:	d101      	bne.n	800e11a <__swsetup_r+0x46>
 800e116:	68ac      	ldr	r4, [r5, #8]
 800e118:	e7eb      	b.n	800e0f2 <__swsetup_r+0x1e>
 800e11a:	4b24      	ldr	r3, [pc, #144]	; (800e1ac <__swsetup_r+0xd8>)
 800e11c:	429c      	cmp	r4, r3
 800e11e:	bf08      	it	eq
 800e120:	68ec      	ldreq	r4, [r5, #12]
 800e122:	e7e6      	b.n	800e0f2 <__swsetup_r+0x1e>
 800e124:	0758      	lsls	r0, r3, #29
 800e126:	d512      	bpl.n	800e14e <__swsetup_r+0x7a>
 800e128:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e12a:	b141      	cbz	r1, 800e13e <__swsetup_r+0x6a>
 800e12c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e130:	4299      	cmp	r1, r3
 800e132:	d002      	beq.n	800e13a <__swsetup_r+0x66>
 800e134:	4630      	mov	r0, r6
 800e136:	f001 fc7b 	bl	800fa30 <_free_r>
 800e13a:	2300      	movs	r3, #0
 800e13c:	6363      	str	r3, [r4, #52]	; 0x34
 800e13e:	89a3      	ldrh	r3, [r4, #12]
 800e140:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e144:	81a3      	strh	r3, [r4, #12]
 800e146:	2300      	movs	r3, #0
 800e148:	6063      	str	r3, [r4, #4]
 800e14a:	6923      	ldr	r3, [r4, #16]
 800e14c:	6023      	str	r3, [r4, #0]
 800e14e:	89a3      	ldrh	r3, [r4, #12]
 800e150:	f043 0308 	orr.w	r3, r3, #8
 800e154:	81a3      	strh	r3, [r4, #12]
 800e156:	6923      	ldr	r3, [r4, #16]
 800e158:	b94b      	cbnz	r3, 800e16e <__swsetup_r+0x9a>
 800e15a:	89a3      	ldrh	r3, [r4, #12]
 800e15c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e160:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e164:	d003      	beq.n	800e16e <__swsetup_r+0x9a>
 800e166:	4621      	mov	r1, r4
 800e168:	4630      	mov	r0, r6
 800e16a:	f001 f87f 	bl	800f26c <__smakebuf_r>
 800e16e:	89a0      	ldrh	r0, [r4, #12]
 800e170:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e174:	f010 0301 	ands.w	r3, r0, #1
 800e178:	d00a      	beq.n	800e190 <__swsetup_r+0xbc>
 800e17a:	2300      	movs	r3, #0
 800e17c:	60a3      	str	r3, [r4, #8]
 800e17e:	6963      	ldr	r3, [r4, #20]
 800e180:	425b      	negs	r3, r3
 800e182:	61a3      	str	r3, [r4, #24]
 800e184:	6923      	ldr	r3, [r4, #16]
 800e186:	b943      	cbnz	r3, 800e19a <__swsetup_r+0xc6>
 800e188:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e18c:	d1ba      	bne.n	800e104 <__swsetup_r+0x30>
 800e18e:	bd70      	pop	{r4, r5, r6, pc}
 800e190:	0781      	lsls	r1, r0, #30
 800e192:	bf58      	it	pl
 800e194:	6963      	ldrpl	r3, [r4, #20]
 800e196:	60a3      	str	r3, [r4, #8]
 800e198:	e7f4      	b.n	800e184 <__swsetup_r+0xb0>
 800e19a:	2000      	movs	r0, #0
 800e19c:	e7f7      	b.n	800e18e <__swsetup_r+0xba>
 800e19e:	bf00      	nop
 800e1a0:	20000058 	.word	0x20000058
 800e1a4:	08011e18 	.word	0x08011e18
 800e1a8:	08011e38 	.word	0x08011e38
 800e1ac:	08011df8 	.word	0x08011df8

0800e1b0 <quorem>:
 800e1b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1b4:	6903      	ldr	r3, [r0, #16]
 800e1b6:	690c      	ldr	r4, [r1, #16]
 800e1b8:	42a3      	cmp	r3, r4
 800e1ba:	4607      	mov	r7, r0
 800e1bc:	f2c0 8081 	blt.w	800e2c2 <quorem+0x112>
 800e1c0:	3c01      	subs	r4, #1
 800e1c2:	f101 0814 	add.w	r8, r1, #20
 800e1c6:	f100 0514 	add.w	r5, r0, #20
 800e1ca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e1ce:	9301      	str	r3, [sp, #4]
 800e1d0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e1d4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e1d8:	3301      	adds	r3, #1
 800e1da:	429a      	cmp	r2, r3
 800e1dc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800e1e0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e1e4:	fbb2 f6f3 	udiv	r6, r2, r3
 800e1e8:	d331      	bcc.n	800e24e <quorem+0x9e>
 800e1ea:	f04f 0e00 	mov.w	lr, #0
 800e1ee:	4640      	mov	r0, r8
 800e1f0:	46ac      	mov	ip, r5
 800e1f2:	46f2      	mov	sl, lr
 800e1f4:	f850 2b04 	ldr.w	r2, [r0], #4
 800e1f8:	b293      	uxth	r3, r2
 800e1fa:	fb06 e303 	mla	r3, r6, r3, lr
 800e1fe:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800e202:	b29b      	uxth	r3, r3
 800e204:	ebaa 0303 	sub.w	r3, sl, r3
 800e208:	f8dc a000 	ldr.w	sl, [ip]
 800e20c:	0c12      	lsrs	r2, r2, #16
 800e20e:	fa13 f38a 	uxtah	r3, r3, sl
 800e212:	fb06 e202 	mla	r2, r6, r2, lr
 800e216:	9300      	str	r3, [sp, #0]
 800e218:	9b00      	ldr	r3, [sp, #0]
 800e21a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e21e:	b292      	uxth	r2, r2
 800e220:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800e224:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e228:	f8bd 3000 	ldrh.w	r3, [sp]
 800e22c:	4581      	cmp	r9, r0
 800e22e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e232:	f84c 3b04 	str.w	r3, [ip], #4
 800e236:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800e23a:	d2db      	bcs.n	800e1f4 <quorem+0x44>
 800e23c:	f855 300b 	ldr.w	r3, [r5, fp]
 800e240:	b92b      	cbnz	r3, 800e24e <quorem+0x9e>
 800e242:	9b01      	ldr	r3, [sp, #4]
 800e244:	3b04      	subs	r3, #4
 800e246:	429d      	cmp	r5, r3
 800e248:	461a      	mov	r2, r3
 800e24a:	d32e      	bcc.n	800e2aa <quorem+0xfa>
 800e24c:	613c      	str	r4, [r7, #16]
 800e24e:	4638      	mov	r0, r7
 800e250:	f001 fad6 	bl	800f800 <__mcmp>
 800e254:	2800      	cmp	r0, #0
 800e256:	db24      	blt.n	800e2a2 <quorem+0xf2>
 800e258:	3601      	adds	r6, #1
 800e25a:	4628      	mov	r0, r5
 800e25c:	f04f 0c00 	mov.w	ip, #0
 800e260:	f858 2b04 	ldr.w	r2, [r8], #4
 800e264:	f8d0 e000 	ldr.w	lr, [r0]
 800e268:	b293      	uxth	r3, r2
 800e26a:	ebac 0303 	sub.w	r3, ip, r3
 800e26e:	0c12      	lsrs	r2, r2, #16
 800e270:	fa13 f38e 	uxtah	r3, r3, lr
 800e274:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800e278:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e27c:	b29b      	uxth	r3, r3
 800e27e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e282:	45c1      	cmp	r9, r8
 800e284:	f840 3b04 	str.w	r3, [r0], #4
 800e288:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800e28c:	d2e8      	bcs.n	800e260 <quorem+0xb0>
 800e28e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e292:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e296:	b922      	cbnz	r2, 800e2a2 <quorem+0xf2>
 800e298:	3b04      	subs	r3, #4
 800e29a:	429d      	cmp	r5, r3
 800e29c:	461a      	mov	r2, r3
 800e29e:	d30a      	bcc.n	800e2b6 <quorem+0x106>
 800e2a0:	613c      	str	r4, [r7, #16]
 800e2a2:	4630      	mov	r0, r6
 800e2a4:	b003      	add	sp, #12
 800e2a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2aa:	6812      	ldr	r2, [r2, #0]
 800e2ac:	3b04      	subs	r3, #4
 800e2ae:	2a00      	cmp	r2, #0
 800e2b0:	d1cc      	bne.n	800e24c <quorem+0x9c>
 800e2b2:	3c01      	subs	r4, #1
 800e2b4:	e7c7      	b.n	800e246 <quorem+0x96>
 800e2b6:	6812      	ldr	r2, [r2, #0]
 800e2b8:	3b04      	subs	r3, #4
 800e2ba:	2a00      	cmp	r2, #0
 800e2bc:	d1f0      	bne.n	800e2a0 <quorem+0xf0>
 800e2be:	3c01      	subs	r4, #1
 800e2c0:	e7eb      	b.n	800e29a <quorem+0xea>
 800e2c2:	2000      	movs	r0, #0
 800e2c4:	e7ee      	b.n	800e2a4 <quorem+0xf4>
	...

0800e2c8 <_dtoa_r>:
 800e2c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2cc:	ed2d 8b04 	vpush	{d8-d9}
 800e2d0:	ec57 6b10 	vmov	r6, r7, d0
 800e2d4:	b093      	sub	sp, #76	; 0x4c
 800e2d6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e2d8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800e2dc:	9106      	str	r1, [sp, #24]
 800e2de:	ee10 aa10 	vmov	sl, s0
 800e2e2:	4604      	mov	r4, r0
 800e2e4:	9209      	str	r2, [sp, #36]	; 0x24
 800e2e6:	930c      	str	r3, [sp, #48]	; 0x30
 800e2e8:	46bb      	mov	fp, r7
 800e2ea:	b975      	cbnz	r5, 800e30a <_dtoa_r+0x42>
 800e2ec:	2010      	movs	r0, #16
 800e2ee:	f000 fffd 	bl	800f2ec <malloc>
 800e2f2:	4602      	mov	r2, r0
 800e2f4:	6260      	str	r0, [r4, #36]	; 0x24
 800e2f6:	b920      	cbnz	r0, 800e302 <_dtoa_r+0x3a>
 800e2f8:	4ba7      	ldr	r3, [pc, #668]	; (800e598 <_dtoa_r+0x2d0>)
 800e2fa:	21ea      	movs	r1, #234	; 0xea
 800e2fc:	48a7      	ldr	r0, [pc, #668]	; (800e59c <_dtoa_r+0x2d4>)
 800e2fe:	f001 fe7f 	bl	8010000 <__assert_func>
 800e302:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e306:	6005      	str	r5, [r0, #0]
 800e308:	60c5      	str	r5, [r0, #12]
 800e30a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e30c:	6819      	ldr	r1, [r3, #0]
 800e30e:	b151      	cbz	r1, 800e326 <_dtoa_r+0x5e>
 800e310:	685a      	ldr	r2, [r3, #4]
 800e312:	604a      	str	r2, [r1, #4]
 800e314:	2301      	movs	r3, #1
 800e316:	4093      	lsls	r3, r2
 800e318:	608b      	str	r3, [r1, #8]
 800e31a:	4620      	mov	r0, r4
 800e31c:	f001 f82e 	bl	800f37c <_Bfree>
 800e320:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e322:	2200      	movs	r2, #0
 800e324:	601a      	str	r2, [r3, #0]
 800e326:	1e3b      	subs	r3, r7, #0
 800e328:	bfaa      	itet	ge
 800e32a:	2300      	movge	r3, #0
 800e32c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800e330:	f8c8 3000 	strge.w	r3, [r8]
 800e334:	4b9a      	ldr	r3, [pc, #616]	; (800e5a0 <_dtoa_r+0x2d8>)
 800e336:	bfbc      	itt	lt
 800e338:	2201      	movlt	r2, #1
 800e33a:	f8c8 2000 	strlt.w	r2, [r8]
 800e33e:	ea33 030b 	bics.w	r3, r3, fp
 800e342:	d11b      	bne.n	800e37c <_dtoa_r+0xb4>
 800e344:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e346:	f242 730f 	movw	r3, #9999	; 0x270f
 800e34a:	6013      	str	r3, [r2, #0]
 800e34c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e350:	4333      	orrs	r3, r6
 800e352:	f000 8592 	beq.w	800ee7a <_dtoa_r+0xbb2>
 800e356:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e358:	b963      	cbnz	r3, 800e374 <_dtoa_r+0xac>
 800e35a:	4b92      	ldr	r3, [pc, #584]	; (800e5a4 <_dtoa_r+0x2dc>)
 800e35c:	e022      	b.n	800e3a4 <_dtoa_r+0xdc>
 800e35e:	4b92      	ldr	r3, [pc, #584]	; (800e5a8 <_dtoa_r+0x2e0>)
 800e360:	9301      	str	r3, [sp, #4]
 800e362:	3308      	adds	r3, #8
 800e364:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e366:	6013      	str	r3, [r2, #0]
 800e368:	9801      	ldr	r0, [sp, #4]
 800e36a:	b013      	add	sp, #76	; 0x4c
 800e36c:	ecbd 8b04 	vpop	{d8-d9}
 800e370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e374:	4b8b      	ldr	r3, [pc, #556]	; (800e5a4 <_dtoa_r+0x2dc>)
 800e376:	9301      	str	r3, [sp, #4]
 800e378:	3303      	adds	r3, #3
 800e37a:	e7f3      	b.n	800e364 <_dtoa_r+0x9c>
 800e37c:	2200      	movs	r2, #0
 800e37e:	2300      	movs	r3, #0
 800e380:	4650      	mov	r0, sl
 800e382:	4659      	mov	r1, fp
 800e384:	f7f2 fb88 	bl	8000a98 <__aeabi_dcmpeq>
 800e388:	ec4b ab19 	vmov	d9, sl, fp
 800e38c:	4680      	mov	r8, r0
 800e38e:	b158      	cbz	r0, 800e3a8 <_dtoa_r+0xe0>
 800e390:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e392:	2301      	movs	r3, #1
 800e394:	6013      	str	r3, [r2, #0]
 800e396:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e398:	2b00      	cmp	r3, #0
 800e39a:	f000 856b 	beq.w	800ee74 <_dtoa_r+0xbac>
 800e39e:	4883      	ldr	r0, [pc, #524]	; (800e5ac <_dtoa_r+0x2e4>)
 800e3a0:	6018      	str	r0, [r3, #0]
 800e3a2:	1e43      	subs	r3, r0, #1
 800e3a4:	9301      	str	r3, [sp, #4]
 800e3a6:	e7df      	b.n	800e368 <_dtoa_r+0xa0>
 800e3a8:	ec4b ab10 	vmov	d0, sl, fp
 800e3ac:	aa10      	add	r2, sp, #64	; 0x40
 800e3ae:	a911      	add	r1, sp, #68	; 0x44
 800e3b0:	4620      	mov	r0, r4
 800e3b2:	f001 facb 	bl	800f94c <__d2b>
 800e3b6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800e3ba:	ee08 0a10 	vmov	s16, r0
 800e3be:	2d00      	cmp	r5, #0
 800e3c0:	f000 8084 	beq.w	800e4cc <_dtoa_r+0x204>
 800e3c4:	ee19 3a90 	vmov	r3, s19
 800e3c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e3cc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800e3d0:	4656      	mov	r6, sl
 800e3d2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800e3d6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800e3da:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800e3de:	4b74      	ldr	r3, [pc, #464]	; (800e5b0 <_dtoa_r+0x2e8>)
 800e3e0:	2200      	movs	r2, #0
 800e3e2:	4630      	mov	r0, r6
 800e3e4:	4639      	mov	r1, r7
 800e3e6:	f7f1 ff37 	bl	8000258 <__aeabi_dsub>
 800e3ea:	a365      	add	r3, pc, #404	; (adr r3, 800e580 <_dtoa_r+0x2b8>)
 800e3ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3f0:	f7f2 f8ea 	bl	80005c8 <__aeabi_dmul>
 800e3f4:	a364      	add	r3, pc, #400	; (adr r3, 800e588 <_dtoa_r+0x2c0>)
 800e3f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3fa:	f7f1 ff2f 	bl	800025c <__adddf3>
 800e3fe:	4606      	mov	r6, r0
 800e400:	4628      	mov	r0, r5
 800e402:	460f      	mov	r7, r1
 800e404:	f7f2 f876 	bl	80004f4 <__aeabi_i2d>
 800e408:	a361      	add	r3, pc, #388	; (adr r3, 800e590 <_dtoa_r+0x2c8>)
 800e40a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e40e:	f7f2 f8db 	bl	80005c8 <__aeabi_dmul>
 800e412:	4602      	mov	r2, r0
 800e414:	460b      	mov	r3, r1
 800e416:	4630      	mov	r0, r6
 800e418:	4639      	mov	r1, r7
 800e41a:	f7f1 ff1f 	bl	800025c <__adddf3>
 800e41e:	4606      	mov	r6, r0
 800e420:	460f      	mov	r7, r1
 800e422:	f7f2 fb81 	bl	8000b28 <__aeabi_d2iz>
 800e426:	2200      	movs	r2, #0
 800e428:	9000      	str	r0, [sp, #0]
 800e42a:	2300      	movs	r3, #0
 800e42c:	4630      	mov	r0, r6
 800e42e:	4639      	mov	r1, r7
 800e430:	f7f2 fb3c 	bl	8000aac <__aeabi_dcmplt>
 800e434:	b150      	cbz	r0, 800e44c <_dtoa_r+0x184>
 800e436:	9800      	ldr	r0, [sp, #0]
 800e438:	f7f2 f85c 	bl	80004f4 <__aeabi_i2d>
 800e43c:	4632      	mov	r2, r6
 800e43e:	463b      	mov	r3, r7
 800e440:	f7f2 fb2a 	bl	8000a98 <__aeabi_dcmpeq>
 800e444:	b910      	cbnz	r0, 800e44c <_dtoa_r+0x184>
 800e446:	9b00      	ldr	r3, [sp, #0]
 800e448:	3b01      	subs	r3, #1
 800e44a:	9300      	str	r3, [sp, #0]
 800e44c:	9b00      	ldr	r3, [sp, #0]
 800e44e:	2b16      	cmp	r3, #22
 800e450:	d85a      	bhi.n	800e508 <_dtoa_r+0x240>
 800e452:	9a00      	ldr	r2, [sp, #0]
 800e454:	4b57      	ldr	r3, [pc, #348]	; (800e5b4 <_dtoa_r+0x2ec>)
 800e456:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e45a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e45e:	ec51 0b19 	vmov	r0, r1, d9
 800e462:	f7f2 fb23 	bl	8000aac <__aeabi_dcmplt>
 800e466:	2800      	cmp	r0, #0
 800e468:	d050      	beq.n	800e50c <_dtoa_r+0x244>
 800e46a:	9b00      	ldr	r3, [sp, #0]
 800e46c:	3b01      	subs	r3, #1
 800e46e:	9300      	str	r3, [sp, #0]
 800e470:	2300      	movs	r3, #0
 800e472:	930b      	str	r3, [sp, #44]	; 0x2c
 800e474:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e476:	1b5d      	subs	r5, r3, r5
 800e478:	1e6b      	subs	r3, r5, #1
 800e47a:	9305      	str	r3, [sp, #20]
 800e47c:	bf45      	ittet	mi
 800e47e:	f1c5 0301 	rsbmi	r3, r5, #1
 800e482:	9304      	strmi	r3, [sp, #16]
 800e484:	2300      	movpl	r3, #0
 800e486:	2300      	movmi	r3, #0
 800e488:	bf4c      	ite	mi
 800e48a:	9305      	strmi	r3, [sp, #20]
 800e48c:	9304      	strpl	r3, [sp, #16]
 800e48e:	9b00      	ldr	r3, [sp, #0]
 800e490:	2b00      	cmp	r3, #0
 800e492:	db3d      	blt.n	800e510 <_dtoa_r+0x248>
 800e494:	9b05      	ldr	r3, [sp, #20]
 800e496:	9a00      	ldr	r2, [sp, #0]
 800e498:	920a      	str	r2, [sp, #40]	; 0x28
 800e49a:	4413      	add	r3, r2
 800e49c:	9305      	str	r3, [sp, #20]
 800e49e:	2300      	movs	r3, #0
 800e4a0:	9307      	str	r3, [sp, #28]
 800e4a2:	9b06      	ldr	r3, [sp, #24]
 800e4a4:	2b09      	cmp	r3, #9
 800e4a6:	f200 8089 	bhi.w	800e5bc <_dtoa_r+0x2f4>
 800e4aa:	2b05      	cmp	r3, #5
 800e4ac:	bfc4      	itt	gt
 800e4ae:	3b04      	subgt	r3, #4
 800e4b0:	9306      	strgt	r3, [sp, #24]
 800e4b2:	9b06      	ldr	r3, [sp, #24]
 800e4b4:	f1a3 0302 	sub.w	r3, r3, #2
 800e4b8:	bfcc      	ite	gt
 800e4ba:	2500      	movgt	r5, #0
 800e4bc:	2501      	movle	r5, #1
 800e4be:	2b03      	cmp	r3, #3
 800e4c0:	f200 8087 	bhi.w	800e5d2 <_dtoa_r+0x30a>
 800e4c4:	e8df f003 	tbb	[pc, r3]
 800e4c8:	59383a2d 	.word	0x59383a2d
 800e4cc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800e4d0:	441d      	add	r5, r3
 800e4d2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800e4d6:	2b20      	cmp	r3, #32
 800e4d8:	bfc1      	itttt	gt
 800e4da:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800e4de:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800e4e2:	fa0b f303 	lslgt.w	r3, fp, r3
 800e4e6:	fa26 f000 	lsrgt.w	r0, r6, r0
 800e4ea:	bfda      	itte	le
 800e4ec:	f1c3 0320 	rsble	r3, r3, #32
 800e4f0:	fa06 f003 	lslle.w	r0, r6, r3
 800e4f4:	4318      	orrgt	r0, r3
 800e4f6:	f7f1 ffed 	bl	80004d4 <__aeabi_ui2d>
 800e4fa:	2301      	movs	r3, #1
 800e4fc:	4606      	mov	r6, r0
 800e4fe:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800e502:	3d01      	subs	r5, #1
 800e504:	930e      	str	r3, [sp, #56]	; 0x38
 800e506:	e76a      	b.n	800e3de <_dtoa_r+0x116>
 800e508:	2301      	movs	r3, #1
 800e50a:	e7b2      	b.n	800e472 <_dtoa_r+0x1aa>
 800e50c:	900b      	str	r0, [sp, #44]	; 0x2c
 800e50e:	e7b1      	b.n	800e474 <_dtoa_r+0x1ac>
 800e510:	9b04      	ldr	r3, [sp, #16]
 800e512:	9a00      	ldr	r2, [sp, #0]
 800e514:	1a9b      	subs	r3, r3, r2
 800e516:	9304      	str	r3, [sp, #16]
 800e518:	4253      	negs	r3, r2
 800e51a:	9307      	str	r3, [sp, #28]
 800e51c:	2300      	movs	r3, #0
 800e51e:	930a      	str	r3, [sp, #40]	; 0x28
 800e520:	e7bf      	b.n	800e4a2 <_dtoa_r+0x1da>
 800e522:	2300      	movs	r3, #0
 800e524:	9308      	str	r3, [sp, #32]
 800e526:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e528:	2b00      	cmp	r3, #0
 800e52a:	dc55      	bgt.n	800e5d8 <_dtoa_r+0x310>
 800e52c:	2301      	movs	r3, #1
 800e52e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e532:	461a      	mov	r2, r3
 800e534:	9209      	str	r2, [sp, #36]	; 0x24
 800e536:	e00c      	b.n	800e552 <_dtoa_r+0x28a>
 800e538:	2301      	movs	r3, #1
 800e53a:	e7f3      	b.n	800e524 <_dtoa_r+0x25c>
 800e53c:	2300      	movs	r3, #0
 800e53e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e540:	9308      	str	r3, [sp, #32]
 800e542:	9b00      	ldr	r3, [sp, #0]
 800e544:	4413      	add	r3, r2
 800e546:	9302      	str	r3, [sp, #8]
 800e548:	3301      	adds	r3, #1
 800e54a:	2b01      	cmp	r3, #1
 800e54c:	9303      	str	r3, [sp, #12]
 800e54e:	bfb8      	it	lt
 800e550:	2301      	movlt	r3, #1
 800e552:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800e554:	2200      	movs	r2, #0
 800e556:	6042      	str	r2, [r0, #4]
 800e558:	2204      	movs	r2, #4
 800e55a:	f102 0614 	add.w	r6, r2, #20
 800e55e:	429e      	cmp	r6, r3
 800e560:	6841      	ldr	r1, [r0, #4]
 800e562:	d93d      	bls.n	800e5e0 <_dtoa_r+0x318>
 800e564:	4620      	mov	r0, r4
 800e566:	f000 fec9 	bl	800f2fc <_Balloc>
 800e56a:	9001      	str	r0, [sp, #4]
 800e56c:	2800      	cmp	r0, #0
 800e56e:	d13b      	bne.n	800e5e8 <_dtoa_r+0x320>
 800e570:	4b11      	ldr	r3, [pc, #68]	; (800e5b8 <_dtoa_r+0x2f0>)
 800e572:	4602      	mov	r2, r0
 800e574:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800e578:	e6c0      	b.n	800e2fc <_dtoa_r+0x34>
 800e57a:	2301      	movs	r3, #1
 800e57c:	e7df      	b.n	800e53e <_dtoa_r+0x276>
 800e57e:	bf00      	nop
 800e580:	636f4361 	.word	0x636f4361
 800e584:	3fd287a7 	.word	0x3fd287a7
 800e588:	8b60c8b3 	.word	0x8b60c8b3
 800e58c:	3fc68a28 	.word	0x3fc68a28
 800e590:	509f79fb 	.word	0x509f79fb
 800e594:	3fd34413 	.word	0x3fd34413
 800e598:	08011d75 	.word	0x08011d75
 800e59c:	08011d8c 	.word	0x08011d8c
 800e5a0:	7ff00000 	.word	0x7ff00000
 800e5a4:	08011d71 	.word	0x08011d71
 800e5a8:	08011d68 	.word	0x08011d68
 800e5ac:	08011d45 	.word	0x08011d45
 800e5b0:	3ff80000 	.word	0x3ff80000
 800e5b4:	08011ee0 	.word	0x08011ee0
 800e5b8:	08011de7 	.word	0x08011de7
 800e5bc:	2501      	movs	r5, #1
 800e5be:	2300      	movs	r3, #0
 800e5c0:	9306      	str	r3, [sp, #24]
 800e5c2:	9508      	str	r5, [sp, #32]
 800e5c4:	f04f 33ff 	mov.w	r3, #4294967295
 800e5c8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e5cc:	2200      	movs	r2, #0
 800e5ce:	2312      	movs	r3, #18
 800e5d0:	e7b0      	b.n	800e534 <_dtoa_r+0x26c>
 800e5d2:	2301      	movs	r3, #1
 800e5d4:	9308      	str	r3, [sp, #32]
 800e5d6:	e7f5      	b.n	800e5c4 <_dtoa_r+0x2fc>
 800e5d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e5da:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e5de:	e7b8      	b.n	800e552 <_dtoa_r+0x28a>
 800e5e0:	3101      	adds	r1, #1
 800e5e2:	6041      	str	r1, [r0, #4]
 800e5e4:	0052      	lsls	r2, r2, #1
 800e5e6:	e7b8      	b.n	800e55a <_dtoa_r+0x292>
 800e5e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e5ea:	9a01      	ldr	r2, [sp, #4]
 800e5ec:	601a      	str	r2, [r3, #0]
 800e5ee:	9b03      	ldr	r3, [sp, #12]
 800e5f0:	2b0e      	cmp	r3, #14
 800e5f2:	f200 809d 	bhi.w	800e730 <_dtoa_r+0x468>
 800e5f6:	2d00      	cmp	r5, #0
 800e5f8:	f000 809a 	beq.w	800e730 <_dtoa_r+0x468>
 800e5fc:	9b00      	ldr	r3, [sp, #0]
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	dd32      	ble.n	800e668 <_dtoa_r+0x3a0>
 800e602:	4ab7      	ldr	r2, [pc, #732]	; (800e8e0 <_dtoa_r+0x618>)
 800e604:	f003 030f 	and.w	r3, r3, #15
 800e608:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e60c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e610:	9b00      	ldr	r3, [sp, #0]
 800e612:	05d8      	lsls	r0, r3, #23
 800e614:	ea4f 1723 	mov.w	r7, r3, asr #4
 800e618:	d516      	bpl.n	800e648 <_dtoa_r+0x380>
 800e61a:	4bb2      	ldr	r3, [pc, #712]	; (800e8e4 <_dtoa_r+0x61c>)
 800e61c:	ec51 0b19 	vmov	r0, r1, d9
 800e620:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e624:	f7f2 f8fa 	bl	800081c <__aeabi_ddiv>
 800e628:	f007 070f 	and.w	r7, r7, #15
 800e62c:	4682      	mov	sl, r0
 800e62e:	468b      	mov	fp, r1
 800e630:	2503      	movs	r5, #3
 800e632:	4eac      	ldr	r6, [pc, #688]	; (800e8e4 <_dtoa_r+0x61c>)
 800e634:	b957      	cbnz	r7, 800e64c <_dtoa_r+0x384>
 800e636:	4642      	mov	r2, r8
 800e638:	464b      	mov	r3, r9
 800e63a:	4650      	mov	r0, sl
 800e63c:	4659      	mov	r1, fp
 800e63e:	f7f2 f8ed 	bl	800081c <__aeabi_ddiv>
 800e642:	4682      	mov	sl, r0
 800e644:	468b      	mov	fp, r1
 800e646:	e028      	b.n	800e69a <_dtoa_r+0x3d2>
 800e648:	2502      	movs	r5, #2
 800e64a:	e7f2      	b.n	800e632 <_dtoa_r+0x36a>
 800e64c:	07f9      	lsls	r1, r7, #31
 800e64e:	d508      	bpl.n	800e662 <_dtoa_r+0x39a>
 800e650:	4640      	mov	r0, r8
 800e652:	4649      	mov	r1, r9
 800e654:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e658:	f7f1 ffb6 	bl	80005c8 <__aeabi_dmul>
 800e65c:	3501      	adds	r5, #1
 800e65e:	4680      	mov	r8, r0
 800e660:	4689      	mov	r9, r1
 800e662:	107f      	asrs	r7, r7, #1
 800e664:	3608      	adds	r6, #8
 800e666:	e7e5      	b.n	800e634 <_dtoa_r+0x36c>
 800e668:	f000 809b 	beq.w	800e7a2 <_dtoa_r+0x4da>
 800e66c:	9b00      	ldr	r3, [sp, #0]
 800e66e:	4f9d      	ldr	r7, [pc, #628]	; (800e8e4 <_dtoa_r+0x61c>)
 800e670:	425e      	negs	r6, r3
 800e672:	4b9b      	ldr	r3, [pc, #620]	; (800e8e0 <_dtoa_r+0x618>)
 800e674:	f006 020f 	and.w	r2, r6, #15
 800e678:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e67c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e680:	ec51 0b19 	vmov	r0, r1, d9
 800e684:	f7f1 ffa0 	bl	80005c8 <__aeabi_dmul>
 800e688:	1136      	asrs	r6, r6, #4
 800e68a:	4682      	mov	sl, r0
 800e68c:	468b      	mov	fp, r1
 800e68e:	2300      	movs	r3, #0
 800e690:	2502      	movs	r5, #2
 800e692:	2e00      	cmp	r6, #0
 800e694:	d17a      	bne.n	800e78c <_dtoa_r+0x4c4>
 800e696:	2b00      	cmp	r3, #0
 800e698:	d1d3      	bne.n	800e642 <_dtoa_r+0x37a>
 800e69a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	f000 8082 	beq.w	800e7a6 <_dtoa_r+0x4de>
 800e6a2:	4b91      	ldr	r3, [pc, #580]	; (800e8e8 <_dtoa_r+0x620>)
 800e6a4:	2200      	movs	r2, #0
 800e6a6:	4650      	mov	r0, sl
 800e6a8:	4659      	mov	r1, fp
 800e6aa:	f7f2 f9ff 	bl	8000aac <__aeabi_dcmplt>
 800e6ae:	2800      	cmp	r0, #0
 800e6b0:	d079      	beq.n	800e7a6 <_dtoa_r+0x4de>
 800e6b2:	9b03      	ldr	r3, [sp, #12]
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	d076      	beq.n	800e7a6 <_dtoa_r+0x4de>
 800e6b8:	9b02      	ldr	r3, [sp, #8]
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	dd36      	ble.n	800e72c <_dtoa_r+0x464>
 800e6be:	9b00      	ldr	r3, [sp, #0]
 800e6c0:	4650      	mov	r0, sl
 800e6c2:	4659      	mov	r1, fp
 800e6c4:	1e5f      	subs	r7, r3, #1
 800e6c6:	2200      	movs	r2, #0
 800e6c8:	4b88      	ldr	r3, [pc, #544]	; (800e8ec <_dtoa_r+0x624>)
 800e6ca:	f7f1 ff7d 	bl	80005c8 <__aeabi_dmul>
 800e6ce:	9e02      	ldr	r6, [sp, #8]
 800e6d0:	4682      	mov	sl, r0
 800e6d2:	468b      	mov	fp, r1
 800e6d4:	3501      	adds	r5, #1
 800e6d6:	4628      	mov	r0, r5
 800e6d8:	f7f1 ff0c 	bl	80004f4 <__aeabi_i2d>
 800e6dc:	4652      	mov	r2, sl
 800e6de:	465b      	mov	r3, fp
 800e6e0:	f7f1 ff72 	bl	80005c8 <__aeabi_dmul>
 800e6e4:	4b82      	ldr	r3, [pc, #520]	; (800e8f0 <_dtoa_r+0x628>)
 800e6e6:	2200      	movs	r2, #0
 800e6e8:	f7f1 fdb8 	bl	800025c <__adddf3>
 800e6ec:	46d0      	mov	r8, sl
 800e6ee:	46d9      	mov	r9, fp
 800e6f0:	4682      	mov	sl, r0
 800e6f2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800e6f6:	2e00      	cmp	r6, #0
 800e6f8:	d158      	bne.n	800e7ac <_dtoa_r+0x4e4>
 800e6fa:	4b7e      	ldr	r3, [pc, #504]	; (800e8f4 <_dtoa_r+0x62c>)
 800e6fc:	2200      	movs	r2, #0
 800e6fe:	4640      	mov	r0, r8
 800e700:	4649      	mov	r1, r9
 800e702:	f7f1 fda9 	bl	8000258 <__aeabi_dsub>
 800e706:	4652      	mov	r2, sl
 800e708:	465b      	mov	r3, fp
 800e70a:	4680      	mov	r8, r0
 800e70c:	4689      	mov	r9, r1
 800e70e:	f7f2 f9eb 	bl	8000ae8 <__aeabi_dcmpgt>
 800e712:	2800      	cmp	r0, #0
 800e714:	f040 8295 	bne.w	800ec42 <_dtoa_r+0x97a>
 800e718:	4652      	mov	r2, sl
 800e71a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800e71e:	4640      	mov	r0, r8
 800e720:	4649      	mov	r1, r9
 800e722:	f7f2 f9c3 	bl	8000aac <__aeabi_dcmplt>
 800e726:	2800      	cmp	r0, #0
 800e728:	f040 8289 	bne.w	800ec3e <_dtoa_r+0x976>
 800e72c:	ec5b ab19 	vmov	sl, fp, d9
 800e730:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e732:	2b00      	cmp	r3, #0
 800e734:	f2c0 8148 	blt.w	800e9c8 <_dtoa_r+0x700>
 800e738:	9a00      	ldr	r2, [sp, #0]
 800e73a:	2a0e      	cmp	r2, #14
 800e73c:	f300 8144 	bgt.w	800e9c8 <_dtoa_r+0x700>
 800e740:	4b67      	ldr	r3, [pc, #412]	; (800e8e0 <_dtoa_r+0x618>)
 800e742:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e746:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e74a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	f280 80d5 	bge.w	800e8fc <_dtoa_r+0x634>
 800e752:	9b03      	ldr	r3, [sp, #12]
 800e754:	2b00      	cmp	r3, #0
 800e756:	f300 80d1 	bgt.w	800e8fc <_dtoa_r+0x634>
 800e75a:	f040 826f 	bne.w	800ec3c <_dtoa_r+0x974>
 800e75e:	4b65      	ldr	r3, [pc, #404]	; (800e8f4 <_dtoa_r+0x62c>)
 800e760:	2200      	movs	r2, #0
 800e762:	4640      	mov	r0, r8
 800e764:	4649      	mov	r1, r9
 800e766:	f7f1 ff2f 	bl	80005c8 <__aeabi_dmul>
 800e76a:	4652      	mov	r2, sl
 800e76c:	465b      	mov	r3, fp
 800e76e:	f7f2 f9b1 	bl	8000ad4 <__aeabi_dcmpge>
 800e772:	9e03      	ldr	r6, [sp, #12]
 800e774:	4637      	mov	r7, r6
 800e776:	2800      	cmp	r0, #0
 800e778:	f040 8245 	bne.w	800ec06 <_dtoa_r+0x93e>
 800e77c:	9d01      	ldr	r5, [sp, #4]
 800e77e:	2331      	movs	r3, #49	; 0x31
 800e780:	f805 3b01 	strb.w	r3, [r5], #1
 800e784:	9b00      	ldr	r3, [sp, #0]
 800e786:	3301      	adds	r3, #1
 800e788:	9300      	str	r3, [sp, #0]
 800e78a:	e240      	b.n	800ec0e <_dtoa_r+0x946>
 800e78c:	07f2      	lsls	r2, r6, #31
 800e78e:	d505      	bpl.n	800e79c <_dtoa_r+0x4d4>
 800e790:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e794:	f7f1 ff18 	bl	80005c8 <__aeabi_dmul>
 800e798:	3501      	adds	r5, #1
 800e79a:	2301      	movs	r3, #1
 800e79c:	1076      	asrs	r6, r6, #1
 800e79e:	3708      	adds	r7, #8
 800e7a0:	e777      	b.n	800e692 <_dtoa_r+0x3ca>
 800e7a2:	2502      	movs	r5, #2
 800e7a4:	e779      	b.n	800e69a <_dtoa_r+0x3d2>
 800e7a6:	9f00      	ldr	r7, [sp, #0]
 800e7a8:	9e03      	ldr	r6, [sp, #12]
 800e7aa:	e794      	b.n	800e6d6 <_dtoa_r+0x40e>
 800e7ac:	9901      	ldr	r1, [sp, #4]
 800e7ae:	4b4c      	ldr	r3, [pc, #304]	; (800e8e0 <_dtoa_r+0x618>)
 800e7b0:	4431      	add	r1, r6
 800e7b2:	910d      	str	r1, [sp, #52]	; 0x34
 800e7b4:	9908      	ldr	r1, [sp, #32]
 800e7b6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800e7ba:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e7be:	2900      	cmp	r1, #0
 800e7c0:	d043      	beq.n	800e84a <_dtoa_r+0x582>
 800e7c2:	494d      	ldr	r1, [pc, #308]	; (800e8f8 <_dtoa_r+0x630>)
 800e7c4:	2000      	movs	r0, #0
 800e7c6:	f7f2 f829 	bl	800081c <__aeabi_ddiv>
 800e7ca:	4652      	mov	r2, sl
 800e7cc:	465b      	mov	r3, fp
 800e7ce:	f7f1 fd43 	bl	8000258 <__aeabi_dsub>
 800e7d2:	9d01      	ldr	r5, [sp, #4]
 800e7d4:	4682      	mov	sl, r0
 800e7d6:	468b      	mov	fp, r1
 800e7d8:	4649      	mov	r1, r9
 800e7da:	4640      	mov	r0, r8
 800e7dc:	f7f2 f9a4 	bl	8000b28 <__aeabi_d2iz>
 800e7e0:	4606      	mov	r6, r0
 800e7e2:	f7f1 fe87 	bl	80004f4 <__aeabi_i2d>
 800e7e6:	4602      	mov	r2, r0
 800e7e8:	460b      	mov	r3, r1
 800e7ea:	4640      	mov	r0, r8
 800e7ec:	4649      	mov	r1, r9
 800e7ee:	f7f1 fd33 	bl	8000258 <__aeabi_dsub>
 800e7f2:	3630      	adds	r6, #48	; 0x30
 800e7f4:	f805 6b01 	strb.w	r6, [r5], #1
 800e7f8:	4652      	mov	r2, sl
 800e7fa:	465b      	mov	r3, fp
 800e7fc:	4680      	mov	r8, r0
 800e7fe:	4689      	mov	r9, r1
 800e800:	f7f2 f954 	bl	8000aac <__aeabi_dcmplt>
 800e804:	2800      	cmp	r0, #0
 800e806:	d163      	bne.n	800e8d0 <_dtoa_r+0x608>
 800e808:	4642      	mov	r2, r8
 800e80a:	464b      	mov	r3, r9
 800e80c:	4936      	ldr	r1, [pc, #216]	; (800e8e8 <_dtoa_r+0x620>)
 800e80e:	2000      	movs	r0, #0
 800e810:	f7f1 fd22 	bl	8000258 <__aeabi_dsub>
 800e814:	4652      	mov	r2, sl
 800e816:	465b      	mov	r3, fp
 800e818:	f7f2 f948 	bl	8000aac <__aeabi_dcmplt>
 800e81c:	2800      	cmp	r0, #0
 800e81e:	f040 80b5 	bne.w	800e98c <_dtoa_r+0x6c4>
 800e822:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e824:	429d      	cmp	r5, r3
 800e826:	d081      	beq.n	800e72c <_dtoa_r+0x464>
 800e828:	4b30      	ldr	r3, [pc, #192]	; (800e8ec <_dtoa_r+0x624>)
 800e82a:	2200      	movs	r2, #0
 800e82c:	4650      	mov	r0, sl
 800e82e:	4659      	mov	r1, fp
 800e830:	f7f1 feca 	bl	80005c8 <__aeabi_dmul>
 800e834:	4b2d      	ldr	r3, [pc, #180]	; (800e8ec <_dtoa_r+0x624>)
 800e836:	4682      	mov	sl, r0
 800e838:	468b      	mov	fp, r1
 800e83a:	4640      	mov	r0, r8
 800e83c:	4649      	mov	r1, r9
 800e83e:	2200      	movs	r2, #0
 800e840:	f7f1 fec2 	bl	80005c8 <__aeabi_dmul>
 800e844:	4680      	mov	r8, r0
 800e846:	4689      	mov	r9, r1
 800e848:	e7c6      	b.n	800e7d8 <_dtoa_r+0x510>
 800e84a:	4650      	mov	r0, sl
 800e84c:	4659      	mov	r1, fp
 800e84e:	f7f1 febb 	bl	80005c8 <__aeabi_dmul>
 800e852:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e854:	9d01      	ldr	r5, [sp, #4]
 800e856:	930f      	str	r3, [sp, #60]	; 0x3c
 800e858:	4682      	mov	sl, r0
 800e85a:	468b      	mov	fp, r1
 800e85c:	4649      	mov	r1, r9
 800e85e:	4640      	mov	r0, r8
 800e860:	f7f2 f962 	bl	8000b28 <__aeabi_d2iz>
 800e864:	4606      	mov	r6, r0
 800e866:	f7f1 fe45 	bl	80004f4 <__aeabi_i2d>
 800e86a:	3630      	adds	r6, #48	; 0x30
 800e86c:	4602      	mov	r2, r0
 800e86e:	460b      	mov	r3, r1
 800e870:	4640      	mov	r0, r8
 800e872:	4649      	mov	r1, r9
 800e874:	f7f1 fcf0 	bl	8000258 <__aeabi_dsub>
 800e878:	f805 6b01 	strb.w	r6, [r5], #1
 800e87c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e87e:	429d      	cmp	r5, r3
 800e880:	4680      	mov	r8, r0
 800e882:	4689      	mov	r9, r1
 800e884:	f04f 0200 	mov.w	r2, #0
 800e888:	d124      	bne.n	800e8d4 <_dtoa_r+0x60c>
 800e88a:	4b1b      	ldr	r3, [pc, #108]	; (800e8f8 <_dtoa_r+0x630>)
 800e88c:	4650      	mov	r0, sl
 800e88e:	4659      	mov	r1, fp
 800e890:	f7f1 fce4 	bl	800025c <__adddf3>
 800e894:	4602      	mov	r2, r0
 800e896:	460b      	mov	r3, r1
 800e898:	4640      	mov	r0, r8
 800e89a:	4649      	mov	r1, r9
 800e89c:	f7f2 f924 	bl	8000ae8 <__aeabi_dcmpgt>
 800e8a0:	2800      	cmp	r0, #0
 800e8a2:	d173      	bne.n	800e98c <_dtoa_r+0x6c4>
 800e8a4:	4652      	mov	r2, sl
 800e8a6:	465b      	mov	r3, fp
 800e8a8:	4913      	ldr	r1, [pc, #76]	; (800e8f8 <_dtoa_r+0x630>)
 800e8aa:	2000      	movs	r0, #0
 800e8ac:	f7f1 fcd4 	bl	8000258 <__aeabi_dsub>
 800e8b0:	4602      	mov	r2, r0
 800e8b2:	460b      	mov	r3, r1
 800e8b4:	4640      	mov	r0, r8
 800e8b6:	4649      	mov	r1, r9
 800e8b8:	f7f2 f8f8 	bl	8000aac <__aeabi_dcmplt>
 800e8bc:	2800      	cmp	r0, #0
 800e8be:	f43f af35 	beq.w	800e72c <_dtoa_r+0x464>
 800e8c2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800e8c4:	1e6b      	subs	r3, r5, #1
 800e8c6:	930f      	str	r3, [sp, #60]	; 0x3c
 800e8c8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e8cc:	2b30      	cmp	r3, #48	; 0x30
 800e8ce:	d0f8      	beq.n	800e8c2 <_dtoa_r+0x5fa>
 800e8d0:	9700      	str	r7, [sp, #0]
 800e8d2:	e049      	b.n	800e968 <_dtoa_r+0x6a0>
 800e8d4:	4b05      	ldr	r3, [pc, #20]	; (800e8ec <_dtoa_r+0x624>)
 800e8d6:	f7f1 fe77 	bl	80005c8 <__aeabi_dmul>
 800e8da:	4680      	mov	r8, r0
 800e8dc:	4689      	mov	r9, r1
 800e8de:	e7bd      	b.n	800e85c <_dtoa_r+0x594>
 800e8e0:	08011ee0 	.word	0x08011ee0
 800e8e4:	08011eb8 	.word	0x08011eb8
 800e8e8:	3ff00000 	.word	0x3ff00000
 800e8ec:	40240000 	.word	0x40240000
 800e8f0:	401c0000 	.word	0x401c0000
 800e8f4:	40140000 	.word	0x40140000
 800e8f8:	3fe00000 	.word	0x3fe00000
 800e8fc:	9d01      	ldr	r5, [sp, #4]
 800e8fe:	4656      	mov	r6, sl
 800e900:	465f      	mov	r7, fp
 800e902:	4642      	mov	r2, r8
 800e904:	464b      	mov	r3, r9
 800e906:	4630      	mov	r0, r6
 800e908:	4639      	mov	r1, r7
 800e90a:	f7f1 ff87 	bl	800081c <__aeabi_ddiv>
 800e90e:	f7f2 f90b 	bl	8000b28 <__aeabi_d2iz>
 800e912:	4682      	mov	sl, r0
 800e914:	f7f1 fdee 	bl	80004f4 <__aeabi_i2d>
 800e918:	4642      	mov	r2, r8
 800e91a:	464b      	mov	r3, r9
 800e91c:	f7f1 fe54 	bl	80005c8 <__aeabi_dmul>
 800e920:	4602      	mov	r2, r0
 800e922:	460b      	mov	r3, r1
 800e924:	4630      	mov	r0, r6
 800e926:	4639      	mov	r1, r7
 800e928:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800e92c:	f7f1 fc94 	bl	8000258 <__aeabi_dsub>
 800e930:	f805 6b01 	strb.w	r6, [r5], #1
 800e934:	9e01      	ldr	r6, [sp, #4]
 800e936:	9f03      	ldr	r7, [sp, #12]
 800e938:	1bae      	subs	r6, r5, r6
 800e93a:	42b7      	cmp	r7, r6
 800e93c:	4602      	mov	r2, r0
 800e93e:	460b      	mov	r3, r1
 800e940:	d135      	bne.n	800e9ae <_dtoa_r+0x6e6>
 800e942:	f7f1 fc8b 	bl	800025c <__adddf3>
 800e946:	4642      	mov	r2, r8
 800e948:	464b      	mov	r3, r9
 800e94a:	4606      	mov	r6, r0
 800e94c:	460f      	mov	r7, r1
 800e94e:	f7f2 f8cb 	bl	8000ae8 <__aeabi_dcmpgt>
 800e952:	b9d0      	cbnz	r0, 800e98a <_dtoa_r+0x6c2>
 800e954:	4642      	mov	r2, r8
 800e956:	464b      	mov	r3, r9
 800e958:	4630      	mov	r0, r6
 800e95a:	4639      	mov	r1, r7
 800e95c:	f7f2 f89c 	bl	8000a98 <__aeabi_dcmpeq>
 800e960:	b110      	cbz	r0, 800e968 <_dtoa_r+0x6a0>
 800e962:	f01a 0f01 	tst.w	sl, #1
 800e966:	d110      	bne.n	800e98a <_dtoa_r+0x6c2>
 800e968:	4620      	mov	r0, r4
 800e96a:	ee18 1a10 	vmov	r1, s16
 800e96e:	f000 fd05 	bl	800f37c <_Bfree>
 800e972:	2300      	movs	r3, #0
 800e974:	9800      	ldr	r0, [sp, #0]
 800e976:	702b      	strb	r3, [r5, #0]
 800e978:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e97a:	3001      	adds	r0, #1
 800e97c:	6018      	str	r0, [r3, #0]
 800e97e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e980:	2b00      	cmp	r3, #0
 800e982:	f43f acf1 	beq.w	800e368 <_dtoa_r+0xa0>
 800e986:	601d      	str	r5, [r3, #0]
 800e988:	e4ee      	b.n	800e368 <_dtoa_r+0xa0>
 800e98a:	9f00      	ldr	r7, [sp, #0]
 800e98c:	462b      	mov	r3, r5
 800e98e:	461d      	mov	r5, r3
 800e990:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e994:	2a39      	cmp	r2, #57	; 0x39
 800e996:	d106      	bne.n	800e9a6 <_dtoa_r+0x6de>
 800e998:	9a01      	ldr	r2, [sp, #4]
 800e99a:	429a      	cmp	r2, r3
 800e99c:	d1f7      	bne.n	800e98e <_dtoa_r+0x6c6>
 800e99e:	9901      	ldr	r1, [sp, #4]
 800e9a0:	2230      	movs	r2, #48	; 0x30
 800e9a2:	3701      	adds	r7, #1
 800e9a4:	700a      	strb	r2, [r1, #0]
 800e9a6:	781a      	ldrb	r2, [r3, #0]
 800e9a8:	3201      	adds	r2, #1
 800e9aa:	701a      	strb	r2, [r3, #0]
 800e9ac:	e790      	b.n	800e8d0 <_dtoa_r+0x608>
 800e9ae:	4ba6      	ldr	r3, [pc, #664]	; (800ec48 <_dtoa_r+0x980>)
 800e9b0:	2200      	movs	r2, #0
 800e9b2:	f7f1 fe09 	bl	80005c8 <__aeabi_dmul>
 800e9b6:	2200      	movs	r2, #0
 800e9b8:	2300      	movs	r3, #0
 800e9ba:	4606      	mov	r6, r0
 800e9bc:	460f      	mov	r7, r1
 800e9be:	f7f2 f86b 	bl	8000a98 <__aeabi_dcmpeq>
 800e9c2:	2800      	cmp	r0, #0
 800e9c4:	d09d      	beq.n	800e902 <_dtoa_r+0x63a>
 800e9c6:	e7cf      	b.n	800e968 <_dtoa_r+0x6a0>
 800e9c8:	9a08      	ldr	r2, [sp, #32]
 800e9ca:	2a00      	cmp	r2, #0
 800e9cc:	f000 80d7 	beq.w	800eb7e <_dtoa_r+0x8b6>
 800e9d0:	9a06      	ldr	r2, [sp, #24]
 800e9d2:	2a01      	cmp	r2, #1
 800e9d4:	f300 80ba 	bgt.w	800eb4c <_dtoa_r+0x884>
 800e9d8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e9da:	2a00      	cmp	r2, #0
 800e9dc:	f000 80b2 	beq.w	800eb44 <_dtoa_r+0x87c>
 800e9e0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800e9e4:	9e07      	ldr	r6, [sp, #28]
 800e9e6:	9d04      	ldr	r5, [sp, #16]
 800e9e8:	9a04      	ldr	r2, [sp, #16]
 800e9ea:	441a      	add	r2, r3
 800e9ec:	9204      	str	r2, [sp, #16]
 800e9ee:	9a05      	ldr	r2, [sp, #20]
 800e9f0:	2101      	movs	r1, #1
 800e9f2:	441a      	add	r2, r3
 800e9f4:	4620      	mov	r0, r4
 800e9f6:	9205      	str	r2, [sp, #20]
 800e9f8:	f000 fd78 	bl	800f4ec <__i2b>
 800e9fc:	4607      	mov	r7, r0
 800e9fe:	2d00      	cmp	r5, #0
 800ea00:	dd0c      	ble.n	800ea1c <_dtoa_r+0x754>
 800ea02:	9b05      	ldr	r3, [sp, #20]
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	dd09      	ble.n	800ea1c <_dtoa_r+0x754>
 800ea08:	42ab      	cmp	r3, r5
 800ea0a:	9a04      	ldr	r2, [sp, #16]
 800ea0c:	bfa8      	it	ge
 800ea0e:	462b      	movge	r3, r5
 800ea10:	1ad2      	subs	r2, r2, r3
 800ea12:	9204      	str	r2, [sp, #16]
 800ea14:	9a05      	ldr	r2, [sp, #20]
 800ea16:	1aed      	subs	r5, r5, r3
 800ea18:	1ad3      	subs	r3, r2, r3
 800ea1a:	9305      	str	r3, [sp, #20]
 800ea1c:	9b07      	ldr	r3, [sp, #28]
 800ea1e:	b31b      	cbz	r3, 800ea68 <_dtoa_r+0x7a0>
 800ea20:	9b08      	ldr	r3, [sp, #32]
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	f000 80af 	beq.w	800eb86 <_dtoa_r+0x8be>
 800ea28:	2e00      	cmp	r6, #0
 800ea2a:	dd13      	ble.n	800ea54 <_dtoa_r+0x78c>
 800ea2c:	4639      	mov	r1, r7
 800ea2e:	4632      	mov	r2, r6
 800ea30:	4620      	mov	r0, r4
 800ea32:	f000 fe1b 	bl	800f66c <__pow5mult>
 800ea36:	ee18 2a10 	vmov	r2, s16
 800ea3a:	4601      	mov	r1, r0
 800ea3c:	4607      	mov	r7, r0
 800ea3e:	4620      	mov	r0, r4
 800ea40:	f000 fd6a 	bl	800f518 <__multiply>
 800ea44:	ee18 1a10 	vmov	r1, s16
 800ea48:	4680      	mov	r8, r0
 800ea4a:	4620      	mov	r0, r4
 800ea4c:	f000 fc96 	bl	800f37c <_Bfree>
 800ea50:	ee08 8a10 	vmov	s16, r8
 800ea54:	9b07      	ldr	r3, [sp, #28]
 800ea56:	1b9a      	subs	r2, r3, r6
 800ea58:	d006      	beq.n	800ea68 <_dtoa_r+0x7a0>
 800ea5a:	ee18 1a10 	vmov	r1, s16
 800ea5e:	4620      	mov	r0, r4
 800ea60:	f000 fe04 	bl	800f66c <__pow5mult>
 800ea64:	ee08 0a10 	vmov	s16, r0
 800ea68:	2101      	movs	r1, #1
 800ea6a:	4620      	mov	r0, r4
 800ea6c:	f000 fd3e 	bl	800f4ec <__i2b>
 800ea70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	4606      	mov	r6, r0
 800ea76:	f340 8088 	ble.w	800eb8a <_dtoa_r+0x8c2>
 800ea7a:	461a      	mov	r2, r3
 800ea7c:	4601      	mov	r1, r0
 800ea7e:	4620      	mov	r0, r4
 800ea80:	f000 fdf4 	bl	800f66c <__pow5mult>
 800ea84:	9b06      	ldr	r3, [sp, #24]
 800ea86:	2b01      	cmp	r3, #1
 800ea88:	4606      	mov	r6, r0
 800ea8a:	f340 8081 	ble.w	800eb90 <_dtoa_r+0x8c8>
 800ea8e:	f04f 0800 	mov.w	r8, #0
 800ea92:	6933      	ldr	r3, [r6, #16]
 800ea94:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ea98:	6918      	ldr	r0, [r3, #16]
 800ea9a:	f000 fcd7 	bl	800f44c <__hi0bits>
 800ea9e:	f1c0 0020 	rsb	r0, r0, #32
 800eaa2:	9b05      	ldr	r3, [sp, #20]
 800eaa4:	4418      	add	r0, r3
 800eaa6:	f010 001f 	ands.w	r0, r0, #31
 800eaaa:	f000 8092 	beq.w	800ebd2 <_dtoa_r+0x90a>
 800eaae:	f1c0 0320 	rsb	r3, r0, #32
 800eab2:	2b04      	cmp	r3, #4
 800eab4:	f340 808a 	ble.w	800ebcc <_dtoa_r+0x904>
 800eab8:	f1c0 001c 	rsb	r0, r0, #28
 800eabc:	9b04      	ldr	r3, [sp, #16]
 800eabe:	4403      	add	r3, r0
 800eac0:	9304      	str	r3, [sp, #16]
 800eac2:	9b05      	ldr	r3, [sp, #20]
 800eac4:	4403      	add	r3, r0
 800eac6:	4405      	add	r5, r0
 800eac8:	9305      	str	r3, [sp, #20]
 800eaca:	9b04      	ldr	r3, [sp, #16]
 800eacc:	2b00      	cmp	r3, #0
 800eace:	dd07      	ble.n	800eae0 <_dtoa_r+0x818>
 800ead0:	ee18 1a10 	vmov	r1, s16
 800ead4:	461a      	mov	r2, r3
 800ead6:	4620      	mov	r0, r4
 800ead8:	f000 fe22 	bl	800f720 <__lshift>
 800eadc:	ee08 0a10 	vmov	s16, r0
 800eae0:	9b05      	ldr	r3, [sp, #20]
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	dd05      	ble.n	800eaf2 <_dtoa_r+0x82a>
 800eae6:	4631      	mov	r1, r6
 800eae8:	461a      	mov	r2, r3
 800eaea:	4620      	mov	r0, r4
 800eaec:	f000 fe18 	bl	800f720 <__lshift>
 800eaf0:	4606      	mov	r6, r0
 800eaf2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	d06e      	beq.n	800ebd6 <_dtoa_r+0x90e>
 800eaf8:	ee18 0a10 	vmov	r0, s16
 800eafc:	4631      	mov	r1, r6
 800eafe:	f000 fe7f 	bl	800f800 <__mcmp>
 800eb02:	2800      	cmp	r0, #0
 800eb04:	da67      	bge.n	800ebd6 <_dtoa_r+0x90e>
 800eb06:	9b00      	ldr	r3, [sp, #0]
 800eb08:	3b01      	subs	r3, #1
 800eb0a:	ee18 1a10 	vmov	r1, s16
 800eb0e:	9300      	str	r3, [sp, #0]
 800eb10:	220a      	movs	r2, #10
 800eb12:	2300      	movs	r3, #0
 800eb14:	4620      	mov	r0, r4
 800eb16:	f000 fc53 	bl	800f3c0 <__multadd>
 800eb1a:	9b08      	ldr	r3, [sp, #32]
 800eb1c:	ee08 0a10 	vmov	s16, r0
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	f000 81b1 	beq.w	800ee88 <_dtoa_r+0xbc0>
 800eb26:	2300      	movs	r3, #0
 800eb28:	4639      	mov	r1, r7
 800eb2a:	220a      	movs	r2, #10
 800eb2c:	4620      	mov	r0, r4
 800eb2e:	f000 fc47 	bl	800f3c0 <__multadd>
 800eb32:	9b02      	ldr	r3, [sp, #8]
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	4607      	mov	r7, r0
 800eb38:	f300 808e 	bgt.w	800ec58 <_dtoa_r+0x990>
 800eb3c:	9b06      	ldr	r3, [sp, #24]
 800eb3e:	2b02      	cmp	r3, #2
 800eb40:	dc51      	bgt.n	800ebe6 <_dtoa_r+0x91e>
 800eb42:	e089      	b.n	800ec58 <_dtoa_r+0x990>
 800eb44:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800eb46:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800eb4a:	e74b      	b.n	800e9e4 <_dtoa_r+0x71c>
 800eb4c:	9b03      	ldr	r3, [sp, #12]
 800eb4e:	1e5e      	subs	r6, r3, #1
 800eb50:	9b07      	ldr	r3, [sp, #28]
 800eb52:	42b3      	cmp	r3, r6
 800eb54:	bfbf      	itttt	lt
 800eb56:	9b07      	ldrlt	r3, [sp, #28]
 800eb58:	9607      	strlt	r6, [sp, #28]
 800eb5a:	1af2      	sublt	r2, r6, r3
 800eb5c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800eb5e:	bfb6      	itet	lt
 800eb60:	189b      	addlt	r3, r3, r2
 800eb62:	1b9e      	subge	r6, r3, r6
 800eb64:	930a      	strlt	r3, [sp, #40]	; 0x28
 800eb66:	9b03      	ldr	r3, [sp, #12]
 800eb68:	bfb8      	it	lt
 800eb6a:	2600      	movlt	r6, #0
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	bfb7      	itett	lt
 800eb70:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800eb74:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800eb78:	1a9d      	sublt	r5, r3, r2
 800eb7a:	2300      	movlt	r3, #0
 800eb7c:	e734      	b.n	800e9e8 <_dtoa_r+0x720>
 800eb7e:	9e07      	ldr	r6, [sp, #28]
 800eb80:	9d04      	ldr	r5, [sp, #16]
 800eb82:	9f08      	ldr	r7, [sp, #32]
 800eb84:	e73b      	b.n	800e9fe <_dtoa_r+0x736>
 800eb86:	9a07      	ldr	r2, [sp, #28]
 800eb88:	e767      	b.n	800ea5a <_dtoa_r+0x792>
 800eb8a:	9b06      	ldr	r3, [sp, #24]
 800eb8c:	2b01      	cmp	r3, #1
 800eb8e:	dc18      	bgt.n	800ebc2 <_dtoa_r+0x8fa>
 800eb90:	f1ba 0f00 	cmp.w	sl, #0
 800eb94:	d115      	bne.n	800ebc2 <_dtoa_r+0x8fa>
 800eb96:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800eb9a:	b993      	cbnz	r3, 800ebc2 <_dtoa_r+0x8fa>
 800eb9c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800eba0:	0d1b      	lsrs	r3, r3, #20
 800eba2:	051b      	lsls	r3, r3, #20
 800eba4:	b183      	cbz	r3, 800ebc8 <_dtoa_r+0x900>
 800eba6:	9b04      	ldr	r3, [sp, #16]
 800eba8:	3301      	adds	r3, #1
 800ebaa:	9304      	str	r3, [sp, #16]
 800ebac:	9b05      	ldr	r3, [sp, #20]
 800ebae:	3301      	adds	r3, #1
 800ebb0:	9305      	str	r3, [sp, #20]
 800ebb2:	f04f 0801 	mov.w	r8, #1
 800ebb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	f47f af6a 	bne.w	800ea92 <_dtoa_r+0x7ca>
 800ebbe:	2001      	movs	r0, #1
 800ebc0:	e76f      	b.n	800eaa2 <_dtoa_r+0x7da>
 800ebc2:	f04f 0800 	mov.w	r8, #0
 800ebc6:	e7f6      	b.n	800ebb6 <_dtoa_r+0x8ee>
 800ebc8:	4698      	mov	r8, r3
 800ebca:	e7f4      	b.n	800ebb6 <_dtoa_r+0x8ee>
 800ebcc:	f43f af7d 	beq.w	800eaca <_dtoa_r+0x802>
 800ebd0:	4618      	mov	r0, r3
 800ebd2:	301c      	adds	r0, #28
 800ebd4:	e772      	b.n	800eabc <_dtoa_r+0x7f4>
 800ebd6:	9b03      	ldr	r3, [sp, #12]
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	dc37      	bgt.n	800ec4c <_dtoa_r+0x984>
 800ebdc:	9b06      	ldr	r3, [sp, #24]
 800ebde:	2b02      	cmp	r3, #2
 800ebe0:	dd34      	ble.n	800ec4c <_dtoa_r+0x984>
 800ebe2:	9b03      	ldr	r3, [sp, #12]
 800ebe4:	9302      	str	r3, [sp, #8]
 800ebe6:	9b02      	ldr	r3, [sp, #8]
 800ebe8:	b96b      	cbnz	r3, 800ec06 <_dtoa_r+0x93e>
 800ebea:	4631      	mov	r1, r6
 800ebec:	2205      	movs	r2, #5
 800ebee:	4620      	mov	r0, r4
 800ebf0:	f000 fbe6 	bl	800f3c0 <__multadd>
 800ebf4:	4601      	mov	r1, r0
 800ebf6:	4606      	mov	r6, r0
 800ebf8:	ee18 0a10 	vmov	r0, s16
 800ebfc:	f000 fe00 	bl	800f800 <__mcmp>
 800ec00:	2800      	cmp	r0, #0
 800ec02:	f73f adbb 	bgt.w	800e77c <_dtoa_r+0x4b4>
 800ec06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ec08:	9d01      	ldr	r5, [sp, #4]
 800ec0a:	43db      	mvns	r3, r3
 800ec0c:	9300      	str	r3, [sp, #0]
 800ec0e:	f04f 0800 	mov.w	r8, #0
 800ec12:	4631      	mov	r1, r6
 800ec14:	4620      	mov	r0, r4
 800ec16:	f000 fbb1 	bl	800f37c <_Bfree>
 800ec1a:	2f00      	cmp	r7, #0
 800ec1c:	f43f aea4 	beq.w	800e968 <_dtoa_r+0x6a0>
 800ec20:	f1b8 0f00 	cmp.w	r8, #0
 800ec24:	d005      	beq.n	800ec32 <_dtoa_r+0x96a>
 800ec26:	45b8      	cmp	r8, r7
 800ec28:	d003      	beq.n	800ec32 <_dtoa_r+0x96a>
 800ec2a:	4641      	mov	r1, r8
 800ec2c:	4620      	mov	r0, r4
 800ec2e:	f000 fba5 	bl	800f37c <_Bfree>
 800ec32:	4639      	mov	r1, r7
 800ec34:	4620      	mov	r0, r4
 800ec36:	f000 fba1 	bl	800f37c <_Bfree>
 800ec3a:	e695      	b.n	800e968 <_dtoa_r+0x6a0>
 800ec3c:	2600      	movs	r6, #0
 800ec3e:	4637      	mov	r7, r6
 800ec40:	e7e1      	b.n	800ec06 <_dtoa_r+0x93e>
 800ec42:	9700      	str	r7, [sp, #0]
 800ec44:	4637      	mov	r7, r6
 800ec46:	e599      	b.n	800e77c <_dtoa_r+0x4b4>
 800ec48:	40240000 	.word	0x40240000
 800ec4c:	9b08      	ldr	r3, [sp, #32]
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	f000 80ca 	beq.w	800ede8 <_dtoa_r+0xb20>
 800ec54:	9b03      	ldr	r3, [sp, #12]
 800ec56:	9302      	str	r3, [sp, #8]
 800ec58:	2d00      	cmp	r5, #0
 800ec5a:	dd05      	ble.n	800ec68 <_dtoa_r+0x9a0>
 800ec5c:	4639      	mov	r1, r7
 800ec5e:	462a      	mov	r2, r5
 800ec60:	4620      	mov	r0, r4
 800ec62:	f000 fd5d 	bl	800f720 <__lshift>
 800ec66:	4607      	mov	r7, r0
 800ec68:	f1b8 0f00 	cmp.w	r8, #0
 800ec6c:	d05b      	beq.n	800ed26 <_dtoa_r+0xa5e>
 800ec6e:	6879      	ldr	r1, [r7, #4]
 800ec70:	4620      	mov	r0, r4
 800ec72:	f000 fb43 	bl	800f2fc <_Balloc>
 800ec76:	4605      	mov	r5, r0
 800ec78:	b928      	cbnz	r0, 800ec86 <_dtoa_r+0x9be>
 800ec7a:	4b87      	ldr	r3, [pc, #540]	; (800ee98 <_dtoa_r+0xbd0>)
 800ec7c:	4602      	mov	r2, r0
 800ec7e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800ec82:	f7ff bb3b 	b.w	800e2fc <_dtoa_r+0x34>
 800ec86:	693a      	ldr	r2, [r7, #16]
 800ec88:	3202      	adds	r2, #2
 800ec8a:	0092      	lsls	r2, r2, #2
 800ec8c:	f107 010c 	add.w	r1, r7, #12
 800ec90:	300c      	adds	r0, #12
 800ec92:	f7fe fca9 	bl	800d5e8 <memcpy>
 800ec96:	2201      	movs	r2, #1
 800ec98:	4629      	mov	r1, r5
 800ec9a:	4620      	mov	r0, r4
 800ec9c:	f000 fd40 	bl	800f720 <__lshift>
 800eca0:	9b01      	ldr	r3, [sp, #4]
 800eca2:	f103 0901 	add.w	r9, r3, #1
 800eca6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800ecaa:	4413      	add	r3, r2
 800ecac:	9305      	str	r3, [sp, #20]
 800ecae:	f00a 0301 	and.w	r3, sl, #1
 800ecb2:	46b8      	mov	r8, r7
 800ecb4:	9304      	str	r3, [sp, #16]
 800ecb6:	4607      	mov	r7, r0
 800ecb8:	4631      	mov	r1, r6
 800ecba:	ee18 0a10 	vmov	r0, s16
 800ecbe:	f7ff fa77 	bl	800e1b0 <quorem>
 800ecc2:	4641      	mov	r1, r8
 800ecc4:	9002      	str	r0, [sp, #8]
 800ecc6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ecca:	ee18 0a10 	vmov	r0, s16
 800ecce:	f000 fd97 	bl	800f800 <__mcmp>
 800ecd2:	463a      	mov	r2, r7
 800ecd4:	9003      	str	r0, [sp, #12]
 800ecd6:	4631      	mov	r1, r6
 800ecd8:	4620      	mov	r0, r4
 800ecda:	f000 fdad 	bl	800f838 <__mdiff>
 800ecde:	68c2      	ldr	r2, [r0, #12]
 800ece0:	f109 3bff 	add.w	fp, r9, #4294967295
 800ece4:	4605      	mov	r5, r0
 800ece6:	bb02      	cbnz	r2, 800ed2a <_dtoa_r+0xa62>
 800ece8:	4601      	mov	r1, r0
 800ecea:	ee18 0a10 	vmov	r0, s16
 800ecee:	f000 fd87 	bl	800f800 <__mcmp>
 800ecf2:	4602      	mov	r2, r0
 800ecf4:	4629      	mov	r1, r5
 800ecf6:	4620      	mov	r0, r4
 800ecf8:	9207      	str	r2, [sp, #28]
 800ecfa:	f000 fb3f 	bl	800f37c <_Bfree>
 800ecfe:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800ed02:	ea43 0102 	orr.w	r1, r3, r2
 800ed06:	9b04      	ldr	r3, [sp, #16]
 800ed08:	430b      	orrs	r3, r1
 800ed0a:	464d      	mov	r5, r9
 800ed0c:	d10f      	bne.n	800ed2e <_dtoa_r+0xa66>
 800ed0e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ed12:	d02a      	beq.n	800ed6a <_dtoa_r+0xaa2>
 800ed14:	9b03      	ldr	r3, [sp, #12]
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	dd02      	ble.n	800ed20 <_dtoa_r+0xa58>
 800ed1a:	9b02      	ldr	r3, [sp, #8]
 800ed1c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800ed20:	f88b a000 	strb.w	sl, [fp]
 800ed24:	e775      	b.n	800ec12 <_dtoa_r+0x94a>
 800ed26:	4638      	mov	r0, r7
 800ed28:	e7ba      	b.n	800eca0 <_dtoa_r+0x9d8>
 800ed2a:	2201      	movs	r2, #1
 800ed2c:	e7e2      	b.n	800ecf4 <_dtoa_r+0xa2c>
 800ed2e:	9b03      	ldr	r3, [sp, #12]
 800ed30:	2b00      	cmp	r3, #0
 800ed32:	db04      	blt.n	800ed3e <_dtoa_r+0xa76>
 800ed34:	9906      	ldr	r1, [sp, #24]
 800ed36:	430b      	orrs	r3, r1
 800ed38:	9904      	ldr	r1, [sp, #16]
 800ed3a:	430b      	orrs	r3, r1
 800ed3c:	d122      	bne.n	800ed84 <_dtoa_r+0xabc>
 800ed3e:	2a00      	cmp	r2, #0
 800ed40:	ddee      	ble.n	800ed20 <_dtoa_r+0xa58>
 800ed42:	ee18 1a10 	vmov	r1, s16
 800ed46:	2201      	movs	r2, #1
 800ed48:	4620      	mov	r0, r4
 800ed4a:	f000 fce9 	bl	800f720 <__lshift>
 800ed4e:	4631      	mov	r1, r6
 800ed50:	ee08 0a10 	vmov	s16, r0
 800ed54:	f000 fd54 	bl	800f800 <__mcmp>
 800ed58:	2800      	cmp	r0, #0
 800ed5a:	dc03      	bgt.n	800ed64 <_dtoa_r+0xa9c>
 800ed5c:	d1e0      	bne.n	800ed20 <_dtoa_r+0xa58>
 800ed5e:	f01a 0f01 	tst.w	sl, #1
 800ed62:	d0dd      	beq.n	800ed20 <_dtoa_r+0xa58>
 800ed64:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ed68:	d1d7      	bne.n	800ed1a <_dtoa_r+0xa52>
 800ed6a:	2339      	movs	r3, #57	; 0x39
 800ed6c:	f88b 3000 	strb.w	r3, [fp]
 800ed70:	462b      	mov	r3, r5
 800ed72:	461d      	mov	r5, r3
 800ed74:	3b01      	subs	r3, #1
 800ed76:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ed7a:	2a39      	cmp	r2, #57	; 0x39
 800ed7c:	d071      	beq.n	800ee62 <_dtoa_r+0xb9a>
 800ed7e:	3201      	adds	r2, #1
 800ed80:	701a      	strb	r2, [r3, #0]
 800ed82:	e746      	b.n	800ec12 <_dtoa_r+0x94a>
 800ed84:	2a00      	cmp	r2, #0
 800ed86:	dd07      	ble.n	800ed98 <_dtoa_r+0xad0>
 800ed88:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ed8c:	d0ed      	beq.n	800ed6a <_dtoa_r+0xaa2>
 800ed8e:	f10a 0301 	add.w	r3, sl, #1
 800ed92:	f88b 3000 	strb.w	r3, [fp]
 800ed96:	e73c      	b.n	800ec12 <_dtoa_r+0x94a>
 800ed98:	9b05      	ldr	r3, [sp, #20]
 800ed9a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800ed9e:	4599      	cmp	r9, r3
 800eda0:	d047      	beq.n	800ee32 <_dtoa_r+0xb6a>
 800eda2:	ee18 1a10 	vmov	r1, s16
 800eda6:	2300      	movs	r3, #0
 800eda8:	220a      	movs	r2, #10
 800edaa:	4620      	mov	r0, r4
 800edac:	f000 fb08 	bl	800f3c0 <__multadd>
 800edb0:	45b8      	cmp	r8, r7
 800edb2:	ee08 0a10 	vmov	s16, r0
 800edb6:	f04f 0300 	mov.w	r3, #0
 800edba:	f04f 020a 	mov.w	r2, #10
 800edbe:	4641      	mov	r1, r8
 800edc0:	4620      	mov	r0, r4
 800edc2:	d106      	bne.n	800edd2 <_dtoa_r+0xb0a>
 800edc4:	f000 fafc 	bl	800f3c0 <__multadd>
 800edc8:	4680      	mov	r8, r0
 800edca:	4607      	mov	r7, r0
 800edcc:	f109 0901 	add.w	r9, r9, #1
 800edd0:	e772      	b.n	800ecb8 <_dtoa_r+0x9f0>
 800edd2:	f000 faf5 	bl	800f3c0 <__multadd>
 800edd6:	4639      	mov	r1, r7
 800edd8:	4680      	mov	r8, r0
 800edda:	2300      	movs	r3, #0
 800eddc:	220a      	movs	r2, #10
 800edde:	4620      	mov	r0, r4
 800ede0:	f000 faee 	bl	800f3c0 <__multadd>
 800ede4:	4607      	mov	r7, r0
 800ede6:	e7f1      	b.n	800edcc <_dtoa_r+0xb04>
 800ede8:	9b03      	ldr	r3, [sp, #12]
 800edea:	9302      	str	r3, [sp, #8]
 800edec:	9d01      	ldr	r5, [sp, #4]
 800edee:	ee18 0a10 	vmov	r0, s16
 800edf2:	4631      	mov	r1, r6
 800edf4:	f7ff f9dc 	bl	800e1b0 <quorem>
 800edf8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800edfc:	9b01      	ldr	r3, [sp, #4]
 800edfe:	f805 ab01 	strb.w	sl, [r5], #1
 800ee02:	1aea      	subs	r2, r5, r3
 800ee04:	9b02      	ldr	r3, [sp, #8]
 800ee06:	4293      	cmp	r3, r2
 800ee08:	dd09      	ble.n	800ee1e <_dtoa_r+0xb56>
 800ee0a:	ee18 1a10 	vmov	r1, s16
 800ee0e:	2300      	movs	r3, #0
 800ee10:	220a      	movs	r2, #10
 800ee12:	4620      	mov	r0, r4
 800ee14:	f000 fad4 	bl	800f3c0 <__multadd>
 800ee18:	ee08 0a10 	vmov	s16, r0
 800ee1c:	e7e7      	b.n	800edee <_dtoa_r+0xb26>
 800ee1e:	9b02      	ldr	r3, [sp, #8]
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	bfc8      	it	gt
 800ee24:	461d      	movgt	r5, r3
 800ee26:	9b01      	ldr	r3, [sp, #4]
 800ee28:	bfd8      	it	le
 800ee2a:	2501      	movle	r5, #1
 800ee2c:	441d      	add	r5, r3
 800ee2e:	f04f 0800 	mov.w	r8, #0
 800ee32:	ee18 1a10 	vmov	r1, s16
 800ee36:	2201      	movs	r2, #1
 800ee38:	4620      	mov	r0, r4
 800ee3a:	f000 fc71 	bl	800f720 <__lshift>
 800ee3e:	4631      	mov	r1, r6
 800ee40:	ee08 0a10 	vmov	s16, r0
 800ee44:	f000 fcdc 	bl	800f800 <__mcmp>
 800ee48:	2800      	cmp	r0, #0
 800ee4a:	dc91      	bgt.n	800ed70 <_dtoa_r+0xaa8>
 800ee4c:	d102      	bne.n	800ee54 <_dtoa_r+0xb8c>
 800ee4e:	f01a 0f01 	tst.w	sl, #1
 800ee52:	d18d      	bne.n	800ed70 <_dtoa_r+0xaa8>
 800ee54:	462b      	mov	r3, r5
 800ee56:	461d      	mov	r5, r3
 800ee58:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ee5c:	2a30      	cmp	r2, #48	; 0x30
 800ee5e:	d0fa      	beq.n	800ee56 <_dtoa_r+0xb8e>
 800ee60:	e6d7      	b.n	800ec12 <_dtoa_r+0x94a>
 800ee62:	9a01      	ldr	r2, [sp, #4]
 800ee64:	429a      	cmp	r2, r3
 800ee66:	d184      	bne.n	800ed72 <_dtoa_r+0xaaa>
 800ee68:	9b00      	ldr	r3, [sp, #0]
 800ee6a:	3301      	adds	r3, #1
 800ee6c:	9300      	str	r3, [sp, #0]
 800ee6e:	2331      	movs	r3, #49	; 0x31
 800ee70:	7013      	strb	r3, [r2, #0]
 800ee72:	e6ce      	b.n	800ec12 <_dtoa_r+0x94a>
 800ee74:	4b09      	ldr	r3, [pc, #36]	; (800ee9c <_dtoa_r+0xbd4>)
 800ee76:	f7ff ba95 	b.w	800e3a4 <_dtoa_r+0xdc>
 800ee7a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	f47f aa6e 	bne.w	800e35e <_dtoa_r+0x96>
 800ee82:	4b07      	ldr	r3, [pc, #28]	; (800eea0 <_dtoa_r+0xbd8>)
 800ee84:	f7ff ba8e 	b.w	800e3a4 <_dtoa_r+0xdc>
 800ee88:	9b02      	ldr	r3, [sp, #8]
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	dcae      	bgt.n	800edec <_dtoa_r+0xb24>
 800ee8e:	9b06      	ldr	r3, [sp, #24]
 800ee90:	2b02      	cmp	r3, #2
 800ee92:	f73f aea8 	bgt.w	800ebe6 <_dtoa_r+0x91e>
 800ee96:	e7a9      	b.n	800edec <_dtoa_r+0xb24>
 800ee98:	08011de7 	.word	0x08011de7
 800ee9c:	08011d44 	.word	0x08011d44
 800eea0:	08011d68 	.word	0x08011d68

0800eea4 <__sflush_r>:
 800eea4:	898a      	ldrh	r2, [r1, #12]
 800eea6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eeaa:	4605      	mov	r5, r0
 800eeac:	0710      	lsls	r0, r2, #28
 800eeae:	460c      	mov	r4, r1
 800eeb0:	d458      	bmi.n	800ef64 <__sflush_r+0xc0>
 800eeb2:	684b      	ldr	r3, [r1, #4]
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	dc05      	bgt.n	800eec4 <__sflush_r+0x20>
 800eeb8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800eeba:	2b00      	cmp	r3, #0
 800eebc:	dc02      	bgt.n	800eec4 <__sflush_r+0x20>
 800eebe:	2000      	movs	r0, #0
 800eec0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eec4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800eec6:	2e00      	cmp	r6, #0
 800eec8:	d0f9      	beq.n	800eebe <__sflush_r+0x1a>
 800eeca:	2300      	movs	r3, #0
 800eecc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800eed0:	682f      	ldr	r7, [r5, #0]
 800eed2:	602b      	str	r3, [r5, #0]
 800eed4:	d032      	beq.n	800ef3c <__sflush_r+0x98>
 800eed6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800eed8:	89a3      	ldrh	r3, [r4, #12]
 800eeda:	075a      	lsls	r2, r3, #29
 800eedc:	d505      	bpl.n	800eeea <__sflush_r+0x46>
 800eede:	6863      	ldr	r3, [r4, #4]
 800eee0:	1ac0      	subs	r0, r0, r3
 800eee2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800eee4:	b10b      	cbz	r3, 800eeea <__sflush_r+0x46>
 800eee6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800eee8:	1ac0      	subs	r0, r0, r3
 800eeea:	2300      	movs	r3, #0
 800eeec:	4602      	mov	r2, r0
 800eeee:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800eef0:	6a21      	ldr	r1, [r4, #32]
 800eef2:	4628      	mov	r0, r5
 800eef4:	47b0      	blx	r6
 800eef6:	1c43      	adds	r3, r0, #1
 800eef8:	89a3      	ldrh	r3, [r4, #12]
 800eefa:	d106      	bne.n	800ef0a <__sflush_r+0x66>
 800eefc:	6829      	ldr	r1, [r5, #0]
 800eefe:	291d      	cmp	r1, #29
 800ef00:	d82c      	bhi.n	800ef5c <__sflush_r+0xb8>
 800ef02:	4a2a      	ldr	r2, [pc, #168]	; (800efac <__sflush_r+0x108>)
 800ef04:	40ca      	lsrs	r2, r1
 800ef06:	07d6      	lsls	r6, r2, #31
 800ef08:	d528      	bpl.n	800ef5c <__sflush_r+0xb8>
 800ef0a:	2200      	movs	r2, #0
 800ef0c:	6062      	str	r2, [r4, #4]
 800ef0e:	04d9      	lsls	r1, r3, #19
 800ef10:	6922      	ldr	r2, [r4, #16]
 800ef12:	6022      	str	r2, [r4, #0]
 800ef14:	d504      	bpl.n	800ef20 <__sflush_r+0x7c>
 800ef16:	1c42      	adds	r2, r0, #1
 800ef18:	d101      	bne.n	800ef1e <__sflush_r+0x7a>
 800ef1a:	682b      	ldr	r3, [r5, #0]
 800ef1c:	b903      	cbnz	r3, 800ef20 <__sflush_r+0x7c>
 800ef1e:	6560      	str	r0, [r4, #84]	; 0x54
 800ef20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ef22:	602f      	str	r7, [r5, #0]
 800ef24:	2900      	cmp	r1, #0
 800ef26:	d0ca      	beq.n	800eebe <__sflush_r+0x1a>
 800ef28:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ef2c:	4299      	cmp	r1, r3
 800ef2e:	d002      	beq.n	800ef36 <__sflush_r+0x92>
 800ef30:	4628      	mov	r0, r5
 800ef32:	f000 fd7d 	bl	800fa30 <_free_r>
 800ef36:	2000      	movs	r0, #0
 800ef38:	6360      	str	r0, [r4, #52]	; 0x34
 800ef3a:	e7c1      	b.n	800eec0 <__sflush_r+0x1c>
 800ef3c:	6a21      	ldr	r1, [r4, #32]
 800ef3e:	2301      	movs	r3, #1
 800ef40:	4628      	mov	r0, r5
 800ef42:	47b0      	blx	r6
 800ef44:	1c41      	adds	r1, r0, #1
 800ef46:	d1c7      	bne.n	800eed8 <__sflush_r+0x34>
 800ef48:	682b      	ldr	r3, [r5, #0]
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	d0c4      	beq.n	800eed8 <__sflush_r+0x34>
 800ef4e:	2b1d      	cmp	r3, #29
 800ef50:	d001      	beq.n	800ef56 <__sflush_r+0xb2>
 800ef52:	2b16      	cmp	r3, #22
 800ef54:	d101      	bne.n	800ef5a <__sflush_r+0xb6>
 800ef56:	602f      	str	r7, [r5, #0]
 800ef58:	e7b1      	b.n	800eebe <__sflush_r+0x1a>
 800ef5a:	89a3      	ldrh	r3, [r4, #12]
 800ef5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ef60:	81a3      	strh	r3, [r4, #12]
 800ef62:	e7ad      	b.n	800eec0 <__sflush_r+0x1c>
 800ef64:	690f      	ldr	r7, [r1, #16]
 800ef66:	2f00      	cmp	r7, #0
 800ef68:	d0a9      	beq.n	800eebe <__sflush_r+0x1a>
 800ef6a:	0793      	lsls	r3, r2, #30
 800ef6c:	680e      	ldr	r6, [r1, #0]
 800ef6e:	bf08      	it	eq
 800ef70:	694b      	ldreq	r3, [r1, #20]
 800ef72:	600f      	str	r7, [r1, #0]
 800ef74:	bf18      	it	ne
 800ef76:	2300      	movne	r3, #0
 800ef78:	eba6 0807 	sub.w	r8, r6, r7
 800ef7c:	608b      	str	r3, [r1, #8]
 800ef7e:	f1b8 0f00 	cmp.w	r8, #0
 800ef82:	dd9c      	ble.n	800eebe <__sflush_r+0x1a>
 800ef84:	6a21      	ldr	r1, [r4, #32]
 800ef86:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ef88:	4643      	mov	r3, r8
 800ef8a:	463a      	mov	r2, r7
 800ef8c:	4628      	mov	r0, r5
 800ef8e:	47b0      	blx	r6
 800ef90:	2800      	cmp	r0, #0
 800ef92:	dc06      	bgt.n	800efa2 <__sflush_r+0xfe>
 800ef94:	89a3      	ldrh	r3, [r4, #12]
 800ef96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ef9a:	81a3      	strh	r3, [r4, #12]
 800ef9c:	f04f 30ff 	mov.w	r0, #4294967295
 800efa0:	e78e      	b.n	800eec0 <__sflush_r+0x1c>
 800efa2:	4407      	add	r7, r0
 800efa4:	eba8 0800 	sub.w	r8, r8, r0
 800efa8:	e7e9      	b.n	800ef7e <__sflush_r+0xda>
 800efaa:	bf00      	nop
 800efac:	20400001 	.word	0x20400001

0800efb0 <_fflush_r>:
 800efb0:	b538      	push	{r3, r4, r5, lr}
 800efb2:	690b      	ldr	r3, [r1, #16]
 800efb4:	4605      	mov	r5, r0
 800efb6:	460c      	mov	r4, r1
 800efb8:	b913      	cbnz	r3, 800efc0 <_fflush_r+0x10>
 800efba:	2500      	movs	r5, #0
 800efbc:	4628      	mov	r0, r5
 800efbe:	bd38      	pop	{r3, r4, r5, pc}
 800efc0:	b118      	cbz	r0, 800efca <_fflush_r+0x1a>
 800efc2:	6983      	ldr	r3, [r0, #24]
 800efc4:	b90b      	cbnz	r3, 800efca <_fflush_r+0x1a>
 800efc6:	f000 f887 	bl	800f0d8 <__sinit>
 800efca:	4b14      	ldr	r3, [pc, #80]	; (800f01c <_fflush_r+0x6c>)
 800efcc:	429c      	cmp	r4, r3
 800efce:	d11b      	bne.n	800f008 <_fflush_r+0x58>
 800efd0:	686c      	ldr	r4, [r5, #4]
 800efd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	d0ef      	beq.n	800efba <_fflush_r+0xa>
 800efda:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800efdc:	07d0      	lsls	r0, r2, #31
 800efde:	d404      	bmi.n	800efea <_fflush_r+0x3a>
 800efe0:	0599      	lsls	r1, r3, #22
 800efe2:	d402      	bmi.n	800efea <_fflush_r+0x3a>
 800efe4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800efe6:	f000 f91a 	bl	800f21e <__retarget_lock_acquire_recursive>
 800efea:	4628      	mov	r0, r5
 800efec:	4621      	mov	r1, r4
 800efee:	f7ff ff59 	bl	800eea4 <__sflush_r>
 800eff2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800eff4:	07da      	lsls	r2, r3, #31
 800eff6:	4605      	mov	r5, r0
 800eff8:	d4e0      	bmi.n	800efbc <_fflush_r+0xc>
 800effa:	89a3      	ldrh	r3, [r4, #12]
 800effc:	059b      	lsls	r3, r3, #22
 800effe:	d4dd      	bmi.n	800efbc <_fflush_r+0xc>
 800f000:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f002:	f000 f90d 	bl	800f220 <__retarget_lock_release_recursive>
 800f006:	e7d9      	b.n	800efbc <_fflush_r+0xc>
 800f008:	4b05      	ldr	r3, [pc, #20]	; (800f020 <_fflush_r+0x70>)
 800f00a:	429c      	cmp	r4, r3
 800f00c:	d101      	bne.n	800f012 <_fflush_r+0x62>
 800f00e:	68ac      	ldr	r4, [r5, #8]
 800f010:	e7df      	b.n	800efd2 <_fflush_r+0x22>
 800f012:	4b04      	ldr	r3, [pc, #16]	; (800f024 <_fflush_r+0x74>)
 800f014:	429c      	cmp	r4, r3
 800f016:	bf08      	it	eq
 800f018:	68ec      	ldreq	r4, [r5, #12]
 800f01a:	e7da      	b.n	800efd2 <_fflush_r+0x22>
 800f01c:	08011e18 	.word	0x08011e18
 800f020:	08011e38 	.word	0x08011e38
 800f024:	08011df8 	.word	0x08011df8

0800f028 <std>:
 800f028:	2300      	movs	r3, #0
 800f02a:	b510      	push	{r4, lr}
 800f02c:	4604      	mov	r4, r0
 800f02e:	e9c0 3300 	strd	r3, r3, [r0]
 800f032:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f036:	6083      	str	r3, [r0, #8]
 800f038:	8181      	strh	r1, [r0, #12]
 800f03a:	6643      	str	r3, [r0, #100]	; 0x64
 800f03c:	81c2      	strh	r2, [r0, #14]
 800f03e:	6183      	str	r3, [r0, #24]
 800f040:	4619      	mov	r1, r3
 800f042:	2208      	movs	r2, #8
 800f044:	305c      	adds	r0, #92	; 0x5c
 800f046:	f7fe fadd 	bl	800d604 <memset>
 800f04a:	4b05      	ldr	r3, [pc, #20]	; (800f060 <std+0x38>)
 800f04c:	6263      	str	r3, [r4, #36]	; 0x24
 800f04e:	4b05      	ldr	r3, [pc, #20]	; (800f064 <std+0x3c>)
 800f050:	62a3      	str	r3, [r4, #40]	; 0x28
 800f052:	4b05      	ldr	r3, [pc, #20]	; (800f068 <std+0x40>)
 800f054:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f056:	4b05      	ldr	r3, [pc, #20]	; (800f06c <std+0x44>)
 800f058:	6224      	str	r4, [r4, #32]
 800f05a:	6323      	str	r3, [r4, #48]	; 0x30
 800f05c:	bd10      	pop	{r4, pc}
 800f05e:	bf00      	nop
 800f060:	0800ff55 	.word	0x0800ff55
 800f064:	0800ff77 	.word	0x0800ff77
 800f068:	0800ffaf 	.word	0x0800ffaf
 800f06c:	0800ffd3 	.word	0x0800ffd3

0800f070 <_cleanup_r>:
 800f070:	4901      	ldr	r1, [pc, #4]	; (800f078 <_cleanup_r+0x8>)
 800f072:	f000 b8af 	b.w	800f1d4 <_fwalk_reent>
 800f076:	bf00      	nop
 800f078:	0800efb1 	.word	0x0800efb1

0800f07c <__sfmoreglue>:
 800f07c:	b570      	push	{r4, r5, r6, lr}
 800f07e:	2268      	movs	r2, #104	; 0x68
 800f080:	1e4d      	subs	r5, r1, #1
 800f082:	4355      	muls	r5, r2
 800f084:	460e      	mov	r6, r1
 800f086:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f08a:	f000 fd3d 	bl	800fb08 <_malloc_r>
 800f08e:	4604      	mov	r4, r0
 800f090:	b140      	cbz	r0, 800f0a4 <__sfmoreglue+0x28>
 800f092:	2100      	movs	r1, #0
 800f094:	e9c0 1600 	strd	r1, r6, [r0]
 800f098:	300c      	adds	r0, #12
 800f09a:	60a0      	str	r0, [r4, #8]
 800f09c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f0a0:	f7fe fab0 	bl	800d604 <memset>
 800f0a4:	4620      	mov	r0, r4
 800f0a6:	bd70      	pop	{r4, r5, r6, pc}

0800f0a8 <__sfp_lock_acquire>:
 800f0a8:	4801      	ldr	r0, [pc, #4]	; (800f0b0 <__sfp_lock_acquire+0x8>)
 800f0aa:	f000 b8b8 	b.w	800f21e <__retarget_lock_acquire_recursive>
 800f0ae:	bf00      	nop
 800f0b0:	20001a99 	.word	0x20001a99

0800f0b4 <__sfp_lock_release>:
 800f0b4:	4801      	ldr	r0, [pc, #4]	; (800f0bc <__sfp_lock_release+0x8>)
 800f0b6:	f000 b8b3 	b.w	800f220 <__retarget_lock_release_recursive>
 800f0ba:	bf00      	nop
 800f0bc:	20001a99 	.word	0x20001a99

0800f0c0 <__sinit_lock_acquire>:
 800f0c0:	4801      	ldr	r0, [pc, #4]	; (800f0c8 <__sinit_lock_acquire+0x8>)
 800f0c2:	f000 b8ac 	b.w	800f21e <__retarget_lock_acquire_recursive>
 800f0c6:	bf00      	nop
 800f0c8:	20001a9a 	.word	0x20001a9a

0800f0cc <__sinit_lock_release>:
 800f0cc:	4801      	ldr	r0, [pc, #4]	; (800f0d4 <__sinit_lock_release+0x8>)
 800f0ce:	f000 b8a7 	b.w	800f220 <__retarget_lock_release_recursive>
 800f0d2:	bf00      	nop
 800f0d4:	20001a9a 	.word	0x20001a9a

0800f0d8 <__sinit>:
 800f0d8:	b510      	push	{r4, lr}
 800f0da:	4604      	mov	r4, r0
 800f0dc:	f7ff fff0 	bl	800f0c0 <__sinit_lock_acquire>
 800f0e0:	69a3      	ldr	r3, [r4, #24]
 800f0e2:	b11b      	cbz	r3, 800f0ec <__sinit+0x14>
 800f0e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f0e8:	f7ff bff0 	b.w	800f0cc <__sinit_lock_release>
 800f0ec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f0f0:	6523      	str	r3, [r4, #80]	; 0x50
 800f0f2:	4b13      	ldr	r3, [pc, #76]	; (800f140 <__sinit+0x68>)
 800f0f4:	4a13      	ldr	r2, [pc, #76]	; (800f144 <__sinit+0x6c>)
 800f0f6:	681b      	ldr	r3, [r3, #0]
 800f0f8:	62a2      	str	r2, [r4, #40]	; 0x28
 800f0fa:	42a3      	cmp	r3, r4
 800f0fc:	bf04      	itt	eq
 800f0fe:	2301      	moveq	r3, #1
 800f100:	61a3      	streq	r3, [r4, #24]
 800f102:	4620      	mov	r0, r4
 800f104:	f000 f820 	bl	800f148 <__sfp>
 800f108:	6060      	str	r0, [r4, #4]
 800f10a:	4620      	mov	r0, r4
 800f10c:	f000 f81c 	bl	800f148 <__sfp>
 800f110:	60a0      	str	r0, [r4, #8]
 800f112:	4620      	mov	r0, r4
 800f114:	f000 f818 	bl	800f148 <__sfp>
 800f118:	2200      	movs	r2, #0
 800f11a:	60e0      	str	r0, [r4, #12]
 800f11c:	2104      	movs	r1, #4
 800f11e:	6860      	ldr	r0, [r4, #4]
 800f120:	f7ff ff82 	bl	800f028 <std>
 800f124:	68a0      	ldr	r0, [r4, #8]
 800f126:	2201      	movs	r2, #1
 800f128:	2109      	movs	r1, #9
 800f12a:	f7ff ff7d 	bl	800f028 <std>
 800f12e:	68e0      	ldr	r0, [r4, #12]
 800f130:	2202      	movs	r2, #2
 800f132:	2112      	movs	r1, #18
 800f134:	f7ff ff78 	bl	800f028 <std>
 800f138:	2301      	movs	r3, #1
 800f13a:	61a3      	str	r3, [r4, #24]
 800f13c:	e7d2      	b.n	800f0e4 <__sinit+0xc>
 800f13e:	bf00      	nop
 800f140:	08011d30 	.word	0x08011d30
 800f144:	0800f071 	.word	0x0800f071

0800f148 <__sfp>:
 800f148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f14a:	4607      	mov	r7, r0
 800f14c:	f7ff ffac 	bl	800f0a8 <__sfp_lock_acquire>
 800f150:	4b1e      	ldr	r3, [pc, #120]	; (800f1cc <__sfp+0x84>)
 800f152:	681e      	ldr	r6, [r3, #0]
 800f154:	69b3      	ldr	r3, [r6, #24]
 800f156:	b913      	cbnz	r3, 800f15e <__sfp+0x16>
 800f158:	4630      	mov	r0, r6
 800f15a:	f7ff ffbd 	bl	800f0d8 <__sinit>
 800f15e:	3648      	adds	r6, #72	; 0x48
 800f160:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f164:	3b01      	subs	r3, #1
 800f166:	d503      	bpl.n	800f170 <__sfp+0x28>
 800f168:	6833      	ldr	r3, [r6, #0]
 800f16a:	b30b      	cbz	r3, 800f1b0 <__sfp+0x68>
 800f16c:	6836      	ldr	r6, [r6, #0]
 800f16e:	e7f7      	b.n	800f160 <__sfp+0x18>
 800f170:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f174:	b9d5      	cbnz	r5, 800f1ac <__sfp+0x64>
 800f176:	4b16      	ldr	r3, [pc, #88]	; (800f1d0 <__sfp+0x88>)
 800f178:	60e3      	str	r3, [r4, #12]
 800f17a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f17e:	6665      	str	r5, [r4, #100]	; 0x64
 800f180:	f000 f84c 	bl	800f21c <__retarget_lock_init_recursive>
 800f184:	f7ff ff96 	bl	800f0b4 <__sfp_lock_release>
 800f188:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f18c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f190:	6025      	str	r5, [r4, #0]
 800f192:	61a5      	str	r5, [r4, #24]
 800f194:	2208      	movs	r2, #8
 800f196:	4629      	mov	r1, r5
 800f198:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f19c:	f7fe fa32 	bl	800d604 <memset>
 800f1a0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f1a4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f1a8:	4620      	mov	r0, r4
 800f1aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f1ac:	3468      	adds	r4, #104	; 0x68
 800f1ae:	e7d9      	b.n	800f164 <__sfp+0x1c>
 800f1b0:	2104      	movs	r1, #4
 800f1b2:	4638      	mov	r0, r7
 800f1b4:	f7ff ff62 	bl	800f07c <__sfmoreglue>
 800f1b8:	4604      	mov	r4, r0
 800f1ba:	6030      	str	r0, [r6, #0]
 800f1bc:	2800      	cmp	r0, #0
 800f1be:	d1d5      	bne.n	800f16c <__sfp+0x24>
 800f1c0:	f7ff ff78 	bl	800f0b4 <__sfp_lock_release>
 800f1c4:	230c      	movs	r3, #12
 800f1c6:	603b      	str	r3, [r7, #0]
 800f1c8:	e7ee      	b.n	800f1a8 <__sfp+0x60>
 800f1ca:	bf00      	nop
 800f1cc:	08011d30 	.word	0x08011d30
 800f1d0:	ffff0001 	.word	0xffff0001

0800f1d4 <_fwalk_reent>:
 800f1d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f1d8:	4606      	mov	r6, r0
 800f1da:	4688      	mov	r8, r1
 800f1dc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f1e0:	2700      	movs	r7, #0
 800f1e2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f1e6:	f1b9 0901 	subs.w	r9, r9, #1
 800f1ea:	d505      	bpl.n	800f1f8 <_fwalk_reent+0x24>
 800f1ec:	6824      	ldr	r4, [r4, #0]
 800f1ee:	2c00      	cmp	r4, #0
 800f1f0:	d1f7      	bne.n	800f1e2 <_fwalk_reent+0xe>
 800f1f2:	4638      	mov	r0, r7
 800f1f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f1f8:	89ab      	ldrh	r3, [r5, #12]
 800f1fa:	2b01      	cmp	r3, #1
 800f1fc:	d907      	bls.n	800f20e <_fwalk_reent+0x3a>
 800f1fe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f202:	3301      	adds	r3, #1
 800f204:	d003      	beq.n	800f20e <_fwalk_reent+0x3a>
 800f206:	4629      	mov	r1, r5
 800f208:	4630      	mov	r0, r6
 800f20a:	47c0      	blx	r8
 800f20c:	4307      	orrs	r7, r0
 800f20e:	3568      	adds	r5, #104	; 0x68
 800f210:	e7e9      	b.n	800f1e6 <_fwalk_reent+0x12>
	...

0800f214 <_localeconv_r>:
 800f214:	4800      	ldr	r0, [pc, #0]	; (800f218 <_localeconv_r+0x4>)
 800f216:	4770      	bx	lr
 800f218:	200001ac 	.word	0x200001ac

0800f21c <__retarget_lock_init_recursive>:
 800f21c:	4770      	bx	lr

0800f21e <__retarget_lock_acquire_recursive>:
 800f21e:	4770      	bx	lr

0800f220 <__retarget_lock_release_recursive>:
 800f220:	4770      	bx	lr

0800f222 <__swhatbuf_r>:
 800f222:	b570      	push	{r4, r5, r6, lr}
 800f224:	460e      	mov	r6, r1
 800f226:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f22a:	2900      	cmp	r1, #0
 800f22c:	b096      	sub	sp, #88	; 0x58
 800f22e:	4614      	mov	r4, r2
 800f230:	461d      	mov	r5, r3
 800f232:	da08      	bge.n	800f246 <__swhatbuf_r+0x24>
 800f234:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800f238:	2200      	movs	r2, #0
 800f23a:	602a      	str	r2, [r5, #0]
 800f23c:	061a      	lsls	r2, r3, #24
 800f23e:	d410      	bmi.n	800f262 <__swhatbuf_r+0x40>
 800f240:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f244:	e00e      	b.n	800f264 <__swhatbuf_r+0x42>
 800f246:	466a      	mov	r2, sp
 800f248:	f000 ff1a 	bl	8010080 <_fstat_r>
 800f24c:	2800      	cmp	r0, #0
 800f24e:	dbf1      	blt.n	800f234 <__swhatbuf_r+0x12>
 800f250:	9a01      	ldr	r2, [sp, #4]
 800f252:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f256:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f25a:	425a      	negs	r2, r3
 800f25c:	415a      	adcs	r2, r3
 800f25e:	602a      	str	r2, [r5, #0]
 800f260:	e7ee      	b.n	800f240 <__swhatbuf_r+0x1e>
 800f262:	2340      	movs	r3, #64	; 0x40
 800f264:	2000      	movs	r0, #0
 800f266:	6023      	str	r3, [r4, #0]
 800f268:	b016      	add	sp, #88	; 0x58
 800f26a:	bd70      	pop	{r4, r5, r6, pc}

0800f26c <__smakebuf_r>:
 800f26c:	898b      	ldrh	r3, [r1, #12]
 800f26e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f270:	079d      	lsls	r5, r3, #30
 800f272:	4606      	mov	r6, r0
 800f274:	460c      	mov	r4, r1
 800f276:	d507      	bpl.n	800f288 <__smakebuf_r+0x1c>
 800f278:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f27c:	6023      	str	r3, [r4, #0]
 800f27e:	6123      	str	r3, [r4, #16]
 800f280:	2301      	movs	r3, #1
 800f282:	6163      	str	r3, [r4, #20]
 800f284:	b002      	add	sp, #8
 800f286:	bd70      	pop	{r4, r5, r6, pc}
 800f288:	ab01      	add	r3, sp, #4
 800f28a:	466a      	mov	r2, sp
 800f28c:	f7ff ffc9 	bl	800f222 <__swhatbuf_r>
 800f290:	9900      	ldr	r1, [sp, #0]
 800f292:	4605      	mov	r5, r0
 800f294:	4630      	mov	r0, r6
 800f296:	f000 fc37 	bl	800fb08 <_malloc_r>
 800f29a:	b948      	cbnz	r0, 800f2b0 <__smakebuf_r+0x44>
 800f29c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f2a0:	059a      	lsls	r2, r3, #22
 800f2a2:	d4ef      	bmi.n	800f284 <__smakebuf_r+0x18>
 800f2a4:	f023 0303 	bic.w	r3, r3, #3
 800f2a8:	f043 0302 	orr.w	r3, r3, #2
 800f2ac:	81a3      	strh	r3, [r4, #12]
 800f2ae:	e7e3      	b.n	800f278 <__smakebuf_r+0xc>
 800f2b0:	4b0d      	ldr	r3, [pc, #52]	; (800f2e8 <__smakebuf_r+0x7c>)
 800f2b2:	62b3      	str	r3, [r6, #40]	; 0x28
 800f2b4:	89a3      	ldrh	r3, [r4, #12]
 800f2b6:	6020      	str	r0, [r4, #0]
 800f2b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f2bc:	81a3      	strh	r3, [r4, #12]
 800f2be:	9b00      	ldr	r3, [sp, #0]
 800f2c0:	6163      	str	r3, [r4, #20]
 800f2c2:	9b01      	ldr	r3, [sp, #4]
 800f2c4:	6120      	str	r0, [r4, #16]
 800f2c6:	b15b      	cbz	r3, 800f2e0 <__smakebuf_r+0x74>
 800f2c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f2cc:	4630      	mov	r0, r6
 800f2ce:	f000 fee9 	bl	80100a4 <_isatty_r>
 800f2d2:	b128      	cbz	r0, 800f2e0 <__smakebuf_r+0x74>
 800f2d4:	89a3      	ldrh	r3, [r4, #12]
 800f2d6:	f023 0303 	bic.w	r3, r3, #3
 800f2da:	f043 0301 	orr.w	r3, r3, #1
 800f2de:	81a3      	strh	r3, [r4, #12]
 800f2e0:	89a0      	ldrh	r0, [r4, #12]
 800f2e2:	4305      	orrs	r5, r0
 800f2e4:	81a5      	strh	r5, [r4, #12]
 800f2e6:	e7cd      	b.n	800f284 <__smakebuf_r+0x18>
 800f2e8:	0800f071 	.word	0x0800f071

0800f2ec <malloc>:
 800f2ec:	4b02      	ldr	r3, [pc, #8]	; (800f2f8 <malloc+0xc>)
 800f2ee:	4601      	mov	r1, r0
 800f2f0:	6818      	ldr	r0, [r3, #0]
 800f2f2:	f000 bc09 	b.w	800fb08 <_malloc_r>
 800f2f6:	bf00      	nop
 800f2f8:	20000058 	.word	0x20000058

0800f2fc <_Balloc>:
 800f2fc:	b570      	push	{r4, r5, r6, lr}
 800f2fe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f300:	4604      	mov	r4, r0
 800f302:	460d      	mov	r5, r1
 800f304:	b976      	cbnz	r6, 800f324 <_Balloc+0x28>
 800f306:	2010      	movs	r0, #16
 800f308:	f7ff fff0 	bl	800f2ec <malloc>
 800f30c:	4602      	mov	r2, r0
 800f30e:	6260      	str	r0, [r4, #36]	; 0x24
 800f310:	b920      	cbnz	r0, 800f31c <_Balloc+0x20>
 800f312:	4b18      	ldr	r3, [pc, #96]	; (800f374 <_Balloc+0x78>)
 800f314:	4818      	ldr	r0, [pc, #96]	; (800f378 <_Balloc+0x7c>)
 800f316:	2166      	movs	r1, #102	; 0x66
 800f318:	f000 fe72 	bl	8010000 <__assert_func>
 800f31c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f320:	6006      	str	r6, [r0, #0]
 800f322:	60c6      	str	r6, [r0, #12]
 800f324:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800f326:	68f3      	ldr	r3, [r6, #12]
 800f328:	b183      	cbz	r3, 800f34c <_Balloc+0x50>
 800f32a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f32c:	68db      	ldr	r3, [r3, #12]
 800f32e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f332:	b9b8      	cbnz	r0, 800f364 <_Balloc+0x68>
 800f334:	2101      	movs	r1, #1
 800f336:	fa01 f605 	lsl.w	r6, r1, r5
 800f33a:	1d72      	adds	r2, r6, #5
 800f33c:	0092      	lsls	r2, r2, #2
 800f33e:	4620      	mov	r0, r4
 800f340:	f000 fb60 	bl	800fa04 <_calloc_r>
 800f344:	b160      	cbz	r0, 800f360 <_Balloc+0x64>
 800f346:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f34a:	e00e      	b.n	800f36a <_Balloc+0x6e>
 800f34c:	2221      	movs	r2, #33	; 0x21
 800f34e:	2104      	movs	r1, #4
 800f350:	4620      	mov	r0, r4
 800f352:	f000 fb57 	bl	800fa04 <_calloc_r>
 800f356:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f358:	60f0      	str	r0, [r6, #12]
 800f35a:	68db      	ldr	r3, [r3, #12]
 800f35c:	2b00      	cmp	r3, #0
 800f35e:	d1e4      	bne.n	800f32a <_Balloc+0x2e>
 800f360:	2000      	movs	r0, #0
 800f362:	bd70      	pop	{r4, r5, r6, pc}
 800f364:	6802      	ldr	r2, [r0, #0]
 800f366:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f36a:	2300      	movs	r3, #0
 800f36c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f370:	e7f7      	b.n	800f362 <_Balloc+0x66>
 800f372:	bf00      	nop
 800f374:	08011d75 	.word	0x08011d75
 800f378:	08011e58 	.word	0x08011e58

0800f37c <_Bfree>:
 800f37c:	b570      	push	{r4, r5, r6, lr}
 800f37e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f380:	4605      	mov	r5, r0
 800f382:	460c      	mov	r4, r1
 800f384:	b976      	cbnz	r6, 800f3a4 <_Bfree+0x28>
 800f386:	2010      	movs	r0, #16
 800f388:	f7ff ffb0 	bl	800f2ec <malloc>
 800f38c:	4602      	mov	r2, r0
 800f38e:	6268      	str	r0, [r5, #36]	; 0x24
 800f390:	b920      	cbnz	r0, 800f39c <_Bfree+0x20>
 800f392:	4b09      	ldr	r3, [pc, #36]	; (800f3b8 <_Bfree+0x3c>)
 800f394:	4809      	ldr	r0, [pc, #36]	; (800f3bc <_Bfree+0x40>)
 800f396:	218a      	movs	r1, #138	; 0x8a
 800f398:	f000 fe32 	bl	8010000 <__assert_func>
 800f39c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f3a0:	6006      	str	r6, [r0, #0]
 800f3a2:	60c6      	str	r6, [r0, #12]
 800f3a4:	b13c      	cbz	r4, 800f3b6 <_Bfree+0x3a>
 800f3a6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f3a8:	6862      	ldr	r2, [r4, #4]
 800f3aa:	68db      	ldr	r3, [r3, #12]
 800f3ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f3b0:	6021      	str	r1, [r4, #0]
 800f3b2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f3b6:	bd70      	pop	{r4, r5, r6, pc}
 800f3b8:	08011d75 	.word	0x08011d75
 800f3bc:	08011e58 	.word	0x08011e58

0800f3c0 <__multadd>:
 800f3c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f3c4:	690d      	ldr	r5, [r1, #16]
 800f3c6:	4607      	mov	r7, r0
 800f3c8:	460c      	mov	r4, r1
 800f3ca:	461e      	mov	r6, r3
 800f3cc:	f101 0c14 	add.w	ip, r1, #20
 800f3d0:	2000      	movs	r0, #0
 800f3d2:	f8dc 3000 	ldr.w	r3, [ip]
 800f3d6:	b299      	uxth	r1, r3
 800f3d8:	fb02 6101 	mla	r1, r2, r1, r6
 800f3dc:	0c1e      	lsrs	r6, r3, #16
 800f3de:	0c0b      	lsrs	r3, r1, #16
 800f3e0:	fb02 3306 	mla	r3, r2, r6, r3
 800f3e4:	b289      	uxth	r1, r1
 800f3e6:	3001      	adds	r0, #1
 800f3e8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f3ec:	4285      	cmp	r5, r0
 800f3ee:	f84c 1b04 	str.w	r1, [ip], #4
 800f3f2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f3f6:	dcec      	bgt.n	800f3d2 <__multadd+0x12>
 800f3f8:	b30e      	cbz	r6, 800f43e <__multadd+0x7e>
 800f3fa:	68a3      	ldr	r3, [r4, #8]
 800f3fc:	42ab      	cmp	r3, r5
 800f3fe:	dc19      	bgt.n	800f434 <__multadd+0x74>
 800f400:	6861      	ldr	r1, [r4, #4]
 800f402:	4638      	mov	r0, r7
 800f404:	3101      	adds	r1, #1
 800f406:	f7ff ff79 	bl	800f2fc <_Balloc>
 800f40a:	4680      	mov	r8, r0
 800f40c:	b928      	cbnz	r0, 800f41a <__multadd+0x5a>
 800f40e:	4602      	mov	r2, r0
 800f410:	4b0c      	ldr	r3, [pc, #48]	; (800f444 <__multadd+0x84>)
 800f412:	480d      	ldr	r0, [pc, #52]	; (800f448 <__multadd+0x88>)
 800f414:	21b5      	movs	r1, #181	; 0xb5
 800f416:	f000 fdf3 	bl	8010000 <__assert_func>
 800f41a:	6922      	ldr	r2, [r4, #16]
 800f41c:	3202      	adds	r2, #2
 800f41e:	f104 010c 	add.w	r1, r4, #12
 800f422:	0092      	lsls	r2, r2, #2
 800f424:	300c      	adds	r0, #12
 800f426:	f7fe f8df 	bl	800d5e8 <memcpy>
 800f42a:	4621      	mov	r1, r4
 800f42c:	4638      	mov	r0, r7
 800f42e:	f7ff ffa5 	bl	800f37c <_Bfree>
 800f432:	4644      	mov	r4, r8
 800f434:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f438:	3501      	adds	r5, #1
 800f43a:	615e      	str	r6, [r3, #20]
 800f43c:	6125      	str	r5, [r4, #16]
 800f43e:	4620      	mov	r0, r4
 800f440:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f444:	08011de7 	.word	0x08011de7
 800f448:	08011e58 	.word	0x08011e58

0800f44c <__hi0bits>:
 800f44c:	0c03      	lsrs	r3, r0, #16
 800f44e:	041b      	lsls	r3, r3, #16
 800f450:	b9d3      	cbnz	r3, 800f488 <__hi0bits+0x3c>
 800f452:	0400      	lsls	r0, r0, #16
 800f454:	2310      	movs	r3, #16
 800f456:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f45a:	bf04      	itt	eq
 800f45c:	0200      	lsleq	r0, r0, #8
 800f45e:	3308      	addeq	r3, #8
 800f460:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f464:	bf04      	itt	eq
 800f466:	0100      	lsleq	r0, r0, #4
 800f468:	3304      	addeq	r3, #4
 800f46a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800f46e:	bf04      	itt	eq
 800f470:	0080      	lsleq	r0, r0, #2
 800f472:	3302      	addeq	r3, #2
 800f474:	2800      	cmp	r0, #0
 800f476:	db05      	blt.n	800f484 <__hi0bits+0x38>
 800f478:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800f47c:	f103 0301 	add.w	r3, r3, #1
 800f480:	bf08      	it	eq
 800f482:	2320      	moveq	r3, #32
 800f484:	4618      	mov	r0, r3
 800f486:	4770      	bx	lr
 800f488:	2300      	movs	r3, #0
 800f48a:	e7e4      	b.n	800f456 <__hi0bits+0xa>

0800f48c <__lo0bits>:
 800f48c:	6803      	ldr	r3, [r0, #0]
 800f48e:	f013 0207 	ands.w	r2, r3, #7
 800f492:	4601      	mov	r1, r0
 800f494:	d00b      	beq.n	800f4ae <__lo0bits+0x22>
 800f496:	07da      	lsls	r2, r3, #31
 800f498:	d423      	bmi.n	800f4e2 <__lo0bits+0x56>
 800f49a:	0798      	lsls	r0, r3, #30
 800f49c:	bf49      	itett	mi
 800f49e:	085b      	lsrmi	r3, r3, #1
 800f4a0:	089b      	lsrpl	r3, r3, #2
 800f4a2:	2001      	movmi	r0, #1
 800f4a4:	600b      	strmi	r3, [r1, #0]
 800f4a6:	bf5c      	itt	pl
 800f4a8:	600b      	strpl	r3, [r1, #0]
 800f4aa:	2002      	movpl	r0, #2
 800f4ac:	4770      	bx	lr
 800f4ae:	b298      	uxth	r0, r3
 800f4b0:	b9a8      	cbnz	r0, 800f4de <__lo0bits+0x52>
 800f4b2:	0c1b      	lsrs	r3, r3, #16
 800f4b4:	2010      	movs	r0, #16
 800f4b6:	b2da      	uxtb	r2, r3
 800f4b8:	b90a      	cbnz	r2, 800f4be <__lo0bits+0x32>
 800f4ba:	3008      	adds	r0, #8
 800f4bc:	0a1b      	lsrs	r3, r3, #8
 800f4be:	071a      	lsls	r2, r3, #28
 800f4c0:	bf04      	itt	eq
 800f4c2:	091b      	lsreq	r3, r3, #4
 800f4c4:	3004      	addeq	r0, #4
 800f4c6:	079a      	lsls	r2, r3, #30
 800f4c8:	bf04      	itt	eq
 800f4ca:	089b      	lsreq	r3, r3, #2
 800f4cc:	3002      	addeq	r0, #2
 800f4ce:	07da      	lsls	r2, r3, #31
 800f4d0:	d403      	bmi.n	800f4da <__lo0bits+0x4e>
 800f4d2:	085b      	lsrs	r3, r3, #1
 800f4d4:	f100 0001 	add.w	r0, r0, #1
 800f4d8:	d005      	beq.n	800f4e6 <__lo0bits+0x5a>
 800f4da:	600b      	str	r3, [r1, #0]
 800f4dc:	4770      	bx	lr
 800f4de:	4610      	mov	r0, r2
 800f4e0:	e7e9      	b.n	800f4b6 <__lo0bits+0x2a>
 800f4e2:	2000      	movs	r0, #0
 800f4e4:	4770      	bx	lr
 800f4e6:	2020      	movs	r0, #32
 800f4e8:	4770      	bx	lr
	...

0800f4ec <__i2b>:
 800f4ec:	b510      	push	{r4, lr}
 800f4ee:	460c      	mov	r4, r1
 800f4f0:	2101      	movs	r1, #1
 800f4f2:	f7ff ff03 	bl	800f2fc <_Balloc>
 800f4f6:	4602      	mov	r2, r0
 800f4f8:	b928      	cbnz	r0, 800f506 <__i2b+0x1a>
 800f4fa:	4b05      	ldr	r3, [pc, #20]	; (800f510 <__i2b+0x24>)
 800f4fc:	4805      	ldr	r0, [pc, #20]	; (800f514 <__i2b+0x28>)
 800f4fe:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800f502:	f000 fd7d 	bl	8010000 <__assert_func>
 800f506:	2301      	movs	r3, #1
 800f508:	6144      	str	r4, [r0, #20]
 800f50a:	6103      	str	r3, [r0, #16]
 800f50c:	bd10      	pop	{r4, pc}
 800f50e:	bf00      	nop
 800f510:	08011de7 	.word	0x08011de7
 800f514:	08011e58 	.word	0x08011e58

0800f518 <__multiply>:
 800f518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f51c:	4691      	mov	r9, r2
 800f51e:	690a      	ldr	r2, [r1, #16]
 800f520:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f524:	429a      	cmp	r2, r3
 800f526:	bfb8      	it	lt
 800f528:	460b      	movlt	r3, r1
 800f52a:	460c      	mov	r4, r1
 800f52c:	bfbc      	itt	lt
 800f52e:	464c      	movlt	r4, r9
 800f530:	4699      	movlt	r9, r3
 800f532:	6927      	ldr	r7, [r4, #16]
 800f534:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f538:	68a3      	ldr	r3, [r4, #8]
 800f53a:	6861      	ldr	r1, [r4, #4]
 800f53c:	eb07 060a 	add.w	r6, r7, sl
 800f540:	42b3      	cmp	r3, r6
 800f542:	b085      	sub	sp, #20
 800f544:	bfb8      	it	lt
 800f546:	3101      	addlt	r1, #1
 800f548:	f7ff fed8 	bl	800f2fc <_Balloc>
 800f54c:	b930      	cbnz	r0, 800f55c <__multiply+0x44>
 800f54e:	4602      	mov	r2, r0
 800f550:	4b44      	ldr	r3, [pc, #272]	; (800f664 <__multiply+0x14c>)
 800f552:	4845      	ldr	r0, [pc, #276]	; (800f668 <__multiply+0x150>)
 800f554:	f240 115d 	movw	r1, #349	; 0x15d
 800f558:	f000 fd52 	bl	8010000 <__assert_func>
 800f55c:	f100 0514 	add.w	r5, r0, #20
 800f560:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f564:	462b      	mov	r3, r5
 800f566:	2200      	movs	r2, #0
 800f568:	4543      	cmp	r3, r8
 800f56a:	d321      	bcc.n	800f5b0 <__multiply+0x98>
 800f56c:	f104 0314 	add.w	r3, r4, #20
 800f570:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800f574:	f109 0314 	add.w	r3, r9, #20
 800f578:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800f57c:	9202      	str	r2, [sp, #8]
 800f57e:	1b3a      	subs	r2, r7, r4
 800f580:	3a15      	subs	r2, #21
 800f582:	f022 0203 	bic.w	r2, r2, #3
 800f586:	3204      	adds	r2, #4
 800f588:	f104 0115 	add.w	r1, r4, #21
 800f58c:	428f      	cmp	r7, r1
 800f58e:	bf38      	it	cc
 800f590:	2204      	movcc	r2, #4
 800f592:	9201      	str	r2, [sp, #4]
 800f594:	9a02      	ldr	r2, [sp, #8]
 800f596:	9303      	str	r3, [sp, #12]
 800f598:	429a      	cmp	r2, r3
 800f59a:	d80c      	bhi.n	800f5b6 <__multiply+0x9e>
 800f59c:	2e00      	cmp	r6, #0
 800f59e:	dd03      	ble.n	800f5a8 <__multiply+0x90>
 800f5a0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	d05a      	beq.n	800f65e <__multiply+0x146>
 800f5a8:	6106      	str	r6, [r0, #16]
 800f5aa:	b005      	add	sp, #20
 800f5ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5b0:	f843 2b04 	str.w	r2, [r3], #4
 800f5b4:	e7d8      	b.n	800f568 <__multiply+0x50>
 800f5b6:	f8b3 a000 	ldrh.w	sl, [r3]
 800f5ba:	f1ba 0f00 	cmp.w	sl, #0
 800f5be:	d024      	beq.n	800f60a <__multiply+0xf2>
 800f5c0:	f104 0e14 	add.w	lr, r4, #20
 800f5c4:	46a9      	mov	r9, r5
 800f5c6:	f04f 0c00 	mov.w	ip, #0
 800f5ca:	f85e 2b04 	ldr.w	r2, [lr], #4
 800f5ce:	f8d9 1000 	ldr.w	r1, [r9]
 800f5d2:	fa1f fb82 	uxth.w	fp, r2
 800f5d6:	b289      	uxth	r1, r1
 800f5d8:	fb0a 110b 	mla	r1, sl, fp, r1
 800f5dc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800f5e0:	f8d9 2000 	ldr.w	r2, [r9]
 800f5e4:	4461      	add	r1, ip
 800f5e6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f5ea:	fb0a c20b 	mla	r2, sl, fp, ip
 800f5ee:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800f5f2:	b289      	uxth	r1, r1
 800f5f4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f5f8:	4577      	cmp	r7, lr
 800f5fa:	f849 1b04 	str.w	r1, [r9], #4
 800f5fe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f602:	d8e2      	bhi.n	800f5ca <__multiply+0xb2>
 800f604:	9a01      	ldr	r2, [sp, #4]
 800f606:	f845 c002 	str.w	ip, [r5, r2]
 800f60a:	9a03      	ldr	r2, [sp, #12]
 800f60c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f610:	3304      	adds	r3, #4
 800f612:	f1b9 0f00 	cmp.w	r9, #0
 800f616:	d020      	beq.n	800f65a <__multiply+0x142>
 800f618:	6829      	ldr	r1, [r5, #0]
 800f61a:	f104 0c14 	add.w	ip, r4, #20
 800f61e:	46ae      	mov	lr, r5
 800f620:	f04f 0a00 	mov.w	sl, #0
 800f624:	f8bc b000 	ldrh.w	fp, [ip]
 800f628:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800f62c:	fb09 220b 	mla	r2, r9, fp, r2
 800f630:	4492      	add	sl, r2
 800f632:	b289      	uxth	r1, r1
 800f634:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800f638:	f84e 1b04 	str.w	r1, [lr], #4
 800f63c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800f640:	f8be 1000 	ldrh.w	r1, [lr]
 800f644:	0c12      	lsrs	r2, r2, #16
 800f646:	fb09 1102 	mla	r1, r9, r2, r1
 800f64a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800f64e:	4567      	cmp	r7, ip
 800f650:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f654:	d8e6      	bhi.n	800f624 <__multiply+0x10c>
 800f656:	9a01      	ldr	r2, [sp, #4]
 800f658:	50a9      	str	r1, [r5, r2]
 800f65a:	3504      	adds	r5, #4
 800f65c:	e79a      	b.n	800f594 <__multiply+0x7c>
 800f65e:	3e01      	subs	r6, #1
 800f660:	e79c      	b.n	800f59c <__multiply+0x84>
 800f662:	bf00      	nop
 800f664:	08011de7 	.word	0x08011de7
 800f668:	08011e58 	.word	0x08011e58

0800f66c <__pow5mult>:
 800f66c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f670:	4615      	mov	r5, r2
 800f672:	f012 0203 	ands.w	r2, r2, #3
 800f676:	4606      	mov	r6, r0
 800f678:	460f      	mov	r7, r1
 800f67a:	d007      	beq.n	800f68c <__pow5mult+0x20>
 800f67c:	4c25      	ldr	r4, [pc, #148]	; (800f714 <__pow5mult+0xa8>)
 800f67e:	3a01      	subs	r2, #1
 800f680:	2300      	movs	r3, #0
 800f682:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f686:	f7ff fe9b 	bl	800f3c0 <__multadd>
 800f68a:	4607      	mov	r7, r0
 800f68c:	10ad      	asrs	r5, r5, #2
 800f68e:	d03d      	beq.n	800f70c <__pow5mult+0xa0>
 800f690:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800f692:	b97c      	cbnz	r4, 800f6b4 <__pow5mult+0x48>
 800f694:	2010      	movs	r0, #16
 800f696:	f7ff fe29 	bl	800f2ec <malloc>
 800f69a:	4602      	mov	r2, r0
 800f69c:	6270      	str	r0, [r6, #36]	; 0x24
 800f69e:	b928      	cbnz	r0, 800f6ac <__pow5mult+0x40>
 800f6a0:	4b1d      	ldr	r3, [pc, #116]	; (800f718 <__pow5mult+0xac>)
 800f6a2:	481e      	ldr	r0, [pc, #120]	; (800f71c <__pow5mult+0xb0>)
 800f6a4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800f6a8:	f000 fcaa 	bl	8010000 <__assert_func>
 800f6ac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f6b0:	6004      	str	r4, [r0, #0]
 800f6b2:	60c4      	str	r4, [r0, #12]
 800f6b4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800f6b8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f6bc:	b94c      	cbnz	r4, 800f6d2 <__pow5mult+0x66>
 800f6be:	f240 2171 	movw	r1, #625	; 0x271
 800f6c2:	4630      	mov	r0, r6
 800f6c4:	f7ff ff12 	bl	800f4ec <__i2b>
 800f6c8:	2300      	movs	r3, #0
 800f6ca:	f8c8 0008 	str.w	r0, [r8, #8]
 800f6ce:	4604      	mov	r4, r0
 800f6d0:	6003      	str	r3, [r0, #0]
 800f6d2:	f04f 0900 	mov.w	r9, #0
 800f6d6:	07eb      	lsls	r3, r5, #31
 800f6d8:	d50a      	bpl.n	800f6f0 <__pow5mult+0x84>
 800f6da:	4639      	mov	r1, r7
 800f6dc:	4622      	mov	r2, r4
 800f6de:	4630      	mov	r0, r6
 800f6e0:	f7ff ff1a 	bl	800f518 <__multiply>
 800f6e4:	4639      	mov	r1, r7
 800f6e6:	4680      	mov	r8, r0
 800f6e8:	4630      	mov	r0, r6
 800f6ea:	f7ff fe47 	bl	800f37c <_Bfree>
 800f6ee:	4647      	mov	r7, r8
 800f6f0:	106d      	asrs	r5, r5, #1
 800f6f2:	d00b      	beq.n	800f70c <__pow5mult+0xa0>
 800f6f4:	6820      	ldr	r0, [r4, #0]
 800f6f6:	b938      	cbnz	r0, 800f708 <__pow5mult+0x9c>
 800f6f8:	4622      	mov	r2, r4
 800f6fa:	4621      	mov	r1, r4
 800f6fc:	4630      	mov	r0, r6
 800f6fe:	f7ff ff0b 	bl	800f518 <__multiply>
 800f702:	6020      	str	r0, [r4, #0]
 800f704:	f8c0 9000 	str.w	r9, [r0]
 800f708:	4604      	mov	r4, r0
 800f70a:	e7e4      	b.n	800f6d6 <__pow5mult+0x6a>
 800f70c:	4638      	mov	r0, r7
 800f70e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f712:	bf00      	nop
 800f714:	08011fa8 	.word	0x08011fa8
 800f718:	08011d75 	.word	0x08011d75
 800f71c:	08011e58 	.word	0x08011e58

0800f720 <__lshift>:
 800f720:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f724:	460c      	mov	r4, r1
 800f726:	6849      	ldr	r1, [r1, #4]
 800f728:	6923      	ldr	r3, [r4, #16]
 800f72a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f72e:	68a3      	ldr	r3, [r4, #8]
 800f730:	4607      	mov	r7, r0
 800f732:	4691      	mov	r9, r2
 800f734:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f738:	f108 0601 	add.w	r6, r8, #1
 800f73c:	42b3      	cmp	r3, r6
 800f73e:	db0b      	blt.n	800f758 <__lshift+0x38>
 800f740:	4638      	mov	r0, r7
 800f742:	f7ff fddb 	bl	800f2fc <_Balloc>
 800f746:	4605      	mov	r5, r0
 800f748:	b948      	cbnz	r0, 800f75e <__lshift+0x3e>
 800f74a:	4602      	mov	r2, r0
 800f74c:	4b2a      	ldr	r3, [pc, #168]	; (800f7f8 <__lshift+0xd8>)
 800f74e:	482b      	ldr	r0, [pc, #172]	; (800f7fc <__lshift+0xdc>)
 800f750:	f240 11d9 	movw	r1, #473	; 0x1d9
 800f754:	f000 fc54 	bl	8010000 <__assert_func>
 800f758:	3101      	adds	r1, #1
 800f75a:	005b      	lsls	r3, r3, #1
 800f75c:	e7ee      	b.n	800f73c <__lshift+0x1c>
 800f75e:	2300      	movs	r3, #0
 800f760:	f100 0114 	add.w	r1, r0, #20
 800f764:	f100 0210 	add.w	r2, r0, #16
 800f768:	4618      	mov	r0, r3
 800f76a:	4553      	cmp	r3, sl
 800f76c:	db37      	blt.n	800f7de <__lshift+0xbe>
 800f76e:	6920      	ldr	r0, [r4, #16]
 800f770:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f774:	f104 0314 	add.w	r3, r4, #20
 800f778:	f019 091f 	ands.w	r9, r9, #31
 800f77c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f780:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800f784:	d02f      	beq.n	800f7e6 <__lshift+0xc6>
 800f786:	f1c9 0e20 	rsb	lr, r9, #32
 800f78a:	468a      	mov	sl, r1
 800f78c:	f04f 0c00 	mov.w	ip, #0
 800f790:	681a      	ldr	r2, [r3, #0]
 800f792:	fa02 f209 	lsl.w	r2, r2, r9
 800f796:	ea42 020c 	orr.w	r2, r2, ip
 800f79a:	f84a 2b04 	str.w	r2, [sl], #4
 800f79e:	f853 2b04 	ldr.w	r2, [r3], #4
 800f7a2:	4298      	cmp	r0, r3
 800f7a4:	fa22 fc0e 	lsr.w	ip, r2, lr
 800f7a8:	d8f2      	bhi.n	800f790 <__lshift+0x70>
 800f7aa:	1b03      	subs	r3, r0, r4
 800f7ac:	3b15      	subs	r3, #21
 800f7ae:	f023 0303 	bic.w	r3, r3, #3
 800f7b2:	3304      	adds	r3, #4
 800f7b4:	f104 0215 	add.w	r2, r4, #21
 800f7b8:	4290      	cmp	r0, r2
 800f7ba:	bf38      	it	cc
 800f7bc:	2304      	movcc	r3, #4
 800f7be:	f841 c003 	str.w	ip, [r1, r3]
 800f7c2:	f1bc 0f00 	cmp.w	ip, #0
 800f7c6:	d001      	beq.n	800f7cc <__lshift+0xac>
 800f7c8:	f108 0602 	add.w	r6, r8, #2
 800f7cc:	3e01      	subs	r6, #1
 800f7ce:	4638      	mov	r0, r7
 800f7d0:	612e      	str	r6, [r5, #16]
 800f7d2:	4621      	mov	r1, r4
 800f7d4:	f7ff fdd2 	bl	800f37c <_Bfree>
 800f7d8:	4628      	mov	r0, r5
 800f7da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f7de:	f842 0f04 	str.w	r0, [r2, #4]!
 800f7e2:	3301      	adds	r3, #1
 800f7e4:	e7c1      	b.n	800f76a <__lshift+0x4a>
 800f7e6:	3904      	subs	r1, #4
 800f7e8:	f853 2b04 	ldr.w	r2, [r3], #4
 800f7ec:	f841 2f04 	str.w	r2, [r1, #4]!
 800f7f0:	4298      	cmp	r0, r3
 800f7f2:	d8f9      	bhi.n	800f7e8 <__lshift+0xc8>
 800f7f4:	e7ea      	b.n	800f7cc <__lshift+0xac>
 800f7f6:	bf00      	nop
 800f7f8:	08011de7 	.word	0x08011de7
 800f7fc:	08011e58 	.word	0x08011e58

0800f800 <__mcmp>:
 800f800:	b530      	push	{r4, r5, lr}
 800f802:	6902      	ldr	r2, [r0, #16]
 800f804:	690c      	ldr	r4, [r1, #16]
 800f806:	1b12      	subs	r2, r2, r4
 800f808:	d10e      	bne.n	800f828 <__mcmp+0x28>
 800f80a:	f100 0314 	add.w	r3, r0, #20
 800f80e:	3114      	adds	r1, #20
 800f810:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800f814:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800f818:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800f81c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800f820:	42a5      	cmp	r5, r4
 800f822:	d003      	beq.n	800f82c <__mcmp+0x2c>
 800f824:	d305      	bcc.n	800f832 <__mcmp+0x32>
 800f826:	2201      	movs	r2, #1
 800f828:	4610      	mov	r0, r2
 800f82a:	bd30      	pop	{r4, r5, pc}
 800f82c:	4283      	cmp	r3, r0
 800f82e:	d3f3      	bcc.n	800f818 <__mcmp+0x18>
 800f830:	e7fa      	b.n	800f828 <__mcmp+0x28>
 800f832:	f04f 32ff 	mov.w	r2, #4294967295
 800f836:	e7f7      	b.n	800f828 <__mcmp+0x28>

0800f838 <__mdiff>:
 800f838:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f83c:	460c      	mov	r4, r1
 800f83e:	4606      	mov	r6, r0
 800f840:	4611      	mov	r1, r2
 800f842:	4620      	mov	r0, r4
 800f844:	4690      	mov	r8, r2
 800f846:	f7ff ffdb 	bl	800f800 <__mcmp>
 800f84a:	1e05      	subs	r5, r0, #0
 800f84c:	d110      	bne.n	800f870 <__mdiff+0x38>
 800f84e:	4629      	mov	r1, r5
 800f850:	4630      	mov	r0, r6
 800f852:	f7ff fd53 	bl	800f2fc <_Balloc>
 800f856:	b930      	cbnz	r0, 800f866 <__mdiff+0x2e>
 800f858:	4b3a      	ldr	r3, [pc, #232]	; (800f944 <__mdiff+0x10c>)
 800f85a:	4602      	mov	r2, r0
 800f85c:	f240 2132 	movw	r1, #562	; 0x232
 800f860:	4839      	ldr	r0, [pc, #228]	; (800f948 <__mdiff+0x110>)
 800f862:	f000 fbcd 	bl	8010000 <__assert_func>
 800f866:	2301      	movs	r3, #1
 800f868:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f86c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f870:	bfa4      	itt	ge
 800f872:	4643      	movge	r3, r8
 800f874:	46a0      	movge	r8, r4
 800f876:	4630      	mov	r0, r6
 800f878:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800f87c:	bfa6      	itte	ge
 800f87e:	461c      	movge	r4, r3
 800f880:	2500      	movge	r5, #0
 800f882:	2501      	movlt	r5, #1
 800f884:	f7ff fd3a 	bl	800f2fc <_Balloc>
 800f888:	b920      	cbnz	r0, 800f894 <__mdiff+0x5c>
 800f88a:	4b2e      	ldr	r3, [pc, #184]	; (800f944 <__mdiff+0x10c>)
 800f88c:	4602      	mov	r2, r0
 800f88e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800f892:	e7e5      	b.n	800f860 <__mdiff+0x28>
 800f894:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800f898:	6926      	ldr	r6, [r4, #16]
 800f89a:	60c5      	str	r5, [r0, #12]
 800f89c:	f104 0914 	add.w	r9, r4, #20
 800f8a0:	f108 0514 	add.w	r5, r8, #20
 800f8a4:	f100 0e14 	add.w	lr, r0, #20
 800f8a8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800f8ac:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800f8b0:	f108 0210 	add.w	r2, r8, #16
 800f8b4:	46f2      	mov	sl, lr
 800f8b6:	2100      	movs	r1, #0
 800f8b8:	f859 3b04 	ldr.w	r3, [r9], #4
 800f8bc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800f8c0:	fa1f f883 	uxth.w	r8, r3
 800f8c4:	fa11 f18b 	uxtah	r1, r1, fp
 800f8c8:	0c1b      	lsrs	r3, r3, #16
 800f8ca:	eba1 0808 	sub.w	r8, r1, r8
 800f8ce:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800f8d2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800f8d6:	fa1f f888 	uxth.w	r8, r8
 800f8da:	1419      	asrs	r1, r3, #16
 800f8dc:	454e      	cmp	r6, r9
 800f8de:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800f8e2:	f84a 3b04 	str.w	r3, [sl], #4
 800f8e6:	d8e7      	bhi.n	800f8b8 <__mdiff+0x80>
 800f8e8:	1b33      	subs	r3, r6, r4
 800f8ea:	3b15      	subs	r3, #21
 800f8ec:	f023 0303 	bic.w	r3, r3, #3
 800f8f0:	3304      	adds	r3, #4
 800f8f2:	3415      	adds	r4, #21
 800f8f4:	42a6      	cmp	r6, r4
 800f8f6:	bf38      	it	cc
 800f8f8:	2304      	movcc	r3, #4
 800f8fa:	441d      	add	r5, r3
 800f8fc:	4473      	add	r3, lr
 800f8fe:	469e      	mov	lr, r3
 800f900:	462e      	mov	r6, r5
 800f902:	4566      	cmp	r6, ip
 800f904:	d30e      	bcc.n	800f924 <__mdiff+0xec>
 800f906:	f10c 0203 	add.w	r2, ip, #3
 800f90a:	1b52      	subs	r2, r2, r5
 800f90c:	f022 0203 	bic.w	r2, r2, #3
 800f910:	3d03      	subs	r5, #3
 800f912:	45ac      	cmp	ip, r5
 800f914:	bf38      	it	cc
 800f916:	2200      	movcc	r2, #0
 800f918:	441a      	add	r2, r3
 800f91a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800f91e:	b17b      	cbz	r3, 800f940 <__mdiff+0x108>
 800f920:	6107      	str	r7, [r0, #16]
 800f922:	e7a3      	b.n	800f86c <__mdiff+0x34>
 800f924:	f856 8b04 	ldr.w	r8, [r6], #4
 800f928:	fa11 f288 	uxtah	r2, r1, r8
 800f92c:	1414      	asrs	r4, r2, #16
 800f92e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800f932:	b292      	uxth	r2, r2
 800f934:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800f938:	f84e 2b04 	str.w	r2, [lr], #4
 800f93c:	1421      	asrs	r1, r4, #16
 800f93e:	e7e0      	b.n	800f902 <__mdiff+0xca>
 800f940:	3f01      	subs	r7, #1
 800f942:	e7ea      	b.n	800f91a <__mdiff+0xe2>
 800f944:	08011de7 	.word	0x08011de7
 800f948:	08011e58 	.word	0x08011e58

0800f94c <__d2b>:
 800f94c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f950:	4689      	mov	r9, r1
 800f952:	2101      	movs	r1, #1
 800f954:	ec57 6b10 	vmov	r6, r7, d0
 800f958:	4690      	mov	r8, r2
 800f95a:	f7ff fccf 	bl	800f2fc <_Balloc>
 800f95e:	4604      	mov	r4, r0
 800f960:	b930      	cbnz	r0, 800f970 <__d2b+0x24>
 800f962:	4602      	mov	r2, r0
 800f964:	4b25      	ldr	r3, [pc, #148]	; (800f9fc <__d2b+0xb0>)
 800f966:	4826      	ldr	r0, [pc, #152]	; (800fa00 <__d2b+0xb4>)
 800f968:	f240 310a 	movw	r1, #778	; 0x30a
 800f96c:	f000 fb48 	bl	8010000 <__assert_func>
 800f970:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800f974:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f978:	bb35      	cbnz	r5, 800f9c8 <__d2b+0x7c>
 800f97a:	2e00      	cmp	r6, #0
 800f97c:	9301      	str	r3, [sp, #4]
 800f97e:	d028      	beq.n	800f9d2 <__d2b+0x86>
 800f980:	4668      	mov	r0, sp
 800f982:	9600      	str	r6, [sp, #0]
 800f984:	f7ff fd82 	bl	800f48c <__lo0bits>
 800f988:	9900      	ldr	r1, [sp, #0]
 800f98a:	b300      	cbz	r0, 800f9ce <__d2b+0x82>
 800f98c:	9a01      	ldr	r2, [sp, #4]
 800f98e:	f1c0 0320 	rsb	r3, r0, #32
 800f992:	fa02 f303 	lsl.w	r3, r2, r3
 800f996:	430b      	orrs	r3, r1
 800f998:	40c2      	lsrs	r2, r0
 800f99a:	6163      	str	r3, [r4, #20]
 800f99c:	9201      	str	r2, [sp, #4]
 800f99e:	9b01      	ldr	r3, [sp, #4]
 800f9a0:	61a3      	str	r3, [r4, #24]
 800f9a2:	2b00      	cmp	r3, #0
 800f9a4:	bf14      	ite	ne
 800f9a6:	2202      	movne	r2, #2
 800f9a8:	2201      	moveq	r2, #1
 800f9aa:	6122      	str	r2, [r4, #16]
 800f9ac:	b1d5      	cbz	r5, 800f9e4 <__d2b+0x98>
 800f9ae:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800f9b2:	4405      	add	r5, r0
 800f9b4:	f8c9 5000 	str.w	r5, [r9]
 800f9b8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f9bc:	f8c8 0000 	str.w	r0, [r8]
 800f9c0:	4620      	mov	r0, r4
 800f9c2:	b003      	add	sp, #12
 800f9c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f9c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f9cc:	e7d5      	b.n	800f97a <__d2b+0x2e>
 800f9ce:	6161      	str	r1, [r4, #20]
 800f9d0:	e7e5      	b.n	800f99e <__d2b+0x52>
 800f9d2:	a801      	add	r0, sp, #4
 800f9d4:	f7ff fd5a 	bl	800f48c <__lo0bits>
 800f9d8:	9b01      	ldr	r3, [sp, #4]
 800f9da:	6163      	str	r3, [r4, #20]
 800f9dc:	2201      	movs	r2, #1
 800f9de:	6122      	str	r2, [r4, #16]
 800f9e0:	3020      	adds	r0, #32
 800f9e2:	e7e3      	b.n	800f9ac <__d2b+0x60>
 800f9e4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f9e8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f9ec:	f8c9 0000 	str.w	r0, [r9]
 800f9f0:	6918      	ldr	r0, [r3, #16]
 800f9f2:	f7ff fd2b 	bl	800f44c <__hi0bits>
 800f9f6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f9fa:	e7df      	b.n	800f9bc <__d2b+0x70>
 800f9fc:	08011de7 	.word	0x08011de7
 800fa00:	08011e58 	.word	0x08011e58

0800fa04 <_calloc_r>:
 800fa04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fa06:	fba1 2402 	umull	r2, r4, r1, r2
 800fa0a:	b94c      	cbnz	r4, 800fa20 <_calloc_r+0x1c>
 800fa0c:	4611      	mov	r1, r2
 800fa0e:	9201      	str	r2, [sp, #4]
 800fa10:	f000 f87a 	bl	800fb08 <_malloc_r>
 800fa14:	9a01      	ldr	r2, [sp, #4]
 800fa16:	4605      	mov	r5, r0
 800fa18:	b930      	cbnz	r0, 800fa28 <_calloc_r+0x24>
 800fa1a:	4628      	mov	r0, r5
 800fa1c:	b003      	add	sp, #12
 800fa1e:	bd30      	pop	{r4, r5, pc}
 800fa20:	220c      	movs	r2, #12
 800fa22:	6002      	str	r2, [r0, #0]
 800fa24:	2500      	movs	r5, #0
 800fa26:	e7f8      	b.n	800fa1a <_calloc_r+0x16>
 800fa28:	4621      	mov	r1, r4
 800fa2a:	f7fd fdeb 	bl	800d604 <memset>
 800fa2e:	e7f4      	b.n	800fa1a <_calloc_r+0x16>

0800fa30 <_free_r>:
 800fa30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fa32:	2900      	cmp	r1, #0
 800fa34:	d044      	beq.n	800fac0 <_free_r+0x90>
 800fa36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fa3a:	9001      	str	r0, [sp, #4]
 800fa3c:	2b00      	cmp	r3, #0
 800fa3e:	f1a1 0404 	sub.w	r4, r1, #4
 800fa42:	bfb8      	it	lt
 800fa44:	18e4      	addlt	r4, r4, r3
 800fa46:	f000 fb61 	bl	801010c <__malloc_lock>
 800fa4a:	4a1e      	ldr	r2, [pc, #120]	; (800fac4 <_free_r+0x94>)
 800fa4c:	9801      	ldr	r0, [sp, #4]
 800fa4e:	6813      	ldr	r3, [r2, #0]
 800fa50:	b933      	cbnz	r3, 800fa60 <_free_r+0x30>
 800fa52:	6063      	str	r3, [r4, #4]
 800fa54:	6014      	str	r4, [r2, #0]
 800fa56:	b003      	add	sp, #12
 800fa58:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fa5c:	f000 bb5c 	b.w	8010118 <__malloc_unlock>
 800fa60:	42a3      	cmp	r3, r4
 800fa62:	d908      	bls.n	800fa76 <_free_r+0x46>
 800fa64:	6825      	ldr	r5, [r4, #0]
 800fa66:	1961      	adds	r1, r4, r5
 800fa68:	428b      	cmp	r3, r1
 800fa6a:	bf01      	itttt	eq
 800fa6c:	6819      	ldreq	r1, [r3, #0]
 800fa6e:	685b      	ldreq	r3, [r3, #4]
 800fa70:	1949      	addeq	r1, r1, r5
 800fa72:	6021      	streq	r1, [r4, #0]
 800fa74:	e7ed      	b.n	800fa52 <_free_r+0x22>
 800fa76:	461a      	mov	r2, r3
 800fa78:	685b      	ldr	r3, [r3, #4]
 800fa7a:	b10b      	cbz	r3, 800fa80 <_free_r+0x50>
 800fa7c:	42a3      	cmp	r3, r4
 800fa7e:	d9fa      	bls.n	800fa76 <_free_r+0x46>
 800fa80:	6811      	ldr	r1, [r2, #0]
 800fa82:	1855      	adds	r5, r2, r1
 800fa84:	42a5      	cmp	r5, r4
 800fa86:	d10b      	bne.n	800faa0 <_free_r+0x70>
 800fa88:	6824      	ldr	r4, [r4, #0]
 800fa8a:	4421      	add	r1, r4
 800fa8c:	1854      	adds	r4, r2, r1
 800fa8e:	42a3      	cmp	r3, r4
 800fa90:	6011      	str	r1, [r2, #0]
 800fa92:	d1e0      	bne.n	800fa56 <_free_r+0x26>
 800fa94:	681c      	ldr	r4, [r3, #0]
 800fa96:	685b      	ldr	r3, [r3, #4]
 800fa98:	6053      	str	r3, [r2, #4]
 800fa9a:	4421      	add	r1, r4
 800fa9c:	6011      	str	r1, [r2, #0]
 800fa9e:	e7da      	b.n	800fa56 <_free_r+0x26>
 800faa0:	d902      	bls.n	800faa8 <_free_r+0x78>
 800faa2:	230c      	movs	r3, #12
 800faa4:	6003      	str	r3, [r0, #0]
 800faa6:	e7d6      	b.n	800fa56 <_free_r+0x26>
 800faa8:	6825      	ldr	r5, [r4, #0]
 800faaa:	1961      	adds	r1, r4, r5
 800faac:	428b      	cmp	r3, r1
 800faae:	bf04      	itt	eq
 800fab0:	6819      	ldreq	r1, [r3, #0]
 800fab2:	685b      	ldreq	r3, [r3, #4]
 800fab4:	6063      	str	r3, [r4, #4]
 800fab6:	bf04      	itt	eq
 800fab8:	1949      	addeq	r1, r1, r5
 800faba:	6021      	streq	r1, [r4, #0]
 800fabc:	6054      	str	r4, [r2, #4]
 800fabe:	e7ca      	b.n	800fa56 <_free_r+0x26>
 800fac0:	b003      	add	sp, #12
 800fac2:	bd30      	pop	{r4, r5, pc}
 800fac4:	20001a9c 	.word	0x20001a9c

0800fac8 <sbrk_aligned>:
 800fac8:	b570      	push	{r4, r5, r6, lr}
 800faca:	4e0e      	ldr	r6, [pc, #56]	; (800fb04 <sbrk_aligned+0x3c>)
 800facc:	460c      	mov	r4, r1
 800face:	6831      	ldr	r1, [r6, #0]
 800fad0:	4605      	mov	r5, r0
 800fad2:	b911      	cbnz	r1, 800fada <sbrk_aligned+0x12>
 800fad4:	f000 fa2e 	bl	800ff34 <_sbrk_r>
 800fad8:	6030      	str	r0, [r6, #0]
 800fada:	4621      	mov	r1, r4
 800fadc:	4628      	mov	r0, r5
 800fade:	f000 fa29 	bl	800ff34 <_sbrk_r>
 800fae2:	1c43      	adds	r3, r0, #1
 800fae4:	d00a      	beq.n	800fafc <sbrk_aligned+0x34>
 800fae6:	1cc4      	adds	r4, r0, #3
 800fae8:	f024 0403 	bic.w	r4, r4, #3
 800faec:	42a0      	cmp	r0, r4
 800faee:	d007      	beq.n	800fb00 <sbrk_aligned+0x38>
 800faf0:	1a21      	subs	r1, r4, r0
 800faf2:	4628      	mov	r0, r5
 800faf4:	f000 fa1e 	bl	800ff34 <_sbrk_r>
 800faf8:	3001      	adds	r0, #1
 800fafa:	d101      	bne.n	800fb00 <sbrk_aligned+0x38>
 800fafc:	f04f 34ff 	mov.w	r4, #4294967295
 800fb00:	4620      	mov	r0, r4
 800fb02:	bd70      	pop	{r4, r5, r6, pc}
 800fb04:	20001aa0 	.word	0x20001aa0

0800fb08 <_malloc_r>:
 800fb08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fb0c:	1ccd      	adds	r5, r1, #3
 800fb0e:	f025 0503 	bic.w	r5, r5, #3
 800fb12:	3508      	adds	r5, #8
 800fb14:	2d0c      	cmp	r5, #12
 800fb16:	bf38      	it	cc
 800fb18:	250c      	movcc	r5, #12
 800fb1a:	2d00      	cmp	r5, #0
 800fb1c:	4607      	mov	r7, r0
 800fb1e:	db01      	blt.n	800fb24 <_malloc_r+0x1c>
 800fb20:	42a9      	cmp	r1, r5
 800fb22:	d905      	bls.n	800fb30 <_malloc_r+0x28>
 800fb24:	230c      	movs	r3, #12
 800fb26:	603b      	str	r3, [r7, #0]
 800fb28:	2600      	movs	r6, #0
 800fb2a:	4630      	mov	r0, r6
 800fb2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fb30:	4e2e      	ldr	r6, [pc, #184]	; (800fbec <_malloc_r+0xe4>)
 800fb32:	f000 faeb 	bl	801010c <__malloc_lock>
 800fb36:	6833      	ldr	r3, [r6, #0]
 800fb38:	461c      	mov	r4, r3
 800fb3a:	bb34      	cbnz	r4, 800fb8a <_malloc_r+0x82>
 800fb3c:	4629      	mov	r1, r5
 800fb3e:	4638      	mov	r0, r7
 800fb40:	f7ff ffc2 	bl	800fac8 <sbrk_aligned>
 800fb44:	1c43      	adds	r3, r0, #1
 800fb46:	4604      	mov	r4, r0
 800fb48:	d14d      	bne.n	800fbe6 <_malloc_r+0xde>
 800fb4a:	6834      	ldr	r4, [r6, #0]
 800fb4c:	4626      	mov	r6, r4
 800fb4e:	2e00      	cmp	r6, #0
 800fb50:	d140      	bne.n	800fbd4 <_malloc_r+0xcc>
 800fb52:	6823      	ldr	r3, [r4, #0]
 800fb54:	4631      	mov	r1, r6
 800fb56:	4638      	mov	r0, r7
 800fb58:	eb04 0803 	add.w	r8, r4, r3
 800fb5c:	f000 f9ea 	bl	800ff34 <_sbrk_r>
 800fb60:	4580      	cmp	r8, r0
 800fb62:	d13a      	bne.n	800fbda <_malloc_r+0xd2>
 800fb64:	6821      	ldr	r1, [r4, #0]
 800fb66:	3503      	adds	r5, #3
 800fb68:	1a6d      	subs	r5, r5, r1
 800fb6a:	f025 0503 	bic.w	r5, r5, #3
 800fb6e:	3508      	adds	r5, #8
 800fb70:	2d0c      	cmp	r5, #12
 800fb72:	bf38      	it	cc
 800fb74:	250c      	movcc	r5, #12
 800fb76:	4629      	mov	r1, r5
 800fb78:	4638      	mov	r0, r7
 800fb7a:	f7ff ffa5 	bl	800fac8 <sbrk_aligned>
 800fb7e:	3001      	adds	r0, #1
 800fb80:	d02b      	beq.n	800fbda <_malloc_r+0xd2>
 800fb82:	6823      	ldr	r3, [r4, #0]
 800fb84:	442b      	add	r3, r5
 800fb86:	6023      	str	r3, [r4, #0]
 800fb88:	e00e      	b.n	800fba8 <_malloc_r+0xa0>
 800fb8a:	6822      	ldr	r2, [r4, #0]
 800fb8c:	1b52      	subs	r2, r2, r5
 800fb8e:	d41e      	bmi.n	800fbce <_malloc_r+0xc6>
 800fb90:	2a0b      	cmp	r2, #11
 800fb92:	d916      	bls.n	800fbc2 <_malloc_r+0xba>
 800fb94:	1961      	adds	r1, r4, r5
 800fb96:	42a3      	cmp	r3, r4
 800fb98:	6025      	str	r5, [r4, #0]
 800fb9a:	bf18      	it	ne
 800fb9c:	6059      	strne	r1, [r3, #4]
 800fb9e:	6863      	ldr	r3, [r4, #4]
 800fba0:	bf08      	it	eq
 800fba2:	6031      	streq	r1, [r6, #0]
 800fba4:	5162      	str	r2, [r4, r5]
 800fba6:	604b      	str	r3, [r1, #4]
 800fba8:	4638      	mov	r0, r7
 800fbaa:	f104 060b 	add.w	r6, r4, #11
 800fbae:	f000 fab3 	bl	8010118 <__malloc_unlock>
 800fbb2:	f026 0607 	bic.w	r6, r6, #7
 800fbb6:	1d23      	adds	r3, r4, #4
 800fbb8:	1af2      	subs	r2, r6, r3
 800fbba:	d0b6      	beq.n	800fb2a <_malloc_r+0x22>
 800fbbc:	1b9b      	subs	r3, r3, r6
 800fbbe:	50a3      	str	r3, [r4, r2]
 800fbc0:	e7b3      	b.n	800fb2a <_malloc_r+0x22>
 800fbc2:	6862      	ldr	r2, [r4, #4]
 800fbc4:	42a3      	cmp	r3, r4
 800fbc6:	bf0c      	ite	eq
 800fbc8:	6032      	streq	r2, [r6, #0]
 800fbca:	605a      	strne	r2, [r3, #4]
 800fbcc:	e7ec      	b.n	800fba8 <_malloc_r+0xa0>
 800fbce:	4623      	mov	r3, r4
 800fbd0:	6864      	ldr	r4, [r4, #4]
 800fbd2:	e7b2      	b.n	800fb3a <_malloc_r+0x32>
 800fbd4:	4634      	mov	r4, r6
 800fbd6:	6876      	ldr	r6, [r6, #4]
 800fbd8:	e7b9      	b.n	800fb4e <_malloc_r+0x46>
 800fbda:	230c      	movs	r3, #12
 800fbdc:	603b      	str	r3, [r7, #0]
 800fbde:	4638      	mov	r0, r7
 800fbe0:	f000 fa9a 	bl	8010118 <__malloc_unlock>
 800fbe4:	e7a1      	b.n	800fb2a <_malloc_r+0x22>
 800fbe6:	6025      	str	r5, [r4, #0]
 800fbe8:	e7de      	b.n	800fba8 <_malloc_r+0xa0>
 800fbea:	bf00      	nop
 800fbec:	20001a9c 	.word	0x20001a9c

0800fbf0 <__sfputc_r>:
 800fbf0:	6893      	ldr	r3, [r2, #8]
 800fbf2:	3b01      	subs	r3, #1
 800fbf4:	2b00      	cmp	r3, #0
 800fbf6:	b410      	push	{r4}
 800fbf8:	6093      	str	r3, [r2, #8]
 800fbfa:	da08      	bge.n	800fc0e <__sfputc_r+0x1e>
 800fbfc:	6994      	ldr	r4, [r2, #24]
 800fbfe:	42a3      	cmp	r3, r4
 800fc00:	db01      	blt.n	800fc06 <__sfputc_r+0x16>
 800fc02:	290a      	cmp	r1, #10
 800fc04:	d103      	bne.n	800fc0e <__sfputc_r+0x1e>
 800fc06:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fc0a:	f7fe ba11 	b.w	800e030 <__swbuf_r>
 800fc0e:	6813      	ldr	r3, [r2, #0]
 800fc10:	1c58      	adds	r0, r3, #1
 800fc12:	6010      	str	r0, [r2, #0]
 800fc14:	7019      	strb	r1, [r3, #0]
 800fc16:	4608      	mov	r0, r1
 800fc18:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fc1c:	4770      	bx	lr

0800fc1e <__sfputs_r>:
 800fc1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc20:	4606      	mov	r6, r0
 800fc22:	460f      	mov	r7, r1
 800fc24:	4614      	mov	r4, r2
 800fc26:	18d5      	adds	r5, r2, r3
 800fc28:	42ac      	cmp	r4, r5
 800fc2a:	d101      	bne.n	800fc30 <__sfputs_r+0x12>
 800fc2c:	2000      	movs	r0, #0
 800fc2e:	e007      	b.n	800fc40 <__sfputs_r+0x22>
 800fc30:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fc34:	463a      	mov	r2, r7
 800fc36:	4630      	mov	r0, r6
 800fc38:	f7ff ffda 	bl	800fbf0 <__sfputc_r>
 800fc3c:	1c43      	adds	r3, r0, #1
 800fc3e:	d1f3      	bne.n	800fc28 <__sfputs_r+0xa>
 800fc40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800fc44 <_vfiprintf_r>:
 800fc44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc48:	460d      	mov	r5, r1
 800fc4a:	b09d      	sub	sp, #116	; 0x74
 800fc4c:	4614      	mov	r4, r2
 800fc4e:	4698      	mov	r8, r3
 800fc50:	4606      	mov	r6, r0
 800fc52:	b118      	cbz	r0, 800fc5c <_vfiprintf_r+0x18>
 800fc54:	6983      	ldr	r3, [r0, #24]
 800fc56:	b90b      	cbnz	r3, 800fc5c <_vfiprintf_r+0x18>
 800fc58:	f7ff fa3e 	bl	800f0d8 <__sinit>
 800fc5c:	4b89      	ldr	r3, [pc, #548]	; (800fe84 <_vfiprintf_r+0x240>)
 800fc5e:	429d      	cmp	r5, r3
 800fc60:	d11b      	bne.n	800fc9a <_vfiprintf_r+0x56>
 800fc62:	6875      	ldr	r5, [r6, #4]
 800fc64:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fc66:	07d9      	lsls	r1, r3, #31
 800fc68:	d405      	bmi.n	800fc76 <_vfiprintf_r+0x32>
 800fc6a:	89ab      	ldrh	r3, [r5, #12]
 800fc6c:	059a      	lsls	r2, r3, #22
 800fc6e:	d402      	bmi.n	800fc76 <_vfiprintf_r+0x32>
 800fc70:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fc72:	f7ff fad4 	bl	800f21e <__retarget_lock_acquire_recursive>
 800fc76:	89ab      	ldrh	r3, [r5, #12]
 800fc78:	071b      	lsls	r3, r3, #28
 800fc7a:	d501      	bpl.n	800fc80 <_vfiprintf_r+0x3c>
 800fc7c:	692b      	ldr	r3, [r5, #16]
 800fc7e:	b9eb      	cbnz	r3, 800fcbc <_vfiprintf_r+0x78>
 800fc80:	4629      	mov	r1, r5
 800fc82:	4630      	mov	r0, r6
 800fc84:	f7fe fa26 	bl	800e0d4 <__swsetup_r>
 800fc88:	b1c0      	cbz	r0, 800fcbc <_vfiprintf_r+0x78>
 800fc8a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fc8c:	07dc      	lsls	r4, r3, #31
 800fc8e:	d50e      	bpl.n	800fcae <_vfiprintf_r+0x6a>
 800fc90:	f04f 30ff 	mov.w	r0, #4294967295
 800fc94:	b01d      	add	sp, #116	; 0x74
 800fc96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc9a:	4b7b      	ldr	r3, [pc, #492]	; (800fe88 <_vfiprintf_r+0x244>)
 800fc9c:	429d      	cmp	r5, r3
 800fc9e:	d101      	bne.n	800fca4 <_vfiprintf_r+0x60>
 800fca0:	68b5      	ldr	r5, [r6, #8]
 800fca2:	e7df      	b.n	800fc64 <_vfiprintf_r+0x20>
 800fca4:	4b79      	ldr	r3, [pc, #484]	; (800fe8c <_vfiprintf_r+0x248>)
 800fca6:	429d      	cmp	r5, r3
 800fca8:	bf08      	it	eq
 800fcaa:	68f5      	ldreq	r5, [r6, #12]
 800fcac:	e7da      	b.n	800fc64 <_vfiprintf_r+0x20>
 800fcae:	89ab      	ldrh	r3, [r5, #12]
 800fcb0:	0598      	lsls	r0, r3, #22
 800fcb2:	d4ed      	bmi.n	800fc90 <_vfiprintf_r+0x4c>
 800fcb4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fcb6:	f7ff fab3 	bl	800f220 <__retarget_lock_release_recursive>
 800fcba:	e7e9      	b.n	800fc90 <_vfiprintf_r+0x4c>
 800fcbc:	2300      	movs	r3, #0
 800fcbe:	9309      	str	r3, [sp, #36]	; 0x24
 800fcc0:	2320      	movs	r3, #32
 800fcc2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fcc6:	f8cd 800c 	str.w	r8, [sp, #12]
 800fcca:	2330      	movs	r3, #48	; 0x30
 800fccc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800fe90 <_vfiprintf_r+0x24c>
 800fcd0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fcd4:	f04f 0901 	mov.w	r9, #1
 800fcd8:	4623      	mov	r3, r4
 800fcda:	469a      	mov	sl, r3
 800fcdc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fce0:	b10a      	cbz	r2, 800fce6 <_vfiprintf_r+0xa2>
 800fce2:	2a25      	cmp	r2, #37	; 0x25
 800fce4:	d1f9      	bne.n	800fcda <_vfiprintf_r+0x96>
 800fce6:	ebba 0b04 	subs.w	fp, sl, r4
 800fcea:	d00b      	beq.n	800fd04 <_vfiprintf_r+0xc0>
 800fcec:	465b      	mov	r3, fp
 800fcee:	4622      	mov	r2, r4
 800fcf0:	4629      	mov	r1, r5
 800fcf2:	4630      	mov	r0, r6
 800fcf4:	f7ff ff93 	bl	800fc1e <__sfputs_r>
 800fcf8:	3001      	adds	r0, #1
 800fcfa:	f000 80aa 	beq.w	800fe52 <_vfiprintf_r+0x20e>
 800fcfe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fd00:	445a      	add	r2, fp
 800fd02:	9209      	str	r2, [sp, #36]	; 0x24
 800fd04:	f89a 3000 	ldrb.w	r3, [sl]
 800fd08:	2b00      	cmp	r3, #0
 800fd0a:	f000 80a2 	beq.w	800fe52 <_vfiprintf_r+0x20e>
 800fd0e:	2300      	movs	r3, #0
 800fd10:	f04f 32ff 	mov.w	r2, #4294967295
 800fd14:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fd18:	f10a 0a01 	add.w	sl, sl, #1
 800fd1c:	9304      	str	r3, [sp, #16]
 800fd1e:	9307      	str	r3, [sp, #28]
 800fd20:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fd24:	931a      	str	r3, [sp, #104]	; 0x68
 800fd26:	4654      	mov	r4, sl
 800fd28:	2205      	movs	r2, #5
 800fd2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fd2e:	4858      	ldr	r0, [pc, #352]	; (800fe90 <_vfiprintf_r+0x24c>)
 800fd30:	f7f0 fa3e 	bl	80001b0 <memchr>
 800fd34:	9a04      	ldr	r2, [sp, #16]
 800fd36:	b9d8      	cbnz	r0, 800fd70 <_vfiprintf_r+0x12c>
 800fd38:	06d1      	lsls	r1, r2, #27
 800fd3a:	bf44      	itt	mi
 800fd3c:	2320      	movmi	r3, #32
 800fd3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fd42:	0713      	lsls	r3, r2, #28
 800fd44:	bf44      	itt	mi
 800fd46:	232b      	movmi	r3, #43	; 0x2b
 800fd48:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fd4c:	f89a 3000 	ldrb.w	r3, [sl]
 800fd50:	2b2a      	cmp	r3, #42	; 0x2a
 800fd52:	d015      	beq.n	800fd80 <_vfiprintf_r+0x13c>
 800fd54:	9a07      	ldr	r2, [sp, #28]
 800fd56:	4654      	mov	r4, sl
 800fd58:	2000      	movs	r0, #0
 800fd5a:	f04f 0c0a 	mov.w	ip, #10
 800fd5e:	4621      	mov	r1, r4
 800fd60:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fd64:	3b30      	subs	r3, #48	; 0x30
 800fd66:	2b09      	cmp	r3, #9
 800fd68:	d94e      	bls.n	800fe08 <_vfiprintf_r+0x1c4>
 800fd6a:	b1b0      	cbz	r0, 800fd9a <_vfiprintf_r+0x156>
 800fd6c:	9207      	str	r2, [sp, #28]
 800fd6e:	e014      	b.n	800fd9a <_vfiprintf_r+0x156>
 800fd70:	eba0 0308 	sub.w	r3, r0, r8
 800fd74:	fa09 f303 	lsl.w	r3, r9, r3
 800fd78:	4313      	orrs	r3, r2
 800fd7a:	9304      	str	r3, [sp, #16]
 800fd7c:	46a2      	mov	sl, r4
 800fd7e:	e7d2      	b.n	800fd26 <_vfiprintf_r+0xe2>
 800fd80:	9b03      	ldr	r3, [sp, #12]
 800fd82:	1d19      	adds	r1, r3, #4
 800fd84:	681b      	ldr	r3, [r3, #0]
 800fd86:	9103      	str	r1, [sp, #12]
 800fd88:	2b00      	cmp	r3, #0
 800fd8a:	bfbb      	ittet	lt
 800fd8c:	425b      	neglt	r3, r3
 800fd8e:	f042 0202 	orrlt.w	r2, r2, #2
 800fd92:	9307      	strge	r3, [sp, #28]
 800fd94:	9307      	strlt	r3, [sp, #28]
 800fd96:	bfb8      	it	lt
 800fd98:	9204      	strlt	r2, [sp, #16]
 800fd9a:	7823      	ldrb	r3, [r4, #0]
 800fd9c:	2b2e      	cmp	r3, #46	; 0x2e
 800fd9e:	d10c      	bne.n	800fdba <_vfiprintf_r+0x176>
 800fda0:	7863      	ldrb	r3, [r4, #1]
 800fda2:	2b2a      	cmp	r3, #42	; 0x2a
 800fda4:	d135      	bne.n	800fe12 <_vfiprintf_r+0x1ce>
 800fda6:	9b03      	ldr	r3, [sp, #12]
 800fda8:	1d1a      	adds	r2, r3, #4
 800fdaa:	681b      	ldr	r3, [r3, #0]
 800fdac:	9203      	str	r2, [sp, #12]
 800fdae:	2b00      	cmp	r3, #0
 800fdb0:	bfb8      	it	lt
 800fdb2:	f04f 33ff 	movlt.w	r3, #4294967295
 800fdb6:	3402      	adds	r4, #2
 800fdb8:	9305      	str	r3, [sp, #20]
 800fdba:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800fea0 <_vfiprintf_r+0x25c>
 800fdbe:	7821      	ldrb	r1, [r4, #0]
 800fdc0:	2203      	movs	r2, #3
 800fdc2:	4650      	mov	r0, sl
 800fdc4:	f7f0 f9f4 	bl	80001b0 <memchr>
 800fdc8:	b140      	cbz	r0, 800fddc <_vfiprintf_r+0x198>
 800fdca:	2340      	movs	r3, #64	; 0x40
 800fdcc:	eba0 000a 	sub.w	r0, r0, sl
 800fdd0:	fa03 f000 	lsl.w	r0, r3, r0
 800fdd4:	9b04      	ldr	r3, [sp, #16]
 800fdd6:	4303      	orrs	r3, r0
 800fdd8:	3401      	adds	r4, #1
 800fdda:	9304      	str	r3, [sp, #16]
 800fddc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fde0:	482c      	ldr	r0, [pc, #176]	; (800fe94 <_vfiprintf_r+0x250>)
 800fde2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fde6:	2206      	movs	r2, #6
 800fde8:	f7f0 f9e2 	bl	80001b0 <memchr>
 800fdec:	2800      	cmp	r0, #0
 800fdee:	d03f      	beq.n	800fe70 <_vfiprintf_r+0x22c>
 800fdf0:	4b29      	ldr	r3, [pc, #164]	; (800fe98 <_vfiprintf_r+0x254>)
 800fdf2:	bb1b      	cbnz	r3, 800fe3c <_vfiprintf_r+0x1f8>
 800fdf4:	9b03      	ldr	r3, [sp, #12]
 800fdf6:	3307      	adds	r3, #7
 800fdf8:	f023 0307 	bic.w	r3, r3, #7
 800fdfc:	3308      	adds	r3, #8
 800fdfe:	9303      	str	r3, [sp, #12]
 800fe00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fe02:	443b      	add	r3, r7
 800fe04:	9309      	str	r3, [sp, #36]	; 0x24
 800fe06:	e767      	b.n	800fcd8 <_vfiprintf_r+0x94>
 800fe08:	fb0c 3202 	mla	r2, ip, r2, r3
 800fe0c:	460c      	mov	r4, r1
 800fe0e:	2001      	movs	r0, #1
 800fe10:	e7a5      	b.n	800fd5e <_vfiprintf_r+0x11a>
 800fe12:	2300      	movs	r3, #0
 800fe14:	3401      	adds	r4, #1
 800fe16:	9305      	str	r3, [sp, #20]
 800fe18:	4619      	mov	r1, r3
 800fe1a:	f04f 0c0a 	mov.w	ip, #10
 800fe1e:	4620      	mov	r0, r4
 800fe20:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fe24:	3a30      	subs	r2, #48	; 0x30
 800fe26:	2a09      	cmp	r2, #9
 800fe28:	d903      	bls.n	800fe32 <_vfiprintf_r+0x1ee>
 800fe2a:	2b00      	cmp	r3, #0
 800fe2c:	d0c5      	beq.n	800fdba <_vfiprintf_r+0x176>
 800fe2e:	9105      	str	r1, [sp, #20]
 800fe30:	e7c3      	b.n	800fdba <_vfiprintf_r+0x176>
 800fe32:	fb0c 2101 	mla	r1, ip, r1, r2
 800fe36:	4604      	mov	r4, r0
 800fe38:	2301      	movs	r3, #1
 800fe3a:	e7f0      	b.n	800fe1e <_vfiprintf_r+0x1da>
 800fe3c:	ab03      	add	r3, sp, #12
 800fe3e:	9300      	str	r3, [sp, #0]
 800fe40:	462a      	mov	r2, r5
 800fe42:	4b16      	ldr	r3, [pc, #88]	; (800fe9c <_vfiprintf_r+0x258>)
 800fe44:	a904      	add	r1, sp, #16
 800fe46:	4630      	mov	r0, r6
 800fe48:	f7fd fc84 	bl	800d754 <_printf_float>
 800fe4c:	4607      	mov	r7, r0
 800fe4e:	1c78      	adds	r0, r7, #1
 800fe50:	d1d6      	bne.n	800fe00 <_vfiprintf_r+0x1bc>
 800fe52:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fe54:	07d9      	lsls	r1, r3, #31
 800fe56:	d405      	bmi.n	800fe64 <_vfiprintf_r+0x220>
 800fe58:	89ab      	ldrh	r3, [r5, #12]
 800fe5a:	059a      	lsls	r2, r3, #22
 800fe5c:	d402      	bmi.n	800fe64 <_vfiprintf_r+0x220>
 800fe5e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fe60:	f7ff f9de 	bl	800f220 <__retarget_lock_release_recursive>
 800fe64:	89ab      	ldrh	r3, [r5, #12]
 800fe66:	065b      	lsls	r3, r3, #25
 800fe68:	f53f af12 	bmi.w	800fc90 <_vfiprintf_r+0x4c>
 800fe6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fe6e:	e711      	b.n	800fc94 <_vfiprintf_r+0x50>
 800fe70:	ab03      	add	r3, sp, #12
 800fe72:	9300      	str	r3, [sp, #0]
 800fe74:	462a      	mov	r2, r5
 800fe76:	4b09      	ldr	r3, [pc, #36]	; (800fe9c <_vfiprintf_r+0x258>)
 800fe78:	a904      	add	r1, sp, #16
 800fe7a:	4630      	mov	r0, r6
 800fe7c:	f7fd ff0e 	bl	800dc9c <_printf_i>
 800fe80:	e7e4      	b.n	800fe4c <_vfiprintf_r+0x208>
 800fe82:	bf00      	nop
 800fe84:	08011e18 	.word	0x08011e18
 800fe88:	08011e38 	.word	0x08011e38
 800fe8c:	08011df8 	.word	0x08011df8
 800fe90:	08011fb4 	.word	0x08011fb4
 800fe94:	08011fbe 	.word	0x08011fbe
 800fe98:	0800d755 	.word	0x0800d755
 800fe9c:	0800fc1f 	.word	0x0800fc1f
 800fea0:	08011fba 	.word	0x08011fba

0800fea4 <_putc_r>:
 800fea4:	b570      	push	{r4, r5, r6, lr}
 800fea6:	460d      	mov	r5, r1
 800fea8:	4614      	mov	r4, r2
 800feaa:	4606      	mov	r6, r0
 800feac:	b118      	cbz	r0, 800feb6 <_putc_r+0x12>
 800feae:	6983      	ldr	r3, [r0, #24]
 800feb0:	b90b      	cbnz	r3, 800feb6 <_putc_r+0x12>
 800feb2:	f7ff f911 	bl	800f0d8 <__sinit>
 800feb6:	4b1c      	ldr	r3, [pc, #112]	; (800ff28 <_putc_r+0x84>)
 800feb8:	429c      	cmp	r4, r3
 800feba:	d124      	bne.n	800ff06 <_putc_r+0x62>
 800febc:	6874      	ldr	r4, [r6, #4]
 800febe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fec0:	07d8      	lsls	r0, r3, #31
 800fec2:	d405      	bmi.n	800fed0 <_putc_r+0x2c>
 800fec4:	89a3      	ldrh	r3, [r4, #12]
 800fec6:	0599      	lsls	r1, r3, #22
 800fec8:	d402      	bmi.n	800fed0 <_putc_r+0x2c>
 800feca:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fecc:	f7ff f9a7 	bl	800f21e <__retarget_lock_acquire_recursive>
 800fed0:	68a3      	ldr	r3, [r4, #8]
 800fed2:	3b01      	subs	r3, #1
 800fed4:	2b00      	cmp	r3, #0
 800fed6:	60a3      	str	r3, [r4, #8]
 800fed8:	da05      	bge.n	800fee6 <_putc_r+0x42>
 800feda:	69a2      	ldr	r2, [r4, #24]
 800fedc:	4293      	cmp	r3, r2
 800fede:	db1c      	blt.n	800ff1a <_putc_r+0x76>
 800fee0:	b2eb      	uxtb	r3, r5
 800fee2:	2b0a      	cmp	r3, #10
 800fee4:	d019      	beq.n	800ff1a <_putc_r+0x76>
 800fee6:	6823      	ldr	r3, [r4, #0]
 800fee8:	1c5a      	adds	r2, r3, #1
 800feea:	6022      	str	r2, [r4, #0]
 800feec:	701d      	strb	r5, [r3, #0]
 800feee:	b2ed      	uxtb	r5, r5
 800fef0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fef2:	07da      	lsls	r2, r3, #31
 800fef4:	d405      	bmi.n	800ff02 <_putc_r+0x5e>
 800fef6:	89a3      	ldrh	r3, [r4, #12]
 800fef8:	059b      	lsls	r3, r3, #22
 800fefa:	d402      	bmi.n	800ff02 <_putc_r+0x5e>
 800fefc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fefe:	f7ff f98f 	bl	800f220 <__retarget_lock_release_recursive>
 800ff02:	4628      	mov	r0, r5
 800ff04:	bd70      	pop	{r4, r5, r6, pc}
 800ff06:	4b09      	ldr	r3, [pc, #36]	; (800ff2c <_putc_r+0x88>)
 800ff08:	429c      	cmp	r4, r3
 800ff0a:	d101      	bne.n	800ff10 <_putc_r+0x6c>
 800ff0c:	68b4      	ldr	r4, [r6, #8]
 800ff0e:	e7d6      	b.n	800febe <_putc_r+0x1a>
 800ff10:	4b07      	ldr	r3, [pc, #28]	; (800ff30 <_putc_r+0x8c>)
 800ff12:	429c      	cmp	r4, r3
 800ff14:	bf08      	it	eq
 800ff16:	68f4      	ldreq	r4, [r6, #12]
 800ff18:	e7d1      	b.n	800febe <_putc_r+0x1a>
 800ff1a:	4629      	mov	r1, r5
 800ff1c:	4622      	mov	r2, r4
 800ff1e:	4630      	mov	r0, r6
 800ff20:	f7fe f886 	bl	800e030 <__swbuf_r>
 800ff24:	4605      	mov	r5, r0
 800ff26:	e7e3      	b.n	800fef0 <_putc_r+0x4c>
 800ff28:	08011e18 	.word	0x08011e18
 800ff2c:	08011e38 	.word	0x08011e38
 800ff30:	08011df8 	.word	0x08011df8

0800ff34 <_sbrk_r>:
 800ff34:	b538      	push	{r3, r4, r5, lr}
 800ff36:	4d06      	ldr	r5, [pc, #24]	; (800ff50 <_sbrk_r+0x1c>)
 800ff38:	2300      	movs	r3, #0
 800ff3a:	4604      	mov	r4, r0
 800ff3c:	4608      	mov	r0, r1
 800ff3e:	602b      	str	r3, [r5, #0]
 800ff40:	f7f3 f9b8 	bl	80032b4 <_sbrk>
 800ff44:	1c43      	adds	r3, r0, #1
 800ff46:	d102      	bne.n	800ff4e <_sbrk_r+0x1a>
 800ff48:	682b      	ldr	r3, [r5, #0]
 800ff4a:	b103      	cbz	r3, 800ff4e <_sbrk_r+0x1a>
 800ff4c:	6023      	str	r3, [r4, #0]
 800ff4e:	bd38      	pop	{r3, r4, r5, pc}
 800ff50:	20001aa4 	.word	0x20001aa4

0800ff54 <__sread>:
 800ff54:	b510      	push	{r4, lr}
 800ff56:	460c      	mov	r4, r1
 800ff58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ff5c:	f000 f8e2 	bl	8010124 <_read_r>
 800ff60:	2800      	cmp	r0, #0
 800ff62:	bfab      	itete	ge
 800ff64:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ff66:	89a3      	ldrhlt	r3, [r4, #12]
 800ff68:	181b      	addge	r3, r3, r0
 800ff6a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ff6e:	bfac      	ite	ge
 800ff70:	6563      	strge	r3, [r4, #84]	; 0x54
 800ff72:	81a3      	strhlt	r3, [r4, #12]
 800ff74:	bd10      	pop	{r4, pc}

0800ff76 <__swrite>:
 800ff76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff7a:	461f      	mov	r7, r3
 800ff7c:	898b      	ldrh	r3, [r1, #12]
 800ff7e:	05db      	lsls	r3, r3, #23
 800ff80:	4605      	mov	r5, r0
 800ff82:	460c      	mov	r4, r1
 800ff84:	4616      	mov	r6, r2
 800ff86:	d505      	bpl.n	800ff94 <__swrite+0x1e>
 800ff88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ff8c:	2302      	movs	r3, #2
 800ff8e:	2200      	movs	r2, #0
 800ff90:	f000 f898 	bl	80100c4 <_lseek_r>
 800ff94:	89a3      	ldrh	r3, [r4, #12]
 800ff96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ff9a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ff9e:	81a3      	strh	r3, [r4, #12]
 800ffa0:	4632      	mov	r2, r6
 800ffa2:	463b      	mov	r3, r7
 800ffa4:	4628      	mov	r0, r5
 800ffa6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ffaa:	f000 b817 	b.w	800ffdc <_write_r>

0800ffae <__sseek>:
 800ffae:	b510      	push	{r4, lr}
 800ffb0:	460c      	mov	r4, r1
 800ffb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ffb6:	f000 f885 	bl	80100c4 <_lseek_r>
 800ffba:	1c43      	adds	r3, r0, #1
 800ffbc:	89a3      	ldrh	r3, [r4, #12]
 800ffbe:	bf15      	itete	ne
 800ffc0:	6560      	strne	r0, [r4, #84]	; 0x54
 800ffc2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ffc6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ffca:	81a3      	strheq	r3, [r4, #12]
 800ffcc:	bf18      	it	ne
 800ffce:	81a3      	strhne	r3, [r4, #12]
 800ffd0:	bd10      	pop	{r4, pc}

0800ffd2 <__sclose>:
 800ffd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ffd6:	f000 b831 	b.w	801003c <_close_r>
	...

0800ffdc <_write_r>:
 800ffdc:	b538      	push	{r3, r4, r5, lr}
 800ffde:	4d07      	ldr	r5, [pc, #28]	; (800fffc <_write_r+0x20>)
 800ffe0:	4604      	mov	r4, r0
 800ffe2:	4608      	mov	r0, r1
 800ffe4:	4611      	mov	r1, r2
 800ffe6:	2200      	movs	r2, #0
 800ffe8:	602a      	str	r2, [r5, #0]
 800ffea:	461a      	mov	r2, r3
 800ffec:	f7fb fbb8 	bl	800b760 <_write>
 800fff0:	1c43      	adds	r3, r0, #1
 800fff2:	d102      	bne.n	800fffa <_write_r+0x1e>
 800fff4:	682b      	ldr	r3, [r5, #0]
 800fff6:	b103      	cbz	r3, 800fffa <_write_r+0x1e>
 800fff8:	6023      	str	r3, [r4, #0]
 800fffa:	bd38      	pop	{r3, r4, r5, pc}
 800fffc:	20001aa4 	.word	0x20001aa4

08010000 <__assert_func>:
 8010000:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010002:	4614      	mov	r4, r2
 8010004:	461a      	mov	r2, r3
 8010006:	4b09      	ldr	r3, [pc, #36]	; (801002c <__assert_func+0x2c>)
 8010008:	681b      	ldr	r3, [r3, #0]
 801000a:	4605      	mov	r5, r0
 801000c:	68d8      	ldr	r0, [r3, #12]
 801000e:	b14c      	cbz	r4, 8010024 <__assert_func+0x24>
 8010010:	4b07      	ldr	r3, [pc, #28]	; (8010030 <__assert_func+0x30>)
 8010012:	9100      	str	r1, [sp, #0]
 8010014:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010018:	4906      	ldr	r1, [pc, #24]	; (8010034 <__assert_func+0x34>)
 801001a:	462b      	mov	r3, r5
 801001c:	f000 f81e 	bl	801005c <fiprintf>
 8010020:	f000 f89f 	bl	8010162 <abort>
 8010024:	4b04      	ldr	r3, [pc, #16]	; (8010038 <__assert_func+0x38>)
 8010026:	461c      	mov	r4, r3
 8010028:	e7f3      	b.n	8010012 <__assert_func+0x12>
 801002a:	bf00      	nop
 801002c:	20000058 	.word	0x20000058
 8010030:	08011fc5 	.word	0x08011fc5
 8010034:	08011fd2 	.word	0x08011fd2
 8010038:	08012000 	.word	0x08012000

0801003c <_close_r>:
 801003c:	b538      	push	{r3, r4, r5, lr}
 801003e:	4d06      	ldr	r5, [pc, #24]	; (8010058 <_close_r+0x1c>)
 8010040:	2300      	movs	r3, #0
 8010042:	4604      	mov	r4, r0
 8010044:	4608      	mov	r0, r1
 8010046:	602b      	str	r3, [r5, #0]
 8010048:	f7f3 f8ff 	bl	800324a <_close>
 801004c:	1c43      	adds	r3, r0, #1
 801004e:	d102      	bne.n	8010056 <_close_r+0x1a>
 8010050:	682b      	ldr	r3, [r5, #0]
 8010052:	b103      	cbz	r3, 8010056 <_close_r+0x1a>
 8010054:	6023      	str	r3, [r4, #0]
 8010056:	bd38      	pop	{r3, r4, r5, pc}
 8010058:	20001aa4 	.word	0x20001aa4

0801005c <fiprintf>:
 801005c:	b40e      	push	{r1, r2, r3}
 801005e:	b503      	push	{r0, r1, lr}
 8010060:	4601      	mov	r1, r0
 8010062:	ab03      	add	r3, sp, #12
 8010064:	4805      	ldr	r0, [pc, #20]	; (801007c <fiprintf+0x20>)
 8010066:	f853 2b04 	ldr.w	r2, [r3], #4
 801006a:	6800      	ldr	r0, [r0, #0]
 801006c:	9301      	str	r3, [sp, #4]
 801006e:	f7ff fde9 	bl	800fc44 <_vfiprintf_r>
 8010072:	b002      	add	sp, #8
 8010074:	f85d eb04 	ldr.w	lr, [sp], #4
 8010078:	b003      	add	sp, #12
 801007a:	4770      	bx	lr
 801007c:	20000058 	.word	0x20000058

08010080 <_fstat_r>:
 8010080:	b538      	push	{r3, r4, r5, lr}
 8010082:	4d07      	ldr	r5, [pc, #28]	; (80100a0 <_fstat_r+0x20>)
 8010084:	2300      	movs	r3, #0
 8010086:	4604      	mov	r4, r0
 8010088:	4608      	mov	r0, r1
 801008a:	4611      	mov	r1, r2
 801008c:	602b      	str	r3, [r5, #0]
 801008e:	f7f3 f8e8 	bl	8003262 <_fstat>
 8010092:	1c43      	adds	r3, r0, #1
 8010094:	d102      	bne.n	801009c <_fstat_r+0x1c>
 8010096:	682b      	ldr	r3, [r5, #0]
 8010098:	b103      	cbz	r3, 801009c <_fstat_r+0x1c>
 801009a:	6023      	str	r3, [r4, #0]
 801009c:	bd38      	pop	{r3, r4, r5, pc}
 801009e:	bf00      	nop
 80100a0:	20001aa4 	.word	0x20001aa4

080100a4 <_isatty_r>:
 80100a4:	b538      	push	{r3, r4, r5, lr}
 80100a6:	4d06      	ldr	r5, [pc, #24]	; (80100c0 <_isatty_r+0x1c>)
 80100a8:	2300      	movs	r3, #0
 80100aa:	4604      	mov	r4, r0
 80100ac:	4608      	mov	r0, r1
 80100ae:	602b      	str	r3, [r5, #0]
 80100b0:	f7f3 f8e7 	bl	8003282 <_isatty>
 80100b4:	1c43      	adds	r3, r0, #1
 80100b6:	d102      	bne.n	80100be <_isatty_r+0x1a>
 80100b8:	682b      	ldr	r3, [r5, #0]
 80100ba:	b103      	cbz	r3, 80100be <_isatty_r+0x1a>
 80100bc:	6023      	str	r3, [r4, #0]
 80100be:	bd38      	pop	{r3, r4, r5, pc}
 80100c0:	20001aa4 	.word	0x20001aa4

080100c4 <_lseek_r>:
 80100c4:	b538      	push	{r3, r4, r5, lr}
 80100c6:	4d07      	ldr	r5, [pc, #28]	; (80100e4 <_lseek_r+0x20>)
 80100c8:	4604      	mov	r4, r0
 80100ca:	4608      	mov	r0, r1
 80100cc:	4611      	mov	r1, r2
 80100ce:	2200      	movs	r2, #0
 80100d0:	602a      	str	r2, [r5, #0]
 80100d2:	461a      	mov	r2, r3
 80100d4:	f7f3 f8e0 	bl	8003298 <_lseek>
 80100d8:	1c43      	adds	r3, r0, #1
 80100da:	d102      	bne.n	80100e2 <_lseek_r+0x1e>
 80100dc:	682b      	ldr	r3, [r5, #0]
 80100de:	b103      	cbz	r3, 80100e2 <_lseek_r+0x1e>
 80100e0:	6023      	str	r3, [r4, #0]
 80100e2:	bd38      	pop	{r3, r4, r5, pc}
 80100e4:	20001aa4 	.word	0x20001aa4

080100e8 <__ascii_mbtowc>:
 80100e8:	b082      	sub	sp, #8
 80100ea:	b901      	cbnz	r1, 80100ee <__ascii_mbtowc+0x6>
 80100ec:	a901      	add	r1, sp, #4
 80100ee:	b142      	cbz	r2, 8010102 <__ascii_mbtowc+0x1a>
 80100f0:	b14b      	cbz	r3, 8010106 <__ascii_mbtowc+0x1e>
 80100f2:	7813      	ldrb	r3, [r2, #0]
 80100f4:	600b      	str	r3, [r1, #0]
 80100f6:	7812      	ldrb	r2, [r2, #0]
 80100f8:	1e10      	subs	r0, r2, #0
 80100fa:	bf18      	it	ne
 80100fc:	2001      	movne	r0, #1
 80100fe:	b002      	add	sp, #8
 8010100:	4770      	bx	lr
 8010102:	4610      	mov	r0, r2
 8010104:	e7fb      	b.n	80100fe <__ascii_mbtowc+0x16>
 8010106:	f06f 0001 	mvn.w	r0, #1
 801010a:	e7f8      	b.n	80100fe <__ascii_mbtowc+0x16>

0801010c <__malloc_lock>:
 801010c:	4801      	ldr	r0, [pc, #4]	; (8010114 <__malloc_lock+0x8>)
 801010e:	f7ff b886 	b.w	800f21e <__retarget_lock_acquire_recursive>
 8010112:	bf00      	nop
 8010114:	20001a98 	.word	0x20001a98

08010118 <__malloc_unlock>:
 8010118:	4801      	ldr	r0, [pc, #4]	; (8010120 <__malloc_unlock+0x8>)
 801011a:	f7ff b881 	b.w	800f220 <__retarget_lock_release_recursive>
 801011e:	bf00      	nop
 8010120:	20001a98 	.word	0x20001a98

08010124 <_read_r>:
 8010124:	b538      	push	{r3, r4, r5, lr}
 8010126:	4d07      	ldr	r5, [pc, #28]	; (8010144 <_read_r+0x20>)
 8010128:	4604      	mov	r4, r0
 801012a:	4608      	mov	r0, r1
 801012c:	4611      	mov	r1, r2
 801012e:	2200      	movs	r2, #0
 8010130:	602a      	str	r2, [r5, #0]
 8010132:	461a      	mov	r2, r3
 8010134:	f7f3 f86c 	bl	8003210 <_read>
 8010138:	1c43      	adds	r3, r0, #1
 801013a:	d102      	bne.n	8010142 <_read_r+0x1e>
 801013c:	682b      	ldr	r3, [r5, #0]
 801013e:	b103      	cbz	r3, 8010142 <_read_r+0x1e>
 8010140:	6023      	str	r3, [r4, #0]
 8010142:	bd38      	pop	{r3, r4, r5, pc}
 8010144:	20001aa4 	.word	0x20001aa4

08010148 <__ascii_wctomb>:
 8010148:	b149      	cbz	r1, 801015e <__ascii_wctomb+0x16>
 801014a:	2aff      	cmp	r2, #255	; 0xff
 801014c:	bf85      	ittet	hi
 801014e:	238a      	movhi	r3, #138	; 0x8a
 8010150:	6003      	strhi	r3, [r0, #0]
 8010152:	700a      	strbls	r2, [r1, #0]
 8010154:	f04f 30ff 	movhi.w	r0, #4294967295
 8010158:	bf98      	it	ls
 801015a:	2001      	movls	r0, #1
 801015c:	4770      	bx	lr
 801015e:	4608      	mov	r0, r1
 8010160:	4770      	bx	lr

08010162 <abort>:
 8010162:	b508      	push	{r3, lr}
 8010164:	2006      	movs	r0, #6
 8010166:	f000 f82b 	bl	80101c0 <raise>
 801016a:	2001      	movs	r0, #1
 801016c:	f7f3 f846 	bl	80031fc <_exit>

08010170 <_raise_r>:
 8010170:	291f      	cmp	r1, #31
 8010172:	b538      	push	{r3, r4, r5, lr}
 8010174:	4604      	mov	r4, r0
 8010176:	460d      	mov	r5, r1
 8010178:	d904      	bls.n	8010184 <_raise_r+0x14>
 801017a:	2316      	movs	r3, #22
 801017c:	6003      	str	r3, [r0, #0]
 801017e:	f04f 30ff 	mov.w	r0, #4294967295
 8010182:	bd38      	pop	{r3, r4, r5, pc}
 8010184:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8010186:	b112      	cbz	r2, 801018e <_raise_r+0x1e>
 8010188:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801018c:	b94b      	cbnz	r3, 80101a2 <_raise_r+0x32>
 801018e:	4620      	mov	r0, r4
 8010190:	f000 f830 	bl	80101f4 <_getpid_r>
 8010194:	462a      	mov	r2, r5
 8010196:	4601      	mov	r1, r0
 8010198:	4620      	mov	r0, r4
 801019a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801019e:	f000 b817 	b.w	80101d0 <_kill_r>
 80101a2:	2b01      	cmp	r3, #1
 80101a4:	d00a      	beq.n	80101bc <_raise_r+0x4c>
 80101a6:	1c59      	adds	r1, r3, #1
 80101a8:	d103      	bne.n	80101b2 <_raise_r+0x42>
 80101aa:	2316      	movs	r3, #22
 80101ac:	6003      	str	r3, [r0, #0]
 80101ae:	2001      	movs	r0, #1
 80101b0:	e7e7      	b.n	8010182 <_raise_r+0x12>
 80101b2:	2400      	movs	r4, #0
 80101b4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80101b8:	4628      	mov	r0, r5
 80101ba:	4798      	blx	r3
 80101bc:	2000      	movs	r0, #0
 80101be:	e7e0      	b.n	8010182 <_raise_r+0x12>

080101c0 <raise>:
 80101c0:	4b02      	ldr	r3, [pc, #8]	; (80101cc <raise+0xc>)
 80101c2:	4601      	mov	r1, r0
 80101c4:	6818      	ldr	r0, [r3, #0]
 80101c6:	f7ff bfd3 	b.w	8010170 <_raise_r>
 80101ca:	bf00      	nop
 80101cc:	20000058 	.word	0x20000058

080101d0 <_kill_r>:
 80101d0:	b538      	push	{r3, r4, r5, lr}
 80101d2:	4d07      	ldr	r5, [pc, #28]	; (80101f0 <_kill_r+0x20>)
 80101d4:	2300      	movs	r3, #0
 80101d6:	4604      	mov	r4, r0
 80101d8:	4608      	mov	r0, r1
 80101da:	4611      	mov	r1, r2
 80101dc:	602b      	str	r3, [r5, #0]
 80101de:	f7f2 fffd 	bl	80031dc <_kill>
 80101e2:	1c43      	adds	r3, r0, #1
 80101e4:	d102      	bne.n	80101ec <_kill_r+0x1c>
 80101e6:	682b      	ldr	r3, [r5, #0]
 80101e8:	b103      	cbz	r3, 80101ec <_kill_r+0x1c>
 80101ea:	6023      	str	r3, [r4, #0]
 80101ec:	bd38      	pop	{r3, r4, r5, pc}
 80101ee:	bf00      	nop
 80101f0:	20001aa4 	.word	0x20001aa4

080101f4 <_getpid_r>:
 80101f4:	f7f2 bfea 	b.w	80031cc <_getpid>

080101f8 <_init>:
 80101f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80101fa:	bf00      	nop
 80101fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80101fe:	bc08      	pop	{r3}
 8010200:	469e      	mov	lr, r3
 8010202:	4770      	bx	lr

08010204 <_fini>:
 8010204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010206:	bf00      	nop
 8010208:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801020a:	bc08      	pop	{r3}
 801020c:	469e      	mov	lr, r3
 801020e:	4770      	bx	lr
